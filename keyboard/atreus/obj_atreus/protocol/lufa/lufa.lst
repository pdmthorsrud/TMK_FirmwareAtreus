   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB112:
  14               		.file 1 "../../protocol/lufa/lufa.c"
   1:../../protocol/lufa/lufa.c **** /* 
   2:../../protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:../../protocol/lufa/lufa.c ****  * This file is based on:
   4:../../protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:../../protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:../../protocol/lufa/lufa.c ****  */
   7:../../protocol/lufa/lufa.c **** 
   8:../../protocol/lufa/lufa.c **** /*
   9:../../protocol/lufa/lufa.c ****              LUFA Library
  10:../../protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:../../protocol/lufa/lufa.c **** 
  12:../../protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:../../protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:../../protocol/lufa/lufa.c **** */
  15:../../protocol/lufa/lufa.c **** 
  16:../../protocol/lufa/lufa.c **** /*
  17:../../protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:../../protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:../../protocol/lufa/lufa.c **** 
  20:../../protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:../../protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:../../protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:../../protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:../../protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:../../protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:../../protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:../../protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:../../protocol/lufa/lufa.c **** 
  29:../../protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:../../protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:../../protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:../../protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:../../protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:../../protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:../../protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:../../protocol/lufa/lufa.c ****   this software.
  37:../../protocol/lufa/lufa.c **** */
  38:../../protocol/lufa/lufa.c **** 
  39:../../protocol/lufa/lufa.c **** #include "report.h"
  40:../../protocol/lufa/lufa.c **** #include "host.h"
  41:../../protocol/lufa/lufa.c **** #include "host_driver.h"
  42:../../protocol/lufa/lufa.c **** #include "keyboard.h"
  43:../../protocol/lufa/lufa.c **** #include "action.h"
  44:../../protocol/lufa/lufa.c **** #include "led.h"
  45:../../protocol/lufa/lufa.c **** #include "sendchar.h"
  46:../../protocol/lufa/lufa.c **** #include "debug.h"
  47:../../protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:../../protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:../../protocol/lufa/lufa.c **** #endif
  50:../../protocol/lufa/lufa.c **** #include "suspend.h"
  51:../../protocol/lufa/lufa.c **** 
  52:../../protocol/lufa/lufa.c **** #include "descriptor.h"
  53:../../protocol/lufa/lufa.c **** #include "lufa.h"
  54:../../protocol/lufa/lufa.c **** 
  55:../../protocol/lufa/lufa.c **** static uint8_t idle_duration = 0;
  56:../../protocol/lufa/lufa.c **** static uint8_t protocol_report = 1;
  57:../../protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  58:../../protocol/lufa/lufa.c **** 
  59:../../protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  60:../../protocol/lufa/lufa.c **** 
  61:../../protocol/lufa/lufa.c **** 
  62:../../protocol/lufa/lufa.c **** /* Host driver */
  63:../../protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
  64:../../protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
  65:../../protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
  66:../../protocol/lufa/lufa.c **** static void send_system(uint16_t data);
  67:../../protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
  68:../../protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
  69:../../protocol/lufa/lufa.c ****     keyboard_leds,
  70:../../protocol/lufa/lufa.c ****     send_keyboard,
  71:../../protocol/lufa/lufa.c ****     send_mouse,
  72:../../protocol/lufa/lufa.c ****     send_system,
  73:../../protocol/lufa/lufa.c ****     send_consumer
  74:../../protocol/lufa/lufa.c **** };
  75:../../protocol/lufa/lufa.c **** 
  76:../../protocol/lufa/lufa.c **** 
  77:../../protocol/lufa/lufa.c **** /*******************************************************************************
  78:../../protocol/lufa/lufa.c ****  * Console
  79:../../protocol/lufa/lufa.c ****  ******************************************************************************/
  80:../../protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
  81:../../protocol/lufa/lufa.c **** static void Console_Task(void)
  82:../../protocol/lufa/lufa.c **** {
  83:../../protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
  84:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
  85:../../protocol/lufa/lufa.c ****         return;
  86:../../protocol/lufa/lufa.c **** 
  87:../../protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
  88:../../protocol/lufa/lufa.c **** 
  89:../../protocol/lufa/lufa.c **** #if 0
  90:../../protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
  91:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
  92:../../protocol/lufa/lufa.c **** 
  93:../../protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
  94:../../protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
  95:../../protocol/lufa/lufa.c ****     {
  96:../../protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
  97:../../protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
  98:../../protocol/lufa/lufa.c ****         {
  99:../../protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 100:../../protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 101:../../protocol/lufa/lufa.c ****  
 102:../../protocol/lufa/lufa.c ****             /* Read Console Report Data */
 103:../../protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 104:../../protocol/lufa/lufa.c ****  
 105:../../protocol/lufa/lufa.c ****             /* Process Console Report Data */
 106:../../protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 107:../../protocol/lufa/lufa.c ****         }
 108:../../protocol/lufa/lufa.c **** 
 109:../../protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 110:../../protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 111:../../protocol/lufa/lufa.c ****     }
 112:../../protocol/lufa/lufa.c **** #endif
 113:../../protocol/lufa/lufa.c **** 
 114:../../protocol/lufa/lufa.c ****     /* IN packet */
 115:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 116:../../protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 117:../../protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 118:../../protocol/lufa/lufa.c ****         return;
 119:../../protocol/lufa/lufa.c ****     }
 120:../../protocol/lufa/lufa.c **** 
 121:../../protocol/lufa/lufa.c ****     // fill empty bank
 122:../../protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 123:../../protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 124:../../protocol/lufa/lufa.c **** 
 125:../../protocol/lufa/lufa.c ****     // flash senchar packet
 126:../../protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 127:../../protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 128:../../protocol/lufa/lufa.c ****     }
 129:../../protocol/lufa/lufa.c **** 
 130:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 131:../../protocol/lufa/lufa.c **** }
 132:../../protocol/lufa/lufa.c **** #else
 133:../../protocol/lufa/lufa.c **** static void Console_Task(void)
 134:../../protocol/lufa/lufa.c **** {
 135:../../protocol/lufa/lufa.c **** }
 136:../../protocol/lufa/lufa.c **** #endif
 137:../../protocol/lufa/lufa.c **** 
 138:../../protocol/lufa/lufa.c **** 
 139:../../protocol/lufa/lufa.c **** /*******************************************************************************
 140:../../protocol/lufa/lufa.c ****  * USB Events
 141:../../protocol/lufa/lufa.c ****  ******************************************************************************/
 142:../../protocol/lufa/lufa.c **** /*
 143:../../protocol/lufa/lufa.c ****  * Event Order of Plug in:
 144:../../protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 145:../../protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 146:../../protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 147:../../protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 148:../../protocol/lufa/lufa.c **** */
 149:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 150:../../protocol/lufa/lufa.c **** {
 151:../../protocol/lufa/lufa.c **** }
 152:../../protocol/lufa/lufa.c **** 
 153:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 154:../../protocol/lufa/lufa.c **** {
 155:../../protocol/lufa/lufa.c **** }
 156:../../protocol/lufa/lufa.c **** 
 157:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 158:../../protocol/lufa/lufa.c **** {
 159:../../protocol/lufa/lufa.c **** }
 160:../../protocol/lufa/lufa.c **** 
 161:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 162:../../protocol/lufa/lufa.c **** {
 163:../../protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 164:../../protocol/lufa/lufa.c ****     sleep_led_enable();
 165:../../protocol/lufa/lufa.c **** #endif
 166:../../protocol/lufa/lufa.c **** }
 167:../../protocol/lufa/lufa.c **** 
 168:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 169:../../protocol/lufa/lufa.c **** {
 170:../../protocol/lufa/lufa.c ****     suspend_wakeup_init();
 171:../../protocol/lufa/lufa.c **** 
 172:../../protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 173:../../protocol/lufa/lufa.c ****     sleep_led_disable();
 174:../../protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 175:../../protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 176:../../protocol/lufa/lufa.c **** #endif
 177:../../protocol/lufa/lufa.c **** }
 178:../../protocol/lufa/lufa.c **** 
 179:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 180:../../protocol/lufa/lufa.c **** {
 181:../../protocol/lufa/lufa.c ****     Console_Task();
 182:../../protocol/lufa/lufa.c **** }
 183:../../protocol/lufa/lufa.c **** 
 184:../../protocol/lufa/lufa.c **** /** Event handler for the USB_ConfigurationChanged event.
 185:../../protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 186:../../protocol/lufa/lufa.c ****  */
 187:../../protocol/lufa/lufa.c **** #if LUFA_VERSION_INTEGER < 0x120730
 188:../../protocol/lufa/lufa.c ****     /* old API 120219 */
 189:../../protocol/lufa/lufa.c ****     #define ENDPOINT_CONFIG(epnum, eptype, epdir, epsize, epbank)    Endpoint_ConfigureEndpoint(epn
 190:../../protocol/lufa/lufa.c **** #else
 191:../../protocol/lufa/lufa.c ****     /* new API >= 120730 */
 192:../../protocol/lufa/lufa.c ****     #define ENDPOINT_BANK_SINGLE 1
 193:../../protocol/lufa/lufa.c ****     #define ENDPOINT_BANK_DOUBLE 2
 194:../../protocol/lufa/lufa.c ****     #define ENDPOINT_CONFIG(epnum, eptype, epdir, epsize, epbank)    Endpoint_ConfigureEndpoint((ep
 195:../../protocol/lufa/lufa.c **** #endif
 196:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 197:../../protocol/lufa/lufa.c **** {
 198:../../protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 199:../../protocol/lufa/lufa.c **** 
 200:../../protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 201:../../protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 202:../../protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 203:../../protocol/lufa/lufa.c **** 
 204:../../protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 205:../../protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 206:../../protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 207:../../protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 208:../../protocol/lufa/lufa.c **** #endif
 209:../../protocol/lufa/lufa.c **** 
 210:../../protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 211:../../protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 212:../../protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 213:../../protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 214:../../protocol/lufa/lufa.c **** #endif
 215:../../protocol/lufa/lufa.c **** 
 216:../../protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 217:../../protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 218:../../protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 219:../../protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_DOUBLE);
 220:../../protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 221:../../protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 222:../../protocol/lufa/lufa.c **** #endif
 223:../../protocol/lufa/lufa.c **** 
 224:../../protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 225:../../protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 226:../../protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 227:../../protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 228:../../protocol/lufa/lufa.c **** #endif
 229:../../protocol/lufa/lufa.c **** }
 230:../../protocol/lufa/lufa.c **** 
 231:../../protocol/lufa/lufa.c **** /*
 232:../../protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 233:../../protocol/lufa/lufa.c **** 
 234:../../protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 235:../../protocol/lufa/lufa.c **** 
 236:../../protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 237:../../protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 238:../../protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 239:../../protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 240:../../protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 241:../../protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 242:../../protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 243:../../protocol/lufa/lufa.c **** */
 244:../../protocol/lufa/lufa.c **** /** Event handler for the USB_ControlRequest event.
 245:../../protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 246:../../protocol/lufa/lufa.c ****  */
 247:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 248:../../protocol/lufa/lufa.c **** {
 249:../../protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 250:../../protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 251:../../protocol/lufa/lufa.c **** 
 252:../../protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 253:../../protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 254:../../protocol/lufa/lufa.c ****     {
 255:../../protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 256:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 257:../../protocol/lufa/lufa.c ****             {
 258:../../protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 259:../../protocol/lufa/lufa.c **** 
 260:../../protocol/lufa/lufa.c ****                 // Interface
 261:../../protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 262:../../protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 263:../../protocol/lufa/lufa.c ****                     // TODO: test/check
 264:../../protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 265:../../protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 266:../../protocol/lufa/lufa.c ****                     break;
 267:../../protocol/lufa/lufa.c ****                 }
 268:../../protocol/lufa/lufa.c **** 
 269:../../protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 270:../../protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 271:../../protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 272:../../protocol/lufa/lufa.c ****             }
 273:../../protocol/lufa/lufa.c **** 
 274:../../protocol/lufa/lufa.c ****             break;
 275:../../protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 276:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 277:../../protocol/lufa/lufa.c ****             {
 278:../../protocol/lufa/lufa.c **** 
 279:../../protocol/lufa/lufa.c ****                 // Interface
 280:../../protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 281:../../protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 282:../../protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 283:../../protocol/lufa/lufa.c **** 
 284:../../protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 285:../../protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 286:../../protocol/lufa/lufa.c ****                           return;
 287:../../protocol/lufa/lufa.c ****                     }
 288:../../protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 289:../../protocol/lufa/lufa.c **** 
 290:../../protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 291:../../protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 292:../../protocol/lufa/lufa.c ****                     break;
 293:../../protocol/lufa/lufa.c ****                 }
 294:../../protocol/lufa/lufa.c **** 
 295:../../protocol/lufa/lufa.c ****             }
 296:../../protocol/lufa/lufa.c **** 
 297:../../protocol/lufa/lufa.c ****             break;
 298:../../protocol/lufa/lufa.c **** 
 299:../../protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 300:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 301:../../protocol/lufa/lufa.c ****             {
 302:../../protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 303:../../protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 304:../../protocol/lufa/lufa.c ****                 Endpoint_Write_8(protocol_report);
 305:../../protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 306:../../protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 307:../../protocol/lufa/lufa.c ****             }
 308:../../protocol/lufa/lufa.c **** 
 309:../../protocol/lufa/lufa.c ****             break;
 310:../../protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 311:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 312:../../protocol/lufa/lufa.c ****             {
 313:../../protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 314:../../protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 315:../../protocol/lufa/lufa.c **** 
 316:../../protocol/lufa/lufa.c ****                 protocol_report = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 317:../../protocol/lufa/lufa.c ****             }
 318:../../protocol/lufa/lufa.c **** 
 319:../../protocol/lufa/lufa.c ****             break;
 320:../../protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 321:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 322:../../protocol/lufa/lufa.c ****             {
 323:../../protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 324:../../protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 325:../../protocol/lufa/lufa.c **** 
 326:../../protocol/lufa/lufa.c ****                 idle_duration = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 327:../../protocol/lufa/lufa.c ****             }
 328:../../protocol/lufa/lufa.c **** 
 329:../../protocol/lufa/lufa.c ****             break;
 330:../../protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 331:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 332:../../protocol/lufa/lufa.c ****             {
 333:../../protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 334:../../protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 335:../../protocol/lufa/lufa.c ****                 Endpoint_Write_8(idle_duration);
 336:../../protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 337:../../protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 338:../../protocol/lufa/lufa.c ****             }
 339:../../protocol/lufa/lufa.c **** 
 340:../../protocol/lufa/lufa.c ****             break;
 341:../../protocol/lufa/lufa.c ****     }
 342:../../protocol/lufa/lufa.c **** }
 343:../../protocol/lufa/lufa.c **** 
 344:../../protocol/lufa/lufa.c **** /*******************************************************************************
 345:../../protocol/lufa/lufa.c ****  * Host driver 
 346:../../protocol/lufa/lufa.c ****  ******************************************************************************/
 347:../../protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 348:../../protocol/lufa/lufa.c **** {
  15               		.loc 1 348 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 349:../../protocol/lufa/lufa.c ****     return keyboard_led_stats;
 350:../../protocol/lufa/lufa.c **** }
  21               		.loc 1 350 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE112:
  27               		.section	.text.send_mouse,"ax",@progbits
  29               	send_mouse:
  30               	.LFB114:
 351:../../protocol/lufa/lufa.c **** 
 352:../../protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 353:../../protocol/lufa/lufa.c **** {
 354:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 355:../../protocol/lufa/lufa.c **** 
 356:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 357:../../protocol/lufa/lufa.c ****         return;
 358:../../protocol/lufa/lufa.c **** 
 359:../../protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 360:../../protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 361:../../protocol/lufa/lufa.c ****     if (keyboard_nkro) {
 362:../../protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 363:../../protocol/lufa/lufa.c ****     }
 364:../../protocol/lufa/lufa.c ****     else
 365:../../protocol/lufa/lufa.c **** #endif
 366:../../protocol/lufa/lufa.c ****     {
 367:../../protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 368:../../protocol/lufa/lufa.c ****     }
 369:../../protocol/lufa/lufa.c **** 
 370:../../protocol/lufa/lufa.c ****     /* Check if Keyboard Endpoint Ready for Read/Write */
 371:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 372:../../protocol/lufa/lufa.c **** 
 373:../../protocol/lufa/lufa.c ****     /* Write Keyboard Report Data */
 374:../../protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 375:../../protocol/lufa/lufa.c ****     if (keyboard_nkro) {
 376:../../protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 377:../../protocol/lufa/lufa.c ****     }
 378:../../protocol/lufa/lufa.c ****     else
 379:../../protocol/lufa/lufa.c **** #endif
 380:../../protocol/lufa/lufa.c ****     {
 381:../../protocol/lufa/lufa.c ****         /* boot mode */
 382:../../protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 383:../../protocol/lufa/lufa.c ****     }
 384:../../protocol/lufa/lufa.c **** 
 385:../../protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 386:../../protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 387:../../protocol/lufa/lufa.c **** 
 388:../../protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 389:../../protocol/lufa/lufa.c **** }
 390:../../protocol/lufa/lufa.c **** 
 391:../../protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 392:../../protocol/lufa/lufa.c **** {
  31               		.loc 1 392 0
  32               		.cfi_startproc
  33               	.LVL0:
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 0 */
  37               	.L__stack_usage = 0
  38 0000 0895      		ret
  39               		.cfi_endproc
  40               	.LFE114:
  42               		.section	.text.sendchar,"ax",@progbits
  43               	.global	sendchar
  45               	sendchar:
  46               	.LFB117:
 393:../../protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 394:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 395:../../protocol/lufa/lufa.c **** 
 396:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 397:../../protocol/lufa/lufa.c ****         return;
 398:../../protocol/lufa/lufa.c **** 
 399:../../protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 400:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 401:../../protocol/lufa/lufa.c **** 
 402:../../protocol/lufa/lufa.c ****     /* Check if Mouse Endpoint Ready for Read/Write */
 403:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 404:../../protocol/lufa/lufa.c **** 
 405:../../protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 406:../../protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 407:../../protocol/lufa/lufa.c **** 
 408:../../protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 409:../../protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 410:../../protocol/lufa/lufa.c **** #endif
 411:../../protocol/lufa/lufa.c **** }
 412:../../protocol/lufa/lufa.c **** 
 413:../../protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 414:../../protocol/lufa/lufa.c **** {
 415:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 416:../../protocol/lufa/lufa.c **** 
 417:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 418:../../protocol/lufa/lufa.c ****         return;
 419:../../protocol/lufa/lufa.c **** 
 420:../../protocol/lufa/lufa.c ****     report_extra_t r = {
 421:../../protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 422:../../protocol/lufa/lufa.c ****         .usage = data
 423:../../protocol/lufa/lufa.c ****     };
 424:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 425:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 426:../../protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 427:../../protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 428:../../protocol/lufa/lufa.c **** }
 429:../../protocol/lufa/lufa.c **** 
 430:../../protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 431:../../protocol/lufa/lufa.c **** {
 432:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 433:../../protocol/lufa/lufa.c **** 
 434:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 435:../../protocol/lufa/lufa.c ****         return;
 436:../../protocol/lufa/lufa.c **** 
 437:../../protocol/lufa/lufa.c ****     report_extra_t r = {
 438:../../protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 439:../../protocol/lufa/lufa.c ****         .usage = data
 440:../../protocol/lufa/lufa.c ****     };
 441:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 442:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 443:../../protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 444:../../protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 445:../../protocol/lufa/lufa.c **** }
 446:../../protocol/lufa/lufa.c **** 
 447:../../protocol/lufa/lufa.c **** 
 448:../../protocol/lufa/lufa.c **** /*******************************************************************************
 449:../../protocol/lufa/lufa.c ****  * sendchar
 450:../../protocol/lufa/lufa.c ****  ******************************************************************************/
 451:../../protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 452:../../protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 453:../../protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 454:../../protocol/lufa/lufa.c **** {
  47               		.loc 1 454 0
  48               		.cfi_startproc
  49               	.LVL1:
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
 455:../../protocol/lufa/lufa.c ****     // Not wait once timeouted.
 456:../../protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 457:../../protocol/lufa/lufa.c ****     static bool timeouted = false;
 458:../../protocol/lufa/lufa.c **** 
 459:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
  54               		.loc 1 459 0
  55 0000 9091 0000 		lds r25,USB_DeviceState
  56 0004 9430      		cpi r25,lo8(4)
  57 0006 01F0      		breq .+2
  58 0008 00C0      		rjmp .L19
  59               	.LBB142:
  60               	.LBB143:
  61               		.file 2 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2012.
   4:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 128:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 129:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 130:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 131:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 132:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 133:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 134:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			
 207:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			
 210:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
 225:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
 227:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
  62               		.loc 2 253 0
  63 000a 9091 E900 		lds r25,233
  64 000e 9F70      		andi r25,lo8(15)
  65               	.LBB144:
  66               	.LBB145:
 240:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
  67               		.loc 2 240 0
  68 0010 2091 EC00 		lds r18,236
  69 0014 20FF      		sbrs r18,0
  70 0016 00C0      		rjmp .L18
  71 0018 20E8      		ldi r18,lo8(-128)
  72 001a 00C0      		rjmp .L5
  73               	.L18:
  74 001c 20E0      		ldi r18,0
  75               	.L5:
  76               	.LBE145:
  77               	.LBE144:
  78               		.loc 2 253 0
  79 001e 922B      		or r25,r18
  80               	.LVL2:
  81               	.LBE143:
  82               	.LBE142:
  83               	.LBB146:
  84               	.LBB147:
 254:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  85               		.loc 2 270 0
  86 0020 22E0      		ldi r18,lo8(2)
  87 0022 2093 E900 		sts 233,r18
  88               	.LBE147:
  89               	.LBE146:
  90               	.LBB148:
  91               	.LBB149:
 271:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
  92               		.loc 2 313 0
  93 0026 2091 EB00 		lds r18,235
  94               	.LBE149:
  95               	.LBE148:
 460:../../protocol/lufa/lufa.c ****         return -1;
 461:../../protocol/lufa/lufa.c **** 
 462:../../protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 463:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 464:../../protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
  96               		.loc 1 464 0
  97 002a 20FF      		sbrs r18,0
  98 002c 00C0      		rjmp .L32
  99               	.LBB150:
 100               	.LBB151:
 314:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 318:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 361:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 101               		.loc 2 370 0
 102 002e 2091 EE00 		lds r18,238
 103               	.LBE151:
 104               	.LBE150:
 105               		.loc 1 464 0
 106 0032 27FF      		sbrs r18,7
 107 0034 00C0      		rjmp .L32
 465:../../protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 466:../../protocol/lufa/lufa.c ****         return -1;
 467:../../protocol/lufa/lufa.c ****     }
 468:../../protocol/lufa/lufa.c **** 
 469:../../protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 108               		.loc 1 469 0
 109 0036 2091 0000 		lds r18,timeouted.4657
 110 003a 2223      		tst r18
 111 003c 01F0      		breq .L8
 112               	.LBB152:
 113               	.LBB153:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 114               		.loc 2 360 0
 115 003e 2091 E800 		lds r18,232
 116               	.LBE153:
 117               	.LBE152:
 118               		.loc 1 469 0
 119 0042 25FF      		sbrs r18,5
 120 0044 00C0      		rjmp .L32
 121               	.L8:
 470:../../protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 471:../../protocol/lufa/lufa.c ****         return - 1;
 472:../../protocol/lufa/lufa.c ****     }
 473:../../protocol/lufa/lufa.c **** 
 474:../../protocol/lufa/lufa.c ****     timeouted = false;
 122               		.loc 1 474 0
 123 0046 1092 0000 		sts timeouted.4657,__zero_reg__
 124               	.LVL3:
 125               	.LBB154:
 126               	.LBB155:
 127               		.file 3 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
   1:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
   2:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****              LUFA Library
   3:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****      Copyright (C) Dean Camera, 2012.
   4:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   5:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****            www.lufa-lib.org
   7:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
   8:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   9:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
  10:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  12:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software without specific, written prior permission.
  20:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  21:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   this software.
  29:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
  30:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  31:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \file
  32:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  33:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \copydetails Group_Device_AVR8
  34:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  35:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  38:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  39:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \ingroup Group_Device
  40:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \defgroup Group_Device_AVR8 Device Management (AVR8)
  41:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  42:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  43:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  Architecture specific USB Device definitions for the Atmel 8-bit AVR microcontrollers.
  44:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  45:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  @{
  46:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  47:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  48:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #ifndef __USBDEVICE_AVR8_H__
  49:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #define __USBDEVICE_AVR8_H__
  50:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  51:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Includes: */
  52:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBController.h"
  54:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../StdDescriptors.h"
  55:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBInterrupt.h"
  56:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../Endpoint.h"
  57:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  58:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  59:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if defined(__cplusplus)
  60:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			extern "C" {
  61:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  62:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  63:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Preprocessor Checks: */
  64:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  65:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  66:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  67:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  68:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  69:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  70:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  71:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  72:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_FLASH_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  73:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_FLASH_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  74:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  75:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  76:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_FLASH_DESCRIPTORS) && defined(USE_RAM_DESCRIPTORS))
  77:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_FLASH_DESCRIPTORS and USE_RAM_DESCRIPTORS are mutually exclusive.
  78:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  79:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  80:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Public Interface - May be used in end-application: */
  81:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Macros: */
  82:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** \name USB Device Mode Option Masks */
  83:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@{
  84:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  85:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  86:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  87:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  88:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  89:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        \n
  90:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  91:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  92:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        when running in low speed mode - please refer to the USB 2.0 specification.
  93:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
  94:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  95:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
  96:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  97:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  98:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  99:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 100:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
 101:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@}
 102:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 103:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if (!defined(NO_INTERNAL_SERIAL) && \
 104:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			     (defined(USB_SERIES_7_AVR) || defined(USB_SERIES_6_AVR) || \
 105:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			      defined(USB_SERIES_4_AVR) || defined(USB_SERIES_2_AVR) || \
 106:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				  defined(__DOXYGEN__)))
 107:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** String descriptor index for the device's unique serial number string descriptor within the 
 108:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  This unique serial number is used by the host to associate resources to the device (such as
 109:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number allocations) to a device regardless of the port it is plugged in to on the host. Som
 110:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  a unique serial number internally, and setting the device descriptors serial number string 
 111:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  will cause it to use the internal serial number.
 112:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 113:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  On unsupported devices, this will evaluate to \ref NO_DESCRIPTOR and so will force the host
 114:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number for the device.
 115:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 116:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            0xDC
 117:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 118:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Length of the device's unique internal serial number, in bits, if present on the selected m
 119:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 120:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 121:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    80
 122:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 123:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Start address of the internal serial number, in the appropriate address space, if present o
 124:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 125:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 126:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0x0E
 127:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#else
 128:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            NO_DESCRIPTOR
 129:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 130:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    0
 131:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0
 132:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
 133:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 134:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Function Prototypes: */
 135:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
 136:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  be taken out of suspended mode, and communications should resume.
 137:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 138:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
 139:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
 140:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 141:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \attention This function should only be used if the device has indicated to the host that it
 142:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             supports the Remote Wakeup feature in the device descriptors, and should only be
 143:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             issued if the host is currently allowing remote wakeup events from the device (i.
 144:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             the \ref USB_Device_RemoteWakeupEnabled flag is set). When the \c NO_DEVICE_REMOT
 145:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             compile time option is used, this function is unavailable.
 146:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             \n\n
 147:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 148:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \attention The USB clock must be running for this function to operate. If the stack is initi
 149:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is 
 150:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             before attempting to call this function.
 151:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 152:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \see \ref Group_StdDescriptors for more information on the RMWAKEUP feature and device descr
 153:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 154:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			void USB_Device_SendRemoteWakeup(void);
 155:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 156:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Inline Functions: */
 157:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is 
 158:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  the frame number is incremented by one.
 159:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 160:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \return Current USB frame number from the USB controller.
 161:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 162:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESUL
 163:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void)
 164:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 165:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				return UDFNUM;
 128               		.loc 3 165 0
 129 004a 2091 E400 		lds r18,228
 130 004e 3091 E500 		lds r19,228+1
 131               	.LBE155:
 132               	.LBE154:
 475:../../protocol/lufa/lufa.c **** 
 476:../../protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 477:../../protocol/lufa/lufa.c ****     uint16_t prevFN = USB_Device_GetFrameNumber();
 478:../../protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 133               		.loc 1 478 0
 134 0052 66E0      		ldi r22,lo8(6)
 135 0054 00C0      		rjmp .L13
 136               	.LVL4:
 137               	.L11:
 138               	.LBB156:
 139               	.LBB157:
 140               		.loc 3 165 0
 141 0056 4091 E400 		lds r20,228
 142 005a 5091 E500 		lds r21,228+1
 143               	.LBE157:
 144               	.LBE156:
 479:../../protocol/lufa/lufa.c ****         switch (USB_DeviceState) {
 480:../../protocol/lufa/lufa.c ****         case DEVICE_STATE_Unattached:
 481:../../protocol/lufa/lufa.c ****         case DEVICE_STATE_Suspended:
 482:../../protocol/lufa/lufa.c ****             return -1;
 483:../../protocol/lufa/lufa.c ****         }
 484:../../protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 485:../../protocol/lufa/lufa.c ****             Endpoint_SelectEndpoint(ep);
 486:../../protocol/lufa/lufa.c ****             return -1;
 487:../../protocol/lufa/lufa.c ****         }
 488:../../protocol/lufa/lufa.c ****         if (prevFN != USB_Device_GetFrameNumber()) {
 145               		.loc 1 488 0
 146 005e 2417      		cp r18,r20
 147 0060 3507      		cpc r19,r21
 148 0062 01F4      		brne .L34
 149               	.LVL5:
 150               	.L13:
 151               	.LBB158:
 152               	.LBB159:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 153               		.loc 2 360 0 discriminator 1
 154 0064 4091 E800 		lds r20,232
 155               	.LBE159:
 156               	.LBE158:
 478:../../protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 157               		.loc 1 478 0 discriminator 1
 158 0068 45FD      		sbrc r20,5
 159 006a 00C0      		rjmp .L35
 479:../../protocol/lufa/lufa.c ****         switch (USB_DeviceState) {
 160               		.loc 1 479 0
 161 006c 4091 0000 		lds r20,USB_DeviceState
 162 0070 4423      		tst r20
 163 0072 01F0      		breq .L19
 164 0074 4530      		cpi r20,lo8(5)
 165 0076 01F0      		breq .L19
 166               	.LBB160:
 167               	.LBB161:
 371:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 457:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 472:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 505:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 168               		.loc 2 513 0
 169 0078 4091 EB00 		lds r20,235
 170               	.LBE161:
 171               	.LBE160:
 484:../../protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 172               		.loc 1 484 0
 173 007c 45FF      		sbrs r20,5
 174 007e 00C0      		rjmp .L11
 175               	.LVL6:
 176               	.L32:
 177               	.LBB162:
 178               	.LBB163:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 179               		.loc 2 270 0
 180 0080 9F70      		andi r25,lo8(15)
 181               	.LVL7:
 182 0082 9093 E900 		sts 233,r25
 183 0086 00C0      		rjmp .L19
 184               	.LVL8:
 185               	.L34:
 186 0088 6150      		subi r22,lo8(-(-1))
 187               	.LVL9:
 188               	.LBE163:
 189               	.LBE162:
 489:../../protocol/lufa/lufa.c ****             if (!(timeout--)) {
 190               		.loc 1 489 0
 191 008a 01F4      		brne .L14
 490:../../protocol/lufa/lufa.c ****                 timeouted = true;
 192               		.loc 1 490 0
 193 008c 81E0      		ldi r24,lo8(1)
 194               	.LVL10:
 195 008e 8093 0000 		sts timeouted.4657,r24
 196 0092 00C0      		rjmp .L32
 197               	.LVL11:
 198               	.L14:
 199               	.LBB164:
 200               	.LBB165:
 201               		.loc 3 165 0
 202 0094 2091 E400 		lds r18,228
 203 0098 3091 E500 		lds r19,228+1
 204               	.LVL12:
 205 009c 00C0      		rjmp .L13
 206               	.LVL13:
 207               	.L35:
 208               	.LBE165:
 209               	.LBE164:
 210               	.LBB166:
 211               	.LBB167:
 514:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 543:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 212               		.loc 2 554 0
 213 009e 8093 F100 		sts 241,r24
 214               	.LBE167:
 215               	.LBE166:
 216               	.LBB168:
 217               	.LBB169:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 218               		.loc 2 360 0
 219 00a2 8091 E800 		lds r24,232
 220               	.LVL14:
 221               	.LBE169:
 222               	.LBE168:
 491:../../protocol/lufa/lufa.c ****                 Endpoint_SelectEndpoint(ep);
 492:../../protocol/lufa/lufa.c ****                 return -1;
 493:../../protocol/lufa/lufa.c ****             }
 494:../../protocol/lufa/lufa.c ****             prevFN = USB_Device_GetFrameNumber();
 495:../../protocol/lufa/lufa.c ****         }
 496:../../protocol/lufa/lufa.c ****     }
 497:../../protocol/lufa/lufa.c **** 
 498:../../protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 499:../../protocol/lufa/lufa.c **** 
 500:../../protocol/lufa/lufa.c ****     // send when bank is full
 501:../../protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed())
 223               		.loc 1 501 0
 224 00a6 85FD      		sbrc r24,5
 225 00a8 00C0      		rjmp .L16
 226               	.LBB170:
 227               	.LBB171:
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 228               		.loc 2 456 0
 229 00aa 8091 E800 		lds r24,232
 230 00ae 8E77      		andi r24,lo8(126)
 231 00b0 8093 E800 		sts 232,r24
 232               	.LVL15:
 233               	.L16:
 234               	.LBE171:
 235               	.LBE170:
 236               	.LBB172:
 237               	.LBB173:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 238               		.loc 2 270 0
 239 00b4 9F70      		andi r25,lo8(15)
 240               	.LVL16:
 241 00b6 9093 E900 		sts 233,r25
 242               	.LBE173:
 243               	.LBE172:
 502:../../protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 503:../../protocol/lufa/lufa.c **** 
 504:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 505:../../protocol/lufa/lufa.c ****     return 0;
 244               		.loc 1 505 0
 245 00ba 80E0      		ldi r24,0
 246 00bc 0895      		ret
 247               	.LVL17:
 248               	.L19:
 482:../../protocol/lufa/lufa.c ****             return -1;
 249               		.loc 1 482 0
 250 00be 8FEF      		ldi r24,lo8(-1)
 506:../../protocol/lufa/lufa.c **** }
 251               		.loc 1 506 0
 252 00c0 0895      		ret
 253               		.cfi_endproc
 254               	.LFE117:
 256               		.section	.text.send_consumer,"ax",@progbits
 258               	send_consumer:
 259               	.LFB116:
 431:../../protocol/lufa/lufa.c **** {
 260               		.loc 1 431 0
 261               		.cfi_startproc
 262               	.LVL18:
 263 0000 CF93      		push r28
 264               	.LCFI0:
 265               		.cfi_def_cfa_offset 3
 266               		.cfi_offset 28, -2
 267 0002 DF93      		push r29
 268               	.LCFI1:
 269               		.cfi_def_cfa_offset 4
 270               		.cfi_offset 29, -3
 271 0004 00D0      		rcall .
 272 0006 1F92      		push __zero_reg__
 273               	.LCFI2:
 274               		.cfi_def_cfa_offset 7
 275 0008 CDB7      		in r28,__SP_L__
 276 000a DEB7      		in r29,__SP_H__
 277               	.LCFI3:
 278               		.cfi_def_cfa_register 28
 279               	/* prologue: function */
 280               	/* frame size = 3 */
 281               	/* stack size = 5 */
 282               	.L__stack_usage = 5
 283               	.LVL19:
 434:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 284               		.loc 1 434 0
 285 000c 2091 0000 		lds r18,USB_DeviceState
 286 0010 2430      		cpi r18,lo8(4)
 287 0012 01F4      		brne .L36
 437:../../protocol/lufa/lufa.c ****     report_extra_t r = {
 288               		.loc 1 437 0
 289 0014 23E0      		ldi r18,lo8(3)
 290 0016 2983      		std Y+1,r18
 291 0018 9B83      		std Y+3,r25
 292 001a 8A83      		std Y+2,r24
 293               	.LVL20:
 294               	.LBB174:
 295               	.LBB175:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 296               		.loc 2 270 0
 297 001c 81E0      		ldi r24,lo8(1)
 298               	.LVL21:
 299 001e 8093 E900 		sts 233,r24
 300               	.LVL22:
 301               	.LBE175:
 302               	.LBE174:
 432:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 303               		.loc 1 432 0
 304 0022 80E0      		ldi r24,0
 305               	.LVL23:
 306               	.L39:
 442:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 307               		.loc 1 442 0 discriminator 1
 308 0024 8150      		subi r24,lo8(-(-1))
 309               	.LVL24:
 310 0026 01F0      		breq .L38
 311               	.LBB176:
 312               	.LBB177:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 313               		.loc 2 360 0
 314 0028 9091 E800 		lds r25,232
 315               	.LBE177:
 316               	.LBE176:
 442:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 317               		.loc 1 442 0
 318 002c 95FF      		sbrs r25,5
 319 002e 00C0      		rjmp .L39
 320               	.L38:
 443:../../protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 321               		.loc 1 443 0
 322 0030 40E0      		ldi r20,0
 323 0032 50E0      		ldi r21,0
 324 0034 63E0      		ldi r22,lo8(3)
 325 0036 70E0      		ldi r23,0
 326 0038 CE01      		movw r24,r28
 327               	.LVL25:
 328 003a 0196      		adiw r24,1
 329 003c 0E94 0000 		call Endpoint_Write_Stream_LE
 330               	.LVL26:
 331               	.LBB178:
 332               	.LBB179:
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 333               		.loc 2 456 0
 334 0040 8091 E800 		lds r24,232
 335 0044 8E77      		andi r24,lo8(126)
 336 0046 8093 E800 		sts 232,r24
 337               	.LVL27:
 338               	.L36:
 339               	/* epilogue start */
 340               	.LBE179:
 341               	.LBE178:
 445:../../protocol/lufa/lufa.c **** }
 342               		.loc 1 445 0
 343 004a 0F90      		pop __tmp_reg__
 344 004c 0F90      		pop __tmp_reg__
 345 004e 0F90      		pop __tmp_reg__
 346 0050 DF91      		pop r29
 347 0052 CF91      		pop r28
 348 0054 0895      		ret
 349               		.cfi_endproc
 350               	.LFE116:
 352               		.section	.text.send_system,"ax",@progbits
 354               	send_system:
 355               	.LFB115:
 414:../../protocol/lufa/lufa.c **** {
 356               		.loc 1 414 0
 357               		.cfi_startproc
 358               	.LVL28:
 359 0000 CF93      		push r28
 360               	.LCFI4:
 361               		.cfi_def_cfa_offset 3
 362               		.cfi_offset 28, -2
 363 0002 DF93      		push r29
 364               	.LCFI5:
 365               		.cfi_def_cfa_offset 4
 366               		.cfi_offset 29, -3
 367 0004 00D0      		rcall .
 368 0006 1F92      		push __zero_reg__
 369               	.LCFI6:
 370               		.cfi_def_cfa_offset 7
 371 0008 CDB7      		in r28,__SP_L__
 372 000a DEB7      		in r29,__SP_H__
 373               	.LCFI7:
 374               		.cfi_def_cfa_register 28
 375               	/* prologue: function */
 376               	/* frame size = 3 */
 377               	/* stack size = 5 */
 378               	.L__stack_usage = 5
 379               	.LVL29:
 417:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 380               		.loc 1 417 0
 381 000c 2091 0000 		lds r18,USB_DeviceState
 382 0010 2430      		cpi r18,lo8(4)
 383 0012 01F4      		brne .L44
 420:../../protocol/lufa/lufa.c ****     report_extra_t r = {
 384               		.loc 1 420 0
 385 0014 22E0      		ldi r18,lo8(2)
 386 0016 2983      		std Y+1,r18
 387 0018 9B83      		std Y+3,r25
 388 001a 8A83      		std Y+2,r24
 389               	.LVL30:
 390               	.LBB180:
 391               	.LBB181:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 392               		.loc 2 270 0
 393 001c 81E0      		ldi r24,lo8(1)
 394               	.LVL31:
 395 001e 8093 E900 		sts 233,r24
 396               	.LVL32:
 397               	.LBE181:
 398               	.LBE180:
 415:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 399               		.loc 1 415 0
 400 0022 80E0      		ldi r24,0
 401               	.LVL33:
 402               	.L47:
 425:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 403               		.loc 1 425 0 discriminator 1
 404 0024 8150      		subi r24,lo8(-(-1))
 405               	.LVL34:
 406 0026 01F0      		breq .L46
 407               	.LBB182:
 408               	.LBB183:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 409               		.loc 2 360 0
 410 0028 9091 E800 		lds r25,232
 411               	.LBE183:
 412               	.LBE182:
 425:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 413               		.loc 1 425 0
 414 002c 95FF      		sbrs r25,5
 415 002e 00C0      		rjmp .L47
 416               	.L46:
 426:../../protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 417               		.loc 1 426 0
 418 0030 40E0      		ldi r20,0
 419 0032 50E0      		ldi r21,0
 420 0034 63E0      		ldi r22,lo8(3)
 421 0036 70E0      		ldi r23,0
 422 0038 CE01      		movw r24,r28
 423               	.LVL35:
 424 003a 0196      		adiw r24,1
 425 003c 0E94 0000 		call Endpoint_Write_Stream_LE
 426               	.LVL36:
 427               	.LBB184:
 428               	.LBB185:
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 429               		.loc 2 456 0
 430 0040 8091 E800 		lds r24,232
 431 0044 8E77      		andi r24,lo8(126)
 432 0046 8093 E800 		sts 232,r24
 433               	.LVL37:
 434               	.L44:
 435               	/* epilogue start */
 436               	.LBE185:
 437               	.LBE184:
 428:../../protocol/lufa/lufa.c **** }
 438               		.loc 1 428 0
 439 004a 0F90      		pop __tmp_reg__
 440 004c 0F90      		pop __tmp_reg__
 441 004e 0F90      		pop __tmp_reg__
 442 0050 DF91      		pop r29
 443 0052 CF91      		pop r28
 444 0054 0895      		ret
 445               		.cfi_endproc
 446               	.LFE115:
 448               		.section	.text.send_keyboard,"ax",@progbits
 450               	send_keyboard:
 451               	.LFB113:
 353:../../protocol/lufa/lufa.c **** {
 452               		.loc 1 353 0
 453               		.cfi_startproc
 454               	.LVL38:
 455 0000 CF93      		push r28
 456               	.LCFI8:
 457               		.cfi_def_cfa_offset 3
 458               		.cfi_offset 28, -2
 459 0002 DF93      		push r29
 460               	.LCFI9:
 461               		.cfi_def_cfa_offset 4
 462               		.cfi_offset 29, -3
 463               	/* prologue: function */
 464               	/* frame size = 0 */
 465               	/* stack size = 2 */
 466               	.L__stack_usage = 2
 467 0004 EC01      		movw r28,r24
 468               	.LVL39:
 356:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 469               		.loc 1 356 0
 470 0006 8091 0000 		lds r24,USB_DeviceState
 471               	.LVL40:
 472 000a 8430      		cpi r24,lo8(4)
 473 000c 01F4      		brne .L52
 361:../../protocol/lufa/lufa.c ****     if (keyboard_nkro) {
 474               		.loc 1 361 0
 475 000e 9091 0000 		lds r25,keyboard_nkro
 476 0012 9111      		cpse r25,__zero_reg__
 477 0014 00C0      		rjmp .L63
 478               	.LVL41:
 479               	.LBB186:
 480               	.LBB187:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 481               		.loc 2 270 0
 482 0016 81E0      		ldi r24,lo8(1)
 483               	.LVL42:
 484               	.L63:
 485 0018 8093 E900 		sts 233,r24
 486               	.LBE187:
 487               	.LBE186:
 353:../../protocol/lufa/lufa.c **** {
 488               		.loc 1 353 0
 489 001c 80E0      		ldi r24,0
 490               	.LVL43:
 491               	.L57:
 371:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 492               		.loc 1 371 0 discriminator 1
 493 001e 8150      		subi r24,lo8(-(-1))
 494               	.LVL44:
 495 0020 01F0      		breq .L56
 496               	.LBB188:
 497               	.LBB189:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 498               		.loc 2 360 0
 499 0022 9091 E800 		lds r25,232
 500               	.LBE189:
 501               	.LBE188:
 371:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 502               		.loc 1 371 0
 503 0026 95FF      		sbrs r25,5
 504 0028 00C0      		rjmp .L57
 505               	.L56:
 375:../../protocol/lufa/lufa.c ****     if (keyboard_nkro) {
 506               		.loc 1 375 0
 507 002a 8091 0000 		lds r24,keyboard_nkro
 508               	.LVL45:
 376:../../protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 509               		.loc 1 376 0
 510 002e 40E0      		ldi r20,0
 511 0030 50E0      		ldi r21,0
 375:../../protocol/lufa/lufa.c ****     if (keyboard_nkro) {
 512               		.loc 1 375 0
 513 0032 8823      		tst r24
 514 0034 01F0      		breq .L58
 376:../../protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 515               		.loc 1 376 0
 516 0036 60E1      		ldi r22,lo8(16)
 517 0038 70E0      		ldi r23,0
 518 003a 00C0      		rjmp .L64
 519               	.L58:
 382:../../protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 520               		.loc 1 382 0
 521 003c 68E0      		ldi r22,lo8(8)
 522 003e 70E0      		ldi r23,0
 523               	.L64:
 524 0040 CE01      		movw r24,r28
 525 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 526               	.LVL46:
 527               	.LBB190:
 528               	.LBB191:
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 529               		.loc 2 456 0
 530 0046 8091 E800 		lds r24,232
 531 004a 8E77      		andi r24,lo8(126)
 532 004c 8093 E800 		sts 232,r24
 533               	.LBE191:
 534               	.LBE190:
 388:../../protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 535               		.loc 1 388 0
 536 0050 80E1      		ldi r24,lo8(16)
 537 0052 FE01      		movw r30,r28
 538 0054 A0E0      		ldi r26,lo8(keyboard_report_sent)
 539 0056 B0E0      		ldi r27,hi8(keyboard_report_sent)
 540               		0:
 541 0058 0190      		ld r0,Z+
 542 005a 0D92      		st X+,r0
 543 005c 8A95      		dec r24
 544 005e 01F4      		brne 0b
 545               	.L52:
 546               	/* epilogue start */
 389:../../protocol/lufa/lufa.c **** }
 547               		.loc 1 389 0
 548 0060 DF91      		pop r29
 549 0062 CF91      		pop r28
 550               	.LVL47:
 551 0064 0895      		ret
 552               		.cfi_endproc
 553               	.LFE113:
 555               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 556               	.global	EVENT_USB_Device_Connect
 558               	EVENT_USB_Device_Connect:
 559               	.LFB104:
 150:../../protocol/lufa/lufa.c **** {
 560               		.loc 1 150 0
 561               		.cfi_startproc
 562               	/* prologue: function */
 563               	/* frame size = 0 */
 564               	/* stack size = 0 */
 565               	.L__stack_usage = 0
 566 0000 0895      		ret
 567               		.cfi_endproc
 568               	.LFE104:
 570               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 571               	.global	EVENT_USB_Device_Disconnect
 573               	EVENT_USB_Device_Disconnect:
 574               	.LFB105:
 154:../../protocol/lufa/lufa.c **** {
 575               		.loc 1 154 0
 576               		.cfi_startproc
 577               	/* prologue: function */
 578               	/* frame size = 0 */
 579               	/* stack size = 0 */
 580               	.L__stack_usage = 0
 581 0000 0895      		ret
 582               		.cfi_endproc
 583               	.LFE105:
 585               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 586               	.global	EVENT_USB_Device_Reset
 588               	EVENT_USB_Device_Reset:
 589               	.LFB106:
 158:../../protocol/lufa/lufa.c **** {
 590               		.loc 1 158 0
 591               		.cfi_startproc
 592               	/* prologue: function */
 593               	/* frame size = 0 */
 594               	/* stack size = 0 */
 595               	.L__stack_usage = 0
 596 0000 0895      		ret
 597               		.cfi_endproc
 598               	.LFE106:
 600               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 601               	.global	EVENT_USB_Device_Suspend
 603               	EVENT_USB_Device_Suspend:
 604               	.LFB107:
 162:../../protocol/lufa/lufa.c **** {
 605               		.loc 1 162 0
 606               		.cfi_startproc
 607               	/* prologue: function */
 608               	/* frame size = 0 */
 609               	/* stack size = 0 */
 610               	.L__stack_usage = 0
 611 0000 0895      		ret
 612               		.cfi_endproc
 613               	.LFE107:
 615               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 616               	.global	EVENT_USB_Device_WakeUp
 618               	EVENT_USB_Device_WakeUp:
 619               	.LFB108:
 169:../../protocol/lufa/lufa.c **** {
 620               		.loc 1 169 0
 621               		.cfi_startproc
 622               	/* prologue: function */
 623               	/* frame size = 0 */
 624               	/* stack size = 0 */
 625               	.L__stack_usage = 0
 170:../../protocol/lufa/lufa.c ****     suspend_wakeup_init();
 626               		.loc 1 170 0
 627 0000 0C94 0000 		jmp suspend_wakeup_init
 628               	.LVL48:
 629               		.cfi_endproc
 630               	.LFE108:
 632               		.section	.text.EVENT_USB_Device_StartOfFrame,"ax",@progbits
 633               	.global	EVENT_USB_Device_StartOfFrame
 635               	EVENT_USB_Device_StartOfFrame:
 636               	.LFB109:
 180:../../protocol/lufa/lufa.c **** {
 637               		.loc 1 180 0
 638               		.cfi_startproc
 639               	/* prologue: function */
 640               	/* frame size = 0 */
 641               	/* stack size = 0 */
 642               	.L__stack_usage = 0
 643               	.LBB216:
 644               	.LBB217:
  84:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 645               		.loc 1 84 0
 646 0000 8091 0000 		lds r24,USB_DeviceState
 647 0004 8430      		cpi r24,lo8(4)
 648 0006 01F4      		brne .L70
 649               	.LBB218:
 650               	.LBB219:
 253:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 651               		.loc 2 253 0
 652 0008 8091 E900 		lds r24,233
 653 000c 8F70      		andi r24,lo8(15)
 654               	.LBB220:
 655               	.LBB221:
 240:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 656               		.loc 2 240 0
 657 000e 9091 EC00 		lds r25,236
 658 0012 90FF      		sbrs r25,0
 659 0014 00C0      		rjmp .L77
 660 0016 90E8      		ldi r25,lo8(-128)
 661 0018 00C0      		rjmp .L72
 662               	.L77:
 663 001a 90E0      		ldi r25,0
 664               	.L72:
 665               	.LBE221:
 666               	.LBE220:
 253:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 667               		.loc 2 253 0
 668 001c 982B      		or r25,r24
 669               	.LVL49:
 670               	.LBE219:
 671               	.LBE218:
 672               	.LBB222:
 673               	.LBB223:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 674               		.loc 2 270 0
 675 001e 82E0      		ldi r24,lo8(2)
 676 0020 8093 E900 		sts 233,r24
 677               	.LBE223:
 678               	.LBE222:
 679               	.LBB224:
 680               	.LBB225:
 313:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 681               		.loc 2 313 0
 682 0024 8091 EB00 		lds r24,235
 683               	.LBE225:
 684               	.LBE224:
 116:../../protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 685               		.loc 1 116 0
 686 0028 80FF      		sbrs r24,0
 687 002a 00C0      		rjmp .L76
 688               	.LBB226:
 689               	.LBB227:
 370:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 690               		.loc 2 370 0
 691 002c 8091 EE00 		lds r24,238
 692               	.LBE227:
 693               	.LBE226:
 116:../../protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 694               		.loc 1 116 0
 695 0030 87FF      		sbrs r24,7
 696 0032 00C0      		rjmp .L76
 697               	.L74:
 698               	.LBB228:
 699               	.LBB229:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 700               		.loc 2 360 0
 701 0034 8091 E800 		lds r24,232
 702               	.LBE229:
 703               	.LBE228:
 122:../../protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 704               		.loc 1 122 0
 705 0038 85FF      		sbrs r24,5
 706 003a 00C0      		rjmp .L84
 707               	.LVL50:
 708               	.LBB230:
 709               	.LBB231:
 710               		.loc 2 554 0
 711 003c 1092 F100 		sts 241,__zero_reg__
 712 0040 00C0      		rjmp .L74
 713               	.LVL51:
 714               	.L84:
 715               	.LBE231:
 716               	.LBE230:
 717               	.LBB232:
 718               	.LBB233:
 407:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 719               		.loc 2 407 0
 720 0042 8091 E800 		lds r24,232
 721               	.LBE233:
 722               	.LBE232:
 126:../../protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 723               		.loc 1 126 0
 724 0046 80FF      		sbrs r24,0
 725 0048 00C0      		rjmp .L76
 726               	.LBB234:
 727               	.LBB235:
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 728               		.loc 2 456 0
 729 004a 8091 E800 		lds r24,232
 730 004e 8E77      		andi r24,lo8(126)
 731 0050 8093 E800 		sts 232,r24
 732               	.L76:
 733               	.LVL52:
 734               	.LBE235:
 735               	.LBE234:
 736               	.LBB236:
 737               	.LBB237:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 738               		.loc 2 270 0
 739 0054 9F70      		andi r25,lo8(15)
 740               	.LVL53:
 741 0056 9093 E900 		sts 233,r25
 742               	.LVL54:
 743               	.L70:
 744 005a 0895      		ret
 745               	.LBE237:
 746               	.LBE236:
 747               	.LBE217:
 748               	.LBE216:
 749               		.cfi_endproc
 750               	.LFE109:
 752               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 753               	.global	EVENT_USB_Device_ConfigurationChanged
 755               	EVENT_USB_Device_ConfigurationChanged:
 756               	.LFB110:
 197:../../protocol/lufa/lufa.c **** {
 757               		.loc 1 197 0
 758               		.cfi_startproc
 759               	/* prologue: function */
 760               	/* frame size = 0 */
 761               	/* stack size = 0 */
 762               	.L__stack_usage = 0
 763               	.LVL55:
 764               	.LBB238:
 765               	.LBB239:
 210:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 766               		.loc 2 210 0
 767 0000 42E0      		ldi r20,lo8(2)
 768 0002 61EC      		ldi r22,lo8(-63)
 769 0004 81E0      		ldi r24,lo8(1)
 770 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 771               	.LVL56:
 772               	.LBE239:
 773               	.LBE238:
 774               	.LBB240:
 775               	.LBB241:
 776 000a 46E2      		ldi r20,lo8(38)
 777 000c 61EC      		ldi r22,lo8(-63)
 778 000e 82E0      		ldi r24,lo8(2)
 779 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 780               	.LVL57:
 781               	.LBE241:
 782               	.LBE240:
 783               	.LBB242:
 784               	.LBB243:
 785 0014 42E2      		ldi r20,lo8(34)
 786 0016 60EC      		ldi r22,lo8(-64)
 787 0018 83E0      		ldi r24,lo8(3)
 788 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 789               	.LVL58:
 790               	.LBE243:
 791               	.LBE242:
 792               	.LBB244:
 793               	.LBB245:
 794 001e 42E1      		ldi r20,lo8(18)
 795 0020 61EC      		ldi r22,lo8(-63)
 796 0022 84E0      		ldi r24,lo8(4)
 797 0024 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 798               	.LVL59:
 799               	.LBE245:
 800               	.LBE244:
 801               		.cfi_endproc
 802               	.LFE110:
 804               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 805               	.global	EVENT_USB_Device_ControlRequest
 807               	EVENT_USB_Device_ControlRequest:
 808               	.LFB111:
 248:../../protocol/lufa/lufa.c **** {
 809               		.loc 1 248 0
 810               		.cfi_startproc
 811               	/* prologue: function */
 812               	/* frame size = 0 */
 813               	/* stack size = 0 */
 814               	.L__stack_usage = 0
 815               	.LVL60:
 253:../../protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 816               		.loc 1 253 0
 817 0000 8091 0000 		lds r24,USB_ControlRequest+1
 818 0004 8330      		cpi r24,lo8(3)
 819 0006 01F4      		brne .+2
 820 0008 00C0      		rjmp .L88
 821 000a 00F4      		brsh .L89
 822 000c 8130      		cpi r24,lo8(1)
 823 000e 01F0      		breq .L90
 824 0010 8230      		cpi r24,lo8(2)
 825 0012 01F4      		brne .+2
 826 0014 00C0      		rjmp .L91
 827 0016 0895      		ret
 828               	.L89:
 829 0018 8A30      		cpi r24,lo8(10)
 830 001a 01F4      		brne .+2
 831 001c 00C0      		rjmp .L92
 832 001e 8B30      		cpi r24,lo8(11)
 833 0020 01F4      		brne .+2
 834 0022 00C0      		rjmp .L93
 835 0024 8930      		cpi r24,lo8(9)
 836 0026 01F0      		breq .+2
 837 0028 00C0      		rjmp .L86
 838 002a 00C0      		rjmp .L113
 839               	.L90:
 256:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 840               		.loc 1 256 0
 841 002c 8091 0000 		lds r24,USB_ControlRequest
 842 0030 813A      		cpi r24,lo8(-95)
 843 0032 01F0      		breq .+2
 844 0034 00C0      		rjmp .L86
 845               	.LBB246:
 846               	.LBB247:
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 847               		.loc 2 444 0
 848 0036 8091 E800 		lds r24,232
 849 003a 877F      		andi r24,lo8(-9)
 850 003c 8093 E800 		sts 232,r24
 851               	.LBE247:
 852               	.LBE246:
 261:../../protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 853               		.loc 1 261 0
 854 0040 8091 0000 		lds r24,USB_ControlRequest+4
 855 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 856 0048 892B      		or r24,r25
 857 004a 01F0      		breq .L107
 250:../../protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 858               		.loc 1 250 0
 859 004c 60E0      		ldi r22,0
 249:../../protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 860               		.loc 1 249 0
 861 004e 80E0      		ldi r24,0
 862 0050 90E0      		ldi r25,0
 863 0052 00C0      		rjmp .L97
 864               	.L107:
 265:../../protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 865               		.loc 1 265 0
 866 0054 60E1      		ldi r22,lo8(16)
 264:../../protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 867               		.loc 1 264 0
 868 0056 80E0      		ldi r24,lo8(keyboard_report_sent)
 869 0058 90E0      		ldi r25,hi8(keyboard_report_sent)
 870               	.L97:
 871               	.LVL61:
 270:../../protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 872               		.loc 1 270 0
 873 005a 70E0      		ldi r23,0
 874 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 875               	.LVL62:
 876               	.LBB248:
 877               	.LBB249:
 471:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 878               		.loc 2 471 0
 879 0060 8091 E800 		lds r24,232
 880 0064 8B77      		andi r24,lo8(123)
 881 0066 8093 E800 		sts 232,r24
 882 006a 0895      		ret
 883               	.LVL63:
 884               	.L113:
 885               	.LBE249:
 886               	.LBE248:
 276:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 887               		.loc 1 276 0
 888 006c 8091 0000 		lds r24,USB_ControlRequest
 889 0070 8132      		cpi r24,lo8(33)
 890 0072 01F0      		breq .+2
 891 0074 00C0      		rjmp .L86
 280:../../protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 892               		.loc 1 280 0
 893 0076 8091 0000 		lds r24,USB_ControlRequest+4
 894 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 895 007e 892B      		or r24,r25
 896 0080 01F0      		breq .+2
 897 0082 00C0      		rjmp .L86
 898               	.LBB250:
 899               	.LBB251:
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 900               		.loc 2 444 0
 901 0084 8091 E800 		lds r24,232
 902 0088 877F      		andi r24,lo8(-9)
 903 008a 8093 E800 		sts 232,r24
 904               	.L100:
 905               	.LBE251:
 906               	.LBE250:
 907               	.LBB252:
 908               	.LBB253:
 419:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 909               		.loc 2 419 0 discriminator 1
 910 008e 8091 E800 		lds r24,232
 911               	.LBE253:
 912               	.LBE252:
 284:../../protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 913               		.loc 1 284 0 discriminator 1
 914 0092 82FD      		sbrc r24,2
 915 0094 00C0      		rjmp .L114
 285:../../protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 916               		.loc 1 285 0
 917 0096 8091 0000 		lds r24,USB_DeviceState
 918 009a 8111      		cpse r24,__zero_reg__
 919 009c 00C0      		rjmp .L100
 920 009e 00C0      		rjmp .L86
 921               	.L114:
 922               	.LBB254:
 923               	.LBB255:
 542:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 924               		.loc 2 542 0
 925 00a0 8091 F100 		lds r24,241
 926               	.LBE255:
 927               	.LBE254:
 288:../../protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 928               		.loc 1 288 0
 929 00a4 8093 0000 		sts keyboard_led_stats,r24
 930               	.LBB256:
 931               	.LBB257:
 471:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 932               		.loc 2 471 0
 933 00a8 8091 E800 		lds r24,232
 934 00ac 8B77      		andi r24,lo8(123)
 935 00ae 00C0      		rjmp .L111
 936               	.L88:
 937               	.LBE257:
 938               	.LBE256:
 300:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 939               		.loc 1 300 0
 940 00b0 8091 0000 		lds r24,USB_ControlRequest
 941 00b4 813A      		cpi r24,lo8(-95)
 942 00b6 01F0      		breq .+2
 943 00b8 00C0      		rjmp .L86
 944               	.LBB258:
 945               	.LBB259:
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 946               		.loc 2 444 0
 947 00ba 8091 E800 		lds r24,232
 948 00be 877F      		andi r24,lo8(-9)
 949 00c0 8093 E800 		sts 232,r24
 950               	.L103:
 951               	.LBE259:
 952               	.LBE258:
 953               	.LBB260:
 954               	.LBB261:
 407:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 955               		.loc 2 407 0 discriminator 1
 956 00c4 8091 E800 		lds r24,232
 957               	.LBE261:
 958               	.LBE260:
 303:../../protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 959               		.loc 1 303 0 discriminator 1
 960 00c8 80FF      		sbrs r24,0
 961 00ca 00C0      		rjmp .L103
 304:../../protocol/lufa/lufa.c ****                 Endpoint_Write_8(protocol_report);
 962               		.loc 1 304 0
 963 00cc 8091 0000 		lds r24,protocol_report
 964               	.LVL64:
 965 00d0 00C0      		rjmp .L112
 966               	.LVL65:
 967               	.L93:
 311:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 968               		.loc 1 311 0
 969 00d2 8091 0000 		lds r24,USB_ControlRequest
 970 00d6 8132      		cpi r24,lo8(33)
 971 00d8 01F4      		brne .L86
 972               	.LBB262:
 973               	.LBB263:
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 974               		.loc 2 444 0
 975 00da 8091 E800 		lds r24,232
 976 00de 877F      		andi r24,lo8(-9)
 977 00e0 8093 E800 		sts 232,r24
 978               	.LBE263:
 979               	.LBE262:
 314:../../protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 980               		.loc 1 314 0
 981 00e4 0E94 0000 		call Endpoint_ClearStatusStage
 982               	.LVL66:
 316:../../protocol/lufa/lufa.c ****                 protocol_report = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 983               		.loc 1 316 0
 984 00e8 9091 0000 		lds r25,USB_ControlRequest+2
 985 00ec 81E0      		ldi r24,lo8(1)
 986 00ee 9111      		cpse r25,__zero_reg__
 987 00f0 00C0      		rjmp .L104
 988 00f2 80E0      		ldi r24,0
 989               	.L104:
 990 00f4 8093 0000 		sts protocol_report,r24
 991 00f8 0895      		ret
 992               	.L92:
 321:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 993               		.loc 1 321 0
 994 00fa 8091 0000 		lds r24,USB_ControlRequest
 995 00fe 8132      		cpi r24,lo8(33)
 996 0100 01F4      		brne .L86
 997               	.LBB264:
 998               	.LBB265:
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 999               		.loc 2 444 0
 1000 0102 8091 E800 		lds r24,232
 1001 0106 877F      		andi r24,lo8(-9)
 1002 0108 8093 E800 		sts 232,r24
 1003               	.LBE265:
 1004               	.LBE264:
 324:../../protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 1005               		.loc 1 324 0
 1006 010c 0E94 0000 		call Endpoint_ClearStatusStage
 1007               	.LVL67:
 326:../../protocol/lufa/lufa.c ****                 idle_duration = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 1008               		.loc 1 326 0
 1009 0110 8091 0000 		lds r24,USB_ControlRequest+3
 1010 0114 8093 0000 		sts idle_duration,r24
 1011 0118 0895      		ret
 1012               	.L91:
 331:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 1013               		.loc 1 331 0
 1014 011a 8091 0000 		lds r24,USB_ControlRequest
 1015 011e 813A      		cpi r24,lo8(-95)
 1016 0120 01F4      		brne .L86
 1017               	.LBB266:
 1018               	.LBB267:
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 1019               		.loc 2 444 0
 1020 0122 8091 E800 		lds r24,232
 1021 0126 877F      		andi r24,lo8(-9)
 1022 0128 8093 E800 		sts 232,r24
 1023               	.L106:
 1024               	.LBE267:
 1025               	.LBE266:
 1026               	.LBB268:
 1027               	.LBB269:
 407:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 1028               		.loc 2 407 0 discriminator 1
 1029 012c 8091 E800 		lds r24,232
 1030               	.LBE269:
 1031               	.LBE268:
 334:../../protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 1032               		.loc 1 334 0 discriminator 1
 1033 0130 80FF      		sbrs r24,0
 1034 0132 00C0      		rjmp .L106
 335:../../protocol/lufa/lufa.c ****                 Endpoint_Write_8(idle_duration);
 1035               		.loc 1 335 0
 1036 0134 8091 0000 		lds r24,idle_duration
 1037               	.L112:
 1038               	.LVL68:
 1039               	.LBB270:
 1040               	.LBB271:
 1041               		.loc 2 554 0
 1042 0138 8093 F100 		sts 241,r24
 1043               	.LBE271:
 1044               	.LBE270:
 1045               	.LBB272:
 1046               	.LBB273:
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 1047               		.loc 2 456 0
 1048 013c 8091 E800 		lds r24,232
 1049               	.LVL69:
 1050 0140 8E77      		andi r24,lo8(126)
 1051               	.LVL70:
 1052               	.L111:
 1053 0142 8093 E800 		sts 232,r24
 1054               	.LBE273:
 1055               	.LBE272:
 337:../../protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 1056               		.loc 1 337 0
 1057 0146 0C94 0000 		jmp Endpoint_ClearStatusStage
 1058               	.LVL71:
 1059               	.L86:
 1060 014a 0895      		ret
 1061               		.cfi_endproc
 1062               	.LFE111:
 1064               		.section	.text.startup.main,"ax",@progbits
 1065               		.weak	main
 1067               	main:
 1068               	.LFB119:
 507:../../protocol/lufa/lufa.c **** #else
 508:../../protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 509:../../protocol/lufa/lufa.c **** {
 510:../../protocol/lufa/lufa.c ****     return 0;
 511:../../protocol/lufa/lufa.c **** }
 512:../../protocol/lufa/lufa.c **** #endif
 513:../../protocol/lufa/lufa.c **** 
 514:../../protocol/lufa/lufa.c **** 
 515:../../protocol/lufa/lufa.c **** /*******************************************************************************
 516:../../protocol/lufa/lufa.c ****  * main
 517:../../protocol/lufa/lufa.c ****  ******************************************************************************/
 518:../../protocol/lufa/lufa.c **** static void SetupHardware(void)
 519:../../protocol/lufa/lufa.c **** {
 520:../../protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 521:../../protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 522:../../protocol/lufa/lufa.c ****     wdt_disable();
 523:../../protocol/lufa/lufa.c **** 
 524:../../protocol/lufa/lufa.c ****     /* Disable clock division */
 525:../../protocol/lufa/lufa.c ****     clock_prescale_set(clock_div_1);
 526:../../protocol/lufa/lufa.c **** 
 527:../../protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
 528:../../protocol/lufa/lufa.c ****     USB_Disable();
 529:../../protocol/lufa/lufa.c **** 
 530:../../protocol/lufa/lufa.c ****     USB_Init();
 531:../../protocol/lufa/lufa.c **** 
 532:../../protocol/lufa/lufa.c ****     // for Console_Task
 533:../../protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
 534:../../protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
 535:../../protocol/lufa/lufa.c **** }
 536:../../protocol/lufa/lufa.c **** 
 537:../../protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
 538:../../protocol/lufa/lufa.c **** int main(void)
 539:../../protocol/lufa/lufa.c **** {
 1069               		.loc 1 539 0
 1070               		.cfi_startproc
 1071               	/* prologue: function */
 1072               	/* frame size = 0 */
 1073               	/* stack size = 0 */
 1074               	.L__stack_usage = 0
 1075               	.LBB283:
 1076               	.LBB284:
 521:../../protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 1077               		.loc 1 521 0
 1078 0000 84B7      		in r24,0x34
 1079 0002 877F      		andi r24,lo8(-9)
 1080 0004 84BF      		out 0x34,r24
 522:../../protocol/lufa/lufa.c ****     wdt_disable();
 1081               		.loc 1 522 0
 1082 0006 88E1      		ldi r24,lo8(24)
 1083               	/* #APP */
 1084               	 ;  522 "../../protocol/lufa/lufa.c" 1
 1085 0008 0FB6      		in __tmp_reg__, __SREG__
 1086 000a F894      		cli
 1087 000c 8093 6000 		sts 96, r24
 1088 0010 1092 6000 		sts 96, __zero_reg__
 1089 0014 0FBE      		out __SREG__,__tmp_reg__
 1090               		
 1091               	 ;  0 "" 2
 1092               	.LVL72:
 1093               	/* #NOAPP */
 1094               	.LBB285:
 1095               	.LBB286:
 1096               		.file 4 "/usr/lib/avr/include/avr/power.h"
   1:/usr/lib/avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/avr/include/avr/power.h ****    All rights reserved.
   3:/usr/lib/avr/include/avr/power.h **** 
   4:/usr/lib/avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/avr/power.h **** 
   7:/usr/lib/avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  10:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  11:/usr/lib/avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  12:/usr/lib/avr/include/avr/power.h ****      distribution.
  13:/usr/lib/avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  14:/usr/lib/avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  15:/usr/lib/avr/include/avr/power.h ****      from this software without specific prior written permission.
  16:/usr/lib/avr/include/avr/power.h **** 
  17:/usr/lib/avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  18:/usr/lib/avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19:/usr/lib/avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20:/usr/lib/avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  21:/usr/lib/avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  22:/usr/lib/avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  23:/usr/lib/avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24:/usr/lib/avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  25:/usr/lib/avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  26:/usr/lib/avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  27:/usr/lib/avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  28:/usr/lib/avr/include/avr/power.h **** 
  29:/usr/lib/avr/include/avr/power.h **** /* $Id: power.h 2254 2011-09-26 15:06:50Z arcanum $ */
  30:/usr/lib/avr/include/avr/power.h **** 
  31:/usr/lib/avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  32:/usr/lib/avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  33:/usr/lib/avr/include/avr/power.h **** 
  34:/usr/lib/avr/include/avr/power.h **** #include <avr/io.h>
  35:/usr/lib/avr/include/avr/power.h **** #include <stdint.h>
  36:/usr/lib/avr/include/avr/power.h **** 
  37:/usr/lib/avr/include/avr/power.h **** 
  38:/usr/lib/avr/include/avr/power.h **** /** \file */
  39:/usr/lib/avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib/avr/include/avr/power.h **** 
  41:/usr/lib/avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib/avr/include/avr/power.h **** 
  43:/usr/lib/avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib/avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib/avr/include/avr/power.h **** peripherals as needed.
  46:/usr/lib/avr/include/avr/power.h **** 
  47:/usr/lib/avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  48:/usr/lib/avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  49:/usr/lib/avr/include/avr/power.h **** 
  50:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  51:/usr/lib/avr/include/avr/power.h **** the ATmega128). On those devices without a Power Reduction Register, these 
  52:/usr/lib/avr/include/avr/power.h **** macros are not available.
  53:/usr/lib/avr/include/avr/power.h **** 
  54:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  55:/usr/lib/avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  56:/usr/lib/avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  57:/usr/lib/avr/include/avr/power.h **** find out which macros are applicable to your device.
  58:/usr/lib/avr/include/avr/power.h **** 
  59:/usr/lib/avr/include/avr/power.h **** */
  60:/usr/lib/avr/include/avr/power.h **** 
  61:/usr/lib/avr/include/avr/power.h **** 
  62:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
  63:/usr/lib/avr/include/avr/power.h **** 
  64:/usr/lib/avr/include/avr/power.h **** \anchor avr_powermacros
  65:/usr/lib/avr/include/avr/power.h **** <small>
  66:/usr/lib/avr/include/avr/power.h **** <center>
  67:/usr/lib/avr/include/avr/power.h **** <table border="3">
  68:/usr/lib/avr/include/avr/power.h ****   <tr>
  69:/usr/lib/avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  70:/usr/lib/avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  71:/usr/lib/avr/include/avr/power.h ****     <td width="75%"><strong>Applicable for device</strong></td>
  72:/usr/lib/avr/include/avr/power.h ****   </tr>
  73:/usr/lib/avr/include/avr/power.h **** 
  74:/usr/lib/avr/include/avr/power.h ****   <tr>
  75:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  76:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  77:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  78:/usr/lib/avr/include/avr/power.h ****   </tr>
  79:/usr/lib/avr/include/avr/power.h **** 
  80:/usr/lib/avr/include/avr/power.h ****   <tr>
  81:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  82:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  83:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  84:/usr/lib/avr/include/avr/power.h ****   </tr>
  85:/usr/lib/avr/include/avr/power.h **** 
  86:/usr/lib/avr/include/avr/power.h ****   <tr>
  87:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
  88:/usr/lib/avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
  89:/usr/lib/avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  90:/usr/lib/avr/include/avr/power.h ****   </tr>
  91:/usr/lib/avr/include/avr/power.h **** 
  92:/usr/lib/avr/include/avr/power.h ****   <tr>
  93:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
  94:/usr/lib/avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
  95:/usr/lib/avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  96:/usr/lib/avr/include/avr/power.h ****   </tr>
  97:/usr/lib/avr/include/avr/power.h **** 
  98:/usr/lib/avr/include/avr/power.h ****   <tr>
  99:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 100:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 101:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM81</td>
 102:/usr/lib/avr/include/avr/power.h ****   </tr>
 103:/usr/lib/avr/include/avr/power.h **** 
 104:/usr/lib/avr/include/avr/power.h ****   <tr>
 105:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 106:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 107:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM81</td>
 108:/usr/lib/avr/include/avr/power.h ****   </tr>
 109:/usr/lib/avr/include/avr/power.h **** 
 110:/usr/lib/avr/include/avr/power.h ****   <tr>
 111:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 112:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 113:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 114:/usr/lib/avr/include/avr/power.h ****   </tr>
 115:/usr/lib/avr/include/avr/power.h **** 
 116:/usr/lib/avr/include/avr/power.h ****   <tr>
 117:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 118:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 119:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 120:/usr/lib/avr/include/avr/power.h ****   </tr>
 121:/usr/lib/avr/include/avr/power.h **** 
 122:/usr/lib/avr/include/avr/power.h ****   <tr>
 123:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 124:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 125:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 126:/usr/lib/avr/include/avr/power.h ****   </tr>
 127:/usr/lib/avr/include/avr/power.h **** 
 128:/usr/lib/avr/include/avr/power.h ****   <tr>
 129:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 130:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 131:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 132:/usr/lib/avr/include/avr/power.h ****   </tr>
 133:/usr/lib/avr/include/avr/power.h **** 
 134:/usr/lib/avr/include/avr/power.h ****   <tr>
 135:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 136:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 137:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 138:/usr/lib/avr/include/avr/power.h ****   </tr>
 139:/usr/lib/avr/include/avr/power.h **** 
 140:/usr/lib/avr/include/avr/power.h ****   <tr>
 141:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 142:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 143:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 144:/usr/lib/avr/include/avr/power.h ****   </tr>
 145:/usr/lib/avr/include/avr/power.h **** 
 146:/usr/lib/avr/include/avr/power.h ****   <tr>
 147:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 148:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 149:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 150:/usr/lib/avr/include/avr/power.h ****   </tr>
 151:/usr/lib/avr/include/avr/power.h **** 
 152:/usr/lib/avr/include/avr/power.h ****   <tr>
 153:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 154:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 155:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 156:/usr/lib/avr/include/avr/power.h ****   </tr>
 157:/usr/lib/avr/include/avr/power.h **** 
 158:/usr/lib/avr/include/avr/power.h ****   <tr>
 159:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 160:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 161:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 162:/usr/lib/avr/include/avr/power.h ****   </tr>
 163:/usr/lib/avr/include/avr/power.h **** 
 164:/usr/lib/avr/include/avr/power.h ****   <tr>
 165:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 166:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 167:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 168:/usr/lib/avr/include/avr/power.h ****   </tr>
 169:/usr/lib/avr/include/avr/power.h **** 
 170:/usr/lib/avr/include/avr/power.h ****   <tr>
 171:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 172:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 173:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 174:/usr/lib/avr/include/avr/power.h ****   </tr>
 175:/usr/lib/avr/include/avr/power.h **** 
 176:/usr/lib/avr/include/avr/power.h ****   <tr>
 177:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 178:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 179:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 180:/usr/lib/avr/include/avr/power.h ****   </tr>
 181:/usr/lib/avr/include/avr/power.h **** 
 182:/usr/lib/avr/include/avr/power.h ****   <tr>
 183:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 184:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 185:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 186:/usr/lib/avr/include/avr/power.h ****   </tr>
 187:/usr/lib/avr/include/avr/power.h **** 
 188:/usr/lib/avr/include/avr/power.h ****   <tr>
 189:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 190:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 191:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 192:/usr/lib/avr/include/avr/power.h ****   </tr>
 193:/usr/lib/avr/include/avr/power.h **** 
 194:/usr/lib/avr/include/avr/power.h ****   <tr>
 195:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 196:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 197:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 198:/usr/lib/avr/include/avr/power.h ****   </tr>
 199:/usr/lib/avr/include/avr/power.h **** 
 200:/usr/lib/avr/include/avr/power.h ****   <tr>
 201:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 202:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 203:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 204:/usr/lib/avr/include/avr/power.h ****   </tr>
 205:/usr/lib/avr/include/avr/power.h **** 
 206:/usr/lib/avr/include/avr/power.h ****   <tr>
 207:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 208:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 209:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 210:/usr/lib/avr/include/avr/power.h ****   </tr>
 211:/usr/lib/avr/include/avr/power.h **** 
 212:/usr/lib/avr/include/avr/power.h ****   <tr>
 213:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 214:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 215:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 216:/usr/lib/avr/include/avr/power.h ****   </tr>
 217:/usr/lib/avr/include/avr/power.h **** 
 218:/usr/lib/avr/include/avr/power.h ****   <tr>
 219:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 220:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 221:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 222:/usr/lib/avr/include/avr/power.h ****   </tr>
 223:/usr/lib/avr/include/avr/power.h **** 
 224:/usr/lib/avr/include/avr/power.h ****   <tr>
 225:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 226:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 227:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 228:/usr/lib/avr/include/avr/power.h ****   </tr>
 229:/usr/lib/avr/include/avr/power.h **** 
 230:/usr/lib/avr/include/avr/power.h ****   <tr>
 231:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 232:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 233:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 234:/usr/lib/avr/include/avr/power.h ****   </tr>
 235:/usr/lib/avr/include/avr/power.h **** 
 236:/usr/lib/avr/include/avr/power.h ****   <tr>
 237:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 238:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 239:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 240:/usr/lib/avr/include/avr/power.h ****   </tr>
 241:/usr/lib/avr/include/avr/power.h **** 
 242:/usr/lib/avr/include/avr/power.h ****   <tr>
 243:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 244:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 245:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 246:/usr/lib/avr/include/avr/power.h ****   </tr>
 247:/usr/lib/avr/include/avr/power.h **** 
 248:/usr/lib/avr/include/avr/power.h ****   <tr>
 249:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 250:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 251:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 252:/usr/lib/avr/include/avr/power.h ****   </tr>
 253:/usr/lib/avr/include/avr/power.h **** 
 254:/usr/lib/avr/include/avr/power.h ****   <tr>
 255:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 256:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 257:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 258:/usr/lib/avr/include/avr/power.h ****   </tr>
 259:/usr/lib/avr/include/avr/power.h **** 
 260:/usr/lib/avr/include/avr/power.h ****   <tr>
 261:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 262:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 263:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 264:/usr/lib/avr/include/avr/power.h ****   </tr>
 265:/usr/lib/avr/include/avr/power.h **** 
 266:/usr/lib/avr/include/avr/power.h ****   <tr>
 267:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 268:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 269:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 270:/usr/lib/avr/include/avr/power.h ****   </tr>
 271:/usr/lib/avr/include/avr/power.h **** 
 272:/usr/lib/avr/include/avr/power.h ****   <tr>
 273:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 274:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 275:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 276:/usr/lib/avr/include/avr/power.h ****   </tr>
 277:/usr/lib/avr/include/avr/power.h **** 
 278:/usr/lib/avr/include/avr/power.h ****   <tr>
 279:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 280:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 281:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 282:/usr/lib/avr/include/avr/power.h ****   </tr>
 283:/usr/lib/avr/include/avr/power.h **** 
 284:/usr/lib/avr/include/avr/power.h ****   <tr>
 285:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 286:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 287:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 288:/usr/lib/avr/include/avr/power.h ****   </tr>
 289:/usr/lib/avr/include/avr/power.h **** 
 290:/usr/lib/avr/include/avr/power.h ****   <tr>
 291:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 292:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 293:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 294:/usr/lib/avr/include/avr/power.h ****   </tr>
 295:/usr/lib/avr/include/avr/power.h **** 
 296:/usr/lib/avr/include/avr/power.h ****   <tr>
 297:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 298:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 299:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 300:/usr/lib/avr/include/avr/power.h ****   </tr>
 301:/usr/lib/avr/include/avr/power.h **** 
 302:/usr/lib/avr/include/avr/power.h ****   <tr>
 303:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 304:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 305:/usr/lib/avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 306:/usr/lib/avr/include/avr/power.h ****   </tr>
 307:/usr/lib/avr/include/avr/power.h **** 
 308:/usr/lib/avr/include/avr/power.h ****   <tr>
 309:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 310:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 311:/usr/lib/avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 312:/usr/lib/avr/include/avr/power.h ****   </tr>
 313:/usr/lib/avr/include/avr/power.h **** 
 314:/usr/lib/avr/include/avr/power.h ****   <tr>
 315:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 316:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 317:/usr/lib/avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 318:/usr/lib/avr/include/avr/power.h ****   </tr>
 319:/usr/lib/avr/include/avr/power.h **** 
 320:/usr/lib/avr/include/avr/power.h ****   <tr>
 321:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 322:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 323:/usr/lib/avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 324:/usr/lib/avr/include/avr/power.h ****   </tr>
 325:/usr/lib/avr/include/avr/power.h **** 
 326:/usr/lib/avr/include/avr/power.h ****   <tr>
 327:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 328:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 329:/usr/lib/avr/include/avr/power.h ****     <td>ATmega406</td>
 330:/usr/lib/avr/include/avr/power.h ****   </tr>
 331:/usr/lib/avr/include/avr/power.h **** 
 332:/usr/lib/avr/include/avr/power.h ****   <tr>
 333:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 334:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 335:/usr/lib/avr/include/avr/power.h ****     <td>ATmega406</td>
 336:/usr/lib/avr/include/avr/power.h ****   </tr>
 337:/usr/lib/avr/include/avr/power.h **** 
 338:/usr/lib/avr/include/avr/power.h ****   <tr>
 339:/usr/lib/avr/include/avr/power.h ****     <td>power_all_enable()</td>
 340:/usr/lib/avr/include/avr/power.h ****     <td>Enable all modules.</td>
 341:/usr/lib/avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 342:/usr/lib/avr/include/avr/power.h ****   </tr>
 343:/usr/lib/avr/include/avr/power.h **** 
 344:/usr/lib/avr/include/avr/power.h ****   <tr>
 345:/usr/lib/avr/include/avr/power.h ****     <td>power_all_disable()</td>
 346:/usr/lib/avr/include/avr/power.h ****     <td>Disable all modules.</td>
 347:/usr/lib/avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 348:/usr/lib/avr/include/avr/power.h ****   </tr>
 349:/usr/lib/avr/include/avr/power.h **** </table>
 350:/usr/lib/avr/include/avr/power.h **** </center>
 351:/usr/lib/avr/include/avr/power.h **** </small>
 352:/usr/lib/avr/include/avr/power.h **** 
 353:/usr/lib/avr/include/avr/power.h **** @} */
 354:/usr/lib/avr/include/avr/power.h **** 
 355:/usr/lib/avr/include/avr/power.h **** // Xmega A series has AES, EBI and DMA bits
 356:/usr/lib/avr/include/avr/power.h **** // Include any other device on need basis
 357:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 358:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 359:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 360:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 361:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 362:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 363:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 364:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 365:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 366:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 367:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 368:/usr/lib/avr/include/avr/power.h **** 
 369:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 370:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
 371:/usr/lib/avr/include/avr/power.h **** 
 372:/usr/lib/avr/include/avr/power.h **** #define power_ebi_enable()  (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 373:/usr/lib/avr/include/avr/power.h **** #define power_ebi_disable() (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 374:/usr/lib/avr/include/avr/power.h **** 
 375:/usr/lib/avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 376:/usr/lib/avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 377:/usr/lib/avr/include/avr/power.h **** 
 378:/usr/lib/avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 379:/usr/lib/avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 380:/usr/lib/avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 381:/usr/lib/avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 382:/usr/lib/avr/include/avr/power.h **** 
 383:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
 384:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
 385:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
 386:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
 387:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
 388:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
 389:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
 390:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
 391:/usr/lib/avr/include/avr/power.h **** 
 392:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 393:/usr/lib/avr/include/avr/power.h **** do { \
 394:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 395:/usr/lib/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 396:/usr/lib/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 397:/usr/lib/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 398:/usr/lib/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 399:/usr/lib/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 400:/usr/lib/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 401:/usr/lib/avr/include/avr/power.h **** } while(0)
 402:/usr/lib/avr/include/avr/power.h **** 
 403:/usr/lib/avr/include/avr/power.h **** 
 404:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 405:/usr/lib/avr/include/avr/power.h **** do { \
 406:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 407:/usr/lib/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 408:/usr/lib/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 409:/usr/lib/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 410:/usr/lib/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 411:/usr/lib/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 412:/usr/lib/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 413:/usr/lib/avr/include/avr/power.h **** } while(0)
 414:/usr/lib/avr/include/avr/power.h **** #endif
 415:/usr/lib/avr/include/avr/power.h **** 
 416:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 417:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega16D4__) \
 418:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 419:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 420:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 421:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 422:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 423:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 424:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 425:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 426:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 427:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 428:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 429:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) \
 430:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 431:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 432:/usr/lib/avr/include/avr/power.h **** 
 433:/usr/lib/avr/include/avr/power.h **** 
 434:/usr/lib/avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 435:/usr/lib/avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 436:/usr/lib/avr/include/avr/power.h **** 
 437:/usr/lib/avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 438:/usr/lib/avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 439:/usr/lib/avr/include/avr/power.h **** 
 440:/usr/lib/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 441:/usr/lib/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 442:/usr/lib/avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 443:/usr/lib/avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 444:/usr/lib/avr/include/avr/power.h **** 
 445:/usr/lib/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 446:/usr/lib/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 447:/usr/lib/avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 448:/usr/lib/avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 449:/usr/lib/avr/include/avr/power.h **** 
 450:/usr/lib/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
 451:/usr/lib/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
 452:/usr/lib/avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
 453:/usr/lib/avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
 454:/usr/lib/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
 455:/usr/lib/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
 456:/usr/lib/avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
 457:/usr/lib/avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
 458:/usr/lib/avr/include/avr/power.h **** 
 459:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
 460:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
 461:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
 462:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
 463:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
 464:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
 465:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
 466:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
 467:/usr/lib/avr/include/avr/power.h **** 
 468:/usr/lib/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 469:/usr/lib/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 470:/usr/lib/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
 471:/usr/lib/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
 472:/usr/lib/avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
 473:/usr/lib/avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
 474:/usr/lib/avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
 475:/usr/lib/avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
 476:/usr/lib/avr/include/avr/power.h **** 
 477:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 478:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 479:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
 480:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
 481:/usr/lib/avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
 482:/usr/lib/avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
 483:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
 484:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
 485:/usr/lib/avr/include/avr/power.h **** 
 486:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
 487:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
 488:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
 489:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
 490:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
 491:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
 492:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
 493:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
 494:/usr/lib/avr/include/avr/power.h **** 
 495:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
 496:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
 497:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
 498:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
 499:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
 500:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
 501:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
 502:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
 503:/usr/lib/avr/include/avr/power.h **** 
 504:/usr/lib/avr/include/avr/power.h **** #endif
 505:/usr/lib/avr/include/avr/power.h **** 
 506:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16D4__) \
 507:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 508:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 509:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 510:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) 
 511:/usr/lib/avr/include/avr/power.h **** 
 512:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 513:/usr/lib/avr/include/avr/power.h **** do { \
 514:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
 515:/usr/lib/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 516:/usr/lib/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 517:/usr/lib/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 518:/usr/lib/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 519:/usr/lib/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 520:/usr/lib/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 521:/usr/lib/avr/include/avr/power.h **** } while(0)
 522:/usr/lib/avr/include/avr/power.h **** 
 523:/usr/lib/avr/include/avr/power.h **** 
 524:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 525:/usr/lib/avr/include/avr/power.h **** do { \
 526:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 527:/usr/lib/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 528:/usr/lib/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 529:/usr/lib/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|R_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 530:/usr/lib/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 531:/usr/lib/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 532:/usr/lib/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 533:/usr/lib/avr/include/avr/power.h **** } while(0)
 534:/usr/lib/avr/include/avr/power.h **** 
 535:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega640__) \
 536:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
 537:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
 538:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
 539:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) 
 540:/usr/lib/avr/include/avr/power.h **** 
 541:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 542:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 543:/usr/lib/avr/include/avr/power.h **** 
 544:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 545:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 546:/usr/lib/avr/include/avr/power.h **** 
 547:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 548:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 549:/usr/lib/avr/include/avr/power.h **** 
 550:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 551:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 552:/usr/lib/avr/include/avr/power.h **** 
 553:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 554:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 555:/usr/lib/avr/include/avr/power.h **** 
 556:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 557:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 558:/usr/lib/avr/include/avr/power.h **** 
 559:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 560:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 561:/usr/lib/avr/include/avr/power.h **** 
 562:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 563:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 564:/usr/lib/avr/include/avr/power.h **** 
 565:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 566:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 567:/usr/lib/avr/include/avr/power.h **** 
 568:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 569:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 570:/usr/lib/avr/include/avr/power.h **** 
 571:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 572:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 573:/usr/lib/avr/include/avr/power.h **** 
 574:/usr/lib/avr/include/avr/power.h **** #define power_usart2_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART2))
 575:/usr/lib/avr/include/avr/power.h **** #define power_usart2_disable()  (PRR1 |= (uint8_t)(1 << PRUSART2))
 576:/usr/lib/avr/include/avr/power.h **** 
 577:/usr/lib/avr/include/avr/power.h **** #define power_usart3_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART3))
 578:/usr/lib/avr/include/avr/power.h **** #define power_usart3_disable()  (PRR1 |= (uint8_t)(1 << PRUSART3))
 579:/usr/lib/avr/include/avr/power.h **** 
 580:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 581:/usr/lib/avr/include/avr/power.h **** do{ \
 582:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 583:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|
 584:/usr/lib/avr/include/avr/power.h **** }while(0)
 585:/usr/lib/avr/include/avr/power.h **** 
 586:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 587:/usr/lib/avr/include/avr/power.h **** do{ \
 588:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 589:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|(
 590:/usr/lib/avr/include/avr/power.h **** }while(0)
 591:/usr/lib/avr/include/avr/power.h **** 
 592:/usr/lib/avr/include/avr/power.h **** 
 593:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega128RFA1__)
 594:/usr/lib/avr/include/avr/power.h **** 
 595:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 596:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 597:/usr/lib/avr/include/avr/power.h **** 
 598:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 599:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 600:/usr/lib/avr/include/avr/power.h **** 
 601:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 602:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 603:/usr/lib/avr/include/avr/power.h **** 
 604:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 605:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 606:/usr/lib/avr/include/avr/power.h **** 
 607:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 608:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 609:/usr/lib/avr/include/avr/power.h **** 
 610:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 611:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 612:/usr/lib/avr/include/avr/power.h **** 
 613:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 614:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 615:/usr/lib/avr/include/avr/power.h **** 
 616:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 617:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 618:/usr/lib/avr/include/avr/power.h **** 
 619:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 620:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 621:/usr/lib/avr/include/avr/power.h **** 
 622:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib/avr/include/avr/power.h **** 
 625:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 626:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 627:/usr/lib/avr/include/avr/power.h **** 
 628:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 629:/usr/lib/avr/include/avr/power.h **** do{ \
 630:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 631:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 632:/usr/lib/avr/include/avr/power.h **** }while(0)
 633:/usr/lib/avr/include/avr/power.h **** 
 634:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 635:/usr/lib/avr/include/avr/power.h **** do{ \
 636:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 637:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 638:/usr/lib/avr/include/avr/power.h **** }while(0)
 639:/usr/lib/avr/include/avr/power.h **** 
 640:/usr/lib/avr/include/avr/power.h **** 
 641:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90USB646__) \
 642:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
 643:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
 644:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__)
 645:/usr/lib/avr/include/avr/power.h **** 
 646:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 647:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 648:/usr/lib/avr/include/avr/power.h **** 
 649:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 650:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 651:/usr/lib/avr/include/avr/power.h **** 
 652:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 653:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 654:/usr/lib/avr/include/avr/power.h **** 
 655:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 656:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 657:/usr/lib/avr/include/avr/power.h **** 
 658:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 659:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 660:/usr/lib/avr/include/avr/power.h **** 
 661:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 662:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 663:/usr/lib/avr/include/avr/power.h **** 
 664:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 665:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 666:/usr/lib/avr/include/avr/power.h **** 
 667:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 668:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 669:/usr/lib/avr/include/avr/power.h **** 
 670:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 671:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 672:/usr/lib/avr/include/avr/power.h **** 
 673:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 674:/usr/lib/avr/include/avr/power.h **** do{ \
 675:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 676:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 677:/usr/lib/avr/include/avr/power.h **** }while(0)
 678:/usr/lib/avr/include/avr/power.h **** 
 679:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 680:/usr/lib/avr/include/avr/power.h **** do{ \
 681:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 682:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 683:/usr/lib/avr/include/avr/power.h **** }while(0)
 684:/usr/lib/avr/include/avr/power.h **** 
 685:/usr/lib/avr/include/avr/power.h **** 
 686:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U4__) \
 687:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__)
 688:/usr/lib/avr/include/avr/power.h **** 
 689:/usr/lib/avr/include/avr/power.h **** 
 690:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 691:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 692:/usr/lib/avr/include/avr/power.h **** 
 693:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 694:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 695:/usr/lib/avr/include/avr/power.h **** 
 696:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 697:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 698:/usr/lib/avr/include/avr/power.h **** 
 699:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 700:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 701:/usr/lib/avr/include/avr/power.h **** 
 702:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 703:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 704:/usr/lib/avr/include/avr/power.h **** 
 705:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 706:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 707:/usr/lib/avr/include/avr/power.h **** 
 708:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 709:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 710:/usr/lib/avr/include/avr/power.h **** 
 711:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 712:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 713:/usr/lib/avr/include/avr/power.h **** 
 714:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 715:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 716:/usr/lib/avr/include/avr/power.h **** 
 717:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 718:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 719:/usr/lib/avr/include/avr/power.h **** 
 720:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 721:/usr/lib/avr/include/avr/power.h **** do{ \
 722:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<P
 723:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 724:/usr/lib/avr/include/avr/power.h **** }while(0)
 725:/usr/lib/avr/include/avr/power.h **** 
 726:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 727:/usr/lib/avr/include/avr/power.h **** do{ \
 728:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PR
 729:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 730:/usr/lib/avr/include/avr/power.h **** }while(0)
 731:/usr/lib/avr/include/avr/power.h **** 
 732:/usr/lib/avr/include/avr/power.h **** 
 733:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U6__)
 734:/usr/lib/avr/include/avr/power.h **** 
 735:/usr/lib/avr/include/avr/power.h **** 
 736:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 737:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 738:/usr/lib/avr/include/avr/power.h **** 
 739:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 740:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 741:/usr/lib/avr/include/avr/power.h **** 
 742:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 743:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 744:/usr/lib/avr/include/avr/power.h **** 
 745:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 746:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 747:/usr/lib/avr/include/avr/power.h **** 
 748:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 749:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 750:/usr/lib/avr/include/avr/power.h **** 
 751:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 752:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 753:/usr/lib/avr/include/avr/power.h **** 
 754:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 755:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 756:/usr/lib/avr/include/avr/power.h **** 
 757:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 758:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 759:/usr/lib/avr/include/avr/power.h **** 
 760:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 761:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 762:/usr/lib/avr/include/avr/power.h **** 
 763:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 764:/usr/lib/avr/include/avr/power.h **** do{ \
 765:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 766:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 767:/usr/lib/avr/include/avr/power.h **** }while(0)
 768:/usr/lib/avr/include/avr/power.h **** 
 769:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 770:/usr/lib/avr/include/avr/power.h **** do{ \
 771:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 772:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 773:/usr/lib/avr/include/avr/power.h **** }while(0)
 774:/usr/lib/avr/include/avr/power.h **** 
 775:/usr/lib/avr/include/avr/power.h **** 
 776:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM1__)
 777:/usr/lib/avr/include/avr/power.h **** 
 778:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 779:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 780:/usr/lib/avr/include/avr/power.h **** 
 781:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 782:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 783:/usr/lib/avr/include/avr/power.h **** 
 784:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 785:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 786:/usr/lib/avr/include/avr/power.h **** 
 787:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 788:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 789:/usr/lib/avr/include/avr/power.h **** 
 790:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 0 */
 791:/usr/lib/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 792:/usr/lib/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 793:/usr/lib/avr/include/avr/power.h **** 
 794:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 1 */
 795:/usr/lib/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 796:/usr/lib/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 797:/usr/lib/avr/include/avr/power.h **** 
 798:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 2 */
 799:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 800:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 801:/usr/lib/avr/include/avr/power.h **** 
 802:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
 803:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
 804:/usr/lib/avr/include/avr/power.h **** 
 805:/usr/lib/avr/include/avr/power.h **** 
 806:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM2__) \
 807:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
 808:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
 809:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
 810:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
 811:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__)
 812:/usr/lib/avr/include/avr/power.h **** 
 813:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 814:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 815:/usr/lib/avr/include/avr/power.h **** 
 816:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 817:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 818:/usr/lib/avr/include/avr/power.h **** 
 819:/usr/lib/avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 820:/usr/lib/avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 821:/usr/lib/avr/include/avr/power.h **** 
 822:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 823:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 824:/usr/lib/avr/include/avr/power.h **** 
 825:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 826:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 827:/usr/lib/avr/include/avr/power.h **** 
 828:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 0 */
 829:/usr/lib/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 830:/usr/lib/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 831:/usr/lib/avr/include/avr/power.h **** 
 832:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 1 */
 833:/usr/lib/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 834:/usr/lib/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 835:/usr/lib/avr/include/avr/power.h **** 
 836:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 2 */
 837:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 838:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 839:/usr/lib/avr/include/avr/power.h **** 
 840:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(
 841:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(1
 842:/usr/lib/avr/include/avr/power.h **** 
 843:/usr/lib/avr/include/avr/power.h **** 
 844:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM81__)
 845:/usr/lib/avr/include/avr/power.h **** 
 846:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 847:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 848:/usr/lib/avr/include/avr/power.h **** 
 849:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 850:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 851:/usr/lib/avr/include/avr/power.h **** 
 852:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 853:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 854:/usr/lib/avr/include/avr/power.h **** 
 855:/usr/lib/avr/include/avr/power.h **** /* Reduced Power Stage Controller */
 856:/usr/lib/avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 857:/usr/lib/avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 858:/usr/lib/avr/include/avr/power.h **** 
 859:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 2 */
 860:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 861:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 862:/usr/lib/avr/include/avr/power.h **** 
 863:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1
 864:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1<
 865:/usr/lib/avr/include/avr/power.h **** 
 866:/usr/lib/avr/include/avr/power.h **** 
 867:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega165__) \
 868:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
 869:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
 870:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
 871:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
 872:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
 873:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
 874:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
 875:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
 876:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
 877:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
 878:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
 879:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__)
 880:/usr/lib/avr/include/avr/power.h **** 
 881:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 882:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 883:/usr/lib/avr/include/avr/power.h **** 
 884:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 885:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 886:/usr/lib/avr/include/avr/power.h **** 
 887:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 888:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 889:/usr/lib/avr/include/avr/power.h **** 
 890:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 891:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 892:/usr/lib/avr/include/avr/power.h **** 
 893:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1))
 894:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)))
 895:/usr/lib/avr/include/avr/power.h **** 
 896:/usr/lib/avr/include/avr/power.h **** 
 897:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega169__) \
 898:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
 899:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
 900:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
 901:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
 902:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
 903:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
 904:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
 905:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
 906:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
 907:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
 908:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
 909:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
 910:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
 911:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
 912:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
 913:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__)
 914:/usr/lib/avr/include/avr/power.h **** 
 915:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 916:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 917:/usr/lib/avr/include/avr/power.h **** 
 918:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 919:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 920:/usr/lib/avr/include/avr/power.h **** 
 921:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 922:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 923:/usr/lib/avr/include/avr/power.h **** 
 924:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 925:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 926:/usr/lib/avr/include/avr/power.h **** 
 927:/usr/lib/avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 928:/usr/lib/avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 929:/usr/lib/avr/include/avr/power.h **** 
 930:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|
 931:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|(
 932:/usr/lib/avr/include/avr/power.h **** 
 933:/usr/lib/avr/include/avr/power.h **** 
 934:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega164A__) \
 935:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
 936:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
 937:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
 938:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
 939:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
 940:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
 941:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__)
 942:/usr/lib/avr/include/avr/power.h **** 
 943:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 944:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 945:/usr/lib/avr/include/avr/power.h **** 
 946:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 947:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 948:/usr/lib/avr/include/avr/power.h **** 
 949:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 950:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 951:/usr/lib/avr/include/avr/power.h **** 
 952:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
 953:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
 954:/usr/lib/avr/include/avr/power.h **** 
 955:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 956:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 957:/usr/lib/avr/include/avr/power.h **** 
 958:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 959:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 960:/usr/lib/avr/include/avr/power.h **** 
 961:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 962:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 963:/usr/lib/avr/include/avr/power.h **** 
 964:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 965:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 966:/usr/lib/avr/include/avr/power.h **** 
 967:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART
 968:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART1
 969:/usr/lib/avr/include/avr/power.h **** 
 970:/usr/lib/avr/include/avr/power.h **** 
 971:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega644__)
 972:/usr/lib/avr/include/avr/power.h **** 
 973:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 974:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 975:/usr/lib/avr/include/avr/power.h **** 
 976:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 977:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 978:/usr/lib/avr/include/avr/power.h **** 
 979:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 980:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 981:/usr/lib/avr/include/avr/power.h **** 
 982:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 983:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 984:/usr/lib/avr/include/avr/power.h **** 
 985:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 986:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 987:/usr/lib/avr/include/avr/power.h **** 
 988:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 989:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 990:/usr/lib/avr/include/avr/power.h **** 
 991:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 992:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 993:/usr/lib/avr/include/avr/power.h **** 
 994:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)
 995:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
 996:/usr/lib/avr/include/avr/power.h **** 
 997:/usr/lib/avr/include/avr/power.h **** 
 998:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega406__)
 999:/usr/lib/avr/include/avr/power.h **** 
1000:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1001:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1002:/usr/lib/avr/include/avr/power.h **** 
1003:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1004:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1005:/usr/lib/avr/include/avr/power.h **** 
1006:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1007:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1008:/usr/lib/avr/include/avr/power.h **** 
1009:/usr/lib/avr/include/avr/power.h **** /* Voltage ADC */
1010:/usr/lib/avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1011:/usr/lib/avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1012:/usr/lib/avr/include/avr/power.h **** 
1013:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC))
1014:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)))
1015:/usr/lib/avr/include/avr/power.h **** 
1016:/usr/lib/avr/include/avr/power.h **** 
1017:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega48__) \
1018:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1019:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1020:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1021:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1022:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1023:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1024:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1025:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1026:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1027:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1028:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1029:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1030:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny88__)
1031:/usr/lib/avr/include/avr/power.h **** 
1032:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1033:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1034:/usr/lib/avr/include/avr/power.h **** 
1035:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1036:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1037:/usr/lib/avr/include/avr/power.h **** 
1038:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
1039:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
1040:/usr/lib/avr/include/avr/power.h **** 
1041:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1042:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1043:/usr/lib/avr/include/avr/power.h **** 
1044:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1045:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1046:/usr/lib/avr/include/avr/power.h **** 
1047:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
1048:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
1049:/usr/lib/avr/include/avr/power.h **** 
1050:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
1051:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
1052:/usr/lib/avr/include/avr/power.h **** 
1053:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
1054:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
1055:/usr/lib/avr/include/avr/power.h **** 
1056:/usr/lib/avr/include/avr/power.h **** 
1057:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny24__) \
1058:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny24A__) \
1059:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny44__) \
1060:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny44A__) \
1061:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny84__) \
1062:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny84A__) \
1063:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny25__) \
1064:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny45__) \
1065:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny85__) \
1066:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny261__) \
1067:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny261A__) \
1068:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny461__) \
1069:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny461A__) \
1070:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny861__) \
1071:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny861A__) \
1072:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny43U__)
1073:/usr/lib/avr/include/avr/power.h **** 
1074:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1075:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1076:/usr/lib/avr/include/avr/power.h **** 
1077:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1078:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1079:/usr/lib/avr/include/avr/power.h **** 
1080:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1081:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1082:/usr/lib/avr/include/avr/power.h **** 
1083:/usr/lib/avr/include/avr/power.h **** /* Universal Serial Interface */
1084:/usr/lib/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1085:/usr/lib/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1086:/usr/lib/avr/include/avr/power.h **** 
1087:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1088:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1089:/usr/lib/avr/include/avr/power.h **** 
1090:/usr/lib/avr/include/avr/power.h **** 
1091:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284P__)
1092:/usr/lib/avr/include/avr/power.h **** 
1093:/usr/lib/avr/include/avr/power.h **** 
1094:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1095:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1096:/usr/lib/avr/include/avr/power.h **** 
1097:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1098:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1099:/usr/lib/avr/include/avr/power.h **** 
1100:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1101:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1102:/usr/lib/avr/include/avr/power.h **** 
1103:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1104:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1105:/usr/lib/avr/include/avr/power.h **** 
1106:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1107:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1108:/usr/lib/avr/include/avr/power.h **** 
1109:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1110:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1111:/usr/lib/avr/include/avr/power.h **** 
1112:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1113:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1114:/usr/lib/avr/include/avr/power.h **** 
1115:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1116:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1117:/usr/lib/avr/include/avr/power.h **** 
1118:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
1119:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
1120:/usr/lib/avr/include/avr/power.h **** 
1121:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
1122:/usr/lib/avr/include/avr/power.h **** do{ \
1123:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1124:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
1125:/usr/lib/avr/include/avr/power.h **** }while(0)
1126:/usr/lib/avr/include/avr/power.h **** 
1127:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
1128:/usr/lib/avr/include/avr/power.h **** do{ \
1129:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1130:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
1131:/usr/lib/avr/include/avr/power.h **** }while(0)
1132:/usr/lib/avr/include/avr/power.h **** 
1133:/usr/lib/avr/include/avr/power.h **** 
1134:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32HVB__) \
1135:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1136:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1137:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__)
1138:/usr/lib/avr/include/avr/power.h **** 
1139:/usr/lib/avr/include/avr/power.h **** 
1140:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1141:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1142:/usr/lib/avr/include/avr/power.h **** 
1143:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1144:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1145:/usr/lib/avr/include/avr/power.h **** 
1146:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1147:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1148:/usr/lib/avr/include/avr/power.h **** 
1149:/usr/lib/avr/include/avr/power.h **** /* Voltage ADC */
1150:/usr/lib/avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1151:/usr/lib/avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1152:/usr/lib/avr/include/avr/power.h **** 
1153:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1154:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1155:/usr/lib/avr/include/avr/power.h **** 
1156:/usr/lib/avr/include/avr/power.h **** #define power_vrm_enable()      (PRR0 &= (uint8_t)~(1 << PRVRM))
1157:/usr/lib/avr/include/avr/power.h **** #define power_vrm_disable()     (PRR0 |= (uint8_t)(1 << PRVRM))
1158:/usr/lib/avr/include/avr/power.h **** 
1159:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|
1160:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|(
1161:/usr/lib/avr/include/avr/power.h **** 
1162:/usr/lib/avr/include/avr/power.h **** 
1163:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega16M1__) \
1164:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1165:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1166:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1167:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__)
1168:/usr/lib/avr/include/avr/power.h **** 
1169:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1170:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1171:/usr/lib/avr/include/avr/power.h **** 
1172:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1173:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1174:/usr/lib/avr/include/avr/power.h **** 
1175:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1176:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1177:/usr/lib/avr/include/avr/power.h **** 
1178:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1179:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1180:/usr/lib/avr/include/avr/power.h **** 
1181:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1182:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1183:/usr/lib/avr/include/avr/power.h **** 
1184:/usr/lib/avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
1185:/usr/lib/avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
1186:/usr/lib/avr/include/avr/power.h **** 
1187:/usr/lib/avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
1188:/usr/lib/avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
1189:/usr/lib/avr/include/avr/power.h **** 
1190:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<
1191:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<
1192:/usr/lib/avr/include/avr/power.h **** 
1193:/usr/lib/avr/include/avr/power.h **** 
1194:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny167__) \
1195:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny87__)
1196:/usr/lib/avr/include/avr/power.h **** 
1197:/usr/lib/avr/include/avr/power.h **** 
1198:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1199:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1200:/usr/lib/avr/include/avr/power.h **** 
1201:/usr/lib/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1202:/usr/lib/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1203:/usr/lib/avr/include/avr/power.h **** 
1204:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1205:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1206:/usr/lib/avr/include/avr/power.h **** 
1207:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1208:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1209:/usr/lib/avr/include/avr/power.h **** 
1210:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1211:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1212:/usr/lib/avr/include/avr/power.h **** 
1213:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1214:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1215:/usr/lib/avr/include/avr/power.h **** 
1216:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
1217:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
1218:/usr/lib/avr/include/avr/power.h **** 
1219:/usr/lib/avr/include/avr/power.h **** 
1220:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90USB82__) \
1221:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1222:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1223:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1224:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__)
1225:/usr/lib/avr/include/avr/power.h **** 
1226:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1227:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1228:/usr/lib/avr/include/avr/power.h **** 
1229:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1230:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1231:/usr/lib/avr/include/avr/power.h **** 
1232:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1233:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1234:/usr/lib/avr/include/avr/power.h **** 
1235:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1236:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1237:/usr/lib/avr/include/avr/power.h **** 
1238:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1239:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1240:/usr/lib/avr/include/avr/power.h **** 
1241:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
1242:/usr/lib/avr/include/avr/power.h **** do{ \
1243:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1244:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSB)|(1<<PRUSART1)); \
1245:/usr/lib/avr/include/avr/power.h **** }while(0)
1246:/usr/lib/avr/include/avr/power.h **** 
1247:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
1248:/usr/lib/avr/include/avr/power.h **** do{ \
1249:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1250:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSB)|(1<<PRUSART1)); \
1251:/usr/lib/avr/include/avr/power.h **** }while(0)
1252:/usr/lib/avr/include/avr/power.h **** 
1253:/usr/lib/avr/include/avr/power.h **** 
1254:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90SCR100__)
1255:/usr/lib/avr/include/avr/power.h **** 
1256:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1257:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1258:/usr/lib/avr/include/avr/power.h **** 
1259:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1260:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1261:/usr/lib/avr/include/avr/power.h **** 
1262:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1263:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1264:/usr/lib/avr/include/avr/power.h **** 
1265:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1266:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1267:/usr/lib/avr/include/avr/power.h **** 
1268:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1269:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1270:/usr/lib/avr/include/avr/power.h **** 
1271:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1272:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1273:/usr/lib/avr/include/avr/power.h **** 
1274:/usr/lib/avr/include/avr/power.h **** #define power_usbh_enable()     (PRR1 &= (uint8_t)~(1 << PRUSBH))
1275:/usr/lib/avr/include/avr/power.h **** #define power_usbh_disable()    (PRR1 |= (uint8_t)(1 << PRUSBH))
1276:/usr/lib/avr/include/avr/power.h **** 
1277:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1278:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1279:/usr/lib/avr/include/avr/power.h **** 
1280:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_enable()    (PRR1 &= (uint8_t)~(1 << PRHSSPI))
1281:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_disable()   (PRR1 |= (uint8_t)(1 << PRHSSPI))
1282:/usr/lib/avr/include/avr/power.h **** 
1283:/usr/lib/avr/include/avr/power.h **** #define power_sci_enable()      (PRR1 &= (uint8_t)~(1 << PRSCI))
1284:/usr/lib/avr/include/avr/power.h **** #define power_sci_disable()     (PRR1 |= (uint8_t)(1 << PRSCI))
1285:/usr/lib/avr/include/avr/power.h **** 
1286:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()      (PRR1 &= (uint8_t)~(1 << PRAES))
1287:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable()     (PRR1 |= (uint8_t)(1 << PRAES))
1288:/usr/lib/avr/include/avr/power.h **** 
1289:/usr/lib/avr/include/avr/power.h **** #define power_kb_enable()       (PRR1 &= (uint8_t)~(1 << PRKB))
1290:/usr/lib/avr/include/avr/power.h **** #define power_kb_disable()      (PRR1 |= (uint8_t)(1 << PRKB))
1291:/usr/lib/avr/include/avr/power.h **** 
1292:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
1293:/usr/lib/avr/include/avr/power.h **** do{ \
1294:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1295:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1296:/usr/lib/avr/include/avr/power.h **** }while(0)
1297:/usr/lib/avr/include/avr/power.h **** 
1298:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
1299:/usr/lib/avr/include/avr/power.h **** do{ \
1300:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1301:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1302:/usr/lib/avr/include/avr/power.h **** }while(0)
1303:/usr/lib/avr/include/avr/power.h **** 
1304:/usr/lib/avr/include/avr/power.h **** 
1305:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny4__) \
1306:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny5__) \
1307:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny9__) \
1308:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny10__) \
1309:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny13A__) \
1310:/usr/lib/avr/include/avr/power.h **** 
1311:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1312:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1313:/usr/lib/avr/include/avr/power.h **** 
1314:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1315:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1316:/usr/lib/avr/include/avr/power.h **** 
1317:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)))
1318:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)))
1319:/usr/lib/avr/include/avr/power.h **** 
1320:/usr/lib/avr/include/avr/power.h **** 
1321:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny20__) \
1322:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny40__)
1323:/usr/lib/avr/include/avr/power.h **** 
1324:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1325:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1326:/usr/lib/avr/include/avr/power.h **** 
1327:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1328:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1329:/usr/lib/avr/include/avr/power.h **** 
1330:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1331:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1332:/usr/lib/avr/include/avr/power.h **** 
1333:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()   (PRR &= (uint8_t)~(1 << PRSPI))
1334:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()  (PRR |= (uint8_t)(1 << PRSPI))
1335:/usr/lib/avr/include/avr/power.h **** 
1336:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()   (PRR &= (uint8_t)~(1 << PRTWI))
1337:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()  (PRR |= (uint8_t)(1 << PRTWI))
1338:/usr/lib/avr/include/avr/power.h **** 
1339:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1
1340:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1<
1341:/usr/lib/avr/include/avr/power.h **** 
1342:/usr/lib/avr/include/avr/power.h **** #endif
1343:/usr/lib/avr/include/avr/power.h **** 
1344:/usr/lib/avr/include/avr/power.h **** 
1345:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1346:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1347:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1348:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1349:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1350:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1351:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1352:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1353:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1354:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1355:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1356:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1357:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1358:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1359:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1360:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1361:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1362:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1363:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1364:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1365:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1366:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1367:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1368:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1369:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1370:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1371:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1372:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1373:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1374:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1375:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1376:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1377:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1378:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1379:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1380:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1381:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1382:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1383:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1384:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1385:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1386:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1387:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1388:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1389:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1390:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1391:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1392:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1393:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1394:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1395:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1396:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32HVB__) \
1397:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1398:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1399:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__) \
1400:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1401:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1402:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1403:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1404:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1405:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1406:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1407:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1408:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1409:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1410:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1411:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1412:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1413:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1414:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1415:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1416:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1417:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1418:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1419:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1420:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1421:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1422:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1423:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1424:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1425:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1426:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1427:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1428:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1429:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1430:/usr/lib/avr/include/avr/power.h **** || defined(__DOXYGEN__)
1431:/usr/lib/avr/include/avr/power.h **** 
1432:/usr/lib/avr/include/avr/power.h **** 
1433:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1434:/usr/lib/avr/include/avr/power.h **** 
1435:/usr/lib/avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1436:/usr/lib/avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1437:/usr/lib/avr/include/avr/power.h **** when the need for processing power is low. Below are two macros and an
1438:/usr/lib/avr/include/avr/power.h **** enumerated type that can be used to interface to the Clock Prescale Register.
1439:/usr/lib/avr/include/avr/power.h **** 
1440:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a Clock Prescale Register. On those devices
1441:/usr/lib/avr/include/avr/power.h **** without a Clock Prescale Register, these macros are not available.
1442:/usr/lib/avr/include/avr/power.h **** */
1443:/usr/lib/avr/include/avr/power.h **** 
1444:/usr/lib/avr/include/avr/power.h **** 
1445:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1446:/usr/lib/avr/include/avr/power.h **** \code 
1447:/usr/lib/avr/include/avr/power.h **** typedef enum
1448:/usr/lib/avr/include/avr/power.h **** {
1449:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1450:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1451:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1452:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1453:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1454:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1455:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1456:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1457:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8,
1458:/usr/lib/avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1459:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1460:/usr/lib/avr/include/avr/power.h **** \endcode
1461:/usr/lib/avr/include/avr/power.h **** Clock prescaler setting enumerations.
1462:/usr/lib/avr/include/avr/power.h **** 
1463:/usr/lib/avr/include/avr/power.h **** */
1464:/usr/lib/avr/include/avr/power.h **** typedef enum
1465:/usr/lib/avr/include/avr/power.h **** {
1466:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1467:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1468:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1469:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1470:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1471:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1472:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1473:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1474:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8
1475:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__)
1476:/usr/lib/avr/include/avr/power.h ****     , clock_div_1_rc = 15
1477:/usr/lib/avr/include/avr/power.h **** #endif
1478:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1479:/usr/lib/avr/include/avr/power.h **** 
1480:/usr/lib/avr/include/avr/power.h **** 
1481:/usr/lib/avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1482:/usr/lib/avr/include/avr/power.h **** 
1483:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1484:/usr/lib/avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1485:/usr/lib/avr/include/avr/power.h **** 
1486:/usr/lib/avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1487:/usr/lib/avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1488:/usr/lib/avr/include/avr/power.h **** optimizations are disabled.
1489:/usr/lib/avr/include/avr/power.h **** 
1490:/usr/lib/avr/include/avr/power.h **** The type of x is clock_div_t.
1491:/usr/lib/avr/include/avr/power.h **** */
1492:/usr/lib/avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1493:/usr/lib/avr/include/avr/power.h **** {
1494:/usr/lib/avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1495:/usr/lib/avr/include/avr/power.h ****     __asm__ __volatile__ (
 1097               		.loc 4 1495 0
 1098 0016 90E0      		ldi r25,0
 1099 0018 80E8      		ldi r24,lo8(-128)
 1100               	/* #APP */
 1101               	 ;  1495 "/usr/lib/avr/include/avr/power.h" 1
 1102 001a 0FB6      		in __tmp_reg__,__SREG__
 1103 001c F894      		cli
 1104 001e 8093 6100 		sts 97, r24
 1105 0022 9093 6100 		sts 97, r25
 1106 0026 0FBE      		out __SREG__, __tmp_reg__
 1107               	 ;  0 "" 2
 1108               	/* #NOAPP */
 1109               	.LBE286:
 1110               	.LBE285:
 528:../../protocol/lufa/lufa.c ****     USB_Disable();
 1111               		.loc 1 528 0
 1112 0028 0E94 0000 		call USB_Disable
 1113               	.LVL73:
 530:../../protocol/lufa/lufa.c ****     USB_Init();
 1114               		.loc 1 530 0
 1115 002c 0E94 0000 		call USB_Init
 1116               	.LVL74:
 1117               	.LBB287:
 1118               	.LBB288:
 1119               	.LBB289:
 1120               		.file 5 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2012.
   4:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 1121               		.loc 5 113 0
 1122 0030 8091 E200 		lds r24,226
 1123 0034 8460      		ori r24,lo8(4)
 1124 0036 8093 E200 		sts 226,r24
 1125               	.LBE289:
 1126               	.LBE288:
 1127               	.LBE287:
 534:../../protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
 1128               		.loc 1 534 0
 1129 003a 80E0      		ldi r24,lo8(gs(sendchar))
 1130 003c 90E0      		ldi r25,hi8(gs(sendchar))
 1131 003e 0E94 0000 		call print_set_sendchar
 1132               	.LVL75:
 1133               	.LBE284:
 1134               	.LBE283:
 540:../../protocol/lufa/lufa.c ****     SetupHardware();
 541:../../protocol/lufa/lufa.c ****     sei();
 1135               		.loc 1 541 0
 1136               	/* #APP */
 1137               	 ;  541 "../../protocol/lufa/lufa.c" 1
 1138 0042 7894      		sei
 1139               	 ;  0 "" 2
 1140               	/* #NOAPP */
 1141               	.L117:
 542:../../protocol/lufa/lufa.c **** 
 543:../../protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
 544:../../protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
 1142               		.loc 1 544 0 discriminator 1
 1143 0044 8091 0000 		lds r24,USB_DeviceState
 1144 0048 8430      		cpi r24,lo8(4)
 1145 004a 01F4      		brne .L117
 545:../../protocol/lufa/lufa.c **** #if defined(INTERRUPT_CONTROL_ENDPOINT)
 546:../../protocol/lufa/lufa.c ****         ;
 547:../../protocol/lufa/lufa.c **** #else
 548:../../protocol/lufa/lufa.c ****         USB_USBTask();
 549:../../protocol/lufa/lufa.c **** #endif
 550:../../protocol/lufa/lufa.c ****     }
 551:../../protocol/lufa/lufa.c ****     print("USB configured.\n");
 1146               		.loc 1 551 0
 1147 004c 80E0      		ldi r24,lo8(__c.4677)
 1148 004e 90E0      		ldi r25,hi8(__c.4677)
 1149 0050 0E94 0000 		call xputs
 1150               	.LVL76:
 552:../../protocol/lufa/lufa.c **** 
 553:../../protocol/lufa/lufa.c ****     /* init modules */
 554:../../protocol/lufa/lufa.c ****     keyboard_init();
 1151               		.loc 1 554 0
 1152 0054 0E94 0000 		call keyboard_init
 1153               	.LVL77:
 555:../../protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1154               		.loc 1 555 0
 1155 0058 80E0      		ldi r24,lo8(lufa_driver)
 1156 005a 90E0      		ldi r25,hi8(lufa_driver)
 1157 005c 0E94 0000 		call host_set_driver
 1158               	.LVL78:
 556:../../protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 557:../../protocol/lufa/lufa.c ****     sleep_led_init();
 558:../../protocol/lufa/lufa.c **** #endif
 559:../../protocol/lufa/lufa.c **** 
 560:../../protocol/lufa/lufa.c ****     print("Keyboard start.\n");
 1159               		.loc 1 560 0
 1160 0060 80E0      		ldi r24,lo8(__c.4679)
 1161 0062 90E0      		ldi r25,hi8(__c.4679)
 1162 0064 0E94 0000 		call xputs
 1163               	.LVL79:
 1164               	.L118:
 561:../../protocol/lufa/lufa.c ****     while (1) {
 562:../../protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1165               		.loc 1 562 0 discriminator 1
 1166 0068 8091 0000 		lds r24,USB_DeviceState
 1167 006c 8530      		cpi r24,lo8(5)
 1168 006e 01F4      		brne .L126
 563:../../protocol/lufa/lufa.c ****             suspend_power_down();
 1169               		.loc 1 563 0
 1170 0070 0E94 0000 		call suspend_power_down
 1171               	.LVL80:
 564:../../protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1172               		.loc 1 564 0
 1173 0074 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1174 0078 8823      		tst r24
 1175 007a 01F0      		breq .L118
 1176               		.loc 1 564 0 is_stmt 0 discriminator 1
 1177 007c 0E94 0000 		call suspend_wakeup_condition
 1178               	.LVL81:
 1179 0080 8823      		tst r24
 1180 0082 01F0      		breq .L118
 565:../../protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1181               		.loc 1 565 0 is_stmt 1
 1182 0084 0E94 0000 		call USB_Device_SendRemoteWakeup
 1183               	.LVL82:
 1184 0088 00C0      		rjmp .L118
 1185               	.L126:
 566:../../protocol/lufa/lufa.c ****             }
 567:../../protocol/lufa/lufa.c ****         }
 568:../../protocol/lufa/lufa.c **** 
 569:../../protocol/lufa/lufa.c ****         keyboard_task();
 1186               		.loc 1 569 0
 1187 008a 0E94 0000 		call keyboard_task
 1188               	.LVL83:
 570:../../protocol/lufa/lufa.c **** 
 571:../../protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
 572:../../protocol/lufa/lufa.c ****         USB_USBTask();
 573:../../protocol/lufa/lufa.c **** #endif
 574:../../protocol/lufa/lufa.c ****     }
 1189               		.loc 1 574 0
 1190 008e 00C0      		rjmp .L118
 1191               		.cfi_endproc
 1192               	.LFE119:
 1194               		.section	.progmem.data,"a",@progbits
 1197               	__c.4679:
 1198 0000 4B65 7962 		.string	"Keyboard start.\n"
 1198      6F61 7264 
 1198      2073 7461 
 1198      7274 2E0A 
 1198      00
 1201               	__c.4677:
 1202 0011 5553 4220 		.string	"USB configured.\n"
 1202      636F 6E66 
 1202      6967 7572 
 1202      6564 2E0A 
 1202      00
 1203               		.local	timeouted.4657
 1204               		.comm	timeouted.4657,1,1
 1205               	.global	lufa_driver
 1206               		.data
 1209               	lufa_driver:
 1210 0000 0000      		.word	gs(keyboard_leds)
 1211 0002 0000      		.word	gs(send_keyboard)
 1212 0004 0000      		.word	gs(send_mouse)
 1213 0006 0000      		.word	gs(send_system)
 1214 0008 0000      		.word	gs(send_consumer)
 1215               		.local	keyboard_report_sent
 1216               		.comm	keyboard_report_sent,16,1
 1217               		.local	keyboard_led_stats
 1218               		.comm	keyboard_led_stats,1,1
 1221               	protocol_report:
 1222 000a 01        		.byte	1
 1223               		.local	idle_duration
 1224               		.comm	idle_duration,1,1
 1225               		.comm	debug_config,1,1
 1226               		.text
 1227               	.Letext0:
 1228               		.file 6 "/usr/lib/avr/include/stdint.h"
 1229               		.file 7 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1230               		.file 8 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1231               		.file 9 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 1232               		.file 10 "../../common/report.h"
 1233               		.file 11 "../../common/host_driver.h"
 1234               		.file 12 "../../common/debug_config.h"
 1235               		.file 13 "../../protocol/lufa/lufa.h"
 1236               		.file 14 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1237               		.file 15 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 1238               		.file 16 "../../common/host.h"
 1239               		.file 17 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h
 1240               		.file 18 "../../common/suspend.h"
 1241               		.file 19 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1242               		.file 20 "../../common/print.h"
 1243               		.file 21 "../../common/xprintf.h"
 1244               		.file 22 "../../common/keyboard.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
     /tmp/ccb8mxlE.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccb8mxlE.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccb8mxlE.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccb8mxlE.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccb8mxlE.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccb8mxlE.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
     /tmp/ccb8mxlE.s:1216   .bss:0000000000000011 keyboard_led_stats
     /tmp/ccb8mxlE.s:29     .text.send_mouse:0000000000000000 send_mouse
     /tmp/ccb8mxlE.s:45     .text.sendchar:0000000000000000 sendchar
                             .bss:0000000000000000 timeouted.4657
     /tmp/ccb8mxlE.s:258    .text.send_consumer:0000000000000000 send_consumer
     /tmp/ccb8mxlE.s:354    .text.send_system:0000000000000000 send_system
     /tmp/ccb8mxlE.s:450    .text.send_keyboard:0000000000000000 send_keyboard
     /tmp/ccb8mxlE.s:1204   .bss:0000000000000001 keyboard_report_sent
     /tmp/ccb8mxlE.s:558    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/ccb8mxlE.s:573    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/ccb8mxlE.s:588    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
     /tmp/ccb8mxlE.s:603    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
     /tmp/ccb8mxlE.s:618    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
     /tmp/ccb8mxlE.s:635    .text.EVENT_USB_Device_StartOfFrame:0000000000000000 EVENT_USB_Device_StartOfFrame
     /tmp/ccb8mxlE.s:755    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccb8mxlE.s:807    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/ccb8mxlE.s:1221   .data:000000000000000a protocol_report
     /tmp/ccb8mxlE.s:1218   .bss:0000000000000012 idle_duration
     /tmp/ccb8mxlE.s:1067   .text.startup.main:0000000000000000 main
     /tmp/ccb8mxlE.s:1201   .progmem.data:0000000000000011 __c.4677
     /tmp/ccb8mxlE.s:1209   .data:0000000000000000 lufa_driver
     /tmp/ccb8mxlE.s:1197   .progmem.data:0000000000000000 __c.4679
                            *COM*:0000000000000001 debug_config

UNDEFINED SYMBOLS
USB_DeviceState
Endpoint_Write_Stream_LE
keyboard_nkro
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_ClearStatusStage
USB_Disable
USB_Init
print_set_sendchar
xputs
keyboard_init
host_set_driver
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
keyboard_task
__do_copy_data
__do_clear_bss
