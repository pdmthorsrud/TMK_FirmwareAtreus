   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB116:
  14               		.file 1 "../../protocol/lufa/lufa.c"
   1:../../protocol/lufa/lufa.c **** /* 
   2:../../protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:../../protocol/lufa/lufa.c ****  * This file is based on:
   4:../../protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:../../protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:../../protocol/lufa/lufa.c ****  */
   7:../../protocol/lufa/lufa.c **** 
   8:../../protocol/lufa/lufa.c **** /*
   9:../../protocol/lufa/lufa.c ****              LUFA Library
  10:../../protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:../../protocol/lufa/lufa.c **** 
  12:../../protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:../../protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:../../protocol/lufa/lufa.c **** */
  15:../../protocol/lufa/lufa.c **** 
  16:../../protocol/lufa/lufa.c **** /*
  17:../../protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:../../protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:../../protocol/lufa/lufa.c **** 
  20:../../protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:../../protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:../../protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:../../protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:../../protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:../../protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:../../protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:../../protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:../../protocol/lufa/lufa.c **** 
  29:../../protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:../../protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:../../protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:../../protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:../../protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:../../protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:../../protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:../../protocol/lufa/lufa.c ****   this software.
  37:../../protocol/lufa/lufa.c **** */
  38:../../protocol/lufa/lufa.c **** 
  39:../../protocol/lufa/lufa.c **** #include "report.h"
  40:../../protocol/lufa/lufa.c **** #include "host.h"
  41:../../protocol/lufa/lufa.c **** #include "host_driver.h"
  42:../../protocol/lufa/lufa.c **** #include "keyboard.h"
  43:../../protocol/lufa/lufa.c **** #include "action.h"
  44:../../protocol/lufa/lufa.c **** #include "led.h"
  45:../../protocol/lufa/lufa.c **** #include "sendchar.h"
  46:../../protocol/lufa/lufa.c **** #include "debug.h"
  47:../../protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:../../protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:../../protocol/lufa/lufa.c **** #endif
  50:../../protocol/lufa/lufa.c **** #include "suspend.h"
  51:../../protocol/lufa/lufa.c **** 
  52:../../protocol/lufa/lufa.c **** #include "descriptor.h"
  53:../../protocol/lufa/lufa.c **** #include "lufa.h"
  54:../../protocol/lufa/lufa.c **** 
  55:../../protocol/lufa/lufa.c **** static uint8_t idle_duration = 0;
  56:../../protocol/lufa/lufa.c **** static uint8_t protocol_report = 1;
  57:../../protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  58:../../protocol/lufa/lufa.c **** 
  59:../../protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  60:../../protocol/lufa/lufa.c **** 
  61:../../protocol/lufa/lufa.c **** 
  62:../../protocol/lufa/lufa.c **** /* Host driver */
  63:../../protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
  64:../../protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
  65:../../protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
  66:../../protocol/lufa/lufa.c **** static void send_system(uint16_t data);
  67:../../protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
  68:../../protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
  69:../../protocol/lufa/lufa.c ****     keyboard_leds,
  70:../../protocol/lufa/lufa.c ****     send_keyboard,
  71:../../protocol/lufa/lufa.c ****     send_mouse,
  72:../../protocol/lufa/lufa.c ****     send_system,
  73:../../protocol/lufa/lufa.c ****     send_consumer
  74:../../protocol/lufa/lufa.c **** };
  75:../../protocol/lufa/lufa.c **** 
  76:../../protocol/lufa/lufa.c **** 
  77:../../protocol/lufa/lufa.c **** /*******************************************************************************
  78:../../protocol/lufa/lufa.c ****  * Console
  79:../../protocol/lufa/lufa.c ****  ******************************************************************************/
  80:../../protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
  81:../../protocol/lufa/lufa.c **** static void Console_Task(void)
  82:../../protocol/lufa/lufa.c **** {
  83:../../protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
  84:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
  85:../../protocol/lufa/lufa.c ****         return;
  86:../../protocol/lufa/lufa.c **** 
  87:../../protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
  88:../../protocol/lufa/lufa.c **** 
  89:../../protocol/lufa/lufa.c **** #if 0
  90:../../protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
  91:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
  92:../../protocol/lufa/lufa.c **** 
  93:../../protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
  94:../../protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
  95:../../protocol/lufa/lufa.c ****     {
  96:../../protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
  97:../../protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
  98:../../protocol/lufa/lufa.c ****         {
  99:../../protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 100:../../protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 101:../../protocol/lufa/lufa.c ****  
 102:../../protocol/lufa/lufa.c ****             /* Read Console Report Data */
 103:../../protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 104:../../protocol/lufa/lufa.c ****  
 105:../../protocol/lufa/lufa.c ****             /* Process Console Report Data */
 106:../../protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 107:../../protocol/lufa/lufa.c ****         }
 108:../../protocol/lufa/lufa.c **** 
 109:../../protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 110:../../protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 111:../../protocol/lufa/lufa.c ****     }
 112:../../protocol/lufa/lufa.c **** #endif
 113:../../protocol/lufa/lufa.c **** 
 114:../../protocol/lufa/lufa.c ****     /* IN packet */
 115:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 116:../../protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 117:../../protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 118:../../protocol/lufa/lufa.c ****         return;
 119:../../protocol/lufa/lufa.c ****     }
 120:../../protocol/lufa/lufa.c **** 
 121:../../protocol/lufa/lufa.c ****     // fill empty bank
 122:../../protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 123:../../protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 124:../../protocol/lufa/lufa.c **** 
 125:../../protocol/lufa/lufa.c ****     // flash senchar packet
 126:../../protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 127:../../protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 128:../../protocol/lufa/lufa.c ****     }
 129:../../protocol/lufa/lufa.c **** 
 130:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 131:../../protocol/lufa/lufa.c **** }
 132:../../protocol/lufa/lufa.c **** #else
 133:../../protocol/lufa/lufa.c **** static void Console_Task(void)
 134:../../protocol/lufa/lufa.c **** {
 135:../../protocol/lufa/lufa.c **** }
 136:../../protocol/lufa/lufa.c **** #endif
 137:../../protocol/lufa/lufa.c **** 
 138:../../protocol/lufa/lufa.c **** 
 139:../../protocol/lufa/lufa.c **** /*******************************************************************************
 140:../../protocol/lufa/lufa.c ****  * USB Events
 141:../../protocol/lufa/lufa.c ****  ******************************************************************************/
 142:../../protocol/lufa/lufa.c **** /*
 143:../../protocol/lufa/lufa.c ****  * Event Order of Plug in:
 144:../../protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 145:../../protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 146:../../protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 147:../../protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 148:../../protocol/lufa/lufa.c **** */
 149:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 150:../../protocol/lufa/lufa.c **** {
 151:../../protocol/lufa/lufa.c **** }
 152:../../protocol/lufa/lufa.c **** 
 153:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 154:../../protocol/lufa/lufa.c **** {
 155:../../protocol/lufa/lufa.c **** }
 156:../../protocol/lufa/lufa.c **** 
 157:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 158:../../protocol/lufa/lufa.c **** {
 159:../../protocol/lufa/lufa.c **** }
 160:../../protocol/lufa/lufa.c **** 
 161:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 162:../../protocol/lufa/lufa.c **** {
 163:../../protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 164:../../protocol/lufa/lufa.c ****     sleep_led_enable();
 165:../../protocol/lufa/lufa.c **** #endif
 166:../../protocol/lufa/lufa.c **** }
 167:../../protocol/lufa/lufa.c **** 
 168:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 169:../../protocol/lufa/lufa.c **** {
 170:../../protocol/lufa/lufa.c ****     suspend_wakeup_init();
 171:../../protocol/lufa/lufa.c **** 
 172:../../protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 173:../../protocol/lufa/lufa.c ****     sleep_led_disable();
 174:../../protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 175:../../protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 176:../../protocol/lufa/lufa.c **** #endif
 177:../../protocol/lufa/lufa.c **** }
 178:../../protocol/lufa/lufa.c **** 
 179:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 180:../../protocol/lufa/lufa.c **** {
 181:../../protocol/lufa/lufa.c ****     Console_Task();
 182:../../protocol/lufa/lufa.c **** }
 183:../../protocol/lufa/lufa.c **** 
 184:../../protocol/lufa/lufa.c **** /** Event handler for the USB_ConfigurationChanged event.
 185:../../protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 186:../../protocol/lufa/lufa.c ****  */
 187:../../protocol/lufa/lufa.c **** #if LUFA_VERSION_INTEGER < 0x120730
 188:../../protocol/lufa/lufa.c ****     /* old API 120219 */
 189:../../protocol/lufa/lufa.c ****     #define ENDPOINT_CONFIG(epnum, eptype, epdir, epsize, epbank)    Endpoint_ConfigureEndpoint(epn
 190:../../protocol/lufa/lufa.c **** #else
 191:../../protocol/lufa/lufa.c ****     /* new API >= 120730 */
 192:../../protocol/lufa/lufa.c ****     #define ENDPOINT_BANK_SINGLE 1
 193:../../protocol/lufa/lufa.c ****     #define ENDPOINT_BANK_DOUBLE 2
 194:../../protocol/lufa/lufa.c ****     #define ENDPOINT_CONFIG(epnum, eptype, epdir, epsize, epbank)    Endpoint_ConfigureEndpoint((ep
 195:../../protocol/lufa/lufa.c **** #endif
 196:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 197:../../protocol/lufa/lufa.c **** {
 198:../../protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 199:../../protocol/lufa/lufa.c **** 
 200:../../protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 201:../../protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 202:../../protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 203:../../protocol/lufa/lufa.c **** 
 204:../../protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 205:../../protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 206:../../protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 207:../../protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 208:../../protocol/lufa/lufa.c **** #endif
 209:../../protocol/lufa/lufa.c **** 
 210:../../protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 211:../../protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 212:../../protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 213:../../protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 214:../../protocol/lufa/lufa.c **** #endif
 215:../../protocol/lufa/lufa.c **** 
 216:../../protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 217:../../protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 218:../../protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 219:../../protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_DOUBLE);
 220:../../protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 221:../../protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 222:../../protocol/lufa/lufa.c **** #endif
 223:../../protocol/lufa/lufa.c **** 
 224:../../protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 225:../../protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 226:../../protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 227:../../protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 228:../../protocol/lufa/lufa.c **** #endif
 229:../../protocol/lufa/lufa.c **** }
 230:../../protocol/lufa/lufa.c **** 
 231:../../protocol/lufa/lufa.c **** /*
 232:../../protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 233:../../protocol/lufa/lufa.c **** 
 234:../../protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 235:../../protocol/lufa/lufa.c **** 
 236:../../protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 237:../../protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 238:../../protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 239:../../protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 240:../../protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 241:../../protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 242:../../protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 243:../../protocol/lufa/lufa.c **** */
 244:../../protocol/lufa/lufa.c **** /** Event handler for the USB_ControlRequest event.
 245:../../protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 246:../../protocol/lufa/lufa.c ****  */
 247:../../protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 248:../../protocol/lufa/lufa.c **** {
 249:../../protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 250:../../protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 251:../../protocol/lufa/lufa.c **** 
 252:../../protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 253:../../protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 254:../../protocol/lufa/lufa.c ****     {
 255:../../protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 256:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 257:../../protocol/lufa/lufa.c ****             {
 258:../../protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 259:../../protocol/lufa/lufa.c **** 
 260:../../protocol/lufa/lufa.c ****                 // Interface
 261:../../protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 262:../../protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 263:../../protocol/lufa/lufa.c ****                     // TODO: test/check
 264:../../protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 265:../../protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 266:../../protocol/lufa/lufa.c ****                     break;
 267:../../protocol/lufa/lufa.c ****                 }
 268:../../protocol/lufa/lufa.c **** 
 269:../../protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 270:../../protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 271:../../protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 272:../../protocol/lufa/lufa.c ****             }
 273:../../protocol/lufa/lufa.c **** 
 274:../../protocol/lufa/lufa.c ****             break;
 275:../../protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 276:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 277:../../protocol/lufa/lufa.c ****             {
 278:../../protocol/lufa/lufa.c **** 
 279:../../protocol/lufa/lufa.c ****                 // Interface
 280:../../protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 281:../../protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 282:../../protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 283:../../protocol/lufa/lufa.c **** 
 284:../../protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 285:../../protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 286:../../protocol/lufa/lufa.c ****                           return;
 287:../../protocol/lufa/lufa.c ****                     }
 288:../../protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 289:../../protocol/lufa/lufa.c **** 
 290:../../protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 291:../../protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 292:../../protocol/lufa/lufa.c ****                     break;
 293:../../protocol/lufa/lufa.c ****                 }
 294:../../protocol/lufa/lufa.c **** 
 295:../../protocol/lufa/lufa.c ****             }
 296:../../protocol/lufa/lufa.c **** 
 297:../../protocol/lufa/lufa.c ****             break;
 298:../../protocol/lufa/lufa.c **** 
 299:../../protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 300:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 301:../../protocol/lufa/lufa.c ****             {
 302:../../protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 303:../../protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 304:../../protocol/lufa/lufa.c ****                 Endpoint_Write_8(protocol_report);
 305:../../protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 306:../../protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 307:../../protocol/lufa/lufa.c ****             }
 308:../../protocol/lufa/lufa.c **** 
 309:../../protocol/lufa/lufa.c ****             break;
 310:../../protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 311:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 312:../../protocol/lufa/lufa.c ****             {
 313:../../protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 314:../../protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 315:../../protocol/lufa/lufa.c **** 
 316:../../protocol/lufa/lufa.c ****                 protocol_report = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 317:../../protocol/lufa/lufa.c ****             }
 318:../../protocol/lufa/lufa.c **** 
 319:../../protocol/lufa/lufa.c ****             break;
 320:../../protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 321:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 322:../../protocol/lufa/lufa.c ****             {
 323:../../protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 324:../../protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 325:../../protocol/lufa/lufa.c **** 
 326:../../protocol/lufa/lufa.c ****                 idle_duration = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 327:../../protocol/lufa/lufa.c ****             }
 328:../../protocol/lufa/lufa.c **** 
 329:../../protocol/lufa/lufa.c ****             break;
 330:../../protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 331:../../protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 332:../../protocol/lufa/lufa.c ****             {
 333:../../protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 334:../../protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 335:../../protocol/lufa/lufa.c ****                 Endpoint_Write_8(idle_duration);
 336:../../protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 337:../../protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 338:../../protocol/lufa/lufa.c ****             }
 339:../../protocol/lufa/lufa.c **** 
 340:../../protocol/lufa/lufa.c ****             break;
 341:../../protocol/lufa/lufa.c ****     }
 342:../../protocol/lufa/lufa.c **** }
 343:../../protocol/lufa/lufa.c **** 
 344:../../protocol/lufa/lufa.c **** /*******************************************************************************
 345:../../protocol/lufa/lufa.c ****  * Host driver 
 346:../../protocol/lufa/lufa.c ****  ******************************************************************************/
 347:../../protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 348:../../protocol/lufa/lufa.c **** {
  15               		.loc 1 348 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 349:../../protocol/lufa/lufa.c ****     return keyboard_led_stats;
 350:../../protocol/lufa/lufa.c **** }
  21               		.loc 1 350 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE116:
  27               		.section	.text.send_mouse,"ax",@progbits
  29               	send_mouse:
  30               	.LFB118:
 351:../../protocol/lufa/lufa.c **** 
 352:../../protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 353:../../protocol/lufa/lufa.c **** {
 354:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 355:../../protocol/lufa/lufa.c **** 
 356:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 357:../../protocol/lufa/lufa.c ****         return;
 358:../../protocol/lufa/lufa.c **** 
 359:../../protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 360:../../protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 361:../../protocol/lufa/lufa.c ****     if (keyboard_nkro) {
 362:../../protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 363:../../protocol/lufa/lufa.c ****     }
 364:../../protocol/lufa/lufa.c ****     else
 365:../../protocol/lufa/lufa.c **** #endif
 366:../../protocol/lufa/lufa.c ****     {
 367:../../protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 368:../../protocol/lufa/lufa.c ****     }
 369:../../protocol/lufa/lufa.c **** 
 370:../../protocol/lufa/lufa.c ****     /* Check if Keyboard Endpoint Ready for Read/Write */
 371:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 372:../../protocol/lufa/lufa.c **** 
 373:../../protocol/lufa/lufa.c ****     /* Write Keyboard Report Data */
 374:../../protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 375:../../protocol/lufa/lufa.c ****     if (keyboard_nkro) {
 376:../../protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 377:../../protocol/lufa/lufa.c ****     }
 378:../../protocol/lufa/lufa.c ****     else
 379:../../protocol/lufa/lufa.c **** #endif
 380:../../protocol/lufa/lufa.c ****     {
 381:../../protocol/lufa/lufa.c ****         /* boot mode */
 382:../../protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 383:../../protocol/lufa/lufa.c ****     }
 384:../../protocol/lufa/lufa.c **** 
 385:../../protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 386:../../protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 387:../../protocol/lufa/lufa.c **** 
 388:../../protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 389:../../protocol/lufa/lufa.c **** }
 390:../../protocol/lufa/lufa.c **** 
 391:../../protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 392:../../protocol/lufa/lufa.c **** {
  31               		.loc 1 392 0
  32               		.cfi_startproc
  33               	.LVL0:
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 0 */
  37               	.L__stack_usage = 0
  38 0000 0895      		ret
  39               		.cfi_endproc
  40               	.LFE118:
  42               		.section	.text.sendchar,"ax",@progbits
  43               	.global	sendchar
  45               	sendchar:
  46               	.LFB121:
 393:../../protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 394:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 395:../../protocol/lufa/lufa.c **** 
 396:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 397:../../protocol/lufa/lufa.c ****         return;
 398:../../protocol/lufa/lufa.c **** 
 399:../../protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 400:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 401:../../protocol/lufa/lufa.c **** 
 402:../../protocol/lufa/lufa.c ****     /* Check if Mouse Endpoint Ready for Read/Write */
 403:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 404:../../protocol/lufa/lufa.c **** 
 405:../../protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 406:../../protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 407:../../protocol/lufa/lufa.c **** 
 408:../../protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 409:../../protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 410:../../protocol/lufa/lufa.c **** #endif
 411:../../protocol/lufa/lufa.c **** }
 412:../../protocol/lufa/lufa.c **** 
 413:../../protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 414:../../protocol/lufa/lufa.c **** {
 415:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 416:../../protocol/lufa/lufa.c **** 
 417:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 418:../../protocol/lufa/lufa.c ****         return;
 419:../../protocol/lufa/lufa.c **** 
 420:../../protocol/lufa/lufa.c ****     report_extra_t r = {
 421:../../protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 422:../../protocol/lufa/lufa.c ****         .usage = data
 423:../../protocol/lufa/lufa.c ****     };
 424:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 425:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 426:../../protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 427:../../protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 428:../../protocol/lufa/lufa.c **** }
 429:../../protocol/lufa/lufa.c **** 
 430:../../protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 431:../../protocol/lufa/lufa.c **** {
 432:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 433:../../protocol/lufa/lufa.c **** 
 434:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 435:../../protocol/lufa/lufa.c ****         return;
 436:../../protocol/lufa/lufa.c **** 
 437:../../protocol/lufa/lufa.c ****     report_extra_t r = {
 438:../../protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 439:../../protocol/lufa/lufa.c ****         .usage = data
 440:../../protocol/lufa/lufa.c ****     };
 441:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 442:../../protocol/lufa/lufa.c ****     while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
 443:../../protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 444:../../protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 445:../../protocol/lufa/lufa.c **** }
 446:../../protocol/lufa/lufa.c **** 
 447:../../protocol/lufa/lufa.c **** 
 448:../../protocol/lufa/lufa.c **** /*******************************************************************************
 449:../../protocol/lufa/lufa.c ****  * sendchar
 450:../../protocol/lufa/lufa.c ****  ******************************************************************************/
 451:../../protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 452:../../protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 453:../../protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 454:../../protocol/lufa/lufa.c **** {
  47               		.loc 1 454 0
  48               		.cfi_startproc
  49               	.LVL1:
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
 455:../../protocol/lufa/lufa.c ****     // Not wait once timeouted.
 456:../../protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 457:../../protocol/lufa/lufa.c ****     static bool timeouted = false;
 458:../../protocol/lufa/lufa.c **** 
 459:../../protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
  54               		.loc 1 459 0
  55 0000 9091 0000 		lds r25,USB_DeviceState
  56 0004 9430      		cpi r25,lo8(4)
  57 0006 01F0      		breq .+2
  58 0008 00C0      		rjmp .L18
  59               	.LBB145:
  60               	.LBB146:
  61               		.file 2 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2012.
   4:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 128:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 129:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 130:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 131:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 132:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 133:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 134:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			
 207:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			
 210:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
 225:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
 227:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
  62               		.loc 2 253 0
  63 000a 9091 E900 		lds r25,233
  64 000e 9F70      		andi r25,lo8(15)
  65               	.LBB147:
  66               	.LBB148:
 240:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  67               		.loc 2 240 0
  68 0010 3091 EC00 		lds r19,236
  69 0014 232F      		mov r18,r19
  70 0016 2170      		andi r18,lo8(1)
  71 0018 30FD      		sbrc r19,0
  72 001a 20E8      		ldi r18,lo8(-128)
  73               	.L5:
  74               	.LBE148:
  75               	.LBE147:
  76               		.loc 2 253 0
  77 001c 922B      		or r25,r18
  78               	.LVL2:
  79               	.LBE146:
  80               	.LBE145:
  81               	.LBB149:
  82               	.LBB150:
 254:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  83               		.loc 2 270 0
  84 001e 22E0      		ldi r18,lo8(2)
  85 0020 2093 E900 		sts 233,r18
  86               	.LBE150:
  87               	.LBE149:
  88               	.LBB151:
  89               	.LBB152:
 271:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
  90               		.loc 2 313 0
  91 0024 2091 EB00 		lds r18,235
  92               	.LBE152:
  93               	.LBE151:
 460:../../protocol/lufa/lufa.c ****         return -1;
 461:../../protocol/lufa/lufa.c **** 
 462:../../protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 463:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 464:../../protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
  94               		.loc 1 464 0
  95 0028 20FF      		sbrs r18,0
  96 002a 00C0      		rjmp .L32
  97               	.LBB153:
  98               	.LBB154:
 314:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 318:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 361:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
  99               		.loc 2 370 0
 100 002c 2091 EE00 		lds r18,238
 101               	.LBE154:
 102               	.LBE153:
 103               		.loc 1 464 0
 104 0030 27FF      		sbrs r18,7
 105 0032 00C0      		rjmp .L32
 465:../../protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 466:../../protocol/lufa/lufa.c ****         return -1;
 467:../../protocol/lufa/lufa.c ****     }
 468:../../protocol/lufa/lufa.c **** 
 469:../../protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 106               		.loc 1 469 0
 107 0034 2091 0000 		lds r18,timeouted.4687
 108 0038 2223      		tst r18
 109 003a 01F0      		breq .L8
 110               	.LBB155:
 111               	.LBB156:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 112               		.loc 2 360 0
 113 003c 2091 E800 		lds r18,232
 114               	.LBE156:
 115               	.LBE155:
 116               		.loc 1 469 0
 117 0040 25FF      		sbrs r18,5
 118 0042 00C0      		rjmp .L32
 119               	.L8:
 470:../../protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 471:../../protocol/lufa/lufa.c ****         return - 1;
 472:../../protocol/lufa/lufa.c ****     }
 473:../../protocol/lufa/lufa.c **** 
 474:../../protocol/lufa/lufa.c ****     timeouted = false;
 120               		.loc 1 474 0
 121 0044 1092 0000 		sts timeouted.4687,__zero_reg__
 122               	.LVL3:
 123               	.LBB157:
 124               	.LBB158:
 125               		.file 3 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
   1:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
   2:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****              LUFA Library
   3:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****      Copyright (C) Dean Camera, 2012.
   4:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   5:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****            www.lufa-lib.org
   7:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
   8:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   9:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
  10:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  12:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software without specific, written prior permission.
  20:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  21:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   this software.
  29:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
  30:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  31:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \file
  32:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  33:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \copydetails Group_Device_AVR8
  34:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  35:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  38:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  39:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \ingroup Group_Device
  40:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \defgroup Group_Device_AVR8 Device Management (AVR8)
  41:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  42:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  43:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  Architecture specific USB Device definitions for the Atmel 8-bit AVR microcontrollers.
  44:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  45:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  @{
  46:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  47:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  48:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #ifndef __USBDEVICE_AVR8_H__
  49:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #define __USBDEVICE_AVR8_H__
  50:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  51:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Includes: */
  52:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBController.h"
  54:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../StdDescriptors.h"
  55:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBInterrupt.h"
  56:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../Endpoint.h"
  57:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  58:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  59:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if defined(__cplusplus)
  60:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			extern "C" {
  61:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  62:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  63:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Preprocessor Checks: */
  64:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  65:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  66:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  67:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  68:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  69:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  70:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  71:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  72:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_FLASH_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  73:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_FLASH_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  74:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  75:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  76:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_FLASH_DESCRIPTORS) && defined(USE_RAM_DESCRIPTORS))
  77:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_FLASH_DESCRIPTORS and USE_RAM_DESCRIPTORS are mutually exclusive.
  78:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  79:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  80:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Public Interface - May be used in end-application: */
  81:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Macros: */
  82:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** \name USB Device Mode Option Masks */
  83:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@{
  84:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  85:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  86:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  87:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  88:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  89:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        \n
  90:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  91:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  92:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        when running in low speed mode - please refer to the USB 2.0 specification.
  93:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
  94:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  95:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
  96:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  97:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  98:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  99:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 100:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
 101:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@}
 102:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 103:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if (!defined(NO_INTERNAL_SERIAL) && \
 104:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			     (defined(USB_SERIES_7_AVR) || defined(USB_SERIES_6_AVR) || \
 105:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			      defined(USB_SERIES_4_AVR) || defined(USB_SERIES_2_AVR) || \
 106:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				  defined(__DOXYGEN__)))
 107:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** String descriptor index for the device's unique serial number string descriptor within the 
 108:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  This unique serial number is used by the host to associate resources to the device (such as
 109:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number allocations) to a device regardless of the port it is plugged in to on the host. Som
 110:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  a unique serial number internally, and setting the device descriptors serial number string 
 111:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  will cause it to use the internal serial number.
 112:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 113:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  On unsupported devices, this will evaluate to \ref NO_DESCRIPTOR and so will force the host
 114:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number for the device.
 115:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 116:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            0xDC
 117:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 118:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Length of the device's unique internal serial number, in bits, if present on the selected m
 119:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 120:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 121:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    80
 122:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 123:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Start address of the internal serial number, in the appropriate address space, if present o
 124:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 125:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 126:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0x0E
 127:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#else
 128:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            NO_DESCRIPTOR
 129:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 130:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    0
 131:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0
 132:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
 133:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 134:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Function Prototypes: */
 135:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
 136:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  be taken out of suspended mode, and communications should resume.
 137:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 138:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
 139:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
 140:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 141:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \attention This function should only be used if the device has indicated to the host that it
 142:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             supports the Remote Wakeup feature in the device descriptors, and should only be
 143:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             issued if the host is currently allowing remote wakeup events from the device (i.
 144:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             the \ref USB_Device_RemoteWakeupEnabled flag is set). When the \c NO_DEVICE_REMOT
 145:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             compile time option is used, this function is unavailable.
 146:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             \n\n
 147:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 148:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \attention The USB clock must be running for this function to operate. If the stack is initi
 149:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is 
 150:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             before attempting to call this function.
 151:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 152:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \see \ref Group_StdDescriptors for more information on the RMWAKEUP feature and device descr
 153:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 154:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			void USB_Device_SendRemoteWakeup(void);
 155:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 156:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Inline Functions: */
 157:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is 
 158:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  the frame number is incremented by one.
 159:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 160:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \return Current USB frame number from the USB controller.
 161:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 162:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESUL
 163:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void)
 164:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 165:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				return UDFNUM;
 126               		.loc 3 165 0
 127 0048 4091 E400 		lds r20,228
 128 004c 5091 E500 		lds r21,228+1
 129               	.LBE158:
 130               	.LBE157:
 475:../../protocol/lufa/lufa.c **** 
 476:../../protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 477:../../protocol/lufa/lufa.c ****     uint16_t prevFN = USB_Device_GetFrameNumber();
 478:../../protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 131               		.loc 1 478 0
 132 0050 26E0      		ldi r18,lo8(6)
 133 0052 00C0      		rjmp .L12
 134               	.LVL4:
 135               	.L11:
 136               	.LBB159:
 137               	.LBB160:
 138               		.loc 3 165 0
 139 0054 6091 E400 		lds r22,228
 140 0058 7091 E500 		lds r23,228+1
 141               	.LBE160:
 142               	.LBE159:
 479:../../protocol/lufa/lufa.c ****         switch (USB_DeviceState) {
 480:../../protocol/lufa/lufa.c ****         case DEVICE_STATE_Unattached:
 481:../../protocol/lufa/lufa.c ****         case DEVICE_STATE_Suspended:
 482:../../protocol/lufa/lufa.c ****             return -1;
 483:../../protocol/lufa/lufa.c ****         }
 484:../../protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 485:../../protocol/lufa/lufa.c ****             Endpoint_SelectEndpoint(ep);
 486:../../protocol/lufa/lufa.c ****             return -1;
 487:../../protocol/lufa/lufa.c ****         }
 488:../../protocol/lufa/lufa.c ****         if (prevFN != USB_Device_GetFrameNumber()) {
 143               		.loc 1 488 0
 144 005c 4617      		cp r20,r22
 145 005e 5707      		cpc r21,r23
 146 0060 01F4      		brne .L34
 147               	.LVL5:
 148               	.L12:
 149               	.LBB161:
 150               	.LBB162:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 151               		.loc 2 360 0
 152 0062 3091 E800 		lds r19,232
 153               	.LBE162:
 154               	.LBE161:
 478:../../protocol/lufa/lufa.c ****         switch (USB_DeviceState) {
 155               		.loc 1 478 0
 156 0066 35FD      		sbrc r19,5
 157 0068 00C0      		rjmp .L35
 479:../../protocol/lufa/lufa.c ****         switch (USB_DeviceState) {
 158               		.loc 1 479 0
 159 006a 3091 0000 		lds r19,USB_DeviceState
 160 006e 3323      		tst r19
 161 0070 01F0      		breq .L18
 162 0072 3530      		cpi r19,lo8(5)
 163 0074 01F0      		breq .L18
 164               	.LBB163:
 165               	.LBB164:
 371:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 457:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 472:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 505:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 166               		.loc 2 513 0
 167 0076 3091 EB00 		lds r19,235
 168               	.LBE164:
 169               	.LBE163:
 484:../../protocol/lufa/lufa.c ****             Endpoint_SelectEndpoint(ep);
 170               		.loc 1 484 0
 171 007a 35FF      		sbrs r19,5
 172 007c 00C0      		rjmp .L11
 173               	.LVL6:
 174               	.L32:
 175               	.LBB165:
 176               	.LBB166:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 177               		.loc 2 270 0
 178 007e 9F70      		andi r25,lo8(15)
 179               	.LVL7:
 180 0080 9093 E900 		sts 233,r25
 181 0084 00C0      		rjmp .L18
 182               	.LVL8:
 183               	.L34:
 184 0086 2150      		subi r18,lo8(-(-1))
 185               	.LVL9:
 186               	.LBE166:
 187               	.LBE165:
 489:../../protocol/lufa/lufa.c ****             if (!(timeout--)) {
 188               		.loc 1 489 0
 189 0088 01F4      		brne .L13
 490:../../protocol/lufa/lufa.c ****                 timeouted = true;
 190               		.loc 1 490 0
 191 008a 81E0      		ldi r24,lo8(1)
 192               	.LVL10:
 193 008c 8093 0000 		sts timeouted.4687,r24
 194 0090 00C0      		rjmp .L32
 195               	.LVL11:
 196               	.L13:
 197               	.LBB167:
 198               	.LBB168:
 199               		.loc 3 165 0
 200 0092 4091 E400 		lds r20,228
 201 0096 5091 E500 		lds r21,228+1
 202               	.LVL12:
 203 009a 00C0      		rjmp .L12
 204               	.LVL13:
 205               	.L35:
 206               	.LBE168:
 207               	.LBE167:
 208               	.LBB169:
 209               	.LBB170:
 514:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 543:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 210               		.loc 2 554 0
 211 009c 8093 F100 		sts 241,r24
 212               	.LBE170:
 213               	.LBE169:
 214               	.LBB171:
 215               	.LBB172:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 216               		.loc 2 360 0
 217 00a0 8091 E800 		lds r24,232
 218               	.LVL14:
 219               	.LBE172:
 220               	.LBE171:
 491:../../protocol/lufa/lufa.c ****                 Endpoint_SelectEndpoint(ep);
 492:../../protocol/lufa/lufa.c ****                 return -1;
 493:../../protocol/lufa/lufa.c ****             }
 494:../../protocol/lufa/lufa.c ****             prevFN = USB_Device_GetFrameNumber();
 495:../../protocol/lufa/lufa.c ****         }
 496:../../protocol/lufa/lufa.c ****     }
 497:../../protocol/lufa/lufa.c **** 
 498:../../protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 499:../../protocol/lufa/lufa.c **** 
 500:../../protocol/lufa/lufa.c ****     // send when bank is full
 501:../../protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed())
 221               		.loc 1 501 0
 222 00a4 85FD      		sbrc r24,5
 223 00a6 00C0      		rjmp .L15
 224               	.LBB173:
 225               	.LBB174:
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 226               		.loc 2 456 0
 227 00a8 8091 E800 		lds r24,232
 228 00ac 8E77      		andi r24,lo8(126)
 229 00ae 8093 E800 		sts 232,r24
 230               	.LVL15:
 231               	.L15:
 232               	.LBE174:
 233               	.LBE173:
 234               	.LBB175:
 235               	.LBB176:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 236               		.loc 2 270 0
 237 00b2 9F70      		andi r25,lo8(15)
 238               	.LVL16:
 239 00b4 9093 E900 		sts 233,r25
 240               	.LBE176:
 241               	.LBE175:
 502:../../protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 503:../../protocol/lufa/lufa.c **** 
 504:../../protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 505:../../protocol/lufa/lufa.c ****     return 0;
 242               		.loc 1 505 0
 243 00b8 80E0      		ldi r24,0
 244 00ba 0895      		ret
 245               	.LVL17:
 246               	.L18:
 482:../../protocol/lufa/lufa.c ****         }
 247               		.loc 1 482 0
 248 00bc 8FEF      		ldi r24,lo8(-1)
 506:../../protocol/lufa/lufa.c **** }
 249               		.loc 1 506 0
 250 00be 0895      		ret
 251               		.cfi_endproc
 252               	.LFE121:
 254               		.section	.text.send_consumer,"ax",@progbits
 256               	send_consumer:
 257               	.LFB120:
 431:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 258               		.loc 1 431 0
 259               		.cfi_startproc
 260               	.LVL18:
 261 0000 CF93      		push r28
 262               	.LCFI0:
 263               		.cfi_def_cfa_offset 3
 264               		.cfi_offset 28, -2
 265 0002 DF93      		push r29
 266               	.LCFI1:
 267               		.cfi_def_cfa_offset 4
 268               		.cfi_offset 29, -3
 269 0004 00D0      		rcall .
 270 0006 1F92      		push __zero_reg__
 271               	.LCFI2:
 272               		.cfi_def_cfa_offset 7
 273 0008 CDB7      		in r28,__SP_L__
 274 000a DEB7      		in r29,__SP_H__
 275               	.LCFI3:
 276               		.cfi_def_cfa_register 28
 277               	/* prologue: function */
 278               	/* frame size = 3 */
 279               	/* stack size = 5 */
 280               	.L__stack_usage = 5
 281               	.LVL19:
 434:../../protocol/lufa/lufa.c ****         return;
 282               		.loc 1 434 0
 283 000c 2091 0000 		lds r18,USB_DeviceState
 284 0010 2430      		cpi r18,lo8(4)
 285 0012 01F4      		brne .L36
 437:../../protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 286               		.loc 1 437 0
 287 0014 23E0      		ldi r18,lo8(3)
 288 0016 2983      		std Y+1,r18
 289 0018 9B83      		std Y+3,r25
 290 001a 8A83      		std Y+2,r24
 291               	.LVL20:
 292               	.LBB177:
 293               	.LBB178:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 294               		.loc 2 270 0
 295 001c 81E0      		ldi r24,lo8(1)
 296               	.LVL21:
 297 001e 8093 E900 		sts 233,r24
 298               	.LVL22:
 299               	.LBE178:
 300               	.LBE177:
 432:../../protocol/lufa/lufa.c **** 
 301               		.loc 1 432 0
 302 0022 80E0      		ldi r24,0
 303               	.LVL23:
 304               	.L39:
 442:../../protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 305               		.loc 1 442 0 discriminator 2
 306 0024 8150      		subi r24,lo8(-(-1))
 307               	.LVL24:
 308 0026 01F0      		breq .L38
 309               	.LBB179:
 310               	.LBB180:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 311               		.loc 2 360 0
 312 0028 9091 E800 		lds r25,232
 313               	.LBE180:
 314               	.LBE179:
 442:../../protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 315               		.loc 1 442 0
 316 002c 95FF      		sbrs r25,5
 317 002e 00C0      		rjmp .L39
 318               	.L38:
 443:../../protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 319               		.loc 1 443 0
 320 0030 40E0      		ldi r20,0
 321 0032 50E0      		ldi r21,0
 322 0034 63E0      		ldi r22,lo8(3)
 323 0036 70E0      		ldi r23,0
 324 0038 CE01      		movw r24,r28
 325               	.LVL25:
 326 003a 0196      		adiw r24,1
 327 003c 0E94 0000 		call Endpoint_Write_Stream_LE
 328               	.LVL26:
 329               	.LBB181:
 330               	.LBB182:
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 331               		.loc 2 456 0
 332 0040 8091 E800 		lds r24,232
 333 0044 8E77      		andi r24,lo8(126)
 334 0046 8093 E800 		sts 232,r24
 335               	.LVL27:
 336               	.L36:
 337               	/* epilogue start */
 338               	.LBE182:
 339               	.LBE181:
 445:../../protocol/lufa/lufa.c **** 
 340               		.loc 1 445 0
 341 004a 0F90      		pop __tmp_reg__
 342 004c 0F90      		pop __tmp_reg__
 343 004e 0F90      		pop __tmp_reg__
 344 0050 DF91      		pop r29
 345 0052 CF91      		pop r28
 346 0054 0895      		ret
 347               		.cfi_endproc
 348               	.LFE120:
 350               		.section	.text.send_system,"ax",@progbits
 352               	send_system:
 353               	.LFB119:
 414:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 354               		.loc 1 414 0
 355               		.cfi_startproc
 356               	.LVL28:
 357 0000 CF93      		push r28
 358               	.LCFI4:
 359               		.cfi_def_cfa_offset 3
 360               		.cfi_offset 28, -2
 361 0002 DF93      		push r29
 362               	.LCFI5:
 363               		.cfi_def_cfa_offset 4
 364               		.cfi_offset 29, -3
 365 0004 00D0      		rcall .
 366 0006 1F92      		push __zero_reg__
 367               	.LCFI6:
 368               		.cfi_def_cfa_offset 7
 369 0008 CDB7      		in r28,__SP_L__
 370 000a DEB7      		in r29,__SP_H__
 371               	.LCFI7:
 372               		.cfi_def_cfa_register 28
 373               	/* prologue: function */
 374               	/* frame size = 3 */
 375               	/* stack size = 5 */
 376               	.L__stack_usage = 5
 377               	.LVL29:
 417:../../protocol/lufa/lufa.c ****         return;
 378               		.loc 1 417 0
 379 000c 2091 0000 		lds r18,USB_DeviceState
 380 0010 2430      		cpi r18,lo8(4)
 381 0012 01F4      		brne .L46
 420:../../protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 382               		.loc 1 420 0
 383 0014 22E0      		ldi r18,lo8(2)
 384 0016 2983      		std Y+1,r18
 385 0018 9B83      		std Y+3,r25
 386 001a 8A83      		std Y+2,r24
 387               	.LVL30:
 388               	.LBB183:
 389               	.LBB184:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 390               		.loc 2 270 0
 391 001c 81E0      		ldi r24,lo8(1)
 392               	.LVL31:
 393 001e 8093 E900 		sts 233,r24
 394               	.LVL32:
 395               	.LBE184:
 396               	.LBE183:
 415:../../protocol/lufa/lufa.c **** 
 397               		.loc 1 415 0
 398 0022 80E0      		ldi r24,0
 399               	.LVL33:
 400               	.L49:
 425:../../protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 401               		.loc 1 425 0 discriminator 2
 402 0024 8150      		subi r24,lo8(-(-1))
 403               	.LVL34:
 404 0026 01F0      		breq .L48
 405               	.LBB185:
 406               	.LBB186:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 407               		.loc 2 360 0
 408 0028 9091 E800 		lds r25,232
 409               	.LBE186:
 410               	.LBE185:
 425:../../protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 411               		.loc 1 425 0
 412 002c 95FF      		sbrs r25,5
 413 002e 00C0      		rjmp .L49
 414               	.L48:
 426:../../protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 415               		.loc 1 426 0
 416 0030 40E0      		ldi r20,0
 417 0032 50E0      		ldi r21,0
 418 0034 63E0      		ldi r22,lo8(3)
 419 0036 70E0      		ldi r23,0
 420 0038 CE01      		movw r24,r28
 421               	.LVL35:
 422 003a 0196      		adiw r24,1
 423 003c 0E94 0000 		call Endpoint_Write_Stream_LE
 424               	.LVL36:
 425               	.LBB187:
 426               	.LBB188:
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 427               		.loc 2 456 0
 428 0040 8091 E800 		lds r24,232
 429 0044 8E77      		andi r24,lo8(126)
 430 0046 8093 E800 		sts 232,r24
 431               	.LVL37:
 432               	.L46:
 433               	/* epilogue start */
 434               	.LBE188:
 435               	.LBE187:
 428:../../protocol/lufa/lufa.c **** 
 436               		.loc 1 428 0
 437 004a 0F90      		pop __tmp_reg__
 438 004c 0F90      		pop __tmp_reg__
 439 004e 0F90      		pop __tmp_reg__
 440 0050 DF91      		pop r29
 441 0052 CF91      		pop r28
 442 0054 0895      		ret
 443               		.cfi_endproc
 444               	.LFE119:
 446               		.section	.text.send_keyboard,"ax",@progbits
 448               	send_keyboard:
 449               	.LFB117:
 353:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 450               		.loc 1 353 0
 451               		.cfi_startproc
 452               	.LVL38:
 453 0000 CF93      		push r28
 454               	.LCFI8:
 455               		.cfi_def_cfa_offset 3
 456               		.cfi_offset 28, -2
 457 0002 DF93      		push r29
 458               	.LCFI9:
 459               		.cfi_def_cfa_offset 4
 460               		.cfi_offset 29, -3
 461               	/* prologue: function */
 462               	/* frame size = 0 */
 463               	/* stack size = 2 */
 464               	.L__stack_usage = 2
 465               	.LVL39:
 356:../../protocol/lufa/lufa.c ****         return;
 466               		.loc 1 356 0
 467 0004 2091 0000 		lds r18,USB_DeviceState
 468 0008 2430      		cpi r18,lo8(4)
 469 000a 01F4      		brne .L56
 361:../../protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 470               		.loc 1 361 0
 471 000c 3091 0000 		lds r19,keyboard_nkro
 472 0010 3111      		cpse r19,__zero_reg__
 473 0012 00C0      		rjmp .L69
 474               	.LVL40:
 475               	.LBB189:
 476               	.LBB190:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 477               		.loc 2 270 0
 478 0014 21E0      		ldi r18,lo8(1)
 479               	.LVL41:
 480               	.L69:
 481 0016 2093 E900 		sts 233,r18
 482               	.LBE190:
 483               	.LBE189:
 353:../../protocol/lufa/lufa.c ****     uint8_t timeout = 0;
 484               		.loc 1 353 0
 485 001a 20E0      		ldi r18,0
 486               	.LVL42:
 487               	.L61:
 371:../../protocol/lufa/lufa.c **** 
 488               		.loc 1 371 0 discriminator 2
 489 001c 2150      		subi r18,lo8(-(-1))
 490               	.LVL43:
 491 001e 01F0      		breq .L60
 492               	.LBB191:
 493               	.LBB192:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 494               		.loc 2 360 0
 495 0020 3091 E800 		lds r19,232
 496               	.LBE192:
 497               	.LBE191:
 371:../../protocol/lufa/lufa.c **** 
 498               		.loc 1 371 0
 499 0024 35FF      		sbrs r19,5
 500 0026 00C0      		rjmp .L61
 501               	.L60:
 502 0028 EC01      		movw r28,r24
 375:../../protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 503               		.loc 1 375 0
 504 002a 8091 0000 		lds r24,keyboard_nkro
 505               	.LVL44:
 376:../../protocol/lufa/lufa.c ****     }
 506               		.loc 1 376 0
 507 002e 40E0      		ldi r20,0
 508 0030 50E0      		ldi r21,0
 375:../../protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 509               		.loc 1 375 0
 510 0032 8823      		tst r24
 511 0034 01F0      		breq .L62
 376:../../protocol/lufa/lufa.c ****     }
 512               		.loc 1 376 0
 513 0036 60E1      		ldi r22,lo8(16)
 514 0038 70E0      		ldi r23,0
 515 003a 00C0      		rjmp .L70
 516               	.L62:
 382:../../protocol/lufa/lufa.c ****     }
 517               		.loc 1 382 0
 518 003c 68E0      		ldi r22,lo8(8)
 519 003e 70E0      		ldi r23,0
 520               	.L70:
 521 0040 CE01      		movw r24,r28
 522 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 523               	.LVL45:
 524               	.LBB193:
 525               	.LBB194:
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 526               		.loc 2 456 0
 527 0046 8091 E800 		lds r24,232
 528 004a 8E77      		andi r24,lo8(126)
 529 004c 8093 E800 		sts 232,r24
 530               	.LBE194:
 531               	.LBE193:
 388:../../protocol/lufa/lufa.c **** }
 532               		.loc 1 388 0
 533 0050 80E1      		ldi r24,lo8(16)
 534 0052 FE01      		movw r30,r28
 535 0054 A0E0      		ldi r26,lo8(keyboard_report_sent)
 536 0056 B0E0      		ldi r27,hi8(keyboard_report_sent)
 537               		0:
 538 0058 0190      		ld r0,Z+
 539 005a 0D92      		st X+,r0
 540 005c 8A95      		dec r24
 541 005e 01F4      		brne 0b
 542               	.LVL46:
 543               	.L56:
 544               	/* epilogue start */
 389:../../protocol/lufa/lufa.c **** 
 545               		.loc 1 389 0
 546 0060 DF91      		pop r29
 547 0062 CF91      		pop r28
 548 0064 0895      		ret
 549               		.cfi_endproc
 550               	.LFE117:
 552               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 553               	.global	EVENT_USB_Device_Connect
 555               	EVENT_USB_Device_Connect:
 556               	.LFB108:
 150:../../protocol/lufa/lufa.c **** }
 557               		.loc 1 150 0
 558               		.cfi_startproc
 559               	/* prologue: function */
 560               	/* frame size = 0 */
 561               	/* stack size = 0 */
 562               	.L__stack_usage = 0
 563 0000 0895      		ret
 564               		.cfi_endproc
 565               	.LFE108:
 567               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 568               	.global	EVENT_USB_Device_Disconnect
 570               	EVENT_USB_Device_Disconnect:
 571               	.LFB109:
 154:../../protocol/lufa/lufa.c **** }
 572               		.loc 1 154 0
 573               		.cfi_startproc
 574               	/* prologue: function */
 575               	/* frame size = 0 */
 576               	/* stack size = 0 */
 577               	.L__stack_usage = 0
 578 0000 0895      		ret
 579               		.cfi_endproc
 580               	.LFE109:
 582               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 583               	.global	EVENT_USB_Device_Reset
 585               	EVENT_USB_Device_Reset:
 586               	.LFB110:
 158:../../protocol/lufa/lufa.c **** }
 587               		.loc 1 158 0
 588               		.cfi_startproc
 589               	/* prologue: function */
 590               	/* frame size = 0 */
 591               	/* stack size = 0 */
 592               	.L__stack_usage = 0
 593 0000 0895      		ret
 594               		.cfi_endproc
 595               	.LFE110:
 597               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 598               	.global	EVENT_USB_Device_Suspend
 600               	EVENT_USB_Device_Suspend:
 601               	.LFB111:
 162:../../protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 602               		.loc 1 162 0
 603               		.cfi_startproc
 604               	/* prologue: function */
 605               	/* frame size = 0 */
 606               	/* stack size = 0 */
 607               	.L__stack_usage = 0
 608 0000 0895      		ret
 609               		.cfi_endproc
 610               	.LFE111:
 612               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 613               	.global	EVENT_USB_Device_WakeUp
 615               	EVENT_USB_Device_WakeUp:
 616               	.LFB112:
 169:../../protocol/lufa/lufa.c ****     suspend_wakeup_init();
 617               		.loc 1 169 0
 618               		.cfi_startproc
 619               	/* prologue: function */
 620               	/* frame size = 0 */
 621               	/* stack size = 0 */
 622               	.L__stack_usage = 0
 170:../../protocol/lufa/lufa.c **** 
 623               		.loc 1 170 0
 624 0000 0C94 0000 		jmp suspend_wakeup_init
 625               	.LVL47:
 626               		.cfi_endproc
 627               	.LFE112:
 629               		.section	.text.EVENT_USB_Device_StartOfFrame,"ax",@progbits
 630               	.global	EVENT_USB_Device_StartOfFrame
 632               	EVENT_USB_Device_StartOfFrame:
 633               	.LFB113:
 180:../../protocol/lufa/lufa.c ****     Console_Task();
 634               		.loc 1 180 0
 635               		.cfi_startproc
 636               	/* prologue: function */
 637               	/* frame size = 0 */
 638               	/* stack size = 0 */
 639               	.L__stack_usage = 0
 640               	.LBB219:
 641               	.LBB220:
  84:../../protocol/lufa/lufa.c ****         return;
 642               		.loc 1 84 0
 643 0000 8091 0000 		lds r24,USB_DeviceState
 644 0004 8430      		cpi r24,lo8(4)
 645 0006 01F4      		brne .L76
 646               	.LBB221:
 647               	.LBB222:
 253:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 648               		.loc 2 253 0
 649 0008 8091 E900 		lds r24,233
 650 000c 8F70      		andi r24,lo8(15)
 651               	.LBB223:
 652               	.LBB224:
 240:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 653               		.loc 2 240 0
 654 000e 2091 EC00 		lds r18,236
 655 0012 922F      		mov r25,r18
 656 0014 9170      		andi r25,lo8(1)
 657 0016 20FD      		sbrc r18,0
 658 0018 90E8      		ldi r25,lo8(-128)
 659               	.L78:
 660               	.LBE224:
 661               	.LBE223:
 253:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 662               		.loc 2 253 0
 663 001a 892B      		or r24,r25
 664               	.LVL48:
 665               	.LBE222:
 666               	.LBE221:
 667               	.LBB225:
 668               	.LBB226:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 669               		.loc 2 270 0
 670 001c 92E0      		ldi r25,lo8(2)
 671 001e 9093 E900 		sts 233,r25
 672               	.LBE226:
 673               	.LBE225:
 674               	.LBB227:
 675               	.LBB228:
 313:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 676               		.loc 2 313 0
 677 0022 9091 EB00 		lds r25,235
 678               	.LBE228:
 679               	.LBE227:
 116:../../protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 680               		.loc 1 116 0
 681 0026 90FF      		sbrs r25,0
 682 0028 00C0      		rjmp .L82
 683               	.LBB229:
 684               	.LBB230:
 370:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 685               		.loc 2 370 0
 686 002a 9091 EE00 		lds r25,238
 687               	.LBE230:
 688               	.LBE229:
 116:../../protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 689               		.loc 1 116 0
 690 002e 97FF      		sbrs r25,7
 691 0030 00C0      		rjmp .L82
 692               	.L88:
 693               	.LBB231:
 694               	.LBB232:
 360:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 695               		.loc 2 360 0
 696 0032 9091 E800 		lds r25,232
 697               	.LBE232:
 698               	.LBE231:
 122:../../protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 699               		.loc 1 122 0
 700 0036 95FF      		sbrs r25,5
 701 0038 00C0      		rjmp .L91
 702               	.LVL49:
 703               	.LBB233:
 704               	.LBB234:
 705               		.loc 2 554 0
 706 003a 1092 F100 		sts 241,__zero_reg__
 707 003e 00C0      		rjmp .L88
 708               	.LVL50:
 709               	.L91:
 710               	.LBE234:
 711               	.LBE233:
 712               	.LBB235:
 713               	.LBB236:
 407:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 714               		.loc 2 407 0
 715 0040 9091 E800 		lds r25,232
 716               	.LBE236:
 717               	.LBE235:
 126:../../protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 718               		.loc 1 126 0
 719 0044 90FF      		sbrs r25,0
 720 0046 00C0      		rjmp .L82
 721               	.LBB237:
 722               	.LBB238:
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 723               		.loc 2 456 0
 724 0048 9091 E800 		lds r25,232
 725 004c 9E77      		andi r25,lo8(126)
 726 004e 9093 E800 		sts 232,r25
 727               	.L82:
 728               	.LVL51:
 729               	.LBE238:
 730               	.LBE237:
 731               	.LBB239:
 732               	.LBB240:
 270:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 733               		.loc 2 270 0
 734 0052 8F70      		andi r24,lo8(15)
 735               	.LVL52:
 736 0054 8093 E900 		sts 233,r24
 737               	.LVL53:
 738               	.L76:
 739 0058 0895      		ret
 740               	.LBE240:
 741               	.LBE239:
 742               	.LBE220:
 743               	.LBE219:
 744               		.cfi_endproc
 745               	.LFE113:
 747               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 748               	.global	EVENT_USB_Device_ConfigurationChanged
 750               	EVENT_USB_Device_ConfigurationChanged:
 751               	.LFB114:
 197:../../protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 752               		.loc 1 197 0
 753               		.cfi_startproc
 754               	/* prologue: function */
 755               	/* frame size = 0 */
 756               	/* stack size = 0 */
 757               	.L__stack_usage = 0
 758               	.LVL54:
 759               	.LBB241:
 760               	.LBB242:
 210:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 761               		.loc 2 210 0
 762 0000 42E0      		ldi r20,lo8(2)
 763 0002 61EC      		ldi r22,lo8(-63)
 764 0004 81E0      		ldi r24,lo8(1)
 765 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 766               	.LVL55:
 767               	.LBE242:
 768               	.LBE241:
 769               	.LBB243:
 770               	.LBB244:
 771 000a 46E2      		ldi r20,lo8(38)
 772 000c 61EC      		ldi r22,lo8(-63)
 773 000e 82E0      		ldi r24,lo8(2)
 774 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 775               	.LVL56:
 776               	.LBE244:
 777               	.LBE243:
 778               	.LBB245:
 779               	.LBB246:
 780 0014 42E2      		ldi r20,lo8(34)
 781 0016 60EC      		ldi r22,lo8(-64)
 782 0018 83E0      		ldi r24,lo8(3)
 783 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 784               	.LVL57:
 785               	.LBE246:
 786               	.LBE245:
 787               	.LBB247:
 788               	.LBB248:
 789 001e 42E1      		ldi r20,lo8(18)
 790 0020 61EC      		ldi r22,lo8(-63)
 791 0022 84E0      		ldi r24,lo8(4)
 792 0024 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 793               	.LVL58:
 794               	.LBE248:
 795               	.LBE247:
 796               		.cfi_endproc
 797               	.LFE114:
 799               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 800               	.global	EVENT_USB_Device_ControlRequest
 802               	EVENT_USB_Device_ControlRequest:
 803               	.LFB115:
 248:../../protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 804               		.loc 1 248 0
 805               		.cfi_startproc
 806               	/* prologue: function */
 807               	/* frame size = 0 */
 808               	/* stack size = 0 */
 809               	.L__stack_usage = 0
 810               	.LVL59:
 253:../../protocol/lufa/lufa.c ****     {
 811               		.loc 1 253 0
 812 0000 8091 0000 		lds r24,USB_ControlRequest+1
 813 0004 8330      		cpi r24,lo8(3)
 814 0006 01F4      		brne .+2
 815 0008 00C0      		rjmp .L95
 816 000a 00F4      		brsh .L96
 817 000c 8130      		cpi r24,lo8(1)
 818 000e 01F0      		breq .L97
 819 0010 8230      		cpi r24,lo8(2)
 820 0012 01F4      		brne .+2
 821 0014 00C0      		rjmp .L98
 822 0016 0895      		ret
 823               	.L96:
 824 0018 8A30      		cpi r24,lo8(10)
 825 001a 01F4      		brne .+2
 826 001c 00C0      		rjmp .L99
 827 001e 8B30      		cpi r24,lo8(11)
 828 0020 01F4      		brne .+2
 829 0022 00C0      		rjmp .L100
 830 0024 8930      		cpi r24,lo8(9)
 831 0026 01F0      		breq .+2
 832 0028 00C0      		rjmp .L93
 833 002a 00C0      		rjmp .L123
 834               	.L97:
 256:../../protocol/lufa/lufa.c ****             {
 835               		.loc 1 256 0
 836 002c 8091 0000 		lds r24,USB_ControlRequest
 837 0030 813A      		cpi r24,lo8(-95)
 838 0032 01F0      		breq .+2
 839 0034 00C0      		rjmp .L93
 840               	.LBB249:
 841               	.LBB250:
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 842               		.loc 2 444 0
 843 0036 8091 E800 		lds r24,232
 844 003a 877F      		andi r24,lo8(-9)
 845 003c 8093 E800 		sts 232,r24
 846               	.LBE250:
 847               	.LBE249:
 261:../../protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 848               		.loc 1 261 0
 849 0040 8091 0000 		lds r24,USB_ControlRequest+4
 850 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 851 0048 892B      		or r24,r25
 852 004a 01F4      		brne .L120
 265:../../protocol/lufa/lufa.c ****                     break;
 853               		.loc 1 265 0
 854 004c 60E1      		ldi r22,lo8(16)
 264:../../protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 855               		.loc 1 264 0
 856 004e 80E0      		ldi r24,lo8(keyboard_report_sent)
 857 0050 90E0      		ldi r25,hi8(keyboard_report_sent)
 858 0052 00C0      		rjmp .L103
 859               	.L120:
 250:../../protocol/lufa/lufa.c **** 
 860               		.loc 1 250 0
 861 0054 60E0      		ldi r22,0
 249:../../protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 862               		.loc 1 249 0
 863 0056 80E0      		ldi r24,0
 864 0058 90E0      		ldi r25,0
 865               	.L103:
 866               	.LVL60:
 270:../../protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 867               		.loc 1 270 0
 868 005a 70E0      		ldi r23,0
 869 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 870               	.LVL61:
 871               	.LBB251:
 872               	.LBB252:
 471:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 873               		.loc 2 471 0
 874 0060 8091 E800 		lds r24,232
 875 0064 8B77      		andi r24,lo8(123)
 876 0066 8093 E800 		sts 232,r24
 877 006a 0895      		ret
 878               	.LVL62:
 879               	.L123:
 880               	.LBE252:
 881               	.LBE251:
 276:../../protocol/lufa/lufa.c ****             {
 882               		.loc 1 276 0
 883 006c 8091 0000 		lds r24,USB_ControlRequest
 884 0070 8132      		cpi r24,lo8(33)
 885 0072 01F0      		breq .+2
 886 0074 00C0      		rjmp .L93
 280:../../protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 887               		.loc 1 280 0
 888 0076 8091 0000 		lds r24,USB_ControlRequest+4
 889 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 890 007e 892B      		or r24,r25
 891 0080 01F0      		breq .+2
 892 0082 00C0      		rjmp .L93
 893               	.LBB253:
 894               	.LBB254:
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 895               		.loc 2 444 0
 896 0084 8091 E800 		lds r24,232
 897 0088 877F      		andi r24,lo8(-9)
 898 008a 8093 E800 		sts 232,r24
 899               	.L107:
 900               	.LBE254:
 901               	.LBE253:
 902               	.LBB255:
 903               	.LBB256:
 419:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 904               		.loc 2 419 0
 905 008e 8091 E800 		lds r24,232
 906               	.LBE256:
 907               	.LBE255:
 284:../../protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 908               		.loc 1 284 0
 909 0092 82FD      		sbrc r24,2
 910 0094 00C0      		rjmp .L124
 285:../../protocol/lufa/lufa.c ****                           return;
 911               		.loc 1 285 0
 912 0096 8091 0000 		lds r24,USB_DeviceState
 913 009a 8111      		cpse r24,__zero_reg__
 914 009c 00C0      		rjmp .L107
 915 009e 00C0      		rjmp .L93
 916               	.L124:
 917               	.LBB257:
 918               	.LBB258:
 542:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 919               		.loc 2 542 0
 920 00a0 8091 F100 		lds r24,241
 921               	.LBE258:
 922               	.LBE257:
 288:../../protocol/lufa/lufa.c **** 
 923               		.loc 1 288 0
 924 00a4 8093 0000 		sts keyboard_led_stats,r24
 925               	.LBB259:
 926               	.LBB260:
 471:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 927               		.loc 2 471 0
 928 00a8 8091 E800 		lds r24,232
 929 00ac 8B77      		andi r24,lo8(123)
 930 00ae 00C0      		rjmp .L121
 931               	.L95:
 932               	.LBE260:
 933               	.LBE259:
 300:../../protocol/lufa/lufa.c ****             {
 934               		.loc 1 300 0
 935 00b0 8091 0000 		lds r24,USB_ControlRequest
 936 00b4 813A      		cpi r24,lo8(-95)
 937 00b6 01F0      		breq .+2
 938 00b8 00C0      		rjmp .L93
 939               	.LBB261:
 940               	.LBB262:
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 941               		.loc 2 444 0
 942 00ba 8091 E800 		lds r24,232
 943 00be 877F      		andi r24,lo8(-9)
 944 00c0 8093 E800 		sts 232,r24
 945               	.L109:
 946               	.LBE262:
 947               	.LBE261:
 948               	.LBB263:
 949               	.LBB264:
 407:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 950               		.loc 2 407 0 discriminator 1
 951 00c4 8091 E800 		lds r24,232
 952               	.LBE264:
 953               	.LBE263:
 303:../../protocol/lufa/lufa.c ****                 Endpoint_Write_8(protocol_report);
 954               		.loc 1 303 0 discriminator 1
 955 00c8 80FF      		sbrs r24,0
 956 00ca 00C0      		rjmp .L109
 304:../../protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 957               		.loc 1 304 0
 958 00cc 8091 0000 		lds r24,protocol_report
 959               	.LVL63:
 960 00d0 00C0      		rjmp .L122
 961               	.LVL64:
 962               	.L100:
 311:../../protocol/lufa/lufa.c ****             {
 963               		.loc 1 311 0
 964 00d2 8091 0000 		lds r24,USB_ControlRequest
 965 00d6 8132      		cpi r24,lo8(33)
 966 00d8 01F4      		brne .L93
 967               	.LBB265:
 968               	.LBB266:
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 969               		.loc 2 444 0
 970 00da 8091 E800 		lds r24,232
 971 00de 877F      		andi r24,lo8(-9)
 972 00e0 8093 E800 		sts 232,r24
 973               	.LBE266:
 974               	.LBE265:
 314:../../protocol/lufa/lufa.c **** 
 975               		.loc 1 314 0
 976 00e4 0E94 0000 		call Endpoint_ClearStatusStage
 977               	.LVL65:
 316:../../protocol/lufa/lufa.c ****             }
 978               		.loc 1 316 0
 979 00e8 9091 0000 		lds r25,USB_ControlRequest+2
 980 00ec 81E0      		ldi r24,lo8(1)
 981 00ee 9111      		cpse r25,__zero_reg__
 982 00f0 00C0      		rjmp .L110
 983 00f2 80E0      		ldi r24,0
 984               	.L110:
 985 00f4 8093 0000 		sts protocol_report,r24
 986 00f8 0895      		ret
 987               	.L99:
 321:../../protocol/lufa/lufa.c ****             {
 988               		.loc 1 321 0
 989 00fa 8091 0000 		lds r24,USB_ControlRequest
 990 00fe 8132      		cpi r24,lo8(33)
 991 0100 01F4      		brne .L93
 992               	.LBB267:
 993               	.LBB268:
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 994               		.loc 2 444 0
 995 0102 8091 E800 		lds r24,232
 996 0106 877F      		andi r24,lo8(-9)
 997 0108 8093 E800 		sts 232,r24
 998               	.LBE268:
 999               	.LBE267:
 324:../../protocol/lufa/lufa.c **** 
 1000               		.loc 1 324 0
 1001 010c 0E94 0000 		call Endpoint_ClearStatusStage
 1002               	.LVL66:
 326:../../protocol/lufa/lufa.c ****             }
 1003               		.loc 1 326 0
 1004 0110 8091 0000 		lds r24,USB_ControlRequest+3
 1005 0114 8093 0000 		sts idle_duration,r24
 1006 0118 0895      		ret
 1007               	.L98:
 331:../../protocol/lufa/lufa.c ****             {
 1008               		.loc 1 331 0
 1009 011a 8091 0000 		lds r24,USB_ControlRequest
 1010 011e 813A      		cpi r24,lo8(-95)
 1011 0120 01F4      		brne .L93
 1012               	.LBB269:
 1013               	.LBB270:
 444:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1014               		.loc 2 444 0
 1015 0122 8091 E800 		lds r24,232
 1016 0126 877F      		andi r24,lo8(-9)
 1017 0128 8093 E800 		sts 232,r24
 1018               	.L111:
 1019               	.LBE270:
 1020               	.LBE269:
 1021               	.LBB271:
 1022               	.LBB272:
 407:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1023               		.loc 2 407 0 discriminator 1
 1024 012c 8091 E800 		lds r24,232
 1025               	.LBE272:
 1026               	.LBE271:
 334:../../protocol/lufa/lufa.c ****                 Endpoint_Write_8(idle_duration);
 1027               		.loc 1 334 0 discriminator 1
 1028 0130 80FF      		sbrs r24,0
 1029 0132 00C0      		rjmp .L111
 335:../../protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 1030               		.loc 1 335 0
 1031 0134 8091 0000 		lds r24,idle_duration
 1032               	.L122:
 1033               	.LVL67:
 1034               	.LBB273:
 1035               	.LBB274:
 1036               		.loc 2 554 0
 1037 0138 8093 F100 		sts 241,r24
 1038               	.LBE274:
 1039               	.LBE273:
 1040               	.LBB275:
 1041               	.LBB276:
 456:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1042               		.loc 2 456 0
 1043 013c 8091 E800 		lds r24,232
 1044               	.LVL68:
 1045 0140 8E77      		andi r24,lo8(126)
 1046               	.LVL69:
 1047               	.L121:
 1048 0142 8093 E800 		sts 232,r24
 1049               	.LBE276:
 1050               	.LBE275:
 337:../../protocol/lufa/lufa.c ****             }
 1051               		.loc 1 337 0
 1052 0146 0C94 0000 		jmp Endpoint_ClearStatusStage
 1053               	.LVL70:
 1054               	.L93:
 1055 014a 0895      		ret
 1056               		.cfi_endproc
 1057               	.LFE115:
 1059               		.section	.text.startup.main,"ax",@progbits
 1060               		.weak	main
 1062               	main:
 1063               	.LFB123:
 507:../../protocol/lufa/lufa.c **** #else
 508:../../protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 509:../../protocol/lufa/lufa.c **** {
 510:../../protocol/lufa/lufa.c ****     return 0;
 511:../../protocol/lufa/lufa.c **** }
 512:../../protocol/lufa/lufa.c **** #endif
 513:../../protocol/lufa/lufa.c **** 
 514:../../protocol/lufa/lufa.c **** 
 515:../../protocol/lufa/lufa.c **** /*******************************************************************************
 516:../../protocol/lufa/lufa.c ****  * main
 517:../../protocol/lufa/lufa.c ****  ******************************************************************************/
 518:../../protocol/lufa/lufa.c **** static void SetupHardware(void)
 519:../../protocol/lufa/lufa.c **** {
 520:../../protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 521:../../protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 522:../../protocol/lufa/lufa.c ****     wdt_disable();
 523:../../protocol/lufa/lufa.c **** 
 524:../../protocol/lufa/lufa.c ****     /* Disable clock division */
 525:../../protocol/lufa/lufa.c ****     clock_prescale_set(clock_div_1);
 526:../../protocol/lufa/lufa.c **** 
 527:../../protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
 528:../../protocol/lufa/lufa.c ****     USB_Disable();
 529:../../protocol/lufa/lufa.c **** 
 530:../../protocol/lufa/lufa.c ****     USB_Init();
 531:../../protocol/lufa/lufa.c **** 
 532:../../protocol/lufa/lufa.c ****     // for Console_Task
 533:../../protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
 534:../../protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
 535:../../protocol/lufa/lufa.c **** }
 536:../../protocol/lufa/lufa.c **** 
 537:../../protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
 538:../../protocol/lufa/lufa.c **** int main(void)
 539:../../protocol/lufa/lufa.c **** {
 1064               		.loc 1 539 0
 1065               		.cfi_startproc
 1066               	/* prologue: function */
 1067               	/* frame size = 0 */
 1068               	/* stack size = 0 */
 1069               	.L__stack_usage = 0
 1070               	.LBB288:
 1071               	.LBB289:
 521:../../protocol/lufa/lufa.c ****     wdt_disable();
 1072               		.loc 1 521 0
 1073 0000 84B7      		in r24,0x34
 1074 0002 877F      		andi r24,lo8(-9)
 1075 0004 84BF      		out 0x34,r24
 1076               	.LBB290:
 1077               	.LBB291:
 1078               		.file 4 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** 
 102:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 103:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** #else
 105:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 106:/usr/lib/avr/include/avr/wdt.h **** #endif
 107:/usr/lib/avr/include/avr/wdt.h **** 
 108:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 109:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 110:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 111:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 112:/usr/lib/avr/include/avr/wdt.h **** #else
 113:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 114:/usr/lib/avr/include/avr/wdt.h **** #endif
 115:/usr/lib/avr/include/avr/wdt.h **** 
 116:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 117:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 118:/usr/lib/avr/include/avr/wdt.h **** #else
 119:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 120:/usr/lib/avr/include/avr/wdt.h **** #endif
 121:/usr/lib/avr/include/avr/wdt.h **** 
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** /**
 124:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 125:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 126:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 127:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 128:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 129:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 130:/usr/lib/avr/include/avr/wdt.h **** 
 131:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 132:/usr/lib/avr/include/avr/wdt.h **** */
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h **** 
 135:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** /*
 138:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 139:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 140:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 141:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 142:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 143:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 144:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 145:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 146:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 147:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 148:/usr/lib/avr/include/avr/wdt.h **** */
 149:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 150:/usr/lib/avr/include/avr/wdt.h **** do { \
 151:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 152:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 153:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 155:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 156:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 157:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 158:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 159:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 160:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 161:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 162:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 163:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 164:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 165:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 166:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 167:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 168:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 169:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 170:/usr/lib/avr/include/avr/wdt.h **** ); \
 171:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 172:/usr/lib/avr/include/avr/wdt.h **** 
 173:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 174:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 175:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 176:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 177:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 178:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 179:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 180:/usr/lib/avr/include/avr/wdt.h ****     : \
 181:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 182:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 183:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 184:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 185:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 186:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 187:/usr/lib/avr/include/avr/wdt.h **** );
 188:/usr/lib/avr/include/avr/wdt.h **** 
 189:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 190:/usr/lib/avr/include/avr/wdt.h **** 
 191:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 192:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 193:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 194:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 195:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 196:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 197:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 198:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 199:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 200:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 201:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 202:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 203:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 204:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 205:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 206:/usr/lib/avr/include/avr/wdt.h **** )
 207:/usr/lib/avr/include/avr/wdt.h **** 
 208:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 209:/usr/lib/avr/include/avr/wdt.h **** do { \
 210:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 211:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 212:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 213:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 214:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 215:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 216:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 217:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 218:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 219:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 220:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 221:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 222:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 223:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 224:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 225:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 226:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 227:/usr/lib/avr/include/avr/wdt.h **** ); \
 228:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 229:/usr/lib/avr/include/avr/wdt.h **** 
 230:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 231:/usr/lib/avr/include/avr/wdt.h **** 
 232:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 233:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 234:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 235:/usr/lib/avr/include/avr/wdt.h **** {
 236:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 237:/usr/lib/avr/include/avr/wdt.h **** 	{
 238:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 239:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 240:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 241:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 242:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 243:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 244:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 245:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 246:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 247:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 248:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 249:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 250:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 251:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 252:/usr/lib/avr/include/avr/wdt.h **** 			);
 253:/usr/lib/avr/include/avr/wdt.h **** 	}
 254:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 255:/usr/lib/avr/include/avr/wdt.h **** 	{
 256:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 257:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 258:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 259:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 260:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 261:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 262:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 263:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 264:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 265:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 266:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 267:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 268:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 269:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 270:/usr/lib/avr/include/avr/wdt.h **** 			);
 271:/usr/lib/avr/include/avr/wdt.h **** 	}
 272:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 273:/usr/lib/avr/include/avr/wdt.h **** 	{
 274:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 275:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 276:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 277:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 278:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 279:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 280:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 281:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 282:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 283:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 284:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 285:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 286:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 287:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 288:/usr/lib/avr/include/avr/wdt.h **** 			);
 289:/usr/lib/avr/include/avr/wdt.h **** 	}
 290:/usr/lib/avr/include/avr/wdt.h **** 	else
 291:/usr/lib/avr/include/avr/wdt.h ****  	{
 292:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 293:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 294:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 295:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 296:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 297:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 298:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 299:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 300:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 301:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 302:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 303:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 304:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 305:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 306:/usr/lib/avr/include/avr/wdt.h **** 			);
 307:/usr/lib/avr/include/avr/wdt.h **** 	}
 308:/usr/lib/avr/include/avr/wdt.h **** }
 309:/usr/lib/avr/include/avr/wdt.h **** 
 310:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 311:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 312:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 313:/usr/lib/avr/include/avr/wdt.h **** {
 314:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 315:/usr/lib/avr/include/avr/wdt.h **** 	{
 316:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 317:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 318:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 319:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 320:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 321:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 322:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 323:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 327:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 328:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 329:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 330:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 331:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 332:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 333:/usr/lib/avr/include/avr/wdt.h **** 				);
 334:/usr/lib/avr/include/avr/wdt.h **** 	}
 335:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 336:/usr/lib/avr/include/avr/wdt.h **** 	{
 337:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 338:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 339:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 340:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 341:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 348:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 352:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 353:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 				);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 357:/usr/lib/avr/include/avr/wdt.h **** 	{
 358:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 359:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 360:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 361:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 362:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 363:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 364:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 365:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 366:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 369:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 370:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 371:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 372:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 373:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 374:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 375:/usr/lib/avr/include/avr/wdt.h **** 				);
 376:/usr/lib/avr/include/avr/wdt.h **** 	}
 377:/usr/lib/avr/include/avr/wdt.h **** 	else
 378:/usr/lib/avr/include/avr/wdt.h **** 	{
 379:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 380:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 381:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 382:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 383:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 384:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 385:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 386:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 387:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 390:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 391:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 392:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 393:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 394:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 395:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 396:/usr/lib/avr/include/avr/wdt.h **** 				);
 397:/usr/lib/avr/include/avr/wdt.h **** 	}
 398:/usr/lib/avr/include/avr/wdt.h **** }
 399:/usr/lib/avr/include/avr/wdt.h **** 
 400:/usr/lib/avr/include/avr/wdt.h **** #else
 401:/usr/lib/avr/include/avr/wdt.h **** 
 402:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 403:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 404:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 405:/usr/lib/avr/include/avr/wdt.h **** {
 406:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 407:/usr/lib/avr/include/avr/wdt.h **** 	{
 408:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 409:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 416:/usr/lib/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 417:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 418:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 419:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 420:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 421:/usr/lib/avr/include/avr/wdt.h **** 		);
 422:/usr/lib/avr/include/avr/wdt.h **** 	}
 423:/usr/lib/avr/include/avr/wdt.h **** 	else
 424:/usr/lib/avr/include/avr/wdt.h **** 	{
 425:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 426:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 427:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 428:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 429:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 433:/usr/lib/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 434:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 435:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 436:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 437:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 438:/usr/lib/avr/include/avr/wdt.h **** 		);
 439:/usr/lib/avr/include/avr/wdt.h **** 	}
 440:/usr/lib/avr/include/avr/wdt.h **** }
 441:/usr/lib/avr/include/avr/wdt.h **** 
 442:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 443:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 444:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 445:/usr/lib/avr/include/avr/wdt.h **** {
 446:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 447:/usr/lib/avr/include/avr/wdt.h **** 	{
 448:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 449:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 450:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 451:/usr/lib/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 452:/usr/lib/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 453:/usr/lib/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 454:/usr/lib/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 455:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 456:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 457:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 458:/usr/lib/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 459:/usr/lib/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 460:/usr/lib/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 461:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 462:/usr/lib/avr/include/avr/wdt.h **** 		);
 463:/usr/lib/avr/include/avr/wdt.h **** 	}
 464:/usr/lib/avr/include/avr/wdt.h **** 	else
 465:/usr/lib/avr/include/avr/wdt.h **** 	{
 466:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 467:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 1079               		.loc 4 467 0
 1080               	/* #APP */
 1081               	 ;  467 "/usr/lib/avr/include/avr/wdt.h" 1
 1082 0006 0FB6      		in __tmp_reg__,__SREG__
 1083 0008 F894      		cli
 1084 000a A895      		wdr
 1085 000c 8091 6000 		lds r24,96
 1086 0010 8861      		ori r24,24
 1087 0012 8093 6000 		sts 96,r24
 1088 0016 1092 6000 		sts 96,__zero_reg__
 1089 001a 0FBE      		out __SREG__,__tmp_reg__
 1090               		
 1091               	 ;  0 "" 2
 1092               	.LVL71:
 1093               	/* #NOAPP */
 1094               	.LBE291:
 1095               	.LBE290:
 1096               	.LBB292:
 1097               	.LBB293:
 1098               		.file 5 "/usr/lib/avr/include/avr/power.h"
   1:/usr/lib/avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/avr/include/avr/power.h ****    Copyright (c) 2011 Frédéric Nadeau
   3:/usr/lib/avr/include/avr/power.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/power.h **** 
   5:/usr/lib/avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/power.h **** 
   8:/usr/lib/avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/avr/power.h ****      distribution.
  14:/usr/lib/avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  15:/usr/lib/avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  16:/usr/lib/avr/include/avr/power.h ****      from this software without specific prior written permission.
  17:/usr/lib/avr/include/avr/power.h **** 
  18:/usr/lib/avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  19:/usr/lib/avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  20:/usr/lib/avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  21:/usr/lib/avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  22:/usr/lib/avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  23:/usr/lib/avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  24:/usr/lib/avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  25:/usr/lib/avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  26:/usr/lib/avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  27:/usr/lib/avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  28:/usr/lib/avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  29:/usr/lib/avr/include/avr/power.h **** 
  30:/usr/lib/avr/include/avr/power.h **** /* $Id$ */
  31:/usr/lib/avr/include/avr/power.h **** 
  32:/usr/lib/avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  33:/usr/lib/avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  34:/usr/lib/avr/include/avr/power.h **** 
  35:/usr/lib/avr/include/avr/power.h **** #include <avr/io.h>
  36:/usr/lib/avr/include/avr/power.h **** #include <stdint.h>
  37:/usr/lib/avr/include/avr/power.h **** 
  38:/usr/lib/avr/include/avr/power.h **** /** \file */
  39:/usr/lib/avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib/avr/include/avr/power.h **** 
  41:/usr/lib/avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib/avr/include/avr/power.h **** 
  43:/usr/lib/avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib/avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib/avr/include/avr/power.h **** peripherals as needed. Some devices have the XTAL Divide Control Register
  46:/usr/lib/avr/include/avr/power.h **** (XDIV) which offer similar functionality as System Clock Prescale
  47:/usr/lib/avr/include/avr/power.h **** Register (CLKPR).
  48:/usr/lib/avr/include/avr/power.h **** 
  49:/usr/lib/avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  50:/usr/lib/avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  51:/usr/lib/avr/include/avr/power.h **** 
  52:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  53:/usr/lib/avr/include/avr/power.h **** the ATmega8). On those devices without a Power Reduction Register, the
  54:/usr/lib/avr/include/avr/power.h **** power reduction macros are not available..
  55:/usr/lib/avr/include/avr/power.h **** 
  56:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  57:/usr/lib/avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  58:/usr/lib/avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  59:/usr/lib/avr/include/avr/power.h **** find out which macros are applicable to your device.
  60:/usr/lib/avr/include/avr/power.h **** 
  61:/usr/lib/avr/include/avr/power.h **** \note For device using the XTAL Divide Control Register (XDIV), when prescaler
  62:/usr/lib/avr/include/avr/power.h **** is used, Timer/Counter0 can only be used in asynchronous mode. Keep in mind
  63:/usr/lib/avr/include/avr/power.h **** that Timer/Counter0 source shall be less than ¼th of peripheral clock.
  64:/usr/lib/avr/include/avr/power.h **** Therefore, when using a typical 32.768 kHz crystal, one shall not scale
  65:/usr/lib/avr/include/avr/power.h **** the clock below 131.072 kHz.
  66:/usr/lib/avr/include/avr/power.h **** 
  67:/usr/lib/avr/include/avr/power.h **** */
  68:/usr/lib/avr/include/avr/power.h **** 
  69:/usr/lib/avr/include/avr/power.h **** 
  70:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
  71:/usr/lib/avr/include/avr/power.h **** 
  72:/usr/lib/avr/include/avr/power.h **** \anchor avr_powermacros
  73:/usr/lib/avr/include/avr/power.h **** <small>
  74:/usr/lib/avr/include/avr/power.h **** <center>
  75:/usr/lib/avr/include/avr/power.h **** <table border="3">
  76:/usr/lib/avr/include/avr/power.h ****   <tr>
  77:/usr/lib/avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  78:/usr/lib/avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  79:/usr/lib/avr/include/avr/power.h ****   </tr>
  80:/usr/lib/avr/include/avr/power.h **** 
  81:/usr/lib/avr/include/avr/power.h ****   <tr>
  82:/usr/lib/avr/include/avr/power.h ****     <td>power_aca_disable()</td>
  83:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog Comparator on PortA.</td>
  84:/usr/lib/avr/include/avr/power.h ****   </tr>
  85:/usr/lib/avr/include/avr/power.h **** 
  86:/usr/lib/avr/include/avr/power.h ****   <tr>
  87:/usr/lib/avr/include/avr/power.h ****     <td>power_aca_enable()</td>
  88:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog Comparator on PortA.</td>
  89:/usr/lib/avr/include/avr/power.h ****   </tr>
  90:/usr/lib/avr/include/avr/power.h **** 
  91:/usr/lib/avr/include/avr/power.h ****   <tr>
  92:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  93:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  94:/usr/lib/avr/include/avr/power.h ****   </tr>
  95:/usr/lib/avr/include/avr/power.h **** 
  96:/usr/lib/avr/include/avr/power.h ****   <tr>
  97:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  98:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  99:/usr/lib/avr/include/avr/power.h ****   </tr>
 100:/usr/lib/avr/include/avr/power.h **** 
 101:/usr/lib/avr/include/avr/power.h ****   <tr>
 102:/usr/lib/avr/include/avr/power.h ****     <td>power_adca_disable()</td>
 103:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module on PortA</td>
 104:/usr/lib/avr/include/avr/power.h ****   </tr>
 105:/usr/lib/avr/include/avr/power.h **** 
 106:/usr/lib/avr/include/avr/power.h ****   <tr>
 107:/usr/lib/avr/include/avr/power.h ****     <td>power_adca_enable()</td>
 108:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module on PortA</td>
 109:/usr/lib/avr/include/avr/power.h ****   </tr>
 110:/usr/lib/avr/include/avr/power.h **** 
 111:/usr/lib/avr/include/avr/power.h ****   <tr>
 112:/usr/lib/avr/include/avr/power.h ****     <td>power_evsys_disable()</td>
 113:/usr/lib/avr/include/avr/power.h ****     <td>Disable the EVSYS module</td>
 114:/usr/lib/avr/include/avr/power.h ****   </tr>
 115:/usr/lib/avr/include/avr/power.h **** 
 116:/usr/lib/avr/include/avr/power.h ****   <tr>
 117:/usr/lib/avr/include/avr/power.h ****     <td>power_evsys_enable()</td>
 118:/usr/lib/avr/include/avr/power.h ****     <td>Enable the EVSYS module</td>
 119:/usr/lib/avr/include/avr/power.h ****   </tr>
 120:/usr/lib/avr/include/avr/power.h **** 
 121:/usr/lib/avr/include/avr/power.h ****   <tr>
 122:/usr/lib/avr/include/avr/power.h ****     <td>power_hiresc_disable()</td>
 123:/usr/lib/avr/include/avr/power.h ****     <td>Disable the HIRES module on PortC</td>
 124:/usr/lib/avr/include/avr/power.h ****   </tr>
 125:/usr/lib/avr/include/avr/power.h **** 
 126:/usr/lib/avr/include/avr/power.h ****   <tr>
 127:/usr/lib/avr/include/avr/power.h ****     <td>power_hiresc_enable()</td>
 128:/usr/lib/avr/include/avr/power.h ****     <td>Enable the HIRES module on PortC</td>
 129:/usr/lib/avr/include/avr/power.h ****   </tr>
 130:/usr/lib/avr/include/avr/power.h **** 
 131:/usr/lib/avr/include/avr/power.h ****    <tr>
 132:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
 133:/usr/lib/avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
 134:/usr/lib/avr/include/avr/power.h ****   </tr>
 135:/usr/lib/avr/include/avr/power.h **** 
 136:/usr/lib/avr/include/avr/power.h ****   <tr>
 137:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
 138:/usr/lib/avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
 139:/usr/lib/avr/include/avr/power.h ****   </tr>
 140:/usr/lib/avr/include/avr/power.h **** 
 141:/usr/lib/avr/include/avr/power.h ****   <tr>
 142:/usr/lib/avr/include/avr/power.h ****     <td>power_pga_enable()</td>
 143:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Programmable Gain Amplifier module.</td>
 144:/usr/lib/avr/include/avr/power.h ****   </tr>
 145:/usr/lib/avr/include/avr/power.h **** 
 146:/usr/lib/avr/include/avr/power.h ****   <tr>
 147:/usr/lib/avr/include/avr/power.h ****     <td>power_pga_disable()</td>
 148:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Programmable Gain Amplifier module.</td>
 149:/usr/lib/avr/include/avr/power.h ****   </tr>
 150:/usr/lib/avr/include/avr/power.h **** 
 151:/usr/lib/avr/include/avr/power.h ****   <tr>
 152:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 153:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 154:/usr/lib/avr/include/avr/power.h ****   </tr>
 155:/usr/lib/avr/include/avr/power.h **** 
 156:/usr/lib/avr/include/avr/power.h ****   <tr>
 157:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 158:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 159:/usr/lib/avr/include/avr/power.h ****   </tr>
 160:/usr/lib/avr/include/avr/power.h **** 
 161:/usr/lib/avr/include/avr/power.h ****   <tr>
 162:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 163:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 164:/usr/lib/avr/include/avr/power.h ****   </tr>
 165:/usr/lib/avr/include/avr/power.h **** 
 166:/usr/lib/avr/include/avr/power.h ****   <tr>
 167:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 168:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 169:/usr/lib/avr/include/avr/power.h ****   </tr>
 170:/usr/lib/avr/include/avr/power.h **** 
 171:/usr/lib/avr/include/avr/power.h ****   <tr>
 172:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 173:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 174:/usr/lib/avr/include/avr/power.h ****   </tr>
 175:/usr/lib/avr/include/avr/power.h **** 
 176:/usr/lib/avr/include/avr/power.h ****   <tr>
 177:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 178:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 179:/usr/lib/avr/include/avr/power.h ****   </tr>
 180:/usr/lib/avr/include/avr/power.h **** 
 181:/usr/lib/avr/include/avr/power.h ****   <tr>
 182:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 183:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 184:/usr/lib/avr/include/avr/power.h ****   </tr>
 185:/usr/lib/avr/include/avr/power.h **** 
 186:/usr/lib/avr/include/avr/power.h ****   <tr>
 187:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 188:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 189:/usr/lib/avr/include/avr/power.h ****   </tr>
 190:/usr/lib/avr/include/avr/power.h **** 
 191:/usr/lib/avr/include/avr/power.h ****   <tr>
 192:/usr/lib/avr/include/avr/power.h ****     <td>power_ram0_enable()</td>
 193:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 0 .</td>
 194:/usr/lib/avr/include/avr/power.h ****   </tr>
 195:/usr/lib/avr/include/avr/power.h **** 
 196:/usr/lib/avr/include/avr/power.h ****   <tr>
 197:/usr/lib/avr/include/avr/power.h ****     <td>power_ram0_disable()</td>
 198:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 0. </td>
 199:/usr/lib/avr/include/avr/power.h ****   </tr>
 200:/usr/lib/avr/include/avr/power.h **** 
 201:/usr/lib/avr/include/avr/power.h ****   <tr>
 202:/usr/lib/avr/include/avr/power.h ****     <td>power_ram1_enable()</td>
 203:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 1 .</td>
 204:/usr/lib/avr/include/avr/power.h ****   </tr>
 205:/usr/lib/avr/include/avr/power.h **** 
 206:/usr/lib/avr/include/avr/power.h ****   <tr>
 207:/usr/lib/avr/include/avr/power.h ****     <td>power_ram1_disable()</td>
 208:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 1. </td>
 209:/usr/lib/avr/include/avr/power.h ****   </tr>
 210:/usr/lib/avr/include/avr/power.h **** 
 211:/usr/lib/avr/include/avr/power.h ****   <tr>
 212:/usr/lib/avr/include/avr/power.h ****     <td>power_ram2_enable()</td>
 213:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 2 .</td>
 214:/usr/lib/avr/include/avr/power.h ****   </tr>
 215:/usr/lib/avr/include/avr/power.h **** 
 216:/usr/lib/avr/include/avr/power.h ****   <tr>
 217:/usr/lib/avr/include/avr/power.h ****     <td>power_ram2_disable()</td>
 218:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 2. </td>
 219:/usr/lib/avr/include/avr/power.h ****   </tr>
 220:/usr/lib/avr/include/avr/power.h **** 
 221:/usr/lib/avr/include/avr/power.h ****   <tr>
 222:/usr/lib/avr/include/avr/power.h ****     <td>power_ram3_enable()</td>
 223:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 3 .</td>
 224:/usr/lib/avr/include/avr/power.h ****   </tr>
 225:/usr/lib/avr/include/avr/power.h **** 
 226:/usr/lib/avr/include/avr/power.h ****   <tr>
 227:/usr/lib/avr/include/avr/power.h ****     <td>power_ram3_disable()</td>
 228:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 3. </td>
 229:/usr/lib/avr/include/avr/power.h ****   </tr>
 230:/usr/lib/avr/include/avr/power.h **** 
 231:/usr/lib/avr/include/avr/power.h ****   <tr>
 232:/usr/lib/avr/include/avr/power.h ****     <td>power_rtc_disable()</td>
 233:/usr/lib/avr/include/avr/power.h ****     <td>Disable the RTC module</td>
 234:/usr/lib/avr/include/avr/power.h ****   </tr>
 235:/usr/lib/avr/include/avr/power.h **** 
 236:/usr/lib/avr/include/avr/power.h ****   <tr>
 237:/usr/lib/avr/include/avr/power.h ****     <td>power_rtc_enable()</td>
 238:/usr/lib/avr/include/avr/power.h ****     <td>Enable the RTC module</td>
 239:/usr/lib/avr/include/avr/power.h ****   </tr>
 240:/usr/lib/avr/include/avr/power.h **** 
 241:/usr/lib/avr/include/avr/power.h ****   <tr>
 242:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 243:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 244:/usr/lib/avr/include/avr/power.h ****   </tr>
 245:/usr/lib/avr/include/avr/power.h **** 
 246:/usr/lib/avr/include/avr/power.h ****   <tr>
 247:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 248:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 249:/usr/lib/avr/include/avr/power.h ****   </tr>
 250:/usr/lib/avr/include/avr/power.h **** 
 251:/usr/lib/avr/include/avr/power.h ****   <tr>
 252:/usr/lib/avr/include/avr/power.h ****     <td>power_spic_disable()</td>
 253:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SPI module on PortC</td>
 254:/usr/lib/avr/include/avr/power.h ****   </tr>
 255:/usr/lib/avr/include/avr/power.h **** 
 256:/usr/lib/avr/include/avr/power.h ****   <tr>
 257:/usr/lib/avr/include/avr/power.h ****     <td>power_spic_enable()</td>
 258:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SPI module on PortC</td>
 259:/usr/lib/avr/include/avr/power.h ****   </tr>
 260:/usr/lib/avr/include/avr/power.h **** 
 261:/usr/lib/avr/include/avr/power.h ****   <tr>
 262:/usr/lib/avr/include/avr/power.h ****     <td>power_spid_disable()</td>
 263:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SPI module on PortD</td>
 264:/usr/lib/avr/include/avr/power.h ****   </tr>
 265:/usr/lib/avr/include/avr/power.h **** 
 266:/usr/lib/avr/include/avr/power.h ****   <tr>
 267:/usr/lib/avr/include/avr/power.h ****     <td>power_spid_enable()</td>
 268:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SPI module on PortD</td>
 269:/usr/lib/avr/include/avr/power.h ****   </tr>
 270:/usr/lib/avr/include/avr/power.h **** 
 271:/usr/lib/avr/include/avr/power.h ****   <tr>
 272:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0c_disable()</td>
 273:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortC</td>
 274:/usr/lib/avr/include/avr/power.h ****   </tr>
 275:/usr/lib/avr/include/avr/power.h **** 
 276:/usr/lib/avr/include/avr/power.h ****   <tr>
 277:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0c_enable()</td>
 278:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortC</td>
 279:/usr/lib/avr/include/avr/power.h ****   </tr>
 280:/usr/lib/avr/include/avr/power.h **** 
 281:/usr/lib/avr/include/avr/power.h ****   <tr>
 282:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0d_disable()</td>
 283:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortD</td>
 284:/usr/lib/avr/include/avr/power.h ****   </tr>
 285:/usr/lib/avr/include/avr/power.h **** 
 286:/usr/lib/avr/include/avr/power.h ****   <tr>
 287:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0d_enable()</td>
 288:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortD</td>
 289:/usr/lib/avr/include/avr/power.h ****   </tr>
 290:/usr/lib/avr/include/avr/power.h **** 
 291:/usr/lib/avr/include/avr/power.h ****   <tr>
 292:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0e_disable()</td>
 293:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortE</td>
 294:/usr/lib/avr/include/avr/power.h ****   </tr>
 295:/usr/lib/avr/include/avr/power.h **** 
 296:/usr/lib/avr/include/avr/power.h ****   <tr>
 297:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0e_enable()</td>
 298:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortE</td>
 299:/usr/lib/avr/include/avr/power.h ****   </tr>
 300:/usr/lib/avr/include/avr/power.h **** 
 301:/usr/lib/avr/include/avr/power.h ****   <tr>
 302:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0f_disable()</td>
 303:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortF</td>
 304:/usr/lib/avr/include/avr/power.h ****   </tr>
 305:/usr/lib/avr/include/avr/power.h **** 
 306:/usr/lib/avr/include/avr/power.h ****   <tr>
 307:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0f_enable()</td>
 308:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortF</td>
 309:/usr/lib/avr/include/avr/power.h ****   </tr>
 310:/usr/lib/avr/include/avr/power.h **** 
 311:/usr/lib/avr/include/avr/power.h ****   <tr>
 312:/usr/lib/avr/include/avr/power.h ****     <td>power_tc1c_disable()</td>
 313:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC1 module on PortC</td>
 314:/usr/lib/avr/include/avr/power.h ****   </tr>
 315:/usr/lib/avr/include/avr/power.h **** 
 316:/usr/lib/avr/include/avr/power.h ****   <tr>
 317:/usr/lib/avr/include/avr/power.h ****     <td>power_tc1c_enable()</td>
 318:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC1 module on PortC</td>
 319:/usr/lib/avr/include/avr/power.h ****   </tr>
 320:/usr/lib/avr/include/avr/power.h **** 
 321:/usr/lib/avr/include/avr/power.h ****   <tr>
 322:/usr/lib/avr/include/avr/power.h ****     <td>power_twic_disable()</td>
 323:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortC</td>
 324:/usr/lib/avr/include/avr/power.h ****   </tr>
 325:/usr/lib/avr/include/avr/power.h **** 
 326:/usr/lib/avr/include/avr/power.h ****   <tr>
 327:/usr/lib/avr/include/avr/power.h ****     <td>power_twic_enable()</td>
 328:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortC</td>
 329:/usr/lib/avr/include/avr/power.h ****   </tr>
 330:/usr/lib/avr/include/avr/power.h **** 
 331:/usr/lib/avr/include/avr/power.h ****   <tr>
 332:/usr/lib/avr/include/avr/power.h ****     <td>power_twie_disable()</td>
 333:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortE</td>
 334:/usr/lib/avr/include/avr/power.h ****   </tr>
 335:/usr/lib/avr/include/avr/power.h **** 
 336:/usr/lib/avr/include/avr/power.h ****   <tr>
 337:/usr/lib/avr/include/avr/power.h ****     <td>power_twie_enable()</td>
 338:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortE</td>
 339:/usr/lib/avr/include/avr/power.h ****   </tr>
 340:/usr/lib/avr/include/avr/power.h **** 
 341:/usr/lib/avr/include/avr/power.h ****   <tr>
 342:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 343:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 344:/usr/lib/avr/include/avr/power.h ****   </tr>
 345:/usr/lib/avr/include/avr/power.h **** 
 346:/usr/lib/avr/include/avr/power.h ****   <tr>
 347:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 348:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 349:/usr/lib/avr/include/avr/power.h ****   </tr>
 350:/usr/lib/avr/include/avr/power.h **** 
 351:/usr/lib/avr/include/avr/power.h ****   <tr>
 352:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 353:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 354:/usr/lib/avr/include/avr/power.h ****   </tr>
 355:/usr/lib/avr/include/avr/power.h **** 
 356:/usr/lib/avr/include/avr/power.h ****   <tr>
 357:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 358:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 359:/usr/lib/avr/include/avr/power.h ****   </tr>
 360:/usr/lib/avr/include/avr/power.h **** 
 361:/usr/lib/avr/include/avr/power.h ****   <tr>
 362:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 363:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 364:/usr/lib/avr/include/avr/power.h ****   </tr>
 365:/usr/lib/avr/include/avr/power.h **** 
 366:/usr/lib/avr/include/avr/power.h ****   <tr>
 367:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 368:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 369:/usr/lib/avr/include/avr/power.h ****   </tr>
 370:/usr/lib/avr/include/avr/power.h **** 
 371:/usr/lib/avr/include/avr/power.h ****   <tr>
 372:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 373:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 374:/usr/lib/avr/include/avr/power.h ****   </tr>
 375:/usr/lib/avr/include/avr/power.h **** 
 376:/usr/lib/avr/include/avr/power.h ****   <tr>
 377:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 378:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 379:/usr/lib/avr/include/avr/power.h ****   </tr>
 380:/usr/lib/avr/include/avr/power.h **** 
 381:/usr/lib/avr/include/avr/power.h ****   <tr>
 382:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 383:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 384:/usr/lib/avr/include/avr/power.h ****   </tr>
 385:/usr/lib/avr/include/avr/power.h **** 
 386:/usr/lib/avr/include/avr/power.h ****   <tr>
 387:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 388:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 389:/usr/lib/avr/include/avr/power.h ****   </tr>
 390:/usr/lib/avr/include/avr/power.h **** 
 391:/usr/lib/avr/include/avr/power.h ****   <tr>
 392:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 393:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 394:/usr/lib/avr/include/avr/power.h ****   </tr>
 395:/usr/lib/avr/include/avr/power.h **** 
 396:/usr/lib/avr/include/avr/power.h ****   <tr>
 397:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 398:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 399:/usr/lib/avr/include/avr/power.h ****   </tr>
 400:/usr/lib/avr/include/avr/power.h **** 
 401:/usr/lib/avr/include/avr/power.h ****   <tr>
 402:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 403:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 404:/usr/lib/avr/include/avr/power.h ****   </tr>
 405:/usr/lib/avr/include/avr/power.h **** 
 406:/usr/lib/avr/include/avr/power.h ****   <tr>
 407:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 408:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 409:/usr/lib/avr/include/avr/power.h ****   </tr>
 410:/usr/lib/avr/include/avr/power.h **** 
 411:/usr/lib/avr/include/avr/power.h ****   <tr>
 412:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 413:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 414:/usr/lib/avr/include/avr/power.h ****   </tr>
 415:/usr/lib/avr/include/avr/power.h **** 
 416:/usr/lib/avr/include/avr/power.h ****   <tr>
 417:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 418:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 419:/usr/lib/avr/include/avr/power.h ****   </tr>
 420:/usr/lib/avr/include/avr/power.h **** 
 421:/usr/lib/avr/include/avr/power.h ****   <tr>
 422:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 423:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 424:/usr/lib/avr/include/avr/power.h ****   </tr>
 425:/usr/lib/avr/include/avr/power.h **** 
 426:/usr/lib/avr/include/avr/power.h ****   <tr>
 427:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 428:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 429:/usr/lib/avr/include/avr/power.h ****   </tr>
 430:/usr/lib/avr/include/avr/power.h **** 
 431:/usr/lib/avr/include/avr/power.h ****   <tr>
 432:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 433:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 434:/usr/lib/avr/include/avr/power.h ****   </tr>
 435:/usr/lib/avr/include/avr/power.h **** 
 436:/usr/lib/avr/include/avr/power.h ****   <tr>
 437:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 438:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 439:/usr/lib/avr/include/avr/power.h ****   </tr>
 440:/usr/lib/avr/include/avr/power.h **** 
 441:/usr/lib/avr/include/avr/power.h ****   <tr>
 442:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 443:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 444:/usr/lib/avr/include/avr/power.h ****   </tr>
 445:/usr/lib/avr/include/avr/power.h **** 
 446:/usr/lib/avr/include/avr/power.h ****   <tr>
 447:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 448:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 449:/usr/lib/avr/include/avr/power.h ****   </tr>
 450:/usr/lib/avr/include/avr/power.h **** 
 451:/usr/lib/avr/include/avr/power.h ****   <tr>
 452:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 453:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 454:/usr/lib/avr/include/avr/power.h ****   </tr>
 455:/usr/lib/avr/include/avr/power.h **** 
 456:/usr/lib/avr/include/avr/power.h ****   <tr>
 457:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 458:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 459:/usr/lib/avr/include/avr/power.h ****   </tr>
 460:/usr/lib/avr/include/avr/power.h **** 
 461:/usr/lib/avr/include/avr/power.h ****   <tr>
 462:/usr/lib/avr/include/avr/power.h ****     <td>power_usartc0_disable()</td>
 463:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortC</td>
 464:/usr/lib/avr/include/avr/power.h ****   </tr>
 465:/usr/lib/avr/include/avr/power.h **** 
 466:/usr/lib/avr/include/avr/power.h ****   <tr>
 467:/usr/lib/avr/include/avr/power.h ****     <td>power_usartc0_enable()</td>
 468:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortC</td>
 469:/usr/lib/avr/include/avr/power.h ****   </tr>
 470:/usr/lib/avr/include/avr/power.h **** 
 471:/usr/lib/avr/include/avr/power.h ****   <tr>
 472:/usr/lib/avr/include/avr/power.h ****     <td>power_usartd0_disable()</td>
 473:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortD</td>
 474:/usr/lib/avr/include/avr/power.h ****   </tr>
 475:/usr/lib/avr/include/avr/power.h **** 
 476:/usr/lib/avr/include/avr/power.h ****   <tr>
 477:/usr/lib/avr/include/avr/power.h ****     <td>power_usartd0_enable()</td>
 478:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortD</td>
 479:/usr/lib/avr/include/avr/power.h ****   </tr>
 480:/usr/lib/avr/include/avr/power.h **** 
 481:/usr/lib/avr/include/avr/power.h ****   <tr>
 482:/usr/lib/avr/include/avr/power.h ****     <td>power_usarte0_disable()</td>
 483:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortE</td>
 484:/usr/lib/avr/include/avr/power.h ****   </tr>
 485:/usr/lib/avr/include/avr/power.h **** 
 486:/usr/lib/avr/include/avr/power.h ****   <tr>
 487:/usr/lib/avr/include/avr/power.h ****     <td>power_usarte0_enable()</td>
 488:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortE</td>
 489:/usr/lib/avr/include/avr/power.h ****   </tr>
 490:/usr/lib/avr/include/avr/power.h **** 
 491:/usr/lib/avr/include/avr/power.h ****   <tr>
 492:/usr/lib/avr/include/avr/power.h ****     <td>power_usartf0_disable()</td>
 493:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortF</td>
 494:/usr/lib/avr/include/avr/power.h ****   </tr>
 495:/usr/lib/avr/include/avr/power.h **** 
 496:/usr/lib/avr/include/avr/power.h ****   <tr>
 497:/usr/lib/avr/include/avr/power.h ****     <td>power_usartf0_enable()</td>
 498:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortF</td>
 499:/usr/lib/avr/include/avr/power.h ****   </tr>
 500:/usr/lib/avr/include/avr/power.h **** 
 501:/usr/lib/avr/include/avr/power.h ****   <tr>
 502:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 503:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 504:/usr/lib/avr/include/avr/power.h ****   </tr>
 505:/usr/lib/avr/include/avr/power.h **** 
 506:/usr/lib/avr/include/avr/power.h ****   <tr>
 507:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 508:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 509:/usr/lib/avr/include/avr/power.h ****   </tr>
 510:/usr/lib/avr/include/avr/power.h **** 
 511:/usr/lib/avr/include/avr/power.h ****   <tr>
 512:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 513:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 514:/usr/lib/avr/include/avr/power.h ****   </tr>
 515:/usr/lib/avr/include/avr/power.h **** 
 516:/usr/lib/avr/include/avr/power.h ****   <tr>
 517:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 518:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 519:/usr/lib/avr/include/avr/power.h ****   </tr>
 520:/usr/lib/avr/include/avr/power.h **** 
 521:/usr/lib/avr/include/avr/power.h ****   <tr>
 522:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 523:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 524:/usr/lib/avr/include/avr/power.h ****   </tr>
 525:/usr/lib/avr/include/avr/power.h **** 
 526:/usr/lib/avr/include/avr/power.h ****   <tr>
 527:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 528:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 529:/usr/lib/avr/include/avr/power.h ****   </tr>
 530:/usr/lib/avr/include/avr/power.h **** 
 531:/usr/lib/avr/include/avr/power.h ****   <tr>
 532:/usr/lib/avr/include/avr/power.h ****     <td>power_all_enable()</td>
 533:/usr/lib/avr/include/avr/power.h ****     <td>Enable all modules.</td>
 534:/usr/lib/avr/include/avr/power.h ****   </tr>
 535:/usr/lib/avr/include/avr/power.h **** 
 536:/usr/lib/avr/include/avr/power.h ****   <tr>
 537:/usr/lib/avr/include/avr/power.h ****     <td>power_all_disable()</td>
 538:/usr/lib/avr/include/avr/power.h ****     <td>Disable all modules.</td>
 539:/usr/lib/avr/include/avr/power.h ****   </tr>
 540:/usr/lib/avr/include/avr/power.h **** </table>
 541:/usr/lib/avr/include/avr/power.h **** </center>
 542:/usr/lib/avr/include/avr/power.h **** </small>
 543:/usr/lib/avr/include/avr/power.h **** 
 544:/usr/lib/avr/include/avr/power.h **** @} */
 545:/usr/lib/avr/include/avr/power.h **** 
 546:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRADC)
 547:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 548:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 549:/usr/lib/avr/include/avr/power.h **** #endif
 550:/usr/lib/avr/include/avr/power.h **** 
 551:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRCAN)
 552:/usr/lib/avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
 553:/usr/lib/avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
 554:/usr/lib/avr/include/avr/power.h **** #endif
 555:/usr/lib/avr/include/avr/power.h **** 
 556:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRLCD)
 557:/usr/lib/avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 558:/usr/lib/avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 559:/usr/lib/avr/include/avr/power.h **** #endif
 560:/usr/lib/avr/include/avr/power.h **** 
 561:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRLIN)
 562:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
 563:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
 564:/usr/lib/avr/include/avr/power.h **** #endif
 565:/usr/lib/avr/include/avr/power.h **** 
 566:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC)
 567:/usr/lib/avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
 568:/usr/lib/avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
 569:/usr/lib/avr/include/avr/power.h **** #endif
 570:/usr/lib/avr/include/avr/power.h **** 
 571:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC0)
 572:/usr/lib/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 573:/usr/lib/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 574:/usr/lib/avr/include/avr/power.h **** #endif
 575:/usr/lib/avr/include/avr/power.h **** 
 576:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC1)
 577:/usr/lib/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 578:/usr/lib/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 579:/usr/lib/avr/include/avr/power.h **** #endif
 580:/usr/lib/avr/include/avr/power.h **** 
 581:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC2)
 582:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 583:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 584:/usr/lib/avr/include/avr/power.h **** #endif
 585:/usr/lib/avr/include/avr/power.h **** 
 586:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRSCR)
 587:/usr/lib/avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 588:/usr/lib/avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 589:/usr/lib/avr/include/avr/power.h **** #endif
 590:/usr/lib/avr/include/avr/power.h **** 
 591:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRSPI)
 592:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 593:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 594:/usr/lib/avr/include/avr/power.h **** #endif
 595:/usr/lib/avr/include/avr/power.h **** 
 596:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM0)
 597:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 598:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 599:/usr/lib/avr/include/avr/power.h **** #endif
 600:/usr/lib/avr/include/avr/power.h **** 
 601:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM1)
 602:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 603:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 604:/usr/lib/avr/include/avr/power.h **** #endif
 605:/usr/lib/avr/include/avr/power.h **** 
 606:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM2)
 607:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
 608:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
 609:/usr/lib/avr/include/avr/power.h **** #endif
 610:/usr/lib/avr/include/avr/power.h **** 
 611:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTWI)
 612:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
 613:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
 614:/usr/lib/avr/include/avr/power.h **** #endif
 615:/usr/lib/avr/include/avr/power.h **** 
 616:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART)
 617:/usr/lib/avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 618:/usr/lib/avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 619:/usr/lib/avr/include/avr/power.h **** #endif
 620:/usr/lib/avr/include/avr/power.h **** 
 621:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART0)
 622:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib/avr/include/avr/power.h **** #endif
 625:/usr/lib/avr/include/avr/power.h **** 
 626:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART1)
 627:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR &= (uint8_t)~(1 << PRUSART1))
 628:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR |= (uint8_t)(1 << PRUSART1))
 629:/usr/lib/avr/include/avr/power.h **** #endif
 630:/usr/lib/avr/include/avr/power.h **** 
 631:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSI)
 632:/usr/lib/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
 633:/usr/lib/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
 634:/usr/lib/avr/include/avr/power.h **** #endif
 635:/usr/lib/avr/include/avr/power.h **** 
 636:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRADC)
 637:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 638:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 639:/usr/lib/avr/include/avr/power.h **** #endif
 640:/usr/lib/avr/include/avr/power.h **** 
 641:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRC0)
 642:/usr/lib/avr/include/avr/power.h **** #define power_clock_output_enable()     (PRR0 &= (uint8_t)~(1 << PRCO))
 643:/usr/lib/avr/include/avr/power.h **** #define power_clock_output_disable()    (PRR0 |= (uint8_t)(1 << PRCO))
 644:/usr/lib/avr/include/avr/power.h **** #endif
 645:/usr/lib/avr/include/avr/power.h **** 
 646:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRCRC)
 647:/usr/lib/avr/include/avr/power.h **** #define power_crc_enable()              (PRR0 &= (uint8_t)~(1 << PRCRC))
 648:/usr/lib/avr/include/avr/power.h **** #define power_crc_disable()             (PRR0 |= (uint8_t)(1 << PRCRC))
 649:/usr/lib/avr/include/avr/power.h **** #endif
 650:/usr/lib/avr/include/avr/power.h **** 
 651:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRCU)
 652:/usr/lib/avr/include/avr/power.h **** #define power_crypto_enable()           (PRR0 &= (uint8_t)~(1 << PRCU))
 653:/usr/lib/avr/include/avr/power.h **** #define power_crypto_disable()          (PRR0 |= (uint8_t)(1 << PRCU))
 654:/usr/lib/avr/include/avr/power.h **** #endif
 655:/usr/lib/avr/include/avr/power.h **** 
 656:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRDS)
 657:/usr/lib/avr/include/avr/power.h **** #define power_irdriver_enable()         (PRR0 &= (uint8_t)~(1 << PRDS))
 658:/usr/lib/avr/include/avr/power.h **** #define power_irdriver_disable()        (PRR0 |= (uint8_t)(1 << PRDS))
 659:/usr/lib/avr/include/avr/power.h **** #endif
 660:/usr/lib/avr/include/avr/power.h **** 
 661:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRLFR)
 662:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_enable()       (PRR0 &= (uint8_t)~(1 << PRLFR))            
 663:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_disable()      (PRR0 |= (uint8_t)(1 << PRLFR))            
 664:/usr/lib/avr/include/avr/power.h **** #endif
 665:/usr/lib/avr/include/avr/power.h **** 
 666:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRLIN)
 667:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()              (PRR0 &= (uint8_t)~(1 << PRLIN))
 668:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()             (PRR0 |= (uint8_t)(1 << PRLIN))
 669:/usr/lib/avr/include/avr/power.h **** #endif
 670:/usr/lib/avr/include/avr/power.h **** 
 671:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRPGA)
 672:/usr/lib/avr/include/avr/power.h **** #define power_pga_enable()              (PRR0 &= (uint8_t)~(1 << PRPGA))
 673:/usr/lib/avr/include/avr/power.h **** #define power_pga_disable()             (PRR0 |= (uint8_t)(1 << PRPGA))
 674:/usr/lib/avr/include/avr/power.h **** #endif
 675:/usr/lib/avr/include/avr/power.h **** 
 676:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRRXDC)
 677:/usr/lib/avr/include/avr/power.h **** #define power_receive_dsp_control_enable()  (PRR0 &= (uint8_t)~(1 << PRRXDC))
 678:/usr/lib/avr/include/avr/power.h **** #define power_receive_dsp_control_disable() (PRR0 |= (uint8_t)(1 << PRRXDC))
 679:/usr/lib/avr/include/avr/power.h **** #endif
 680:/usr/lib/avr/include/avr/power.h **** 
 681:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRSPI)
 682:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()              (PRR0 &= (uint8_t)~(1 << PRSPI))
 683:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()             (PRR0 |= (uint8_t)(1 << PRSPI))
 684:/usr/lib/avr/include/avr/power.h **** #endif
 685:/usr/lib/avr/include/avr/power.h **** 
 686:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT0)
 687:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()           (PRR0 &= (uint8_t)~(1 << PRT0))
 688:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()          (PRR0 |= (uint8_t)(1 << PRT0))
 689:/usr/lib/avr/include/avr/power.h **** #endif
 690:/usr/lib/avr/include/avr/power.h **** 
 691:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM0)
 692:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM0))
 693:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()          (PRR0 |= (uint8_t)(1 << PRTIM0))
 694:/usr/lib/avr/include/avr/power.h **** #endif
 695:/usr/lib/avr/include/avr/power.h **** 
 696:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT1)
 697:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR0 &= (uint8_t)~(1 << PRT1))
 698:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR0 |= (uint8_t)(1 << PRT1))
 699:/usr/lib/avr/include/avr/power.h **** #endif
 700:/usr/lib/avr/include/avr/power.h **** 
 701:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM1)
 702:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM1))
 703:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR0 |= (uint8_t)(1 << PRTIM1))
 704:/usr/lib/avr/include/avr/power.h **** #endif
 705:/usr/lib/avr/include/avr/power.h **** 
 706:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT2)
 707:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR0 &= (uint8_t)~(1 << PRT2))
 708:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR0 |= (uint8_t)(1 << PRT2))
 709:/usr/lib/avr/include/avr/power.h **** #endif
 710:/usr/lib/avr/include/avr/power.h **** 
 711:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM2)
 712:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM2))
 713:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR0 |= (uint8_t)(1 << PRTIM2))
 714:/usr/lib/avr/include/avr/power.h **** #endif
 715:/usr/lib/avr/include/avr/power.h **** 
 716:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT3)
 717:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR0 &= (uint8_t)~(1 << PRT3))
 718:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR0 |= (uint8_t)(1 << PRT3))
 719:/usr/lib/avr/include/avr/power.h **** #endif
 720:/usr/lib/avr/include/avr/power.h **** 
 721:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTM)
 722:/usr/lib/avr/include/avr/power.h **** #define power_timermodulator_enable()   (PRR0 &= (uint8_t)~(1 << PRTM))
 723:/usr/lib/avr/include/avr/power.h **** #define power_timermodulator_disable()  (PRR0 |= (uint8_t)(1 << PRTM))
 724:/usr/lib/avr/include/avr/power.h **** #endif
 725:/usr/lib/avr/include/avr/power.h **** 
 726:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTWI)
 727:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()              (PRR0 &= (uint8_t)~(1 << PRTWI))
 728:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()             (PRR0 |= (uint8_t)(1 << PRTWI))
 729:/usr/lib/avr/include/avr/power.h **** #endif
 730:/usr/lib/avr/include/avr/power.h **** 
 731:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTXDC)
 732:/usr/lib/avr/include/avr/power.h **** #define power_transmit_dsp_control_enable()   (PRR0 &= (uint8_t)~(1 << PRTXDC))
 733:/usr/lib/avr/include/avr/power.h **** #define power_transmit_dsp_control_disable()  (PRR0 |= (uint8_t)(1 << PRTXDC))
 734:/usr/lib/avr/include/avr/power.h **** #endif
 735:/usr/lib/avr/include/avr/power.h **** 
 736:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRUSART0)
 737:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()           (PRR0 &= (uint8_t)~(1 << PRUSART0))
 738:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()          (PRR0 |= (uint8_t)(1 << PRUSART0))
 739:/usr/lib/avr/include/avr/power.h **** #endif
 740:/usr/lib/avr/include/avr/power.h **** 
 741:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRUSART1)
 742:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()           (PRR0 &= (uint8_t)~(1 << PRUSART1))
 743:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()          (PRR0 |= (uint8_t)(1 << PRUSART1))
 744:/usr/lib/avr/include/avr/power.h **** #endif
 745:/usr/lib/avr/include/avr/power.h **** 
 746:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVADC)
 747:/usr/lib/avr/include/avr/power.h **** #define power_vadc_enable()             (PRR0 &= (uint8_t)~(1 << PRVADC))
 748:/usr/lib/avr/include/avr/power.h **** #define power_vadc_disable()            (PRR0 |= (uint8_t)(1 << PRVADC))
 749:/usr/lib/avr/include/avr/power.h **** #endif
 750:/usr/lib/avr/include/avr/power.h **** 
 751:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVM)
 752:/usr/lib/avr/include/avr/power.h **** #define power_voltage_monitor_enable()  (PRR0 &= (uint8_t)~(1 << PRVM))
 753:/usr/lib/avr/include/avr/power.h **** #define power_voltage_monitor_disable() (PRR0 |= (uint8_t)(1 << PRVM))
 754:/usr/lib/avr/include/avr/power.h **** #endif
 755:/usr/lib/avr/include/avr/power.h **** 
 756:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVRM)
 757:/usr/lib/avr/include/avr/power.h **** #define power_vrm_enable()              (PRR0 &= (uint8_t)~(1 << PRVRM))
 758:/usr/lib/avr/include/avr/power.h **** #define power_vrm_disable()             (PRR0 |= (uint8_t)(1 << PRVRM))
 759:/usr/lib/avr/include/avr/power.h **** #endif
 760:/usr/lib/avr/include/avr/power.h **** 
 761:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRAES)
 762:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()              (PRR1 &= (uint8_t)~(1 << PRAES))
 763:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable()             (PRR1 |= (uint8_t)(1 << PRAES))
 764:/usr/lib/avr/include/avr/power.h **** #endif
 765:/usr/lib/avr/include/avr/power.h **** 
 766:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRCI)
 767:/usr/lib/avr/include/avr/power.h **** #define power_cinterface_enable()       (PRR1 &= (uint8_t)~(1 << PRCI))
 768:/usr/lib/avr/include/avr/power.h **** #define power_cinterface_disable()      (PRR1 |= (uint8_t)(1 << PRCI))
 769:/usr/lib/avr/include/avr/power.h **** #endif
 770:/usr/lib/avr/include/avr/power.h **** 
 771:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRHSSPI)
 772:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_enable()            (PRR1 &= (uint8_t)~(1 << PRHSSPI))
 773:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_disable()           (PRR1 |= (uint8_t)(1 << PRHSSPI))
 774:/usr/lib/avr/include/avr/power.h **** #endif
 775:/usr/lib/avr/include/avr/power.h **** 
 776:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRKB)
 777:/usr/lib/avr/include/avr/power.h **** #define power_kb_enable()               (PRR1 &= (uint8_t)~(1 << PRKB))
 778:/usr/lib/avr/include/avr/power.h **** #define power_kb_disable()              (PRR1 |= (uint8_t)(1 << PRKB))
 779:/usr/lib/avr/include/avr/power.h **** #endif
 780:/usr/lib/avr/include/avr/power.h **** 
 781:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRLFR)
 782:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_enable()       (PRR1 &= (uint8_t)~(1 << PRLFR))            
 783:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_disable()      (PRR1 |= (uint8_t)(1 << PRLFR))            
 784:/usr/lib/avr/include/avr/power.h **** #endif
 785:/usr/lib/avr/include/avr/power.h **** 
 786:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRSCI)
 787:/usr/lib/avr/include/avr/power.h **** #define power_sci_enable()              (PRR1 &= (uint8_t)~(1 << PRSCI))
 788:/usr/lib/avr/include/avr/power.h **** #define power_sci_disable()             (PRR1 |= (uint8_t)(1 << PRSCI))
 789:/usr/lib/avr/include/avr/power.h **** #endif
 790:/usr/lib/avr/include/avr/power.h **** 
 791:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT1)
 792:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR1 &= (uint8_t)~(1 << PRT1))
 793:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR1 |= (uint8_t)(1 << PRT1))
 794:/usr/lib/avr/include/avr/power.h **** #endif
 795:/usr/lib/avr/include/avr/power.h **** 
 796:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT2)
 797:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR1 &= (uint8_t)~(1 << PRT2))
 798:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR1 |= (uint8_t)(1 << PRT2))
 799:/usr/lib/avr/include/avr/power.h **** #endif
 800:/usr/lib/avr/include/avr/power.h **** 
 801:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT3)
 802:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR1 &= (uint8_t)~(1 << PRT3))
 803:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR1 |= (uint8_t)(1 << PRT3))
 804:/usr/lib/avr/include/avr/power.h **** #endif
 805:/usr/lib/avr/include/avr/power.h **** 
 806:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT4)
 807:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()           (PRR1 &= (uint8_t)~(1 << PRT4))
 808:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()          (PRR1 |= (uint8_t)(1 << PRT4))
 809:/usr/lib/avr/include/avr/power.h **** #endif
 810:/usr/lib/avr/include/avr/power.h **** 
 811:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT5)
 812:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()           (PRR1 &= (uint8_t)~(1 << PRT5))
 813:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()          (PRR1 |= (uint8_t)(1 << PRT5))
 814:/usr/lib/avr/include/avr/power.h **** #endif
 815:/usr/lib/avr/include/avr/power.h **** 
 816:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM3)
 817:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM3))
 818:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR1 |= (uint8_t)(1 << PRTIM3))
 819:/usr/lib/avr/include/avr/power.h **** #endif
 820:/usr/lib/avr/include/avr/power.h **** 
 821:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM4)
 822:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM4))
 823:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()          (PRR1 |= (uint8_t)(1 << PRTIM4))
 824:/usr/lib/avr/include/avr/power.h **** #endif
 825:/usr/lib/avr/include/avr/power.h **** 
 826:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM5)
 827:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM5))
 828:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()          (PRR1 |= (uint8_t)(1 << PRTIM5))
 829:/usr/lib/avr/include/avr/power.h **** #endif
 830:/usr/lib/avr/include/avr/power.h **** 
 831:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTRX24)
 832:/usr/lib/avr/include/avr/power.h **** #define power_transceiver_enable()      (PRR1 &= (uint8_t)~(1 << PRTRX24))
 833:/usr/lib/avr/include/avr/power.h **** #define power_transceiver_disable()     (PRR1 |= (uint8_t)(1 << PRTRX24))
 834:/usr/lib/avr/include/avr/power.h **** #endif
 835:/usr/lib/avr/include/avr/power.h **** 
 836:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSART1)
 837:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()           (PRR1 &= (uint8_t)~(1 << PRUSART1))
 838:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()          (PRR1 |= (uint8_t)(1 << PRUSART1))
 839:/usr/lib/avr/include/avr/power.h **** #endif
 840:/usr/lib/avr/include/avr/power.h **** 
 841:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSART2)
 842:/usr/lib/avr/include/avr/power.h **** #define power_usart2_enable()           (PRR1 &= (uint8_t)~(1 << PRUSART2))
 843:/usr/lib/avr/include/avr/power.h **** #define power_usart2_disable()          (PRR1 |= (uint8_t)(1 << PRUSART2))
 844:/usr/lib/avr/include/avr/power.h **** #endif
 845:/usr/lib/avr/include/avr/power.h **** 
 846:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSB)
 847:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()              (PRR1 &= (uint8_t)~(1 << PRUSB))
 848:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()             (PRR1 |= (uint8_t)(1 << PRUSB))
 849:/usr/lib/avr/include/avr/power.h **** #endif
 850:/usr/lib/avr/include/avr/power.h **** 
 851:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSBH)
 852:/usr/lib/avr/include/avr/power.h **** #define power_usbh_enable()             (PRR1 &= (uint8_t)~(1 << PRUSBH))
 853:/usr/lib/avr/include/avr/power.h **** #define power_usbh_disable()            (PRR1 |= (uint8_t)(1 << PRUSBH))
 854:/usr/lib/avr/include/avr/power.h **** #endif
 855:/usr/lib/avr/include/avr/power.h **** 
 856:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRDF)
 857:/usr/lib/avr/include/avr/power.h **** #define power_data_fifo_enable()        (PRR2 &= (uint8_t)~(1 << PRDF))
 858:/usr/lib/avr/include/avr/power.h **** #define power_data_fifo_disable()       (PRR2 |= (uint8_t)(1 << PRDF))
 859:/usr/lib/avr/include/avr/power.h **** #endif
 860:/usr/lib/avr/include/avr/power.h **** 
 861:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRIDS)
 862:/usr/lib/avr/include/avr/power.h **** #define power_id_scan_enable()          (PRR2 &= (uint8_t)~(1 << PRIDS))
 863:/usr/lib/avr/include/avr/power.h **** #define power_id_scan_disable()         (PRR2 |= (uint8_t)(1 << PRIDS))
 864:/usr/lib/avr/include/avr/power.h **** #endif
 865:/usr/lib/avr/include/avr/power.h **** 
 866:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM0)
 867:/usr/lib/avr/include/avr/power.h **** #define power_ram0_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM0))
 868:/usr/lib/avr/include/avr/power.h **** #define power_ram0_disable()            (PRR2 |= (uint8_t)(1 << PRRAM0))
 869:/usr/lib/avr/include/avr/power.h **** #endif
 870:/usr/lib/avr/include/avr/power.h **** 
 871:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM1)
 872:/usr/lib/avr/include/avr/power.h **** #define power_ram1_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM1))
 873:/usr/lib/avr/include/avr/power.h **** #define power_ram1_disable()            (PRR2 |= (uint8_t)(1 << PRRAM1))
 874:/usr/lib/avr/include/avr/power.h **** #endif
 875:/usr/lib/avr/include/avr/power.h **** 
 876:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM2)
 877:/usr/lib/avr/include/avr/power.h **** #define power_ram2_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM2))
 878:/usr/lib/avr/include/avr/power.h **** #define power_ram2_disable()            (PRR2 |= (uint8_t)(1 << PRRAM2))
 879:/usr/lib/avr/include/avr/power.h **** #endif
 880:/usr/lib/avr/include/avr/power.h **** 
 881:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM3)
 882:/usr/lib/avr/include/avr/power.h **** #define power_ram3_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM3))
 883:/usr/lib/avr/include/avr/power.h **** #define power_ram3_disable()            (PRR2 |= (uint8_t)(1 << PRRAM3))
 884:/usr/lib/avr/include/avr/power.h **** #endif
 885:/usr/lib/avr/include/avr/power.h **** 
 886:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRS)
 887:/usr/lib/avr/include/avr/power.h **** #define power_rssi_buffer_enable()      (PRR2 &= (uint8_t)~(1 << PRRS))
 888:/usr/lib/avr/include/avr/power.h **** #define power_rssi_buffer_disable()     (PRR2 |= (uint8_t)(1 << PRRS))
 889:/usr/lib/avr/include/avr/power.h **** #endif
 890:/usr/lib/avr/include/avr/power.h **** 
 891:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRSF)
 892:/usr/lib/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_enable()       (PRR2 &= (uint8_t)~(1 << PRSF))
 893:/usr/lib/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_disable()      (PRR2 |= (uint8_t)(1 << PRSF))
 894:/usr/lib/avr/include/avr/power.h **** #endif
 895:/usr/lib/avr/include/avr/power.h **** 
 896:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRSSM)
 897:/usr/lib/avr/include/avr/power.h **** #define power_sequencer_state_machine_enable()  (PRR2 &= (uint8_t)~(1 << PRSSM))
 898:/usr/lib/avr/include/avr/power.h **** #define power_sequencer_state_machine_disable() (PRR2 |= (uint8_t)(1 << PRSSM))
 899:/usr/lib/avr/include/avr/power.h **** #endif
 900:/usr/lib/avr/include/avr/power.h **** 
 901:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRTM)
 902:/usr/lib/avr/include/avr/power.h **** #define power_tx_modulator_enable()     (PRR2 &= (uint8_t)~(1 << PRTM))
 903:/usr/lib/avr/include/avr/power.h **** #define power_tx_modulator_disable()    (PRR2 |= (uint8_t)(1 << PRTM))
 904:/usr/lib/avr/include/avr/power.h **** #endif
 905:/usr/lib/avr/include/avr/power.h **** 
 906:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRXA)
 907:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_A_enable()      (PRR2 &= (uint8_t)~(1 << PRXA))
 908:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_A_disable()     (PRR2 |= (uint8_t)(1 << PRXA))
 909:/usr/lib/avr/include/avr/power.h **** #endif
 910:/usr/lib/avr/include/avr/power.h **** 
 911:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRXB)
 912:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_B_enable()      (PRR2 &= (uint8_t)~(1 << PRXB))
 913:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_B_disable()     (PRR2 |= (uint8_t)(1 << PRXB))
 914:/usr/lib/avr/include/avr/power.h **** #endif
 915:/usr/lib/avr/include/avr/power.h **** 
 916:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_AES)
 917:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()              (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 918:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable()             (PR_PRGEN |= (uint8_t)PR_AES_bm)
 919:/usr/lib/avr/include/avr/power.h **** #endif
 920:/usr/lib/avr/include/avr/power.h **** 
 921:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_DMA)
 922:/usr/lib/avr/include/avr/power.h **** #define power_dma_enable()              (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 923:/usr/lib/avr/include/avr/power.h **** #define power_dma_disable()             (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 924:/usr/lib/avr/include/avr/power.h **** #endif
 925:/usr/lib/avr/include/avr/power.h **** 
 926:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EBI)
 927:/usr/lib/avr/include/avr/power.h **** #define power_ebi_enable()              (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 928:/usr/lib/avr/include/avr/power.h **** #define power_ebi_disable()             (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 929:/usr/lib/avr/include/avr/power.h **** #endif
 930:/usr/lib/avr/include/avr/power.h **** 
 931:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EDMA)
 932:/usr/lib/avr/include/avr/power.h **** #define power_edma_enable()             (PR_PRGEN &= (uint8_t)~(PR_EDMA_bm))
 933:/usr/lib/avr/include/avr/power.h **** #define power_edma_disable()            (PR_PRGEN |= (uint8_t)PR_EDMA_bm)
 934:/usr/lib/avr/include/avr/power.h **** #endif
 935:/usr/lib/avr/include/avr/power.h **** 
 936:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EVSYS)
 937:/usr/lib/avr/include/avr/power.h **** #define power_evsys_enable()            (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 938:/usr/lib/avr/include/avr/power.h **** #define power_evsys_disable()           (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 939:/usr/lib/avr/include/avr/power.h **** #endif
 940:/usr/lib/avr/include/avr/power.h **** 
 941:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_LCD)
 942:/usr/lib/avr/include/avr/power.h **** #define power_lcd_enable()              (PR_PRGEN &= (uint8_t)~(PR_LCD_bm))
 943:/usr/lib/avr/include/avr/power.h **** #define power_lcd_disable()             (PR_PRGEN |= (uint8_t)PR_LCD_bm)
 944:/usr/lib/avr/include/avr/power.h **** #endif
 945:/usr/lib/avr/include/avr/power.h **** 
 946:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_RTC)
 947:/usr/lib/avr/include/avr/power.h **** #define power_rtc_enable()              (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 948:/usr/lib/avr/include/avr/power.h **** #define power_rtc_disable()             (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 949:/usr/lib/avr/include/avr/power.h **** #endif
 950:/usr/lib/avr/include/avr/power.h **** 
 951:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_USB)
 952:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()              (PR_PRGEN &= (uint8_t)~(PR_USB_bm))
 953:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()             (PR_PRGEN &= (uint8_t)(PR_USB_bm))
 954:/usr/lib/avr/include/avr/power.h **** #endif
 955:/usr/lib/avr/include/avr/power.h **** 
 956:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_XCL)
 957:/usr/lib/avr/include/avr/power.h **** #define power_xcl_enable()              (PR_PRGEN &= (uint8_t)~(PR_XCL_bm))
 958:/usr/lib/avr/include/avr/power.h **** #define power_xcl_disable()             (PR_PRGEN |= (uint8_t)PR_XCL_bm)
 959:/usr/lib/avr/include/avr/power.h **** #endif
 960:/usr/lib/avr/include/avr/power.h **** 
 961:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_AC)
 962:/usr/lib/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 963:/usr/lib/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 964:/usr/lib/avr/include/avr/power.h **** #endif
 965:/usr/lib/avr/include/avr/power.h **** 
 966:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_ADC)
 967:/usr/lib/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 968:/usr/lib/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 969:/usr/lib/avr/include/avr/power.h **** #endif
 970:/usr/lib/avr/include/avr/power.h **** 
 971:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_DAC)
 972:/usr/lib/avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 973:/usr/lib/avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 974:/usr/lib/avr/include/avr/power.h **** #endif
 975:/usr/lib/avr/include/avr/power.h **** 
 976:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_AC)
 977:/usr/lib/avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 978:/usr/lib/avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 979:/usr/lib/avr/include/avr/power.h **** #endif
 980:/usr/lib/avr/include/avr/power.h **** 
 981:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_ADC)
 982:/usr/lib/avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 983:/usr/lib/avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 984:/usr/lib/avr/include/avr/power.h **** #endif
 985:/usr/lib/avr/include/avr/power.h **** 
 986:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_DAC)
 987:/usr/lib/avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 988:/usr/lib/avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 989:/usr/lib/avr/include/avr/power.h **** #endif
 990:/usr/lib/avr/include/avr/power.h **** 
 991:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_HIRES)
 992:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 993:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 994:/usr/lib/avr/include/avr/power.h **** #endif
 995:/usr/lib/avr/include/avr/power.h **** 
 996:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_SPI)
 997:/usr/lib/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 998:/usr/lib/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 999:/usr/lib/avr/include/avr/power.h **** #endif
1000:/usr/lib/avr/include/avr/power.h **** 
1001:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC0)
1002:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
1003:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
1004:/usr/lib/avr/include/avr/power.h **** #endif
1005:/usr/lib/avr/include/avr/power.h **** 
1006:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC1)
1007:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
1008:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
1009:/usr/lib/avr/include/avr/power.h **** #endif
1010:/usr/lib/avr/include/avr/power.h **** 
1011:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC4)
1012:/usr/lib/avr/include/avr/power.h **** #define power_tc4c_enable()     (PR_PRPC  &= (uint8_t)~(PR_TC4_bm))
1013:/usr/lib/avr/include/avr/power.h **** #define power_tc4c_disable()    (PR_PRPC  |= (uint8_t)PR_TC4_bm)
1014:/usr/lib/avr/include/avr/power.h **** #endif
1015:/usr/lib/avr/include/avr/power.h **** 
1016:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC5)
1017:/usr/lib/avr/include/avr/power.h **** #define power_tc5c_enable()     (PR_PRPC  &= (uint8_t)~(PR_TC5_bm))
1018:/usr/lib/avr/include/avr/power.h **** #define power_tc5c_disable()    (PR_PRPC  |= (uint8_t)PR_TC5_bm)
1019:/usr/lib/avr/include/avr/power.h **** #endif
1020:/usr/lib/avr/include/avr/power.h **** 
1021:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TWI)
1022:/usr/lib/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
1023:/usr/lib/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
1024:/usr/lib/avr/include/avr/power.h **** #endif
1025:/usr/lib/avr/include/avr/power.h **** 
1026:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_USART0)
1027:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
1028:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
1029:/usr/lib/avr/include/avr/power.h **** #endif
1030:/usr/lib/avr/include/avr/power.h **** 
1031:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_USART1)
1032:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
1033:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
1034:/usr/lib/avr/include/avr/power.h **** #endif
1035:/usr/lib/avr/include/avr/power.h **** 
1036:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_HIRES)
1037:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
1038:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
1039:/usr/lib/avr/include/avr/power.h **** #endif
1040:/usr/lib/avr/include/avr/power.h **** 
1041:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_SPI)
1042:/usr/lib/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
1043:/usr/lib/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
1044:/usr/lib/avr/include/avr/power.h **** #endif
1045:/usr/lib/avr/include/avr/power.h **** 
1046:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC0)
1047:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
1048:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
1049:/usr/lib/avr/include/avr/power.h **** #endif
1050:/usr/lib/avr/include/avr/power.h **** 
1051:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC1)
1052:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
1053:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
1054:/usr/lib/avr/include/avr/power.h **** #endif
1055:/usr/lib/avr/include/avr/power.h **** 
1056:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC5)
1057:/usr/lib/avr/include/avr/power.h **** #define power_tc5d_enable()     (PR_PRPD  &= (uint8_t)~(PR_TC5_bm))
1058:/usr/lib/avr/include/avr/power.h **** #define power_tc5d_disable()    (PR_PRPD  |= (uint8_t)PR_TC5_bm)
1059:/usr/lib/avr/include/avr/power.h **** #endif
1060:/usr/lib/avr/include/avr/power.h **** 
1061:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TWI)
1062:/usr/lib/avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
1063:/usr/lib/avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
1064:/usr/lib/avr/include/avr/power.h **** #endif
1065:/usr/lib/avr/include/avr/power.h **** 
1066:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_USART0)
1067:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
1068:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
1069:/usr/lib/avr/include/avr/power.h **** #endif
1070:/usr/lib/avr/include/avr/power.h **** 
1071:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_USART1)
1072:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
1073:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
1074:/usr/lib/avr/include/avr/power.h **** #endif
1075:/usr/lib/avr/include/avr/power.h **** 
1076:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_HIRES)
1077:/usr/lib/avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
1078:/usr/lib/avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
1079:/usr/lib/avr/include/avr/power.h **** #endif
1080:/usr/lib/avr/include/avr/power.h **** 
1081:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_SPI)
1082:/usr/lib/avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
1083:/usr/lib/avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
1084:/usr/lib/avr/include/avr/power.h **** #endif
1085:/usr/lib/avr/include/avr/power.h **** 
1086:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TC0)
1087:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
1088:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
1089:/usr/lib/avr/include/avr/power.h **** #endif
1090:/usr/lib/avr/include/avr/power.h **** 
1091:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TC1)
1092:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
1093:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
1094:/usr/lib/avr/include/avr/power.h **** #endif
1095:/usr/lib/avr/include/avr/power.h **** 
1096:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TWI)
1097:/usr/lib/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
1098:/usr/lib/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
1099:/usr/lib/avr/include/avr/power.h **** #endif
1100:/usr/lib/avr/include/avr/power.h **** 
1101:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_USART0)
1102:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
1103:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
1104:/usr/lib/avr/include/avr/power.h **** #endif
1105:/usr/lib/avr/include/avr/power.h **** 
1106:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_USART1)
1107:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
1108:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
1109:/usr/lib/avr/include/avr/power.h **** #endif
1110:/usr/lib/avr/include/avr/power.h **** 
1111:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_HIRES)
1112:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
1113:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
1114:/usr/lib/avr/include/avr/power.h **** #endif
1115:/usr/lib/avr/include/avr/power.h **** 
1116:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_SPI)
1117:/usr/lib/avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
1118:/usr/lib/avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
1119:/usr/lib/avr/include/avr/power.h **** #endif
1120:/usr/lib/avr/include/avr/power.h **** 
1121:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TC0)
1122:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
1123:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
1124:/usr/lib/avr/include/avr/power.h **** #endif
1125:/usr/lib/avr/include/avr/power.h **** 
1126:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TC1)
1127:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
1128:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
1129:/usr/lib/avr/include/avr/power.h **** #endif
1130:/usr/lib/avr/include/avr/power.h **** 
1131:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TWI)
1132:/usr/lib/avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
1133:/usr/lib/avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
1134:/usr/lib/avr/include/avr/power.h **** #endif
1135:/usr/lib/avr/include/avr/power.h **** 
1136:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_USART0)
1137:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
1138:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
1139:/usr/lib/avr/include/avr/power.h **** #endif
1140:/usr/lib/avr/include/avr/power.h **** 
1141:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_USART1)
1142:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
1143:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
1144:/usr/lib/avr/include/avr/power.h **** #endif
1145:/usr/lib/avr/include/avr/power.h **** 
1146:/usr/lib/avr/include/avr/power.h **** 
1147:/usr/lib/avr/include/avr/power.h **** static __inline void
1148:/usr/lib/avr/include/avr/power.h **** __attribute__ ((__always_inline__))
1149:/usr/lib/avr/include/avr/power.h **** __power_all_enable()
1150:/usr/lib/avr/include/avr/power.h **** {
1151:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR
1152:/usr/lib/avr/include/avr/power.h ****     PRR &= (uint8_t)~(__AVR_HAVE_PRR);
1153:/usr/lib/avr/include/avr/power.h **** #endif
1154:/usr/lib/avr/include/avr/power.h **** 
1155:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR0
1156:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~(__AVR_HAVE_PRR0);
1157:/usr/lib/avr/include/avr/power.h **** #endif
1158:/usr/lib/avr/include/avr/power.h **** 
1159:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR1
1160:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(__AVR_HAVE_PRR1);
1161:/usr/lib/avr/include/avr/power.h **** #endif
1162:/usr/lib/avr/include/avr/power.h **** 
1163:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR2
1164:/usr/lib/avr/include/avr/power.h ****    PRR2 &= (uint8_t)~(__AVR_HAVE_PRR2);
1165:/usr/lib/avr/include/avr/power.h **** #endif
1166:/usr/lib/avr/include/avr/power.h **** 
1167:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRGEN
1168:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(__AVR_HAVE_PRGEN);
1169:/usr/lib/avr/include/avr/power.h **** #endif
1170:/usr/lib/avr/include/avr/power.h **** 
1171:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPA
1172:/usr/lib/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(__AVR_HAVE_PRPA);
1173:/usr/lib/avr/include/avr/power.h **** #endif
1174:/usr/lib/avr/include/avr/power.h **** 
1175:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPB
1176:/usr/lib/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(__AVR_HAVE_PRPB);
1177:/usr/lib/avr/include/avr/power.h **** #endif
1178:/usr/lib/avr/include/avr/power.h **** 
1179:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPC
1180:/usr/lib/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(__AVR_HAVE_PRPC);
1181:/usr/lib/avr/include/avr/power.h **** #endif
1182:/usr/lib/avr/include/avr/power.h **** 
1183:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPD
1184:/usr/lib/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(__AVR_HAVE_PRPD);
1185:/usr/lib/avr/include/avr/power.h **** #endif
1186:/usr/lib/avr/include/avr/power.h **** 
1187:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPE
1188:/usr/lib/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(__AVR_HAVE_PRPE);
1189:/usr/lib/avr/include/avr/power.h **** #endif
1190:/usr/lib/avr/include/avr/power.h **** 
1191:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPF
1192:/usr/lib/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(__AVR_HAVE_PRPF);
1193:/usr/lib/avr/include/avr/power.h **** #endif
1194:/usr/lib/avr/include/avr/power.h **** }
1195:/usr/lib/avr/include/avr/power.h **** 
1196:/usr/lib/avr/include/avr/power.h **** static __inline void
1197:/usr/lib/avr/include/avr/power.h **** __attribute__ ((__always_inline__))
1198:/usr/lib/avr/include/avr/power.h **** __power_all_disable()
1199:/usr/lib/avr/include/avr/power.h **** {
1200:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR
1201:/usr/lib/avr/include/avr/power.h ****     PRR |= (uint8_t)(__AVR_HAVE_PRR);
1202:/usr/lib/avr/include/avr/power.h **** #endif
1203:/usr/lib/avr/include/avr/power.h **** 
1204:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR0
1205:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)(__AVR_HAVE_PRR0);
1206:/usr/lib/avr/include/avr/power.h **** #endif
1207:/usr/lib/avr/include/avr/power.h **** 
1208:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR1
1209:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)(__AVR_HAVE_PRR1);
1210:/usr/lib/avr/include/avr/power.h **** #endif
1211:/usr/lib/avr/include/avr/power.h **** 
1212:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR2
1213:/usr/lib/avr/include/avr/power.h ****     PRR2 |= (uint8_t)(__AVR_HAVE_PRR2);
1214:/usr/lib/avr/include/avr/power.h **** #endif
1215:/usr/lib/avr/include/avr/power.h **** 
1216:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRGEN
1217:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN |= (uint8_t)(__AVR_HAVE_PRGEN);
1218:/usr/lib/avr/include/avr/power.h **** #endif
1219:/usr/lib/avr/include/avr/power.h **** 
1220:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPA
1221:/usr/lib/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(__AVR_HAVE_PRPA);
1222:/usr/lib/avr/include/avr/power.h **** #endif
1223:/usr/lib/avr/include/avr/power.h **** 
1224:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPB
1225:/usr/lib/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(__AVR_HAVE_PRPB);
1226:/usr/lib/avr/include/avr/power.h **** #endif
1227:/usr/lib/avr/include/avr/power.h **** 
1228:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPC
1229:/usr/lib/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(__AVR_HAVE_PRPC);
1230:/usr/lib/avr/include/avr/power.h **** #endif
1231:/usr/lib/avr/include/avr/power.h **** 
1232:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPD
1233:/usr/lib/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(__AVR_HAVE_PRPD);
1234:/usr/lib/avr/include/avr/power.h **** #endif
1235:/usr/lib/avr/include/avr/power.h **** 
1236:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPE
1237:/usr/lib/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(__AVR_HAVE_PRPE);
1238:/usr/lib/avr/include/avr/power.h **** #endif
1239:/usr/lib/avr/include/avr/power.h **** 
1240:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPF
1241:/usr/lib/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(__AVR_HAVE_PRPF);
1242:/usr/lib/avr/include/avr/power.h **** #endif
1243:/usr/lib/avr/include/avr/power.h **** }
1244:/usr/lib/avr/include/avr/power.h **** 
1245:/usr/lib/avr/include/avr/power.h **** #ifndef power_all_enable
1246:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() __power_all_enable()
1247:/usr/lib/avr/include/avr/power.h **** #endif
1248:/usr/lib/avr/include/avr/power.h **** 
1249:/usr/lib/avr/include/avr/power.h **** #ifndef power_all_disable
1250:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() __power_all_disable()
1251:/usr/lib/avr/include/avr/power.h **** #endif
1252:/usr/lib/avr/include/avr/power.h **** 
1253:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1254:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1255:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1256:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1257:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1258:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1259:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1260:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1261:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM81__) \
1262:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM161__) \
1263:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1264:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1265:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1266:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1267:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1268:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1269:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1270:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1271:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1272:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA5505__) \
1273:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA5272__) \
1274:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA6617C__) \
1275:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATA664251__) \
1276:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1277:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1278:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284__) \
1279:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1280:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
1281:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
1282:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1283:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1284:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1285:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1286:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164PA__) \
1287:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1288:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1289:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1290:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165PA__) \
1291:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1292:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1293:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1294:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168PA__) \
1295:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168PB__) \
1296:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1297:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1298:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1299:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1300:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16M1__) \
1301:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1302:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
1303:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1304:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1305:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1306:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega256RFR2__) \
1307:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
1308:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1309:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1310:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1311:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1312:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325P__) \
1313:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325PA__) \
1314:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1315:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1316:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250P__) \
1317:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250PA__) \
1318:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1319:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1320:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1321:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1322:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1323:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1324:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1325:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1326:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
1327:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290PA__) \
1328:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1329:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1330:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1331:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1332:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1333:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1334:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1335:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48PA__) \
1336:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48PB__) \
1337:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1338:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1339:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1340:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1341:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1342:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1343:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1344:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1345:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1346:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1347:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1348:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1349:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1350:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1351:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1352:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__) \
1353:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1354:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1355:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1356:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88PB__) \
1357:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1358:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1359:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1360:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
1361:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__) \
1362:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1363:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1364:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1365:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1366:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1367:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1368:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny88__) \
1369:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny87__) \
1370:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1371:/usr/lib/avr/include/avr/power.h **** || defined(__DOXYGEN__)
1372:/usr/lib/avr/include/avr/power.h **** 
1373:/usr/lib/avr/include/avr/power.h **** 
1374:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1375:/usr/lib/avr/include/avr/power.h **** 
1376:/usr/lib/avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1377:/usr/lib/avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1378:/usr/lib/avr/include/avr/power.h **** when the need for processing power is low.
1379:/usr/lib/avr/include/avr/power.h **** On some earlier AVRs (ATmega103, ATmega64, ATmega128), similar
1380:/usr/lib/avr/include/avr/power.h **** functionality can be achieved through the XTAL Divide Control Register.
1381:/usr/lib/avr/include/avr/power.h **** Below are two macros and an enumerated type that can be used to
1382:/usr/lib/avr/include/avr/power.h **** interface to the Clock Prescale Register or
1383:/usr/lib/avr/include/avr/power.h **** XTAL Divide Control Register.
1384:/usr/lib/avr/include/avr/power.h **** 
1385:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a clock prescaler. On those devices
1386:/usr/lib/avr/include/avr/power.h **** without a Clock Prescale Register or XTAL Divide Control Register, these
1387:/usr/lib/avr/include/avr/power.h **** macros are not available.
1388:/usr/lib/avr/include/avr/power.h **** */
1389:/usr/lib/avr/include/avr/power.h **** 
1390:/usr/lib/avr/include/avr/power.h **** 
1391:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1392:/usr/lib/avr/include/avr/power.h **** \code 
1393:/usr/lib/avr/include/avr/power.h **** typedef enum
1394:/usr/lib/avr/include/avr/power.h **** {
1395:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1396:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1397:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1398:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1399:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1400:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1401:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1402:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1403:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8,
1404:/usr/lib/avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1405:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1406:/usr/lib/avr/include/avr/power.h **** \endcode
1407:/usr/lib/avr/include/avr/power.h **** Clock prescaler setting enumerations for device using
1408:/usr/lib/avr/include/avr/power.h **** System Clock Prescale Register.
1409:/usr/lib/avr/include/avr/power.h **** 
1410:/usr/lib/avr/include/avr/power.h **** \code
1411:/usr/lib/avr/include/avr/power.h **** typedef enum
1412:/usr/lib/avr/include/avr/power.h **** {
1413:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 1,
1414:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 2,
1415:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 4,
1416:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 8,
1417:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 16,
1418:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 32,
1419:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 64,
1420:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 128
1421:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1422:/usr/lib/avr/include/avr/power.h **** \endcode
1423:/usr/lib/avr/include/avr/power.h **** Clock prescaler setting enumerations for device using
1424:/usr/lib/avr/include/avr/power.h **** XTAL Divide Control Register.
1425:/usr/lib/avr/include/avr/power.h **** 
1426:/usr/lib/avr/include/avr/power.h **** */
1427:/usr/lib/avr/include/avr/power.h **** typedef enum
1428:/usr/lib/avr/include/avr/power.h **** {
1429:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1430:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1431:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1432:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1433:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1434:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1435:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1436:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1437:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8
1438:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__) \
1439:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega256RFR2__) \
1440:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2564RFR2__) \
1441:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFR2__) \
1442:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284RFR2__) \
1443:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64RFR2__) \
1444:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644RFR2__)
1445:/usr/lib/avr/include/avr/power.h ****     , clock_div_1_rc = 15
1446:/usr/lib/avr/include/avr/power.h **** #endif
1447:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1448:/usr/lib/avr/include/avr/power.h **** 
1449:/usr/lib/avr/include/avr/power.h **** 
1450:/usr/lib/avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1451:/usr/lib/avr/include/avr/power.h **** 
1452:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1453:/usr/lib/avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1454:/usr/lib/avr/include/avr/power.h **** 
1455:/usr/lib/avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1456:/usr/lib/avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1457:/usr/lib/avr/include/avr/power.h **** optimizations are disabled.
1458:/usr/lib/avr/include/avr/power.h **** 
1459:/usr/lib/avr/include/avr/power.h **** The type of \c x is \c clock_div_t.
1460:/usr/lib/avr/include/avr/power.h **** 
1461:/usr/lib/avr/include/avr/power.h **** \note For device with XTAL Divide Control Register (XDIV), \c x can actually range
1462:/usr/lib/avr/include/avr/power.h **** from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
1463:/usr/lib/avr/include/avr/power.h **** */
1464:/usr/lib/avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1465:/usr/lib/avr/include/avr/power.h **** {
1466:/usr/lib/avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1467:/usr/lib/avr/include/avr/power.h ****     __asm__ __volatile__ (
 1099               		.loc 5 1467 0
 1100 001c 90E0      		ldi r25,0
 1101 001e 80E8      		ldi r24,lo8(-128)
 1102               	/* #APP */
 1103               	 ;  1467 "/usr/lib/avr/include/avr/power.h" 1
 1104 0020 0FB6      		in __tmp_reg__,__SREG__
 1105 0022 F894      		cli
 1106 0024 8093 6100 		sts 97, r24
 1107 0028 9093 6100 		sts 97, r25
 1108 002c 0FBE      		out __SREG__, __tmp_reg__
 1109               	 ;  0 "" 2
 1110               	/* #NOAPP */
 1111               	.LBE293:
 1112               	.LBE292:
 528:../../protocol/lufa/lufa.c **** 
 1113               		.loc 1 528 0
 1114 002e 0E94 0000 		call USB_Disable
 1115               	.LVL72:
 530:../../protocol/lufa/lufa.c **** 
 1116               		.loc 1 530 0
 1117 0032 0E94 0000 		call USB_Init
 1118               	.LVL73:
 1119               	.LBB294:
 1120               	.LBB295:
 1121               	.LBB296:
 1122               		.file 6 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2012.
   4:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 1123               		.loc 6 113 0
 1124 0036 8091 E200 		lds r24,226
 1125 003a 8460      		ori r24,lo8(4)
 1126 003c 8093 E200 		sts 226,r24
 1127               	.LBE296:
 1128               	.LBE295:
 1129               	.LBE294:
 534:../../protocol/lufa/lufa.c **** }
 1130               		.loc 1 534 0
 1131 0040 80E0      		ldi r24,lo8(gs(sendchar))
 1132 0042 90E0      		ldi r25,hi8(gs(sendchar))
 1133 0044 0E94 0000 		call print_set_sendchar
 1134               	.LVL74:
 1135               	.LBE289:
 1136               	.LBE288:
 540:../../protocol/lufa/lufa.c ****     SetupHardware();
 541:../../protocol/lufa/lufa.c ****     sei();
 1137               		.loc 1 541 0
 1138               	/* #APP */
 1139               	 ;  541 "../../protocol/lufa/lufa.c" 1
 1140 0048 7894      		sei
 1141               	 ;  0 "" 2
 1142               	/* #NOAPP */
 1143               	.L126:
 542:../../protocol/lufa/lufa.c **** 
 543:../../protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
 544:../../protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
 1144               		.loc 1 544 0 discriminator 1
 1145 004a 8091 0000 		lds r24,USB_DeviceState
 1146 004e 8430      		cpi r24,lo8(4)
 1147 0050 01F4      		brne .L126
 545:../../protocol/lufa/lufa.c **** #if defined(INTERRUPT_CONTROL_ENDPOINT)
 546:../../protocol/lufa/lufa.c ****         ;
 547:../../protocol/lufa/lufa.c **** #else
 548:../../protocol/lufa/lufa.c ****         USB_USBTask();
 549:../../protocol/lufa/lufa.c **** #endif
 550:../../protocol/lufa/lufa.c ****     }
 551:../../protocol/lufa/lufa.c ****     print("USB configured.\n");
 1148               		.loc 1 551 0
 1149 0052 80E0      		ldi r24,lo8(__c.4707)
 1150 0054 90E0      		ldi r25,hi8(__c.4707)
 1151 0056 0E94 0000 		call xputs
 1152               	.LVL75:
 552:../../protocol/lufa/lufa.c **** 
 553:../../protocol/lufa/lufa.c ****     /* init modules */
 554:../../protocol/lufa/lufa.c ****     keyboard_init();
 1153               		.loc 1 554 0
 1154 005a 0E94 0000 		call keyboard_init
 1155               	.LVL76:
 555:../../protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1156               		.loc 1 555 0
 1157 005e 80E0      		ldi r24,lo8(lufa_driver)
 1158 0060 90E0      		ldi r25,hi8(lufa_driver)
 1159 0062 0E94 0000 		call host_set_driver
 1160               	.LVL77:
 556:../../protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 557:../../protocol/lufa/lufa.c ****     sleep_led_init();
 558:../../protocol/lufa/lufa.c **** #endif
 559:../../protocol/lufa/lufa.c **** 
 560:../../protocol/lufa/lufa.c ****     print("Keyboard start.\n");
 1161               		.loc 1 560 0
 1162 0066 80E0      		ldi r24,lo8(__c.4709)
 1163 0068 90E0      		ldi r25,hi8(__c.4709)
 1164 006a 0E94 0000 		call xputs
 1165               	.LVL78:
 1166               	.L127:
 561:../../protocol/lufa/lufa.c ****     while (1) {
 562:../../protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1167               		.loc 1 562 0
 1168 006e 8091 0000 		lds r24,USB_DeviceState
 1169 0072 8530      		cpi r24,lo8(5)
 1170 0074 01F4      		brne .L136
 563:../../protocol/lufa/lufa.c ****             suspend_power_down();
 1171               		.loc 1 563 0
 1172 0076 0E94 0000 		call suspend_power_down
 1173               	.LVL79:
 564:../../protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1174               		.loc 1 564 0
 1175 007a 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1176 007e 8823      		tst r24
 1177 0080 01F0      		breq .L127
 1178               		.loc 1 564 0 is_stmt 0 discriminator 1
 1179 0082 0E94 0000 		call suspend_wakeup_condition
 1180               	.LVL80:
 1181 0086 8823      		tst r24
 1182 0088 01F0      		breq .L127
 565:../../protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1183               		.loc 1 565 0 is_stmt 1
 1184 008a 0E94 0000 		call USB_Device_SendRemoteWakeup
 1185               	.LVL81:
 1186 008e 00C0      		rjmp .L127
 1187               	.L136:
 566:../../protocol/lufa/lufa.c ****             }
 567:../../protocol/lufa/lufa.c ****         }
 568:../../protocol/lufa/lufa.c **** 
 569:../../protocol/lufa/lufa.c ****         keyboard_task();
 1188               		.loc 1 569 0
 1189 0090 0E94 0000 		call keyboard_task
 1190               	.LVL82:
 570:../../protocol/lufa/lufa.c **** 
 571:../../protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
 572:../../protocol/lufa/lufa.c ****         USB_USBTask();
 573:../../protocol/lufa/lufa.c **** #endif
 574:../../protocol/lufa/lufa.c ****     }
 1191               		.loc 1 574 0
 1192 0094 00C0      		rjmp .L127
 1193               		.cfi_endproc
 1194               	.LFE123:
 1196               		.section	.progmem.data,"a",@progbits
 1199               	__c.4709:
 1200 0000 4B65 7962 		.string	"Keyboard start.\n"
 1200      6F61 7264 
 1200      2073 7461 
 1200      7274 2E0A 
 1200      00
 1203               	__c.4707:
 1204 0011 5553 4220 		.string	"USB configured.\n"
 1204      636F 6E66 
 1204      6967 7572 
 1204      6564 2E0A 
 1204      00
 1205               		.local	timeouted.4687
 1206               		.comm	timeouted.4687,1,1
 1207               	.global	lufa_driver
 1208               		.data
 1211               	lufa_driver:
 1212 0000 0000      		.word	gs(keyboard_leds)
 1213 0002 0000      		.word	gs(send_keyboard)
 1214 0004 0000      		.word	gs(send_mouse)
 1215 0006 0000      		.word	gs(send_system)
 1216 0008 0000      		.word	gs(send_consumer)
 1217               		.local	keyboard_report_sent
 1218               		.comm	keyboard_report_sent,16,1
 1219               		.local	keyboard_led_stats
 1220               		.comm	keyboard_led_stats,1,1
 1223               	protocol_report:
 1224 000a 01        		.byte	1
 1225               		.local	idle_duration
 1226               		.comm	idle_duration,1,1
 1227               		.comm	debug_config,1,1
 1228               		.text
 1229               	.Letext0:
 1230               		.file 7 "/usr/lib/avr/include/stdint.h"
 1231               		.file 8 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1232               		.file 9 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1233               		.file 10 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h
 1234               		.file 11 "../../common/report.h"
 1235               		.file 12 "../../common/host_driver.h"
 1236               		.file 13 "../../common/debug_config.h"
 1237               		.file 14 "../../protocol/lufa/lufa.h"
 1238               		.file 15 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1239               		.file 16 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 1240               		.file 17 "../../common/host.h"
 1241               		.file 18 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h
 1242               		.file 19 "../../common/suspend.h"
 1243               		.file 20 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1244               		.file 21 "../../common/print.h"
 1245               		.file 22 "../../common/xprintf.h"
 1246               		.file 23 "../../common/keyboard.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
     /tmp/cclmbf5C.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cclmbf5C.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cclmbf5C.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cclmbf5C.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cclmbf5C.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cclmbf5C.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
     /tmp/cclmbf5C.s:1218   .bss:0000000000000011 keyboard_led_stats
     /tmp/cclmbf5C.s:29     .text.send_mouse:0000000000000000 send_mouse
     /tmp/cclmbf5C.s:45     .text.sendchar:0000000000000000 sendchar
                             .bss:0000000000000000 timeouted.4687
     /tmp/cclmbf5C.s:256    .text.send_consumer:0000000000000000 send_consumer
     /tmp/cclmbf5C.s:352    .text.send_system:0000000000000000 send_system
     /tmp/cclmbf5C.s:448    .text.send_keyboard:0000000000000000 send_keyboard
     /tmp/cclmbf5C.s:1206   .bss:0000000000000001 keyboard_report_sent
     /tmp/cclmbf5C.s:555    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/cclmbf5C.s:570    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/cclmbf5C.s:585    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
     /tmp/cclmbf5C.s:600    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
     /tmp/cclmbf5C.s:615    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
     /tmp/cclmbf5C.s:632    .text.EVENT_USB_Device_StartOfFrame:0000000000000000 EVENT_USB_Device_StartOfFrame
     /tmp/cclmbf5C.s:750    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/cclmbf5C.s:802    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/cclmbf5C.s:1223   .data:000000000000000a protocol_report
     /tmp/cclmbf5C.s:1220   .bss:0000000000000012 idle_duration
     /tmp/cclmbf5C.s:1062   .text.startup.main:0000000000000000 main
     /tmp/cclmbf5C.s:1203   .progmem.data:0000000000000011 __c.4707
     /tmp/cclmbf5C.s:1211   .data:0000000000000000 lufa_driver
     /tmp/cclmbf5C.s:1199   .progmem.data:0000000000000000 __c.4709
                            *COM*:0000000000000001 debug_config

UNDEFINED SYMBOLS
USB_DeviceState
Endpoint_Write_Stream_LE
keyboard_nkro
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_ClearStatusStage
USB_Disable
USB_Init
print_set_sendchar
xputs
keyboard_init
host_set_driver
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
keyboard_task
__do_copy_data
__do_clear_bss
