   1               		.file	"action_macro.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_macro_play,"ax",@progbits
  11               	.global	action_macro_play
  13               	action_macro_play:
  14               	.LFB102:
  15               		.file 1 "../../common/action_macro.c"
   1:../../common/action_macro.c **** /*
   2:../../common/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../common/action_macro.c **** 
   4:../../common/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:../../common/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/action_macro.c **** (at your option) any later version.
   8:../../common/action_macro.c **** 
   9:../../common/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:../../common/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/action_macro.c **** GNU General Public License for more details.
  13:../../common/action_macro.c **** 
  14:../../common/action_macro.c **** You should have received a copy of the GNU General Public License
  15:../../common/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/action_macro.c **** */
  17:../../common/action_macro.c **** #include <util/delay.h>
  18:../../common/action_macro.c **** #include "action.h"
  19:../../common/action_macro.c **** #include "action_util.h"
  20:../../common/action_macro.c **** #include "action_macro.h"
  21:../../common/action_macro.c **** 
  22:../../common/action_macro.c **** #ifdef DEBUG_ACTION
  23:../../common/action_macro.c **** #include "debug.h"
  24:../../common/action_macro.c **** #else
  25:../../common/action_macro.c **** #include "nodebug.h"
  26:../../common/action_macro.c **** #endif
  27:../../common/action_macro.c **** 
  28:../../common/action_macro.c **** 
  29:../../common/action_macro.c **** #ifndef NO_ACTION_MACRO
  30:../../common/action_macro.c **** 
  31:../../common/action_macro.c **** #define MACRO_READ()  (macro = pgm_read_byte(macro_p++))
  32:../../common/action_macro.c **** void action_macro_play(const macro_t *macro_p)
  33:../../common/action_macro.c **** {
  16               		.loc 1 33 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 EF92      		push r14
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 14, -2
  23 0002 FF92      		push r15
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 15, -3
  27 0004 0F93      		push r16
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 16, -4
  31 0006 1F93      		push r17
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 17, -5
  35 0008 CF93      		push r28
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 28, -6
  39 000a DF93      		push r29
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 29, -7
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 6 */
  46               	.L__stack_usage = 6
  47 000c 8C01      		movw r16,r24
  48               	.LVL1:
  34:../../common/action_macro.c ****     macro_t macro = END;
  35:../../common/action_macro.c ****     uint8_t interval = 0;
  36:../../common/action_macro.c **** 
  37:../../common/action_macro.c ****     if (!macro_p) return;
  49               		.loc 1 37 0
  50 000e 892B      		or r24,r25
  51 0010 01F4      		brne .+2
  52 0012 00C0      		rjmp .L1
  53 0014 F12C      		mov r15,__zero_reg__
  38:../../common/action_macro.c ****     while (true) {
  39:../../common/action_macro.c ****         switch (MACRO_READ()) {
  40:../../common/action_macro.c ****             case KEY_DOWN:
  41:../../common/action_macro.c ****                 MACRO_READ();
  42:../../common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  43:../../common/action_macro.c ****                 if (IS_MOD(macro)) {
  44:../../common/action_macro.c ****                     add_weak_mods(MOD_BIT(macro));
  54               		.loc 1 44 0
  55 0016 EE24      		clr r14
  56 0018 E394      		inc r14
  57               	.LVL2:
  58               	.L17:
  59               	.LBB13:
  39:../../common/action_macro.c ****             case KEY_DOWN:
  60               		.loc 1 39 0
  61 001a E801      		movw r28,r16
  62 001c 2196      		adiw r28,1
  63               	.LVL3:
  64 001e F801      		movw r30,r16
  65               	/* #APP */
  66               	 ;  39 "../../common/action_macro.c" 1
  67 0020 8491      		lpm r24, Z
  68               		
  69               	 ;  0 "" 2
  70               	.LVL4:
  71               	/* #NOAPP */
  72               	.LBE13:
  73 0022 8437      		cpi r24,lo8(116)
  74 0024 00F4      		brsh .L3
  75 0026 8430      		cpi r24,lo8(4)
  76 0028 00F0      		brlo .+2
  77 002a 00C0      		rjmp .L4
  78 002c 8130      		cpi r24,lo8(1)
  79 002e 01F0      		breq .L5
  80 0030 8230      		cpi r24,lo8(2)
  81 0032 01F0      		breq .L6
  82 0034 00C0      		rjmp .L1
  83               	.L3:
  84 0036 8537      		cpi r24,lo8(117)
  85 0038 01F4      		brne .+2
  86 003a 00C0      		rjmp .L7
  87 003c 00F0      		brlo .L8
  88 003e 9CE7      		ldi r25,lo8(124)
  89 0040 980F      		add r25,r24
  90 0042 9037      		cpi r25,lo8(112)
  91 0044 00F0      		brlo .+2
  92 0046 00C0      		rjmp .L1
  45:../../common/action_macro.c ****                 } else {
  46:../../common/action_macro.c ****                     register_code(macro);
  47:../../common/action_macro.c ****                 }
  48:../../common/action_macro.c ****                 break;
  49:../../common/action_macro.c ****             case KEY_UP:
  50:../../common/action_macro.c ****                 MACRO_READ();
  51:../../common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  52:../../common/action_macro.c ****                 if (IS_MOD(macro)) {
  53:../../common/action_macro.c ****                     del_weak_mods(MOD_BIT(macro));
  54:../../common/action_macro.c ****                 } else {
  55:../../common/action_macro.c ****                     unregister_code(macro);
  56:../../common/action_macro.c ****                 }
  57:../../common/action_macro.c ****                 break;
  58:../../common/action_macro.c ****             case WAIT:
  59:../../common/action_macro.c ****                 MACRO_READ();
  60:../../common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  61:../../common/action_macro.c ****                 { uint8_t ms = macro; while (ms--) _delay_ms(1); }
  62:../../common/action_macro.c ****                 break;
  63:../../common/action_macro.c ****             case INTERVAL:
  64:../../common/action_macro.c ****                 interval = MACRO_READ();
  65:../../common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  66:../../common/action_macro.c ****                 break;
  67:../../common/action_macro.c ****             case 0x04 ... 0x73:
  68:../../common/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  69:../../common/action_macro.c ****                 register_code(macro);
  70:../../common/action_macro.c ****                 break;
  71:../../common/action_macro.c ****             case 0x84 ... 0xF3:
  72:../../common/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  73:../../common/action_macro.c ****                 unregister_code(macro&0x7F);
  93               		.loc 1 73 0
  94 0048 8F77      		andi r24,lo8(127)
  95               	.LVL5:
  96 004a 0E94 0000 		call unregister_code
  97               	.LVL6:
  98 004e 00C0      		rjmp .L22
  99               	.LVL7:
 100               	.L5:
 101               	.LBB14:
  41:../../common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 102               		.loc 1 41 0
 103 0050 0E5F      		subi r16,-2
 104 0052 1F4F      		sbci r17,-1
 105               	.LVL8:
 106 0054 FE01      		movw r30,r28
 107               	.LVL9:
 108               	/* #APP */
 109               	 ;  41 "../../common/action_macro.c" 1
 110 0056 8491      		lpm r24, Z
 111               		
 112               	 ;  0 "" 2
 113               	.LVL10:
 114               	/* #NOAPP */
 115               	.LBE14:
  43:../../common/action_macro.c ****                     add_weak_mods(MOD_BIT(macro));
 116               		.loc 1 43 0
 117 0058 90E2      		ldi r25,lo8(32)
 118 005a 980F      		add r25,r24
 119 005c 9830      		cpi r25,lo8(8)
 120 005e 00F4      		brsh .L10
  44:../../common/action_macro.c ****                 } else {
 121               		.loc 1 44 0
 122 0060 8770      		andi r24,lo8(7)
 123               	.LVL11:
 124 0062 FE2D      		mov r31,r14
 125 0064 00C0      		rjmp 2f
 126               		1:
 127 0066 FF0F      		lsl r31
 128               		2:
 129 0068 8A95      		dec r24
 130 006a 02F4      		brpl 1b
 131 006c 8F2F      		mov r24,r31
 132 006e 0E94 0000 		call add_weak_mods
 133               	.LVL12:
 134 0072 00C0      		rjmp .L11
 135               	.LVL13:
 136               	.L10:
  46:../../common/action_macro.c ****                 }
 137               		.loc 1 46 0
 138 0074 0E94 0000 		call register_code
 139               	.LVL14:
 140 0078 00C0      		rjmp .L11
 141               	.LVL15:
 142               	.L6:
 143               	.LBB15:
  50:../../common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 144               		.loc 1 50 0
 145 007a 0E5F      		subi r16,-2
 146 007c 1F4F      		sbci r17,-1
 147               	.LVL16:
 148 007e FE01      		movw r30,r28
 149               	.LVL17:
 150               	/* #APP */
 151               	 ;  50 "../../common/action_macro.c" 1
 152 0080 8491      		lpm r24, Z
 153               		
 154               	 ;  0 "" 2
 155               	.LVL18:
 156               	/* #NOAPP */
 157               	.LBE15:
  52:../../common/action_macro.c ****                     del_weak_mods(MOD_BIT(macro));
 158               		.loc 1 52 0
 159 0082 90E2      		ldi r25,lo8(32)
 160 0084 980F      		add r25,r24
 161 0086 9830      		cpi r25,lo8(8)
 162 0088 00F4      		brsh .L12
  53:../../common/action_macro.c ****                 } else {
 163               		.loc 1 53 0
 164 008a 8770      		andi r24,lo8(7)
 165               	.LVL19:
 166 008c FE2D      		mov r31,r14
 167 008e 00C0      		rjmp 2f
 168               		1:
 169 0090 FF0F      		lsl r31
 170               		2:
 171 0092 8A95      		dec r24
 172 0094 02F4      		brpl 1b
 173 0096 8F2F      		mov r24,r31
 174 0098 0E94 0000 		call del_weak_mods
 175               	.LVL20:
 176 009c 00C0      		rjmp .L11
 177               	.LVL21:
 178               	.L12:
  55:../../common/action_macro.c ****                 }
 179               		.loc 1 55 0
 180 009e 0E94 0000 		call unregister_code
 181               	.LVL22:
 182 00a2 00C0      		rjmp .L11
 183               	.LVL23:
 184               	.L8:
 185               	.LBB16:
  59:../../common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 186               		.loc 1 59 0
 187 00a4 0E5F      		subi r16,-2
 188 00a6 1F4F      		sbci r17,-1
 189               	.LVL24:
 190 00a8 FE01      		movw r30,r28
 191               	.LVL25:
 192               	/* #APP */
 193               	 ;  59 "../../common/action_macro.c" 1
 194 00aa C491      		lpm r28, Z
 195               		
 196               	 ;  0 "" 2
 197               	.LVL26:
 198               	/* #NOAPP */
 199               	.L13:
 200               	.LBE16:
 201               	.LBB17:
  61:../../common/action_macro.c ****                 break;
 202               		.loc 1 61 0 discriminator 1
 203 00ac CC23      		tst r28
 204 00ae 01F0      		breq .L11
 205               	.LVL27:
 206               	.LBB18:
 207               	.LBB19:
 208               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 209               		.loc 2 187 0
 210 00b0 8FE9      		ldi r24,lo8(3999)
 211 00b2 9FE0      		ldi r25,hi8(3999)
 212 00b4 0197      	1:	sbiw r24,1
 213 00b6 01F4      		brne 1b
 214 00b8 00C0      		rjmp .
 215 00ba 0000      		nop
 216 00bc C150      		subi r28,lo8(-(-1))
 217               	.LVL28:
 218 00be 00C0      		rjmp .L13
 219               	.LVL29:
 220               	.L7:
 221               	.LBE19:
 222               	.LBE18:
 223               	.LBE17:
 224               	.LBB20:
  64:../../common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 225               		.loc 1 64 0
 226 00c0 0E5F      		subi r16,-2
 227 00c2 1F4F      		sbci r17,-1
 228               	.LVL30:
 229 00c4 FE01      		movw r30,r28
 230               	.LVL31:
 231               	/* #APP */
 232               	 ;  64 "../../common/action_macro.c" 1
 233 00c6 F490      		lpm r15, Z
 234               		
 235               	 ;  0 "" 2
 236               	.LVL32:
 237               	/* #NOAPP */
 238               	.LBE20:
  66:../../common/action_macro.c ****             case 0x04 ... 0x73:
 239               		.loc 1 66 0
 240 00c8 00C0      		rjmp .L11
 241               	.LVL33:
 242               	.L4:
  69:../../common/action_macro.c ****                 break;
 243               		.loc 1 69 0
 244 00ca 0E94 0000 		call register_code
 245               	.LVL34:
 246               	.L22:
 247               	.LBB21:
  39:../../common/action_macro.c ****             case KEY_DOWN:
 248               		.loc 1 39 0
 249 00ce 8E01      		movw r16,r28
 250               	.LVL35:
 251               	.L11:
 252               	.LBE21:
 253               	.LBB22:
  74:../../common/action_macro.c ****                 break;
  75:../../common/action_macro.c ****             case END:
  76:../../common/action_macro.c ****             default:
  77:../../common/action_macro.c ****                 return;
  78:../../common/action_macro.c ****         }
  79:../../common/action_macro.c ****         // interval
  80:../../common/action_macro.c ****         { uint8_t ms = interval; while (ms--) _delay_ms(1); }
 254               		.loc 1 80 0
 255 00d0 8F2D      		mov r24,r15
 256               	.LVL36:
 257               	.L15:
 258               		.loc 1 80 0 is_stmt 0 discriminator 1
 259 00d2 8823      		tst r24
 260 00d4 01F4      		brne .+2
 261 00d6 00C0      		rjmp .L17
 262               	.LVL37:
 263               	.LBB23:
 264               	.LBB24:
 265               		.loc 2 187 0 is_stmt 1
 266 00d8 EFE9      		ldi r30,lo8(3999)
 267 00da FFE0      		ldi r31,hi8(3999)
 268 00dc 3197      	1:	sbiw r30,1
 269 00de 01F4      		brne 1b
 270 00e0 00C0      		rjmp .
 271 00e2 0000      		nop
 272 00e4 8150      		subi r24,lo8(-(-1))
 273               	.LVL38:
 274 00e6 00C0      		rjmp .L15
 275               	.LVL39:
 276               	.L1:
 277               	/* epilogue start */
 278               	.LBE24:
 279               	.LBE23:
 280               	.LBE22:
  81:../../common/action_macro.c ****     }
  82:../../common/action_macro.c **** }
 281               		.loc 1 82 0
 282 00e8 DF91      		pop r29
 283 00ea CF91      		pop r28
 284 00ec 1F91      		pop r17
 285 00ee 0F91      		pop r16
 286 00f0 FF90      		pop r15
 287 00f2 EF90      		pop r14
 288 00f4 0895      		ret
 289               		.cfi_endproc
 290               	.LFE102:
 292               		.comm	debug_config,1,1
 293               		.text
 294               	.Letext0:
 295               		.file 3 "/usr/avr/include/stdint.h"
 296               		.file 4 "../../common/action_macro.h"
 297               		.file 5 "../../common/keycode.h"
 298               		.file 6 "../../common/debug_config.h"
 299               		.file 7 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 300               		.file 8 "../../common/action.h"
 301               		.file 9 "../../common/action_util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
     /tmp/ccAG0VWB.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccAG0VWB.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccAG0VWB.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccAG0VWB.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccAG0VWB.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccAG0VWB.s:13     .text.action_macro_play:0000000000000000 action_macro_play
                            *COM*:0000000000000001 debug_config

UNDEFINED SYMBOLS
unregister_code
add_weak_mods
register_code
del_weak_mods
__do_clear_bss
