   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_init,"ax",@progbits
  11               	.global	keyboard_init
  13               	keyboard_init:
  14               	.LFB102:
  15               		.file 1 "../../common/keyboard.c"
   1:../../common/keyboard.c **** /*
   2:../../common/keyboard.c **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/keyboard.c **** 
   4:../../common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:../../common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/keyboard.c **** (at your option) any later version.
   8:../../common/keyboard.c **** 
   9:../../common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:../../common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/keyboard.c **** GNU General Public License for more details.
  13:../../common/keyboard.c **** 
  14:../../common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:../../common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/keyboard.c **** */
  17:../../common/keyboard.c **** #include <stdint.h>
  18:../../common/keyboard.c **** #include <util/delay.h>
  19:../../common/keyboard.c **** #include "keyboard.h"
  20:../../common/keyboard.c **** #include "matrix.h"
  21:../../common/keyboard.c **** #include "keymap.h"
  22:../../common/keyboard.c **** #include "host.h"
  23:../../common/keyboard.c **** #include "led.h"
  24:../../common/keyboard.c **** #include "keycode.h"
  25:../../common/keyboard.c **** #include "timer.h"
  26:../../common/keyboard.c **** #include "print.h"
  27:../../common/keyboard.c **** #include "debug.h"
  28:../../common/keyboard.c **** #include "command.h"
  29:../../common/keyboard.c **** #include "util.h"
  30:../../common/keyboard.c **** #include "sendchar.h"
  31:../../common/keyboard.c **** #include "bootmagic.h"
  32:../../common/keyboard.c **** #include "eeconfig.h"
  33:../../common/keyboard.c **** #include "backlight.h"
  34:../../common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  35:../../common/keyboard.c **** #   include "mousekey.h"
  36:../../common/keyboard.c **** #endif
  37:../../common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  38:../../common/keyboard.c **** #   include "ps2_mouse.h"
  39:../../common/keyboard.c **** #endif
  40:../../common/keyboard.c **** 
  41:../../common/keyboard.c **** 
  42:../../common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  43:../../common/keyboard.c **** static bool has_ghost_in_row(uint8_t row)
  44:../../common/keyboard.c **** {
  45:../../common/keyboard.c ****     matrix_row_t matrix_row = matrix_get_row(row);
  46:../../common/keyboard.c ****     // No ghost exists when less than 2 keys are down on the row
  47:../../common/keyboard.c ****     if (((matrix_row - 1) & matrix_row) == 0)
  48:../../common/keyboard.c ****         return false;
  49:../../common/keyboard.c **** 
  50:../../common/keyboard.c ****     // Ghost occurs when the row shares column line with other row
  51:../../common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
  52:../../common/keyboard.c ****         if (i != row && (matrix_get_row(i) & matrix_row))
  53:../../common/keyboard.c ****             return true;
  54:../../common/keyboard.c ****     }
  55:../../common/keyboard.c ****     return false;
  56:../../common/keyboard.c **** }
  57:../../common/keyboard.c **** #endif
  58:../../common/keyboard.c **** 
  59:../../common/keyboard.c **** 
  60:../../common/keyboard.c **** void keyboard_init(void)
  61:../../common/keyboard.c **** {
  16               		.loc 1 61 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  62:../../common/keyboard.c ****     timer_init();
  22               		.loc 1 62 0
  23 0000 0E94 0000 		call timer_init
  24               	.LVL0:
  63:../../common/keyboard.c ****     matrix_init();
  25               		.loc 1 63 0
  26 0004 0C94 0000 		jmp matrix_init
  27               	.LVL1:
  28               		.cfi_endproc
  29               	.LFE102:
  31               		.section	.text.keyboard_set_leds,"ax",@progbits
  32               	.global	keyboard_set_leds
  34               	keyboard_set_leds:
  35               	.LFB104:
  64:../../common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  65:../../common/keyboard.c ****     ps2_mouse_init();
  66:../../common/keyboard.c **** #endif
  67:../../common/keyboard.c **** 
  68:../../common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  69:../../common/keyboard.c ****     bootmagic();
  70:../../common/keyboard.c **** #endif
  71:../../common/keyboard.c **** 
  72:../../common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
  73:../../common/keyboard.c ****     backlight_init();
  74:../../common/keyboard.c **** #endif
  75:../../common/keyboard.c **** }
  76:../../common/keyboard.c **** 
  77:../../common/keyboard.c **** /*
  78:../../common/keyboard.c ****  * Do keyboard routine jobs: scan mantrix, light LEDs, ...
  79:../../common/keyboard.c ****  * This is repeatedly called as fast as possible.
  80:../../common/keyboard.c ****  */
  81:../../common/keyboard.c **** void keyboard_task(void)
  82:../../common/keyboard.c **** {
  83:../../common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
  84:../../common/keyboard.c ****     static uint8_t led_status = 0;
  85:../../common/keyboard.c ****     matrix_row_t matrix_row = 0;
  86:../../common/keyboard.c ****     matrix_row_t matrix_change = 0;
  87:../../common/keyboard.c **** 
  88:../../common/keyboard.c ****     matrix_scan();
  89:../../common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  90:../../common/keyboard.c ****         matrix_row = matrix_get_row(r);
  91:../../common/keyboard.c ****         matrix_change = matrix_row ^ matrix_prev[r];
  92:../../common/keyboard.c ****         if (matrix_change) {
  93:../../common/keyboard.c ****             if (debug_matrix) matrix_print();
  94:../../common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  95:../../common/keyboard.c ****             if (has_ghost_in_row(r)) {
  96:../../common/keyboard.c ****                 matrix_prev[r] = matrix_row;
  97:../../common/keyboard.c ****                 continue;
  98:../../common/keyboard.c ****             }
  99:../../common/keyboard.c **** #endif
 100:../../common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 101:../../common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 102:../../common/keyboard.c ****                     action_exec((keyevent_t){
 103:../../common/keyboard.c ****                         .key = (key_t){ .row = r, .col = c },
 104:../../common/keyboard.c ****                         .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 105:../../common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 106:../../common/keyboard.c ****                     });
 107:../../common/keyboard.c ****                     // record a processed key
 108:../../common/keyboard.c ****                     matrix_prev[r] ^= ((matrix_row_t)1<<c);
 109:../../common/keyboard.c ****                     // process a key per task call
 110:../../common/keyboard.c ****                     goto MATRIX_LOOP_END;
 111:../../common/keyboard.c ****                 }
 112:../../common/keyboard.c ****             }
 113:../../common/keyboard.c ****         }
 114:../../common/keyboard.c ****     }
 115:../../common/keyboard.c ****     // call with pseudo tick event when no real key event.
 116:../../common/keyboard.c ****     action_exec(TICK);
 117:../../common/keyboard.c **** 
 118:../../common/keyboard.c **** MATRIX_LOOP_END:
 119:../../common/keyboard.c **** 
 120:../../common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 121:../../common/keyboard.c ****     // mousekey repeat & acceleration
 122:../../common/keyboard.c ****     mousekey_task();
 123:../../common/keyboard.c **** #endif
 124:../../common/keyboard.c **** 
 125:../../common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 126:../../common/keyboard.c ****     ps2_mouse_task();
 127:../../common/keyboard.c **** #endif
 128:../../common/keyboard.c **** 
 129:../../common/keyboard.c ****     // update LED
 130:../../common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 131:../../common/keyboard.c ****         led_status = host_keyboard_leds();
 132:../../common/keyboard.c ****         keyboard_set_leds(led_status);
 133:../../common/keyboard.c ****     }
 134:../../common/keyboard.c **** }
 135:../../common/keyboard.c **** 
 136:../../common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 137:../../common/keyboard.c **** {
  36               		.loc 1 137 0
  37               		.cfi_startproc
  38               	.LVL2:
  39 0000 CF93      		push r28
  40               	.LCFI0:
  41               		.cfi_def_cfa_offset 3
  42               		.cfi_offset 28, -2
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 1 */
  46               	.L__stack_usage = 1
  47 0002 C82F      		mov r28,r24
 138:../../common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
  48               		.loc 1 138 0
  49 0004 8091 0000 		lds r24,debug_config
  50               	.LVL3:
  51 0008 82FF      		sbrs r24,2
  52 000a 00C0      		rjmp .L4
  53               		.loc 1 138 0 is_stmt 0 discriminator 1
  54 000c 80FF      		sbrs r24,0
  55 000e 00C0      		rjmp .L5
  56               		.loc 1 138 0 discriminator 2
  57 0010 80E0      		ldi r24,lo8(__c.4802)
  58 0012 90E0      		ldi r25,hi8(__c.4802)
  59 0014 0E94 0000 		call xputs
  60               	.LVL4:
  61               	.L5:
  62               		.loc 1 138 0 discriminator 4
  63 0018 8091 0000 		lds r24,debug_config
  64 001c 80FF      		sbrs r24,0
  65 001e 00C0      		rjmp .L6
  66               		.loc 1 138 0 discriminator 5
  67 0020 1F92      		push __zero_reg__
  68               	.LCFI1:
  69               		.cfi_def_cfa_offset 4
  70 0022 CF93      		push r28
  71               	.LCFI2:
  72               		.cfi_def_cfa_offset 5
  73 0024 80E0      		ldi r24,lo8(__c.4804)
  74 0026 90E0      		ldi r25,hi8(__c.4804)
  75 0028 9F93      		push r25
  76               	.LCFI3:
  77               		.cfi_def_cfa_offset 6
  78 002a 8F93      		push r24
  79               	.LCFI4:
  80               		.cfi_def_cfa_offset 7
  81 002c 0E94 0000 		call __xprintf
  82               	.LVL5:
  83 0030 0F90      		pop __tmp_reg__
  84 0032 0F90      		pop __tmp_reg__
  85 0034 0F90      		pop __tmp_reg__
  86 0036 0F90      		pop __tmp_reg__
  87               	.LCFI5:
  88               		.cfi_def_cfa_offset 3
  89               	.L6:
  90               		.loc 1 138 0 discriminator 7
  91 0038 8091 0000 		lds r24,debug_config
  92 003c 80FF      		sbrs r24,0
  93 003e 00C0      		rjmp .L4
  94               		.loc 1 138 0 discriminator 8
  95 0040 80E0      		ldi r24,lo8(__c.4806)
  96 0042 90E0      		ldi r25,hi8(__c.4806)
  97 0044 0E94 0000 		call xputs
  98               	.LVL6:
  99               	.L4:
 139:../../common/keyboard.c ****     led_set(leds);
 100               		.loc 1 139 0 is_stmt 1
 101 0048 8C2F      		mov r24,r28
 102               	/* epilogue start */
 140:../../common/keyboard.c **** }
 103               		.loc 1 140 0
 104 004a CF91      		pop r28
 105               	.LVL7:
 139:../../common/keyboard.c ****     led_set(leds);
 106               		.loc 1 139 0
 107 004c 0C94 0000 		jmp led_set
 108               	.LVL8:
 109               		.cfi_endproc
 110               	.LFE104:
 112               		.section	.text.keyboard_task,"ax",@progbits
 113               	.global	keyboard_task
 115               	keyboard_task:
 116               	.LFB103:
  82:../../common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 117               		.loc 1 82 0
 118               		.cfi_startproc
 119 0000 5F92      		push r5
 120               	.LCFI6:
 121               		.cfi_def_cfa_offset 3
 122               		.cfi_offset 5, -2
 123 0002 6F92      		push r6
 124               	.LCFI7:
 125               		.cfi_def_cfa_offset 4
 126               		.cfi_offset 6, -3
 127 0004 7F92      		push r7
 128               	.LCFI8:
 129               		.cfi_def_cfa_offset 5
 130               		.cfi_offset 7, -4
 131 0006 8F92      		push r8
 132               	.LCFI9:
 133               		.cfi_def_cfa_offset 6
 134               		.cfi_offset 8, -5
 135 0008 9F92      		push r9
 136               	.LCFI10:
 137               		.cfi_def_cfa_offset 7
 138               		.cfi_offset 9, -6
 139 000a AF92      		push r10
 140               	.LCFI11:
 141               		.cfi_def_cfa_offset 8
 142               		.cfi_offset 10, -7
 143 000c BF92      		push r11
 144               	.LCFI12:
 145               		.cfi_def_cfa_offset 9
 146               		.cfi_offset 11, -8
 147 000e CF92      		push r12
 148               	.LCFI13:
 149               		.cfi_def_cfa_offset 10
 150               		.cfi_offset 12, -9
 151 0010 DF92      		push r13
 152               	.LCFI14:
 153               		.cfi_def_cfa_offset 11
 154               		.cfi_offset 13, -10
 155 0012 EF92      		push r14
 156               	.LCFI15:
 157               		.cfi_def_cfa_offset 12
 158               		.cfi_offset 14, -11
 159 0014 FF92      		push r15
 160               	.LCFI16:
 161               		.cfi_def_cfa_offset 13
 162               		.cfi_offset 15, -12
 163 0016 0F93      		push r16
 164               	.LCFI17:
 165               		.cfi_def_cfa_offset 14
 166               		.cfi_offset 16, -13
 167 0018 1F93      		push r17
 168               	.LCFI18:
 169               		.cfi_def_cfa_offset 15
 170               		.cfi_offset 17, -14
 171 001a CF93      		push r28
 172               	.LCFI19:
 173               		.cfi_def_cfa_offset 16
 174               		.cfi_offset 28, -15
 175 001c DF93      		push r29
 176               	.LCFI20:
 177               		.cfi_def_cfa_offset 17
 178               		.cfi_offset 29, -16
 179 001e CDB7      		in r28,__SP_L__
 180 0020 DEB7      		in r29,__SP_H__
 181               	.LCFI21:
 182               		.cfi_def_cfa_register 28
 183 0022 2A97      		sbiw r28,10
 184               	.LCFI22:
 185               		.cfi_def_cfa_offset 27
 186 0024 0FB6      		in __tmp_reg__,__SREG__
 187 0026 F894      		cli
 188 0028 DEBF      		out __SP_H__,r29
 189 002a 0FBE      		out __SREG__,__tmp_reg__
 190 002c CDBF      		out __SP_L__,r28
 191               	/* prologue: function */
 192               	/* frame size = 10 */
 193               	/* stack size = 25 */
 194               	.L__stack_usage = 25
 195               	.LVL9:
  88:../../common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 196               		.loc 1 88 0
 197 002e 0E94 0000 		call matrix_scan
 198               	.LVL10:
 199 0032 90E0      		ldi r25,lo8(matrix_prev.4782)
 200 0034 C92E      		mov r12,r25
 201 0036 90E0      		ldi r25,hi8(matrix_prev.4782)
 202 0038 D92E      		mov r13,r25
 203 003a 00E0      		ldi r16,0
 204 003c 10E0      		ldi r17,0
 205               	.LBB2:
 206               	.LBB3:
 101:../../common/keyboard.c ****                     action_exec((keyevent_t){
 207               		.loc 1 101 0
 208 003e AA24      		clr r10
 209 0040 A394      		inc r10
 210 0042 B12C      		mov r11,__zero_reg__
 211               	.LVL11:
 212               	.L20:
 213 0044 502E      		mov r5,r16
 214               	.LVL12:
 215               	.LBE3:
  90:../../common/keyboard.c ****         matrix_change = matrix_row ^ matrix_prev[r];
 216               		.loc 1 90 0
 217 0046 802F      		mov r24,r16
 218 0048 0E94 0000 		call matrix_get_row
 219               	.LVL13:
 220 004c 4C01      		movw r8,r24
 221               	.LVL14:
  91:../../common/keyboard.c ****         if (matrix_change) {
 222               		.loc 1 91 0
 223 004e F601      		movw r30,r12
 224 0050 6190      		ld r6,Z+
 225 0052 7190      		ld r7,Z+
 226 0054 6F01      		movw r12,r30
 227 0056 6826      		eor r6,r24
 228 0058 7926      		eor r7,r25
 229               	.LVL15:
  92:../../common/keyboard.c ****             if (debug_matrix) matrix_print();
 230               		.loc 1 92 0
 231 005a 6114      		cp r6,__zero_reg__
 232 005c 7104      		cpc r7,__zero_reg__
 233 005e 01F4      		brne .L19
 234               	.L27:
 235               	.LVL16:
 236 0060 0F5F      		subi r16,-1
 237 0062 1F4F      		sbci r17,-1
 238               	.LVL17:
  89:../../common/keyboard.c ****         matrix_row = matrix_get_row(r);
 239               		.loc 1 89 0
 240 0064 0430      		cpi r16,4
 241 0066 1105      		cpc r17,__zero_reg__
 242 0068 01F4      		brne .L20
 243               	.LBE2:
 116:../../common/keyboard.c **** 
 244               		.loc 1 116 0
 245 006a 8FEF      		ldi r24,lo8(-1)
 246 006c 8983      		std Y+1,r24
 247 006e 8A83      		std Y+2,r24
 248 0070 1B82      		std Y+3,__zero_reg__
 249 0072 0E94 0000 		call timer_read
 250               	.LVL18:
 251 0076 8160      		ori r24,1
 252 0078 782F      		mov r23,r24
 253 007a 9D83      		std Y+5,r25
 254 007c 8C83      		std Y+4,r24
 255 007e 4981      		ldd r20,Y+1
 256 0080 5A81      		ldd r21,Y+2
 257 0082 6B81      		ldd r22,Y+3
 258 0084 8D81      		ldd r24,Y+5
 259 0086 0E94 0000 		call action_exec
 260               	.LVL19:
 261 008a 00C0      		rjmp .L25
 262               	.L19:
 263               	.LBB5:
  93:../../common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 264               		.loc 1 93 0
 265 008c 8091 0000 		lds r24,debug_config
 266 0090 81FD      		sbrc r24,1
  93:../../common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 267               		.loc 1 93 0 is_stmt 0 discriminator 1
 268 0092 0E94 0000 		call matrix_print
 269               	.LVL20:
 270               	.L22:
 271               	.LBE5:
  88:../../common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 272               		.loc 1 88 0 is_stmt 1
 273 0096 20E0      		ldi r18,0
 274 0098 30E0      		ldi r19,0
 275               	.LVL21:
 276               	.L26:
 277               	.LBB6:
 278               	.LBB4:
 101:../../common/keyboard.c ****                     action_exec((keyevent_t){
 279               		.loc 1 101 0
 280 009a 7501      		movw r14,r10
 281 009c 022E      		mov r0,r18
 282 009e 00C0      		rjmp 2f
 283               		1:
 284 00a0 EE0C      		lsl r14
 285 00a2 FF1C      		rol r15
 286               		2:
 287 00a4 0A94      		dec r0
 288 00a6 02F4      		brpl 1b
 289 00a8 C301      		movw r24,r6
 290 00aa 8E21      		and r24,r14
 291 00ac 9F21      		and r25,r15
 292 00ae 892B      		or r24,r25
 293 00b0 01F0      		breq .L23
 102:../../common/keyboard.c ****                         .key = (key_t){ .row = r, .col = c },
 294               		.loc 1 102 0
 295 00b2 2E83      		std Y+6,r18
 296 00b4 5F82      		std Y+7,r5
 297 00b6 8E20      		and r8,r14
 298 00b8 9F20      		and r9,r15
 299               	.LVL22:
 300 00ba 91E0      		ldi r25,lo8(1)
 301 00bc 8928      		or r8,r9
 302 00be 01F4      		brne .L24
 303 00c0 90E0      		ldi r25,0
 304               	.L24:
 305 00c2 9887      		std Y+8,r25
 105:../../common/keyboard.c ****                     });
 306               		.loc 1 105 0
 307 00c4 0E94 0000 		call timer_read
 308               	.LVL23:
 102:../../common/keyboard.c ****                         .key = (key_t){ .row = r, .col = c },
 309               		.loc 1 102 0
 310 00c8 8160      		ori r24,1
 311 00ca 782F      		mov r23,r24
 312 00cc 9A87      		std Y+10,r25
 313 00ce 8987      		std Y+9,r24
 314 00d0 4E81      		ldd r20,Y+6
 315 00d2 5F81      		ldd r21,Y+7
 316 00d4 6885      		ldd r22,Y+8
 317 00d6 8A85      		ldd r24,Y+10
 318 00d8 0E94 0000 		call action_exec
 319               	.LVL24:
 108:../../common/keyboard.c ****                     // process a key per task call
 320               		.loc 1 108 0
 321 00dc 000F      		lsl r16
 322 00de 111F      		rol r17
 323               	.LVL25:
 324 00e0 F801      		movw r30,r16
 325 00e2 E050      		subi r30,lo8(-(matrix_prev.4782))
 326 00e4 F040      		sbci r31,hi8(-(matrix_prev.4782))
 327 00e6 8081      		ld r24,Z
 328 00e8 9181      		ldd r25,Z+1
 329 00ea E826      		eor r14,r24
 330 00ec F926      		eor r15,r25
 331 00ee F182      		std Z+1,r15
 332 00f0 E082      		st Z,r14
 110:../../common/keyboard.c ****                 }
 333               		.loc 1 110 0
 334 00f2 00C0      		rjmp .L25
 335               	.LVL26:
 336               	.L23:
 337 00f4 2F5F      		subi r18,-1
 338 00f6 3F4F      		sbci r19,-1
 339               	.LVL27:
 100:../../common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 340               		.loc 1 100 0 discriminator 2
 341 00f8 2B30      		cpi r18,11
 342 00fa 3105      		cpc r19,__zero_reg__
 343 00fc 01F4      		brne .L26
 344 00fe 00C0      		rjmp .L27
 345               	.LVL28:
 346               	.L25:
 347               	.LBE4:
 348               	.LBE6:
 130:../../common/keyboard.c ****         led_status = host_keyboard_leds();
 349               		.loc 1 130 0
 350 0100 0E94 0000 		call host_keyboard_leds
 351               	.LVL29:
 352 0104 9091 0000 		lds r25,led_status.4783
 353 0108 8917      		cp r24,r25
 354 010a 01F0      		breq .L18
 131:../../common/keyboard.c ****         keyboard_set_leds(led_status);
 355               		.loc 1 131 0
 356 010c 0E94 0000 		call host_keyboard_leds
 357               	.LVL30:
 358 0110 8093 0000 		sts led_status.4783,r24
 359               	/* epilogue start */
 134:../../common/keyboard.c **** 
 360               		.loc 1 134 0
 361 0114 2A96      		adiw r28,10
 362 0116 0FB6      		in __tmp_reg__,__SREG__
 363 0118 F894      		cli
 364 011a DEBF      		out __SP_H__,r29
 365 011c 0FBE      		out __SREG__,__tmp_reg__
 366 011e CDBF      		out __SP_L__,r28
 367 0120 DF91      		pop r29
 368 0122 CF91      		pop r28
 369 0124 1F91      		pop r17
 370 0126 0F91      		pop r16
 371 0128 FF90      		pop r15
 372 012a EF90      		pop r14
 373 012c DF90      		pop r13
 374 012e CF90      		pop r12
 375 0130 BF90      		pop r11
 376 0132 AF90      		pop r10
 377 0134 9F90      		pop r9
 378 0136 8F90      		pop r8
 379 0138 7F90      		pop r7
 380 013a 6F90      		pop r6
 381               	.LVL31:
 382 013c 5F90      		pop r5
 132:../../common/keyboard.c ****     }
 383               		.loc 1 132 0
 384 013e 0C94 0000 		jmp keyboard_set_leds
 385               	.LVL32:
 386               	.L18:
 387               	/* epilogue start */
 134:../../common/keyboard.c **** 
 388               		.loc 1 134 0
 389 0142 2A96      		adiw r28,10
 390 0144 0FB6      		in __tmp_reg__,__SREG__
 391 0146 F894      		cli
 392 0148 DEBF      		out __SP_H__,r29
 393 014a 0FBE      		out __SREG__,__tmp_reg__
 394 014c CDBF      		out __SP_L__,r28
 395 014e DF91      		pop r29
 396 0150 CF91      		pop r28
 397 0152 1F91      		pop r17
 398 0154 0F91      		pop r16
 399 0156 FF90      		pop r15
 400 0158 EF90      		pop r14
 401 015a DF90      		pop r13
 402 015c CF90      		pop r12
 403 015e BF90      		pop r11
 404 0160 AF90      		pop r10
 405 0162 9F90      		pop r9
 406 0164 8F90      		pop r8
 407 0166 7F90      		pop r7
 408 0168 6F90      		pop r6
 409               	.LVL33:
 410 016a 5F90      		pop r5
 411 016c 0895      		ret
 412               		.cfi_endproc
 413               	.LFE103:
 415               		.section	.progmem.data,"a",@progbits
 418               	__c.4806:
 419 0000 0A00      		.string	"\n"
 422               	__c.4804:
 423 0002 2530 3258 		.string	"%02X"
 423      00
 426               	__c.4802:
 427 0007 6B65 7962 		.string	"keyboard_set_led: "
 427      6F61 7264 
 427      5F73 6574 
 427      5F6C 6564 
 427      3A20 00
 428               		.local	led_status.4783
 429               		.comm	led_status.4783,1,1
 430               		.local	matrix_prev.4782
 431               		.comm	matrix_prev.4782,8,1
 432               		.comm	debug_config,1,1
 433               		.text
 434               	.Letext0:
 435               		.file 2 "/usr/avr/include/stdint.h"
 436               		.file 3 "../../common/keyboard.h"
 437               		.file 4 "../../common/matrix.h"
 438               		.file 5 "../../common/debug_config.h"
 439               		.file 6 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 440               		.file 7 "../../common/timer.h"
 441               		.file 8 "../../common/xprintf.h"
 442               		.file 9 "../../common/led.h"
 443               		.file 10 "../../common/action.h"
 444               		.file 11 "../../common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/ccGsKtqs.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccGsKtqs.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccGsKtqs.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccGsKtqs.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccGsKtqs.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccGsKtqs.s:13     .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/ccGsKtqs.s:34     .text.keyboard_set_leds:0000000000000000 keyboard_set_leds
                            *COM*:0000000000000001 debug_config
     /tmp/ccGsKtqs.s:426    .progmem.data:0000000000000007 __c.4802
     /tmp/ccGsKtqs.s:422    .progmem.data:0000000000000002 __c.4804
     /tmp/ccGsKtqs.s:418    .progmem.data:0000000000000000 __c.4806
     /tmp/ccGsKtqs.s:115    .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/ccGsKtqs.s:429    .bss:0000000000000001 matrix_prev.4782
                             .bss:0000000000000000 led_status.4783

UNDEFINED SYMBOLS
timer_init
matrix_init
xputs
__xprintf
led_set
matrix_scan
matrix_get_row
timer_read
action_exec
matrix_print
host_keyboard_leds
__do_clear_bss
