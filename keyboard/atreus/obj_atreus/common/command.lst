   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.switch_default_layer,"ax",@progbits
  12               	switch_default_layer:
  13               	.LFB109:
  14               		.file 1 "../../common/command.c"
   1:../../common/command.c **** /*
   2:../../common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:../../common/command.c **** 
   4:../../common/command.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/command.c **** it under the terms of the GNU General Public License as published by
   6:../../common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/command.c **** (at your option) any later version.
   8:../../common/command.c **** 
   9:../../common/command.c **** This program is distributed in the hope that it will be useful,
  10:../../common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/command.c **** GNU General Public License for more details.
  13:../../common/command.c **** 
  14:../../common/command.c **** You should have received a copy of the GNU General Public License
  15:../../common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/command.c **** */
  17:../../common/command.c **** #include <stdint.h>
  18:../../common/command.c **** #include <stdbool.h>
  19:../../common/command.c **** #include <util/delay.h>
  20:../../common/command.c **** #include "keycode.h"
  21:../../common/command.c **** #include "host.h"
  22:../../common/command.c **** #include "keymap.h"
  23:../../common/command.c **** #include "print.h"
  24:../../common/command.c **** #include "debug.h"
  25:../../common/command.c **** #include "util.h"
  26:../../common/command.c **** #include "timer.h"
  27:../../common/command.c **** #include "keyboard.h"
  28:../../common/command.c **** #include "bootloader.h"
  29:../../common/command.c **** #include "action_layer.h"
  30:../../common/command.c **** #include "action_util.h"
  31:../../common/command.c **** #include "eeconfig.h"
  32:../../common/command.c **** #include "sleep_led.h"
  33:../../common/command.c **** #include "led.h"
  34:../../common/command.c **** #include "command.h"
  35:../../common/command.c **** #include "backlight.h"
  36:../../common/command.c **** 
  37:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
  38:../../common/command.c **** #include "mousekey.h"
  39:../../common/command.c **** #endif
  40:../../common/command.c **** 
  41:../../common/command.c **** #ifdef PROTOCOL_PJRC
  42:../../common/command.c **** #   include "usb_keyboard.h"
  43:../../common/command.c **** #   ifdef EXTRAKEY_ENABLE
  44:../../common/command.c **** #       include "usb_extra.h"
  45:../../common/command.c **** #   endif
  46:../../common/command.c **** #endif
  47:../../common/command.c **** 
  48:../../common/command.c **** #ifdef PROTOCOL_VUSB
  49:../../common/command.c **** #   include "usbdrv.h"
  50:../../common/command.c **** #endif
  51:../../common/command.c **** 
  52:../../common/command.c **** 
  53:../../common/command.c **** static bool command_common(uint8_t code);
  54:../../common/command.c **** static void command_common_help(void);
  55:../../common/command.c **** static bool command_console(uint8_t code);
  56:../../common/command.c **** static void command_console_help(void);
  57:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
  58:../../common/command.c **** static bool mousekey_console(uint8_t code);
  59:../../common/command.c **** static void mousekey_console_help(void);
  60:../../common/command.c **** #endif
  61:../../common/command.c **** 
  62:../../common/command.c **** static uint8_t numkey2num(uint8_t code);
  63:../../common/command.c **** static void switch_default_layer(uint8_t layer);
  64:../../common/command.c **** 
  65:../../common/command.c **** 
  66:../../common/command.c **** typedef enum { ONESHOT, CONSOLE, MOUSEKEY } cmdstate_t;
  67:../../common/command.c **** static cmdstate_t state = ONESHOT;
  68:../../common/command.c **** 
  69:../../common/command.c **** 
  70:../../common/command.c **** bool command_proc(uint8_t code)
  71:../../common/command.c **** {
  72:../../common/command.c ****     switch (state) {
  73:../../common/command.c ****         case ONESHOT:
  74:../../common/command.c ****             if (!IS_COMMAND())
  75:../../common/command.c ****                 return false;
  76:../../common/command.c ****             return (command_extra(code) || command_common(code));
  77:../../common/command.c ****         case CONSOLE:
  78:../../common/command.c ****             command_console(code);
  79:../../common/command.c ****             break;
  80:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
  81:../../common/command.c ****         case MOUSEKEY:
  82:../../common/command.c ****             mousekey_console(code);
  83:../../common/command.c ****             break;
  84:../../common/command.c **** #endif
  85:../../common/command.c ****         default:
  86:../../common/command.c ****             state = ONESHOT;
  87:../../common/command.c ****             return false;
  88:../../common/command.c ****     }
  89:../../common/command.c ****     return true;
  90:../../common/command.c **** }
  91:../../common/command.c **** 
  92:../../common/command.c **** /* This allows to define extra commands. return false when not processed. */
  93:../../common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
  94:../../common/command.c **** bool command_extra(uint8_t code)
  95:../../common/command.c **** {
  96:../../common/command.c ****     return false;
  97:../../common/command.c **** }
  98:../../common/command.c **** 
  99:../../common/command.c **** 
 100:../../common/command.c **** /***********************************************************
 101:../../common/command.c ****  * Command common
 102:../../common/command.c ****  ***********************************************************/
 103:../../common/command.c **** static void command_common_help(void)
 104:../../common/command.c **** {
 105:../../common/command.c ****     print("\n\n----- Command Help -----\n");
 106:../../common/command.c ****     print("c:	enter console mode\n");
 107:../../common/command.c ****     print("d:	toggle debug enable\n");
 108:../../common/command.c ****     print("x:	toggle matrix debug\n");
 109:../../common/command.c ****     print("k:	toggle keyboard debug\n");
 110:../../common/command.c ****     print("m:	toggle mouse debug\n");
 111:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 112:../../common/command.c ****     print("z:	toggle sleep LED test\n");
 113:../../common/command.c **** #endif
 114:../../common/command.c ****     print("v:	print device version & info\n");
 115:../../common/command.c ****     print("t:	print timer count\n");
 116:../../common/command.c ****     print("s:	print status\n");
 117:../../common/command.c ****     print("e:	print eeprom config\n");
 118:../../common/command.c **** #ifdef NKRO_ENABLE
 119:../../common/command.c ****     print("n:	toggle NKRO\n");
 120:../../common/command.c **** #endif
 121:../../common/command.c ****     print("0/F10:	switch to Layer0 \n");
 122:../../common/command.c ****     print("1/F1:	switch to Layer1 \n");
 123:../../common/command.c ****     print("2/F2:	switch to Layer2 \n");
 124:../../common/command.c ****     print("3/F3:	switch to Layer3 \n");
 125:../../common/command.c ****     print("4/F4:	switch to Layer4 \n");
 126:../../common/command.c ****     print("PScr:	power down/remote wake-up\n");
 127:../../common/command.c ****     print("Caps:	Lock Keyboard(Child Proof)\n");
 128:../../common/command.c ****     print("Paus:	jump to bootloader\n");
 129:../../common/command.c **** }
 130:../../common/command.c **** 
 131:../../common/command.c **** #ifdef BOOTMAGIC_ENABLE
 132:../../common/command.c **** static void print_eeconfig(void)
 133:../../common/command.c **** {
 134:../../common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 135:../../common/command.c **** 
 136:../../common/command.c ****     debug_config_t dc;
 137:../../common/command.c ****     dc.raw = eeconfig_read_debug();
 138:../../common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 139:../../common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 140:../../common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 141:../../common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 142:../../common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 143:../../common/command.c **** 
 144:../../common/command.c ****     keymap_config_t kc;
 145:../../common/command.c ****     kc.raw = eeconfig_read_keymap();
 146:../../common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 147:../../common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 148:../../common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 149:../../common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 150:../../common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 151:../../common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 152:../../common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 153:../../common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 154:../../common/command.c **** 
 155:../../common/command.c **** #ifdef BACKLIGHT_ENABLE
 156:../../common/command.c ****     backlight_config_t bc;
 157:../../common/command.c ****     bc.raw = eeconfig_read_backlight();
 158:../../common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 159:../../common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 160:../../common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 161:../../common/command.c **** #endif
 162:../../common/command.c **** }
 163:../../common/command.c **** #endif
 164:../../common/command.c **** 
 165:../../common/command.c **** static bool command_common(uint8_t code)
 166:../../common/command.c **** {
 167:../../common/command.c ****     static host_driver_t *host_driver = 0;
 168:../../common/command.c ****     switch (code) {
 169:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 170:../../common/command.c ****         case KC_Z:
 171:../../common/command.c ****             // test breathing sleep LED
 172:../../common/command.c ****             print("Sleep LED test\n");
 173:../../common/command.c ****             sleep_led_toggle();
 174:../../common/command.c ****             led_set(host_keyboard_leds());
 175:../../common/command.c ****             break;
 176:../../common/command.c **** #endif
 177:../../common/command.c **** #ifdef BOOTMAGIC_ENABLE
 178:../../common/command.c ****         case KC_E:
 179:../../common/command.c ****             print("eeconfig:\n");
 180:../../common/command.c ****             print_eeconfig();
 181:../../common/command.c ****             break;
 182:../../common/command.c **** #endif
 183:../../common/command.c ****         case KC_CAPSLOCK:
 184:../../common/command.c ****             if (host_get_driver()) {
 185:../../common/command.c ****                 host_driver = host_get_driver();
 186:../../common/command.c ****                 host_set_driver(0);
 187:../../common/command.c ****                 print("Locked.\n");
 188:../../common/command.c ****             } else {
 189:../../common/command.c ****                 host_set_driver(host_driver);
 190:../../common/command.c ****                 print("Unlocked.\n");
 191:../../common/command.c ****             }
 192:../../common/command.c ****             break;
 193:../../common/command.c ****         case KC_H:
 194:../../common/command.c ****         case KC_SLASH: /* ? */
 195:../../common/command.c ****             command_common_help();
 196:../../common/command.c ****             break;
 197:../../common/command.c ****         case KC_C:
 198:../../common/command.c ****             debug_matrix   = false;
 199:../../common/command.c ****             debug_keyboard = false;
 200:../../common/command.c ****             debug_mouse    = false;
 201:../../common/command.c ****             debug_enable   = false;
 202:../../common/command.c ****             command_console_help();
 203:../../common/command.c ****             print("\nEnter Console Mode\n");
 204:../../common/command.c ****             print("C> ");
 205:../../common/command.c ****             state = CONSOLE;
 206:../../common/command.c ****             break;
 207:../../common/command.c ****         case KC_PAUSE:
 208:../../common/command.c ****             clear_keyboard();
 209:../../common/command.c ****             print("\n\nJump to bootloader... ");
 210:../../common/command.c ****             _delay_ms(1000);
 211:../../common/command.c ****             bootloader_jump(); // not return
 212:../../common/command.c ****             print("not supported.\n");
 213:../../common/command.c ****             break;
 214:../../common/command.c ****         case KC_D:
 215:../../common/command.c ****             if (debug_enable) {
 216:../../common/command.c ****                 print("\nDEBUG: disabled.\n");
 217:../../common/command.c ****                 debug_matrix   = false;
 218:../../common/command.c ****                 debug_keyboard = false;
 219:../../common/command.c ****                 debug_mouse    = false;
 220:../../common/command.c ****                 debug_enable   = false;
 221:../../common/command.c ****             } else {
 222:../../common/command.c ****                 print("\nDEBUG: enabled.\n");
 223:../../common/command.c ****                 debug_enable   = true;
 224:../../common/command.c ****             }
 225:../../common/command.c ****             break;
 226:../../common/command.c ****         case KC_X: // debug matrix toggle
 227:../../common/command.c ****             debug_matrix = !debug_matrix;
 228:../../common/command.c ****             if (debug_matrix) {
 229:../../common/command.c ****                 print("\nDEBUG: matrix enabled.\n");
 230:../../common/command.c ****                 debug_enable = true;
 231:../../common/command.c ****             } else {
 232:../../common/command.c ****                 print("\nDEBUG: matrix disabled.\n");
 233:../../common/command.c ****             }
 234:../../common/command.c ****             break;
 235:../../common/command.c ****         case KC_K: // debug keyboard toggle
 236:../../common/command.c ****             debug_keyboard = !debug_keyboard;
 237:../../common/command.c ****             if (debug_keyboard) {
 238:../../common/command.c ****                 print("\nDEBUG: keyboard enabled.\n");
 239:../../common/command.c ****                 debug_enable = true;
 240:../../common/command.c ****             } else {
 241:../../common/command.c ****                 print("\nDEBUG: keyboard disabled.\n");
 242:../../common/command.c ****             }
 243:../../common/command.c ****             break;
 244:../../common/command.c ****         case KC_M: // debug mouse toggle
 245:../../common/command.c ****             debug_mouse = !debug_mouse;
 246:../../common/command.c ****             if (debug_mouse) {
 247:../../common/command.c ****                 print("\nDEBUG: mouse enabled.\n");
 248:../../common/command.c ****                 debug_enable = true;
 249:../../common/command.c ****             } else {
 250:../../common/command.c ****                 print("\nDEBUG: mouse disabled.\n");
 251:../../common/command.c ****             }
 252:../../common/command.c ****             break;
 253:../../common/command.c ****         case KC_V: // print version & information
 254:../../common/command.c ****             print("\n\n----- Version -----\n");
 255:../../common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 256:../../common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 257:../../common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 258:../../common/command.c ****                   "VER: " STR(DEVICE_VER) "\n");
 259:../../common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 260:../../common/command.c ****             /* build options */
 261:../../common/command.c ****             print("OPTIONS:"
 262:../../common/command.c **** #ifdef PROTOCOL_PJRC
 263:../../common/command.c ****             " PJRC"
 264:../../common/command.c **** #endif
 265:../../common/command.c **** #ifdef PROTOCOL_LUFA
 266:../../common/command.c ****             " LUFA"
 267:../../common/command.c **** #endif
 268:../../common/command.c **** #ifdef PROTOCOL_VUSB
 269:../../common/command.c ****             " VUSB"
 270:../../common/command.c **** #endif
 271:../../common/command.c **** #ifdef BOOTMAGIC_ENABLE
 272:../../common/command.c ****             " BOOTMAGIC"
 273:../../common/command.c **** #endif
 274:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 275:../../common/command.c ****             " MOUSEKEY"
 276:../../common/command.c **** #endif
 277:../../common/command.c **** #ifdef EXTRAKEY_ENABLE
 278:../../common/command.c ****             " EXTRAKEY"
 279:../../common/command.c **** #endif
 280:../../common/command.c **** #ifdef CONSOLE_ENABLE
 281:../../common/command.c ****             " CONSOLE"
 282:../../common/command.c **** #endif
 283:../../common/command.c **** #ifdef COMMAND_ENABLE
 284:../../common/command.c ****             " COMMAND"
 285:../../common/command.c **** #endif
 286:../../common/command.c **** #ifdef NKRO_ENABLE
 287:../../common/command.c ****             " NKRO"
 288:../../common/command.c **** #endif
 289:../../common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 290:../../common/command.c ****             " KEYMAP_SECTION"
 291:../../common/command.c **** #endif
 292:../../common/command.c ****             " " STR(BOOTLOADER_SIZE) "\n");
 293:../../common/command.c **** 
 294:../../common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__) 
 295:../../common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 296:../../common/command.c ****                   " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
 297:../../common/command.c ****             break;
 298:../../common/command.c ****         case KC_T: // print timer
 299:../../common/command.c ****             print_val_hex32(timer_count);
 300:../../common/command.c ****             break;
 301:../../common/command.c ****         case KC_S:
 302:../../common/command.c ****             print("\n\n----- Status -----\n");
 303:../../common/command.c ****             print_val_hex8(host_keyboard_leds());
 304:../../common/command.c **** #ifdef PROTOCOL_PJRC
 305:../../common/command.c ****             print_val_hex8(UDCON);
 306:../../common/command.c ****             print_val_hex8(UDIEN);
 307:../../common/command.c ****             print_val_hex8(UDINT);
 308:../../common/command.c ****             print_val_hex8(usb_keyboard_leds);
 309:../../common/command.c ****             print_val_hex8(usb_keyboard_protocol);
 310:../../common/command.c ****             print_val_hex8(usb_keyboard_idle_config);
 311:../../common/command.c ****             print_val_hex8(usb_keyboard_idle_count);
 312:../../common/command.c **** #endif
 313:../../common/command.c **** 
 314:../../common/command.c **** #ifdef PROTOCOL_PJRC
 315:../../common/command.c **** #   if USB_COUNT_SOF
 316:../../common/command.c ****             print_val_hex8(usbSofCount);
 317:../../common/command.c **** #   endif
 318:../../common/command.c **** #endif
 319:../../common/command.c ****             break;
 320:../../common/command.c **** #ifdef NKRO_ENABLE
 321:../../common/command.c ****         case KC_N:
 322:../../common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 323:../../common/command.c ****             keyboard_nkro = !keyboard_nkro;
 324:../../common/command.c ****             if (keyboard_nkro)
 325:../../common/command.c ****                 print("NKRO: enabled\n");
 326:../../common/command.c ****             else
 327:../../common/command.c ****                 print("NKRO: disabled\n");
 328:../../common/command.c ****             break;
 329:../../common/command.c **** #endif
 330:../../common/command.c **** #ifdef EXTRAKEY_ENABLE
 331:../../common/command.c ****         case KC_PSCREEN:
 332:../../common/command.c ****             // TODO: Power key should take this feature? otherwise any key during suspend.
 333:../../common/command.c **** #ifdef PROTOCOL_PJRC
 334:../../common/command.c ****             if (suspend && remote_wakeup) {
 335:../../common/command.c ****                 usb_remote_wakeup();
 336:../../common/command.c ****             } else {
 337:../../common/command.c ****                 host_system_send(SYSTEM_POWER_DOWN);
 338:../../common/command.c ****                 host_system_send(0);
 339:../../common/command.c ****                 _delay_ms(500);
 340:../../common/command.c ****             }
 341:../../common/command.c **** #else
 342:../../common/command.c ****             host_system_send(SYSTEM_POWER_DOWN);
 343:../../common/command.c ****             _delay_ms(100);
 344:../../common/command.c ****             host_system_send(0);
 345:../../common/command.c ****             _delay_ms(500);
 346:../../common/command.c **** #endif
 347:../../common/command.c ****             break;
 348:../../common/command.c **** #endif
 349:../../common/command.c ****         case KC_ESC:
 350:../../common/command.c ****         case KC_GRV:
 351:../../common/command.c ****         case KC_0:
 352:../../common/command.c ****             switch_default_layer(0);
 353:../../common/command.c ****             break;
 354:../../common/command.c ****         case KC_1 ... KC_9:
 355:../../common/command.c ****             switch_default_layer((code - KC_1) + 1);
 356:../../common/command.c ****             break;
 357:../../common/command.c ****         case KC_F1 ... KC_F12:
 358:../../common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 359:../../common/command.c ****             break;
 360:../../common/command.c ****         default:
 361:../../common/command.c ****             print("?");
 362:../../common/command.c ****             return false;
 363:../../common/command.c ****     }
 364:../../common/command.c ****     return true;
 365:../../common/command.c **** }
 366:../../common/command.c **** 
 367:../../common/command.c **** 
 368:../../common/command.c **** /***********************************************************
 369:../../common/command.c ****  * Command console
 370:../../common/command.c ****  ***********************************************************/
 371:../../common/command.c **** static void command_console_help(void)
 372:../../common/command.c **** {
 373:../../common/command.c ****     print("\n\n----- Console Help -----\n");
 374:../../common/command.c ****     print("ESC/q:	quit\n");
 375:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 376:../../common/command.c ****     print("m:	mousekey\n");
 377:../../common/command.c **** #endif
 378:../../common/command.c **** }
 379:../../common/command.c **** 
 380:../../common/command.c **** static bool command_console(uint8_t code)
 381:../../common/command.c **** {
 382:../../common/command.c ****     switch (code) {
 383:../../common/command.c ****         case KC_H:
 384:../../common/command.c ****         case KC_SLASH: /* ? */
 385:../../common/command.c ****             command_console_help();
 386:../../common/command.c ****             break;
 387:../../common/command.c ****         case KC_Q:
 388:../../common/command.c ****         case KC_ESC:
 389:../../common/command.c ****             print("\nQuit Console Mode\n");
 390:../../common/command.c ****             state = ONESHOT;
 391:../../common/command.c ****             return false;
 392:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 393:../../common/command.c ****         case KC_M:
 394:../../common/command.c ****             mousekey_console_help();
 395:../../common/command.c ****             print("\nEnter Mousekey Console\n");
 396:../../common/command.c ****             print("M0>");
 397:../../common/command.c ****             state = MOUSEKEY;
 398:../../common/command.c ****             return true;
 399:../../common/command.c **** #endif
 400:../../common/command.c ****         default:
 401:../../common/command.c ****             print("?");
 402:../../common/command.c ****             return false;
 403:../../common/command.c ****     }
 404:../../common/command.c ****     print("C> ");
 405:../../common/command.c ****     return true;
 406:../../common/command.c **** }
 407:../../common/command.c **** 
 408:../../common/command.c **** 
 409:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 410:../../common/command.c **** /***********************************************************
 411:../../common/command.c ****  * Mousekey console
 412:../../common/command.c ****  ***********************************************************/
 413:../../common/command.c **** static uint8_t mousekey_param = 0;
 414:../../common/command.c **** 
 415:../../common/command.c **** static void mousekey_param_print(void)
 416:../../common/command.c **** {
 417:../../common/command.c ****     print("\n\n----- Mousekey Parameters -----\n");
 418:../../common/command.c ****     print("1: mk_delay(*10ms): "); pdec(mk_delay); print("\n");
 419:../../common/command.c ****     print("2: mk_interval(ms): "); pdec(mk_interval); print("\n");
 420:../../common/command.c ****     print("3: mk_max_speed: "); pdec(mk_max_speed); print("\n");
 421:../../common/command.c ****     print("4: mk_time_to_max: "); pdec(mk_time_to_max); print("\n");
 422:../../common/command.c ****     print("5: mk_wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 423:../../common/command.c ****     print("6: mk_wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 424:../../common/command.c **** }
 425:../../common/command.c **** 
 426:../../common/command.c **** #define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 427:../../common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 428:../../common/command.c **** {
 429:../../common/command.c ****     switch (param) {
 430:../../common/command.c ****         case 1:
 431:../../common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 432:../../common/command.c ****                 mk_delay += inc;
 433:../../common/command.c ****             else
 434:../../common/command.c ****                 mk_delay = UINT8_MAX;
 435:../../common/command.c ****             PRINT_SET_VAL(mk_delay);
 436:../../common/command.c ****             break;
 437:../../common/command.c ****         case 2:
 438:../../common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 439:../../common/command.c ****                 mk_interval += inc;
 440:../../common/command.c ****             else
 441:../../common/command.c ****                 mk_interval = UINT8_MAX;
 442:../../common/command.c ****             PRINT_SET_VAL(mk_interval);
 443:../../common/command.c ****             break;
 444:../../common/command.c ****         case 3:
 445:../../common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 446:../../common/command.c ****                 mk_max_speed += inc;
 447:../../common/command.c ****             else
 448:../../common/command.c ****                 mk_max_speed = UINT8_MAX;
 449:../../common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 450:../../common/command.c ****             break;
 451:../../common/command.c ****         case 4:
 452:../../common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 453:../../common/command.c ****                 mk_time_to_max += inc;
 454:../../common/command.c ****             else
 455:../../common/command.c ****                 mk_time_to_max = UINT8_MAX;
 456:../../common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 457:../../common/command.c ****             break;
 458:../../common/command.c ****         case 5:
 459:../../common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 460:../../common/command.c ****                 mk_wheel_max_speed += inc;
 461:../../common/command.c ****             else
 462:../../common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 463:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 464:../../common/command.c ****             break;
 465:../../common/command.c ****         case 6:
 466:../../common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 467:../../common/command.c ****                 mk_wheel_time_to_max += inc;
 468:../../common/command.c ****             else
 469:../../common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 470:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 471:../../common/command.c ****             break;
 472:../../common/command.c ****     }
 473:../../common/command.c **** }
 474:../../common/command.c **** 
 475:../../common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 476:../../common/command.c **** {
 477:../../common/command.c ****     switch (param) {
 478:../../common/command.c ****         case 1:
 479:../../common/command.c ****             if (mk_delay > dec)
 480:../../common/command.c ****                 mk_delay -= dec;
 481:../../common/command.c ****             else
 482:../../common/command.c ****                 mk_delay = 0;
 483:../../common/command.c ****             PRINT_SET_VAL(mk_delay);
 484:../../common/command.c ****             break;
 485:../../common/command.c ****         case 2:
 486:../../common/command.c ****             if (mk_interval > dec)
 487:../../common/command.c ****                 mk_interval -= dec;
 488:../../common/command.c ****             else
 489:../../common/command.c ****                 mk_interval = 0;
 490:../../common/command.c ****             PRINT_SET_VAL(mk_interval);
 491:../../common/command.c ****             break;
 492:../../common/command.c ****         case 3:
 493:../../common/command.c ****             if (mk_max_speed > dec)
 494:../../common/command.c ****                 mk_max_speed -= dec;
 495:../../common/command.c ****             else
 496:../../common/command.c ****                 mk_max_speed = 0;
 497:../../common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 498:../../common/command.c ****             break;
 499:../../common/command.c ****         case 4:
 500:../../common/command.c ****             if (mk_time_to_max > dec)
 501:../../common/command.c ****                 mk_time_to_max -= dec;
 502:../../common/command.c ****             else
 503:../../common/command.c ****                 mk_time_to_max = 0;
 504:../../common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 505:../../common/command.c ****             break;
 506:../../common/command.c ****         case 5:
 507:../../common/command.c ****             if (mk_wheel_max_speed > dec)
 508:../../common/command.c ****                 mk_wheel_max_speed -= dec;
 509:../../common/command.c ****             else
 510:../../common/command.c ****                 mk_wheel_max_speed = 0;
 511:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 512:../../common/command.c ****             break;
 513:../../common/command.c ****         case 6:
 514:../../common/command.c ****             if (mk_wheel_time_to_max > dec)
 515:../../common/command.c ****                 mk_wheel_time_to_max -= dec;
 516:../../common/command.c ****             else
 517:../../common/command.c ****                 mk_wheel_time_to_max = 0;
 518:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 519:../../common/command.c ****             break;
 520:../../common/command.c ****     }
 521:../../common/command.c **** }
 522:../../common/command.c **** 
 523:../../common/command.c **** static void mousekey_console_help(void)
 524:../../common/command.c **** {
 525:../../common/command.c ****     print("\n\n----- Mousekey Parameters Help -----\n");
 526:../../common/command.c ****     print("ESC/q:	quit\n");
 527:../../common/command.c ****     print("1:	select mk_delay(*10ms)\n");
 528:../../common/command.c ****     print("2:	select mk_interval(ms)\n");
 529:../../common/command.c ****     print("3:	select mk_max_speed\n");
 530:../../common/command.c ****     print("4:	select mk_time_to_max\n");
 531:../../common/command.c ****     print("5:	select mk_wheel_max_speed\n");
 532:../../common/command.c ****     print("6:	select mk_wheel_time_to_max\n");
 533:../../common/command.c ****     print("p:	print prameters\n");
 534:../../common/command.c ****     print("d:	set default values\n");
 535:../../common/command.c ****     print("up:	increase prameters(+1)\n");
 536:../../common/command.c ****     print("down:	decrease prameters(-1)\n");
 537:../../common/command.c ****     print("pgup:	increase prameters(+10)\n");
 538:../../common/command.c ****     print("pgdown:	decrease prameters(-10)\n");
 539:../../common/command.c ****     print("\nspeed = delta * max_speed * (repeat / time_to_max)\n");
 540:../../common/command.c ****     print("where delta: cursor="); pdec(MOUSEKEY_MOVE_DELTA);
 541:../../common/command.c ****     print(", wheel="); pdec(MOUSEKEY_WHEEL_DELTA); print("\n");
 542:../../common/command.c ****     print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
 543:../../common/command.c **** }
 544:../../common/command.c **** 
 545:../../common/command.c **** static bool mousekey_console(uint8_t code)
 546:../../common/command.c **** {
 547:../../common/command.c ****     switch (code) {
 548:../../common/command.c ****         case KC_H:
 549:../../common/command.c ****         case KC_SLASH: /* ? */
 550:../../common/command.c ****             mousekey_console_help();
 551:../../common/command.c ****             break;
 552:../../common/command.c ****         case KC_Q:
 553:../../common/command.c ****         case KC_ESC:
 554:../../common/command.c ****             mousekey_param = 0;
 555:../../common/command.c ****             print("\nQuit Mousekey Console\n");
 556:../../common/command.c ****             print("C> ");
 557:../../common/command.c ****             state = CONSOLE;
 558:../../common/command.c ****             return false;
 559:../../common/command.c ****         case KC_P:
 560:../../common/command.c ****             mousekey_param_print();
 561:../../common/command.c ****             break;
 562:../../common/command.c ****         case KC_1:
 563:../../common/command.c ****         case KC_2:
 564:../../common/command.c ****         case KC_3:
 565:../../common/command.c ****         case KC_4:
 566:../../common/command.c ****         case KC_5:
 567:../../common/command.c ****         case KC_6:
 568:../../common/command.c ****         case KC_7:
 569:../../common/command.c ****         case KC_8:
 570:../../common/command.c ****         case KC_9:
 571:../../common/command.c ****         case KC_0:
 572:../../common/command.c ****             mousekey_param = numkey2num(code);
 573:../../common/command.c ****             print("selected parameter: "); pdec(mousekey_param); print("\n");
 574:../../common/command.c ****             break;
 575:../../common/command.c ****         case KC_UP:
 576:../../common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 577:../../common/command.c ****             break;
 578:../../common/command.c ****         case KC_DOWN:
 579:../../common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 580:../../common/command.c ****             break;
 581:../../common/command.c ****         case KC_PGUP:
 582:../../common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 583:../../common/command.c ****             break;
 584:../../common/command.c ****         case KC_PGDN:
 585:../../common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 586:../../common/command.c ****             break;
 587:../../common/command.c ****         case KC_D:
 588:../../common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 589:../../common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 590:../../common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 591:../../common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 592:../../common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 593:../../common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 594:../../common/command.c ****             print("set default values.\n");
 595:../../common/command.c ****             break;
 596:../../common/command.c ****         default:
 597:../../common/command.c ****             print("?");
 598:../../common/command.c ****             return false;
 599:../../common/command.c ****     }
 600:../../common/command.c ****     print("M"); pdec(mousekey_param); print("> ");
 601:../../common/command.c ****     return true;
 602:../../common/command.c **** }
 603:../../common/command.c **** #endif
 604:../../common/command.c **** 
 605:../../common/command.c **** 
 606:../../common/command.c **** /***********************************************************
 607:../../common/command.c ****  * Utilities
 608:../../common/command.c ****  ***********************************************************/
 609:../../common/command.c **** static uint8_t numkey2num(uint8_t code)
 610:../../common/command.c **** {
 611:../../common/command.c ****     switch (code) {
 612:../../common/command.c ****         case KC_1: return 1;
 613:../../common/command.c ****         case KC_2: return 2;
 614:../../common/command.c ****         case KC_3: return 3;
 615:../../common/command.c ****         case KC_4: return 4;
 616:../../common/command.c ****         case KC_5: return 5;
 617:../../common/command.c ****         case KC_6: return 6;
 618:../../common/command.c ****         case KC_7: return 7;
 619:../../common/command.c ****         case KC_8: return 8;
 620:../../common/command.c ****         case KC_9: return 9;
 621:../../common/command.c ****         case KC_0: return 0;
 622:../../common/command.c ****     }
 623:../../common/command.c ****     return 0;
 624:../../common/command.c **** }
 625:../../common/command.c **** 
 626:../../common/command.c **** static void switch_default_layer(uint8_t layer)
 627:../../common/command.c **** {
  15               		.loc 1 627 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22               	/* prologue: function */
  23               	/* frame size = 0 */
  24               	/* stack size = 1 */
  25               	.L__stack_usage = 1
  26 0002 C82F      		mov r28,r24
 628:../../common/command.c ****     print("switch_default_layer: "); print_dec(biton32(default_layer_state));
  27               		.loc 1 628 0
  28 0004 80E0      		ldi r24,lo8(__c.5016)
  29 0006 90E0      		ldi r25,hi8(__c.5016)
  30               	.LVL1:
  31 0008 0E94 0000 		call xputs
  32               	.LVL2:
  33 000c 6091 0000 		lds r22,default_layer_state
  34 0010 7091 0000 		lds r23,default_layer_state+1
  35 0014 8091 0000 		lds r24,default_layer_state+2
  36 0018 9091 0000 		lds r25,default_layer_state+3
  37 001c 0E94 0000 		call biton32
  38               	.LVL3:
  39 0020 1F92      		push __zero_reg__
  40               	.LCFI1:
  41               		.cfi_def_cfa_offset 4
  42 0022 8F93      		push r24
  43               	.LCFI2:
  44               		.cfi_def_cfa_offset 5
  45 0024 80E0      		ldi r24,lo8(__c.5018)
  46 0026 90E0      		ldi r25,hi8(__c.5018)
  47 0028 9F93      		push r25
  48               	.LCFI3:
  49               		.cfi_def_cfa_offset 6
  50 002a 8F93      		push r24
  51               	.LCFI4:
  52               		.cfi_def_cfa_offset 7
  53 002c 0E94 0000 		call __xprintf
  54               	.LVL4:
 629:../../common/command.c ****     print(" to "); print_dec(layer); print("\n");
  55               		.loc 1 629 0
  56 0030 80E0      		ldi r24,lo8(__c.5020)
  57 0032 90E0      		ldi r25,hi8(__c.5020)
  58 0034 0E94 0000 		call xputs
  59               	.LVL5:
  60 0038 1F92      		push __zero_reg__
  61               	.LCFI5:
  62               		.cfi_def_cfa_offset 8
  63 003a CF93      		push r28
  64               	.LCFI6:
  65               		.cfi_def_cfa_offset 9
  66 003c 80E0      		ldi r24,lo8(__c.5022)
  67 003e 90E0      		ldi r25,hi8(__c.5022)
  68 0040 9F93      		push r25
  69               	.LCFI7:
  70               		.cfi_def_cfa_offset 10
  71 0042 8F93      		push r24
  72               	.LCFI8:
  73               		.cfi_def_cfa_offset 11
  74 0044 0E94 0000 		call __xprintf
  75               	.LVL6:
  76 0048 80E0      		ldi r24,lo8(__c.5024)
  77 004a 90E0      		ldi r25,hi8(__c.5024)
  78 004c 0E94 0000 		call xputs
  79               	.LVL7:
 630:../../common/command.c ****     default_layer_set(1UL<<layer);
  80               		.loc 1 630 0
  81 0050 81E0      		ldi r24,lo8(1)
  82 0052 90E0      		ldi r25,0
  83 0054 A0E0      		ldi r26,0
  84 0056 B0E0      		ldi r27,0
  85 0058 BC01      		movw r22,r24
  86 005a CD01      		movw r24,r26
  87 005c 00C0      		rjmp 2f
  88               		1:
  89 005e 660F      		lsl r22
  90 0060 771F      		rol r23
  91 0062 881F      		rol r24
  92 0064 991F      		rol r25
  93               		2:
  94 0066 CA95      		dec r28
  95 0068 02F4      		brpl 1b
  96 006a 0E94 0000 		call default_layer_set
  97               	.LVL8:
 631:../../common/command.c ****     clear_keyboard();
  98               		.loc 1 631 0
  99 006e 8DB7      		in r24,__SP_L__
 100 0070 9EB7      		in r25,__SP_H__
 101 0072 0896      		adiw r24,8
 102 0074 0FB6      		in __tmp_reg__,__SREG__
 103 0076 F894      		cli
 104 0078 9EBF      		out __SP_H__,r25
 105 007a 0FBE      		out __SREG__,__tmp_reg__
 106 007c 8DBF      		out __SP_L__,r24
 107               	.LCFI9:
 108               		.cfi_def_cfa_offset 3
 109               	/* epilogue start */
 632:../../common/command.c **** }
 110               		.loc 1 632 0
 111 007e CF91      		pop r28
 112               	.LVL9:
 631:../../common/command.c ****     clear_keyboard();
 113               		.loc 1 631 0
 114 0080 0C94 0000 		jmp clear_keyboard
 115               	.LVL10:
 116               		.cfi_endproc
 117               	.LFE109:
 119               		.section	.text.command_extra,"ax",@progbits
 120               		.weak	command_extra
 122               	command_extra:
 123               	.LFB103:
  95:../../common/command.c ****     return false;
 124               		.loc 1 95 0
 125               		.cfi_startproc
 126               	.LVL11:
 127               	/* prologue: function */
 128               	/* frame size = 0 */
 129               	/* stack size = 0 */
 130               	.L__stack_usage = 0
  97:../../common/command.c **** 
 131               		.loc 1 97 0
 132 0000 80E0      		ldi r24,0
 133               	.LVL12:
 134 0002 0895      		ret
 135               		.cfi_endproc
 136               	.LFE103:
 138               		.section	.text.command_proc,"ax",@progbits
 139               	.global	command_proc
 141               	command_proc:
 142               	.LFB102:
  71:../../common/command.c ****     switch (state) {
 143               		.loc 1 71 0
 144               		.cfi_startproc
 145               	.LVL13:
 146 0000 CF93      		push r28
 147               	.LCFI10:
 148               		.cfi_def_cfa_offset 3
 149               		.cfi_offset 28, -2
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 1 */
 153               	.L__stack_usage = 1
 154 0002 C82F      		mov r28,r24
  72:../../common/command.c ****         case ONESHOT:
 155               		.loc 1 72 0
 156 0004 8091 0000 		lds r24,state
 157               	.LVL14:
 158 0008 8823      		tst r24
 159 000a 01F0      		breq .L5
 160 000c 8130      		cpi r24,lo8(1)
 161 000e 01F4      		brne .+2
 162 0010 00C0      		rjmp .L6
 163 0012 00C0      		rjmp .L82
 164               	.L5:
  74:../../common/command.c ****                 return false;
 165               		.loc 1 74 0
 166 0014 E091 0000 		lds r30,keyboard_report
 167 0018 F091 0000 		lds r31,keyboard_report+1
 168 001c 8081      		ld r24,Z
 169 001e 8232      		cpi r24,lo8(34)
 170 0020 01F0      		breq .+2
 171 0022 00C0      		rjmp .L43
  76:../../common/command.c ****         case CONSOLE:
 172               		.loc 1 76 0
 173 0024 8C2F      		mov r24,r28
 174 0026 0E94 0000 		call command_extra
 175               	.LVL15:
 176 002a 8111      		cpse r24,__zero_reg__
 177 002c 00C0      		rjmp .L8
 178               	.LVL16:
 179               	.LBB94:
 180               	.LBB95:
 168:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 181               		.loc 1 168 0
 182 002e CB31      		cpi r28,lo8(27)
 183 0030 01F4      		brne .+2
 184 0032 00C0      		rjmp .L10
 185 0034 00F0      		brlo .+2
 186 0036 00C0      		rjmp .L11
 187 0038 C031      		cpi r28,lo8(16)
 188 003a 01F4      		brne .+2
 189 003c 00C0      		rjmp .L12
 190 003e 00F4      		brsh .L13
 191 0040 C730      		cpi r28,lo8(7)
 192 0042 01F4      		brne .+2
 193 0044 00C0      		rjmp .L14
 194 0046 00F4      		brsh .L15
 195 0048 C630      		cpi r28,lo8(6)
 196 004a 01F0      		breq .+2
 197 004c 00C0      		rjmp .L9
 198:../../common/command.c ****             debug_keyboard = false;
 198               		.loc 1 198 0
 199 004e 8091 0000 		lds r24,debug_config
 201:../../common/command.c ****             command_console_help();
 200               		.loc 1 201 0
 201 0052 817F      		andi r24,lo8(-15)
 202 0054 8E7F      		andi r24,lo8(~(1<<0))
 203 0056 8093 0000 		sts debug_config,r24
 204               	.LBB96:
 205               	.LBB97:
 373:../../common/command.c ****     print("ESC/q:	quit\n");
 206               		.loc 1 373 0
 207 005a 80E0      		ldi r24,lo8(__c.4981)
 208 005c 90E0      		ldi r25,hi8(__c.4981)
 209 005e 0E94 0000 		call xputs
 210               	.LVL17:
 374:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 211               		.loc 1 374 0
 212 0062 80E0      		ldi r24,lo8(__c.4983)
 213 0064 90E0      		ldi r25,hi8(__c.4983)
 214 0066 0E94 0000 		call xputs
 215               	.LVL18:
 216               	.LBE97:
 217               	.LBE96:
 203:../../common/command.c ****             print("C> ");
 218               		.loc 1 203 0
 219 006a 80E0      		ldi r24,lo8(__c.4915)
 220 006c 90E0      		ldi r25,hi8(__c.4915)
 221 006e 0E94 0000 		call xputs
 222               	.LVL19:
 204:../../common/command.c ****             state = CONSOLE;
 223               		.loc 1 204 0
 224 0072 80E0      		ldi r24,lo8(__c.4917)
 225 0074 90E0      		ldi r25,hi8(__c.4917)
 226 0076 0E94 0000 		call xputs
 227               	.LVL20:
 205:../../common/command.c ****             break;
 228               		.loc 1 205 0
 229 007a 81E0      		ldi r24,lo8(1)
 230 007c 8093 0000 		sts state,r24
 231 0080 00C0      		rjmp .L8
 232               	.L15:
 168:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 233               		.loc 1 168 0
 234 0082 CB30      		cpi r28,lo8(11)
 235 0084 01F4      		brne .+2
 236 0086 00C0      		rjmp .L17
 237 0088 CE30      		cpi r28,lo8(14)
 238 008a 01F4      		brne .+2
 239 008c 00C0      		rjmp .L18
 240 008e 00C0      		rjmp .L9
 241               	.L13:
 242 0090 C631      		cpi r28,lo8(22)
 243 0092 01F4      		brne .+2
 244 0094 00C0      		rjmp .L19
 245 0096 00F4      		brsh .L20
 246 0098 C131      		cpi r28,lo8(17)
 247 009a 01F4      		brne .+2
 248 009c 00C0      		rjmp .L21
 249 009e 00C0      		rjmp .L9
 250               	.L20:
 251 00a0 C731      		cpi r28,lo8(23)
 252 00a2 01F4      		brne .+2
 253 00a4 00C0      		rjmp .L22
 254 00a6 C931      		cpi r28,lo8(25)
 255 00a8 01F0      		breq .+2
 256 00aa 00C0      		rjmp .L9
 254:../../common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 257               		.loc 1 254 0
 258 00ac 80E0      		ldi r24,lo8(__c.4945)
 259 00ae 90E0      		ldi r25,hi8(__c.4945)
 260 00b0 0E94 0000 		call xputs
 261               	.LVL21:
 255:../../common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 262               		.loc 1 255 0
 263 00b4 80E0      		ldi r24,lo8(__c.4947)
 264 00b6 90E0      		ldi r25,hi8(__c.4947)
 265 00b8 0E94 0000 		call xputs
 266               	.LVL22:
 256:../../common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 267               		.loc 1 256 0
 268 00bc 80E0      		ldi r24,lo8(__c.4949)
 269 00be 90E0      		ldi r25,hi8(__c.4949)
 270 00c0 0E94 0000 		call xputs
 271               	.LVL23:
 259:../../common/command.c ****             /* build options */
 272               		.loc 1 259 0
 273 00c4 80E0      		ldi r24,lo8(__c.4951)
 274 00c6 90E0      		ldi r25,hi8(__c.4951)
 275 00c8 0E94 0000 		call xputs
 276               	.LVL24:
 261:../../common/command.c **** #ifdef PROTOCOL_PJRC
 277               		.loc 1 261 0
 278 00cc 80E0      		ldi r24,lo8(__c.4953)
 279 00ce 90E0      		ldi r25,hi8(__c.4953)
 280 00d0 0E94 0000 		call xputs
 281               	.LVL25:
 294:../../common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 282               		.loc 1 294 0
 283 00d4 80E0      		ldi r24,lo8(__c.4955)
 284 00d6 90E0      		ldi r25,hi8(__c.4955)
 285 00d8 00C0      		rjmp .L76
 286               	.L11:
 168:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 287               		.loc 1 168 0
 288 00da C533      		cpi r28,lo8(53)
 289 00dc 01F4      		brne .+2
 290 00de 00C0      		rjmp .L24
 291 00e0 00F4      		brsh .L25
 292 00e2 C732      		cpi r28,lo8(39)
 293 00e4 01F4      		brne .+2
 294 00e6 00C0      		rjmp .L24
 295 00e8 00F4      		brsh .L26
 296 00ea CE31      		cpi r28,lo8(30)
 297 00ec 00F4      		brsh .+2
 298 00ee 00C0      		rjmp .L9
 355:../../common/command.c ****             break;
 299               		.loc 1 355 0
 300 00f0 83EE      		ldi r24,lo8(-29)
 301 00f2 00C0      		rjmp .L74
 302               	.L26:
 168:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 303               		.loc 1 168 0
 304 00f4 C932      		cpi r28,lo8(41)
 305 00f6 01F4      		brne .+2
 306 00f8 00C0      		rjmp .L24
 307 00fa 00C0      		rjmp .L9
 308               	.L25:
 309 00fc C634      		cpi r28,lo8(70)
 310 00fe 00F4      		brsh .L28
 311 0100 CA33      		cpi r28,lo8(58)
 312 0102 00F0      		brlo .+2
 313 0104 00C0      		rjmp .L29
 314 0106 C833      		cpi r28,lo8(56)
 315 0108 01F0      		breq .L17
 316 010a C933      		cpi r28,lo8(57)
 317 010c 01F0      		breq .L30
 318 010e 00C0      		rjmp .L9
 319               	.L28:
 320 0110 C834      		cpi r28,lo8(72)
 321 0112 01F0      		breq .+2
 322 0114 00C0      		rjmp .L9
 208:../../common/command.c ****             print("\n\nJump to bootloader... ");
 323               		.loc 1 208 0
 324 0116 0E94 0000 		call clear_keyboard
 325               	.LVL26:
 209:../../common/command.c ****             _delay_ms(1000);
 326               		.loc 1 209 0
 327 011a 80E0      		ldi r24,lo8(__c.4920)
 328 011c 90E0      		ldi r25,hi8(__c.4920)
 329 011e 0E94 0000 		call xputs
 330               	.LVL27:
 331               	.LBB98:
 332               	.LBB99:
 333               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 334               		.loc 2 187 0
 335 0122 2FEF      		ldi r18,lo8(3199999)
 336 0124 83ED      		ldi r24,hi8(3199999)
 337 0126 90E3      		ldi r25,hlo8(3199999)
 338 0128 2150      	1:	subi r18,1
 339 012a 8040      		sbci r24,0
 340 012c 9040      		sbci r25,0
 341 012e 01F4      		brne 1b
 342 0130 00C0      		rjmp .
 343 0132 0000      		nop
 344               	.LVL28:
 345               	.LBE99:
 346               	.LBE98:
 211:../../common/command.c ****             print("not supported.\n");
 347               		.loc 1 211 0
 348 0134 0E94 0000 		call bootloader_jump
 349               	.LVL29:
 212:../../common/command.c ****             break;
 350               		.loc 1 212 0
 351 0138 80E0      		ldi r24,lo8(__c.4922)
 352 013a 90E0      		ldi r25,hi8(__c.4922)
 353 013c 00C0      		rjmp .L76
 354               	.L30:
 184:../../common/command.c ****                 host_driver = host_get_driver();
 355               		.loc 1 184 0
 356 013e 0E94 0000 		call host_get_driver
 357               	.LVL30:
 358 0142 892B      		or r24,r25
 359 0144 01F0      		breq .L32
 185:../../common/command.c ****                 host_set_driver(0);
 360               		.loc 1 185 0
 361 0146 0E94 0000 		call host_get_driver
 362               	.LVL31:
 363 014a 9093 0000 		sts host_driver.4905+1,r25
 364 014e 8093 0000 		sts host_driver.4905,r24
 186:../../common/command.c ****                 print("Locked.\n");
 365               		.loc 1 186 0
 366 0152 80E0      		ldi r24,0
 367 0154 90E0      		ldi r25,0
 368 0156 0E94 0000 		call host_set_driver
 369               	.LVL32:
 187:../../common/command.c ****             } else {
 370               		.loc 1 187 0
 371 015a 80E0      		ldi r24,lo8(__c.4907)
 372 015c 90E0      		ldi r25,hi8(__c.4907)
 373 015e 00C0      		rjmp .L76
 374               	.L32:
 189:../../common/command.c ****                 print("Unlocked.\n");
 375               		.loc 1 189 0
 376 0160 8091 0000 		lds r24,host_driver.4905
 377 0164 9091 0000 		lds r25,host_driver.4905+1
 378 0168 0E94 0000 		call host_set_driver
 379               	.LVL33:
 190:../../common/command.c ****             }
 380               		.loc 1 190 0
 381 016c 80E0      		ldi r24,lo8(__c.4909)
 382 016e 90E0      		ldi r25,hi8(__c.4909)
 383 0170 00C0      		rjmp .L76
 384               	.L17:
 385               	.LBB100:
 386               	.LBB101:
 105:../../common/command.c ****     print("c:	enter console mode\n");
 387               		.loc 1 105 0
 388 0172 80E0      		ldi r24,lo8(__c.4864)
 389 0174 90E0      		ldi r25,hi8(__c.4864)
 390 0176 0E94 0000 		call xputs
 391               	.LVL34:
 106:../../common/command.c ****     print("d:	toggle debug enable\n");
 392               		.loc 1 106 0
 393 017a 80E0      		ldi r24,lo8(__c.4866)
 394 017c 90E0      		ldi r25,hi8(__c.4866)
 395 017e 0E94 0000 		call xputs
 396               	.LVL35:
 107:../../common/command.c ****     print("x:	toggle matrix debug\n");
 397               		.loc 1 107 0
 398 0182 80E0      		ldi r24,lo8(__c.4868)
 399 0184 90E0      		ldi r25,hi8(__c.4868)
 400 0186 0E94 0000 		call xputs
 401               	.LVL36:
 108:../../common/command.c ****     print("k:	toggle keyboard debug\n");
 402               		.loc 1 108 0
 403 018a 80E0      		ldi r24,lo8(__c.4870)
 404 018c 90E0      		ldi r25,hi8(__c.4870)
 405 018e 0E94 0000 		call xputs
 406               	.LVL37:
 109:../../common/command.c ****     print("m:	toggle mouse debug\n");
 407               		.loc 1 109 0
 408 0192 80E0      		ldi r24,lo8(__c.4872)
 409 0194 90E0      		ldi r25,hi8(__c.4872)
 410 0196 0E94 0000 		call xputs
 411               	.LVL38:
 110:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 412               		.loc 1 110 0
 413 019a 80E0      		ldi r24,lo8(__c.4874)
 414 019c 90E0      		ldi r25,hi8(__c.4874)
 415 019e 0E94 0000 		call xputs
 416               	.LVL39:
 114:../../common/command.c ****     print("t:	print timer count\n");
 417               		.loc 1 114 0
 418 01a2 80E0      		ldi r24,lo8(__c.4876)
 419 01a4 90E0      		ldi r25,hi8(__c.4876)
 420 01a6 0E94 0000 		call xputs
 421               	.LVL40:
 115:../../common/command.c ****     print("s:	print status\n");
 422               		.loc 1 115 0
 423 01aa 80E0      		ldi r24,lo8(__c.4878)
 424 01ac 90E0      		ldi r25,hi8(__c.4878)
 425 01ae 0E94 0000 		call xputs
 426               	.LVL41:
 116:../../common/command.c ****     print("e:	print eeprom config\n");
 427               		.loc 1 116 0
 428 01b2 80E0      		ldi r24,lo8(__c.4880)
 429 01b4 90E0      		ldi r25,hi8(__c.4880)
 430 01b6 0E94 0000 		call xputs
 431               	.LVL42:
 117:../../common/command.c **** #ifdef NKRO_ENABLE
 432               		.loc 1 117 0
 433 01ba 80E0      		ldi r24,lo8(__c.4882)
 434 01bc 90E0      		ldi r25,hi8(__c.4882)
 435 01be 0E94 0000 		call xputs
 436               	.LVL43:
 119:../../common/command.c **** #endif
 437               		.loc 1 119 0
 438 01c2 80E0      		ldi r24,lo8(__c.4884)
 439 01c4 90E0      		ldi r25,hi8(__c.4884)
 440 01c6 0E94 0000 		call xputs
 441               	.LVL44:
 121:../../common/command.c ****     print("1/F1:	switch to Layer1 \n");
 442               		.loc 1 121 0
 443 01ca 80E0      		ldi r24,lo8(__c.4886)
 444 01cc 90E0      		ldi r25,hi8(__c.4886)
 445 01ce 0E94 0000 		call xputs
 446               	.LVL45:
 122:../../common/command.c ****     print("2/F2:	switch to Layer2 \n");
 447               		.loc 1 122 0
 448 01d2 80E0      		ldi r24,lo8(__c.4888)
 449 01d4 90E0      		ldi r25,hi8(__c.4888)
 450 01d6 0E94 0000 		call xputs
 451               	.LVL46:
 123:../../common/command.c ****     print("3/F3:	switch to Layer3 \n");
 452               		.loc 1 123 0
 453 01da 80E0      		ldi r24,lo8(__c.4890)
 454 01dc 90E0      		ldi r25,hi8(__c.4890)
 455 01de 0E94 0000 		call xputs
 456               	.LVL47:
 124:../../common/command.c ****     print("4/F4:	switch to Layer4 \n");
 457               		.loc 1 124 0
 458 01e2 80E0      		ldi r24,lo8(__c.4892)
 459 01e4 90E0      		ldi r25,hi8(__c.4892)
 460 01e6 0E94 0000 		call xputs
 461               	.LVL48:
 125:../../common/command.c ****     print("PScr:	power down/remote wake-up\n");
 462               		.loc 1 125 0
 463 01ea 80E0      		ldi r24,lo8(__c.4894)
 464 01ec 90E0      		ldi r25,hi8(__c.4894)
 465 01ee 0E94 0000 		call xputs
 466               	.LVL49:
 126:../../common/command.c ****     print("Caps:	Lock Keyboard(Child Proof)\n");
 467               		.loc 1 126 0
 468 01f2 80E0      		ldi r24,lo8(__c.4896)
 469 01f4 90E0      		ldi r25,hi8(__c.4896)
 470 01f6 0E94 0000 		call xputs
 471               	.LVL50:
 127:../../common/command.c ****     print("Paus:	jump to bootloader\n");
 472               		.loc 1 127 0
 473 01fa 80E0      		ldi r24,lo8(__c.4898)
 474 01fc 90E0      		ldi r25,hi8(__c.4898)
 475 01fe 0E94 0000 		call xputs
 476               	.LVL51:
 128:../../common/command.c **** }
 477               		.loc 1 128 0
 478 0202 80E0      		ldi r24,lo8(__c.4900)
 479 0204 90E0      		ldi r25,hi8(__c.4900)
 480 0206 00C0      		rjmp .L76
 481               	.L14:
 482               	.LBE101:
 483               	.LBE100:
 215:../../common/command.c ****                 print("\nDEBUG: disabled.\n");
 484               		.loc 1 215 0
 485 0208 8091 0000 		lds r24,debug_config
 486 020c 80FF      		sbrs r24,0
 487 020e 00C0      		rjmp .L33
 216:../../common/command.c ****                 debug_matrix   = false;
 488               		.loc 1 216 0
 489 0210 80E0      		ldi r24,lo8(__c.4925)
 490 0212 90E0      		ldi r25,hi8(__c.4925)
 491 0214 0E94 0000 		call xputs
 492               	.LVL52:
 217:../../common/command.c ****                 debug_keyboard = false;
 493               		.loc 1 217 0
 494 0218 8091 0000 		lds r24,debug_config
 220:../../common/command.c ****             } else {
 495               		.loc 1 220 0
 496 021c 817F      		andi r24,lo8(-15)
 497 021e 8E7F      		andi r24,lo8(~(1<<0))
 498 0220 00C0      		rjmp .L77
 499               	.L33:
 222:../../common/command.c ****                 debug_enable   = true;
 500               		.loc 1 222 0
 501 0222 80E0      		ldi r24,lo8(__c.4927)
 502 0224 90E0      		ldi r25,hi8(__c.4927)
 503 0226 00C0      		rjmp .L78
 504               	.L10:
 227:../../common/command.c ****             if (debug_matrix) {
 505               		.loc 1 227 0
 506 0228 8091 0000 		lds r24,debug_config
 507 022c 81FB      		bst r24,1
 508 022e 2227      		clr r18
 509 0230 20F9      		bld r18,0
 510 0232 91E0      		ldi r25,lo8(1)
 511 0234 9227      		eor r25,r18
 512 0236 90FB      		bst r25,0
 513 0238 81F9      		bld r24,1
 514 023a 8093 0000 		sts debug_config,r24
 228:../../common/command.c ****                 print("\nDEBUG: matrix enabled.\n");
 515               		.loc 1 228 0
 516 023e 9923      		tst r25
 517 0240 01F0      		breq .L34
 229:../../common/command.c ****                 debug_enable = true;
 518               		.loc 1 229 0
 519 0242 80E0      		ldi r24,lo8(__c.4930)
 520 0244 90E0      		ldi r25,hi8(__c.4930)
 521 0246 00C0      		rjmp .L78
 522               	.L34:
 232:../../common/command.c ****             }
 523               		.loc 1 232 0
 524 0248 80E0      		ldi r24,lo8(__c.4932)
 525 024a 90E0      		ldi r25,hi8(__c.4932)
 526 024c 00C0      		rjmp .L76
 527               	.L18:
 236:../../common/command.c ****             if (debug_keyboard) {
 528               		.loc 1 236 0
 529 024e 8091 0000 		lds r24,debug_config
 530 0252 82FB      		bst r24,2
 531 0254 2227      		clr r18
 532 0256 20F9      		bld r18,0
 533 0258 91E0      		ldi r25,lo8(1)
 534 025a 9227      		eor r25,r18
 535 025c 90FB      		bst r25,0
 536 025e 82F9      		bld r24,2
 537 0260 8093 0000 		sts debug_config,r24
 237:../../common/command.c ****                 print("\nDEBUG: keyboard enabled.\n");
 538               		.loc 1 237 0
 539 0264 9923      		tst r25
 540 0266 01F0      		breq .L35
 238:../../common/command.c ****                 debug_enable = true;
 541               		.loc 1 238 0
 542 0268 80E0      		ldi r24,lo8(__c.4935)
 543 026a 90E0      		ldi r25,hi8(__c.4935)
 544 026c 00C0      		rjmp .L78
 545               	.L35:
 241:../../common/command.c ****             }
 546               		.loc 1 241 0
 547 026e 80E0      		ldi r24,lo8(__c.4937)
 548 0270 90E0      		ldi r25,hi8(__c.4937)
 549 0272 00C0      		rjmp .L76
 550               	.L12:
 245:../../common/command.c ****             if (debug_mouse) {
 551               		.loc 1 245 0
 552 0274 8091 0000 		lds r24,debug_config
 553 0278 83FB      		bst r24,3
 554 027a 2227      		clr r18
 555 027c 20F9      		bld r18,0
 556 027e 91E0      		ldi r25,lo8(1)
 557 0280 9227      		eor r25,r18
 558 0282 90FB      		bst r25,0
 559 0284 83F9      		bld r24,3
 560 0286 8093 0000 		sts debug_config,r24
 246:../../common/command.c ****                 print("\nDEBUG: mouse enabled.\n");
 561               		.loc 1 246 0
 562 028a 9923      		tst r25
 563 028c 01F0      		breq .L36
 247:../../common/command.c ****                 debug_enable = true;
 564               		.loc 1 247 0
 565 028e 80E0      		ldi r24,lo8(__c.4940)
 566 0290 90E0      		ldi r25,hi8(__c.4940)
 567               	.L78:
 568 0292 0E94 0000 		call xputs
 569               	.LVL53:
 248:../../common/command.c ****             } else {
 570               		.loc 1 248 0
 571 0296 8091 0000 		lds r24,debug_config
 572 029a 8160      		ori r24,lo8(1<<0)
 573               	.L77:
 574 029c 8093 0000 		sts debug_config,r24
 575 02a0 00C0      		rjmp .L8
 576               	.L36:
 250:../../common/command.c ****             }
 577               		.loc 1 250 0
 578 02a2 80E0      		ldi r24,lo8(__c.4942)
 579 02a4 90E0      		ldi r25,hi8(__c.4942)
 580 02a6 00C0      		rjmp .L76
 581               	.L22:
 299:../../common/command.c ****             break;
 582               		.loc 1 299 0
 583 02a8 8091 0000 		lds r24,timer_count
 584 02ac 9091 0000 		lds r25,timer_count+1
 585 02b0 A091 0000 		lds r26,timer_count+2
 586 02b4 B091 0000 		lds r27,timer_count+3
 587 02b8 BF93      		push r27
 588               	.LCFI11:
 589               		.cfi_def_cfa_offset 4
 590 02ba AF93      		push r26
 591               	.LCFI12:
 592               		.cfi_def_cfa_offset 5
 593 02bc 9F93      		push r25
 594               	.LCFI13:
 595               		.cfi_def_cfa_offset 6
 596 02be 8F93      		push r24
 597               	.LCFI14:
 598               		.cfi_def_cfa_offset 7
 599 02c0 80E0      		ldi r24,lo8(__c.4958)
 600 02c2 90E0      		ldi r25,hi8(__c.4958)
 601 02c4 9F93      		push r25
 602               	.LCFI15:
 603               		.cfi_def_cfa_offset 8
 604 02c6 8F93      		push r24
 605               	.LCFI16:
 606               		.cfi_def_cfa_offset 9
 607 02c8 0E94 0000 		call __xprintf
 608               	.LVL54:
 609 02cc 0F90      		pop __tmp_reg__
 610 02ce 0F90      		pop __tmp_reg__
 611 02d0 0F90      		pop __tmp_reg__
 612 02d2 0F90      		pop __tmp_reg__
 613 02d4 0F90      		pop __tmp_reg__
 614 02d6 0F90      		pop __tmp_reg__
 615               	.LCFI17:
 616               		.cfi_def_cfa_offset 3
 617 02d8 00C0      		rjmp .L8
 618               	.L19:
 302:../../common/command.c ****             print_val_hex8(host_keyboard_leds());
 619               		.loc 1 302 0
 620 02da 80E0      		ldi r24,lo8(__c.4961)
 621 02dc 90E0      		ldi r25,hi8(__c.4961)
 622 02de 0E94 0000 		call xputs
 623               	.LVL55:
 303:../../common/command.c **** #ifdef PROTOCOL_PJRC
 624               		.loc 1 303 0
 625 02e2 0E94 0000 		call host_keyboard_leds
 626               	.LVL56:
 627 02e6 1F92      		push __zero_reg__
 628               	.LCFI18:
 629               		.cfi_def_cfa_offset 4
 630 02e8 8F93      		push r24
 631               	.LCFI19:
 632               		.cfi_def_cfa_offset 5
 633 02ea 80E0      		ldi r24,lo8(__c.4963)
 634 02ec 90E0      		ldi r25,hi8(__c.4963)
 635 02ee 9F93      		push r25
 636               	.LCFI20:
 637               		.cfi_def_cfa_offset 6
 638 02f0 8F93      		push r24
 639               	.LCFI21:
 640               		.cfi_def_cfa_offset 7
 641 02f2 0E94 0000 		call __xprintf
 642               	.LVL57:
 643 02f6 0F90      		pop __tmp_reg__
 644 02f8 0F90      		pop __tmp_reg__
 645 02fa 0F90      		pop __tmp_reg__
 646 02fc 0F90      		pop __tmp_reg__
 647               	.LCFI22:
 648               		.cfi_def_cfa_offset 3
 649 02fe 00C0      		rjmp .L8
 650               	.L21:
 322:../../common/command.c ****             keyboard_nkro = !keyboard_nkro;
 651               		.loc 1 322 0
 652 0300 0E94 0000 		call clear_keyboard
 653               	.LVL58:
 323:../../common/command.c ****             if (keyboard_nkro)
 654               		.loc 1 323 0
 655 0304 9091 0000 		lds r25,keyboard_nkro
 656 0308 81E0      		ldi r24,lo8(1)
 657 030a 8927      		eor r24,r25
 658 030c 8093 0000 		sts keyboard_nkro,r24
 324:../../common/command.c ****                 print("NKRO: enabled\n");
 659               		.loc 1 324 0
 660 0310 8823      		tst r24
 661 0312 01F0      		breq .L37
 325:../../common/command.c ****             else
 662               		.loc 1 325 0
 663 0314 80E0      		ldi r24,lo8(__c.4966)
 664 0316 90E0      		ldi r25,hi8(__c.4966)
 665 0318 00C0      		rjmp .L76
 666               	.L37:
 327:../../common/command.c ****             break;
 667               		.loc 1 327 0
 668 031a 80E0      		ldi r24,lo8(__c.4968)
 669 031c 90E0      		ldi r25,hi8(__c.4968)
 670               	.L76:
 671 031e 0E94 0000 		call xputs
 672               	.LVL59:
 673 0322 00C0      		rjmp .L8
 674               	.L24:
 352:../../common/command.c ****             break;
 675               		.loc 1 352 0
 676 0324 80E0      		ldi r24,0
 677 0326 00C0      		rjmp .L75
 678               	.L29:
 358:../../common/command.c ****             break;
 679               		.loc 1 358 0
 680 0328 87EC      		ldi r24,lo8(-57)
 681               	.L74:
 682 032a 8C0F      		add r24,r28
 683               	.L75:
 684 032c 0E94 0000 		call switch_default_layer
 685               	.LVL60:
 686 0330 00C0      		rjmp .L8
 687               	.L9:
 361:../../common/command.c ****             return false;
 688               		.loc 1 361 0
 689 0332 80E0      		ldi r24,lo8(__c.4976)
 690 0334 90E0      		ldi r25,hi8(__c.4976)
 691 0336 0E94 0000 		call xputs
 692               	.LVL61:
 693               	.LBE95:
 694               	.LBE94:
  76:../../common/command.c ****         case CONSOLE:
 695               		.loc 1 76 0
 696 033a 80E0      		ldi r24,0
 697               	.L42:
  76:../../common/command.c ****         case CONSOLE:
 698               		.loc 1 76 0 is_stmt 0 discriminator 6
 699 033c 8170      		andi r24,lo8(1)
 700 033e 00C0      		rjmp .L73
 701               	.L6:
 702               	.LVL62:
 703               	.LBB102:
 704               	.LBB103:
 382:../../common/command.c ****         case KC_H:
 705               		.loc 1 382 0 is_stmt 1
 706 0340 C431      		cpi r28,lo8(20)
 707 0342 01F0      		breq .L39
 708 0344 00F4      		brsh .L40
 709 0346 CB30      		cpi r28,lo8(11)
 710 0348 01F0      		breq .L41
 711 034a 00C0      		rjmp .L38
 712               	.L40:
 713 034c C932      		cpi r28,lo8(41)
 714 034e 01F0      		breq .L39
 715 0350 C833      		cpi r28,lo8(56)
 716 0352 01F4      		brne .L38
 717               	.L41:
 718               	.LBB104:
 719               	.LBB105:
 373:../../common/command.c ****     print("ESC/q:	quit\n");
 720               		.loc 1 373 0
 721 0354 80E0      		ldi r24,lo8(__c.4981)
 722 0356 90E0      		ldi r25,hi8(__c.4981)
 723 0358 0E94 0000 		call xputs
 724               	.LVL63:
 374:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 725               		.loc 1 374 0
 726 035c 80E0      		ldi r24,lo8(__c.4983)
 727 035e 90E0      		ldi r25,hi8(__c.4983)
 728 0360 0E94 0000 		call xputs
 729               	.LVL64:
 730               	.LBE105:
 731               	.LBE104:
 404:../../common/command.c ****     return true;
 732               		.loc 1 404 0
 733 0364 80E0      		ldi r24,lo8(__c.4998)
 734 0366 90E0      		ldi r25,hi8(__c.4998)
 735 0368 00C0      		rjmp .L79
 736               	.L39:
 389:../../common/command.c ****             state = ONESHOT;
 737               		.loc 1 389 0
 738 036a 80E0      		ldi r24,lo8(__c.4993)
 739 036c 90E0      		ldi r25,hi8(__c.4993)
 740 036e 0E94 0000 		call xputs
 741               	.LVL65:
 390:../../common/command.c ****             return false;
 742               		.loc 1 390 0
 743 0372 1092 0000 		sts state,__zero_reg__
 744 0376 00C0      		rjmp .L80
 745               	.L38:
 401:../../common/command.c ****             return false;
 746               		.loc 1 401 0
 747 0378 80E0      		ldi r24,lo8(__c.4996)
 748 037a 90E0      		ldi r25,hi8(__c.4996)
 749               	.L79:
 750 037c 0E94 0000 		call xputs
 751               	.LVL66:
 752               	.L80:
 753               	.LBE103:
 754               	.LBE102:
  89:../../common/command.c **** }
 755               		.loc 1 89 0
 756 0380 81E0      		ldi r24,lo8(1)
 757 0382 00C0      		rjmp .L73
 758               	.LVL67:
 759               	.L82:
  86:../../common/command.c ****             return false;
 760               		.loc 1 86 0
 761 0384 1092 0000 		sts state,__zero_reg__
 762               	.L43:
  75:../../common/command.c ****             return (command_extra(code) || command_common(code));
 763               		.loc 1 75 0
 764 0388 80E0      		ldi r24,0
 765 038a 00C0      		rjmp .L73
 766               	.L8:
  76:../../common/command.c ****         case CONSOLE:
 767               		.loc 1 76 0
 768 038c 81E0      		ldi r24,lo8(1)
 769 038e 00C0      		rjmp .L42
 770               	.L73:
 771               	/* epilogue start */
  90:../../common/command.c **** 
 772               		.loc 1 90 0
 773 0390 CF91      		pop r28
 774               	.LVL68:
 775 0392 0895      		ret
 776               		.cfi_endproc
 777               	.LFE102:
 779               		.section	.progmem.data,"a",@progbits
 782               	__c.4996:
 783 0000 3F00      		.string	"?"
 786               	__c.4993:
 787 0002 0A51 7569 		.string	"\nQuit Console Mode\n"
 787      7420 436F 
 787      6E73 6F6C 
 787      6520 4D6F 
 787      6465 0A00 
 790               	__c.4998:
 791 0016 433E 2000 		.string	"C> "
 794               	__c.5024:
 795 001a 0A00      		.string	"\n"
 798               	__c.5022:
 799 001c 2575 00   		.string	"%u"
 802               	__c.5020:
 803 001f 2074 6F20 		.string	" to "
 803      00
 806               	__c.5018:
 807 0024 2575 00   		.string	"%u"
 810               	__c.5016:
 811 0027 7377 6974 		.string	"switch_default_layer: "
 811      6368 5F64 
 811      6566 6175 
 811      6C74 5F6C 
 811      6179 6572 
 814               	__c.4983:
 815 003e 4553 432F 		.string	"ESC/q:\tquit\n"
 815      713A 0971 
 815      7569 740A 
 815      00
 818               	__c.4981:
 819 004b 0A0A 2D2D 		.string	"\n\n----- Console Help -----\n"
 819      2D2D 2D20 
 819      436F 6E73 
 819      6F6C 6520 
 819      4865 6C70 
 822               	__c.4900:
 823 0067 5061 7573 		.string	"Paus:\tjump to bootloader\n"
 823      3A09 6A75 
 823      6D70 2074 
 823      6F20 626F 
 823      6F74 6C6F 
 826               	__c.4898:
 827 0081 4361 7073 		.string	"Caps:\tLock Keyboard(Child Proof)\n"
 827      3A09 4C6F 
 827      636B 204B 
 827      6579 626F 
 827      6172 6428 
 830               	__c.4896:
 831 00a3 5053 6372 		.string	"PScr:\tpower down/remote wake-up\n"
 831      3A09 706F 
 831      7765 7220 
 831      646F 776E 
 831      2F72 656D 
 834               	__c.4894:
 835 00c4 342F 4634 		.string	"4/F4:\tswitch to Layer4 \n"
 835      3A09 7377 
 835      6974 6368 
 835      2074 6F20 
 835      4C61 7965 
 838               	__c.4892:
 839 00dd 332F 4633 		.string	"3/F3:\tswitch to Layer3 \n"
 839      3A09 7377 
 839      6974 6368 
 839      2074 6F20 
 839      4C61 7965 
 842               	__c.4890:
 843 00f6 322F 4632 		.string	"2/F2:\tswitch to Layer2 \n"
 843      3A09 7377 
 843      6974 6368 
 843      2074 6F20 
 843      4C61 7965 
 846               	__c.4888:
 847 010f 312F 4631 		.string	"1/F1:\tswitch to Layer1 \n"
 847      3A09 7377 
 847      6974 6368 
 847      2074 6F20 
 847      4C61 7965 
 850               	__c.4886:
 851 0128 302F 4631 		.string	"0/F10:\tswitch to Layer0 \n"
 851      303A 0973 
 851      7769 7463 
 851      6820 746F 
 851      204C 6179 
 854               	__c.4884:
 855 0142 6E3A 0974 		.string	"n:\ttoggle NKRO\n"
 855      6F67 676C 
 855      6520 4E4B 
 855      524F 0A00 
 858               	__c.4882:
 859 0152 653A 0970 		.string	"e:\tprint eeprom config\n"
 859      7269 6E74 
 859      2065 6570 
 859      726F 6D20 
 859      636F 6E66 
 862               	__c.4880:
 863 016a 733A 0970 		.string	"s:\tprint status\n"
 863      7269 6E74 
 863      2073 7461 
 863      7475 730A 
 863      00
 866               	__c.4878:
 867 017b 743A 0970 		.string	"t:\tprint timer count\n"
 867      7269 6E74 
 867      2074 696D 
 867      6572 2063 
 867      6F75 6E74 
 870               	__c.4876:
 871 0191 763A 0970 		.string	"v:\tprint device version & info\n"
 871      7269 6E74 
 871      2064 6576 
 871      6963 6520 
 871      7665 7273 
 874               	__c.4874:
 875 01b1 6D3A 0974 		.string	"m:\ttoggle mouse debug\n"
 875      6F67 676C 
 875      6520 6D6F 
 875      7573 6520 
 875      6465 6275 
 878               	__c.4872:
 879 01c8 6B3A 0974 		.string	"k:\ttoggle keyboard debug\n"
 879      6F67 676C 
 879      6520 6B65 
 879      7962 6F61 
 879      7264 2064 
 882               	__c.4870:
 883 01e2 783A 0974 		.string	"x:\ttoggle matrix debug\n"
 883      6F67 676C 
 883      6520 6D61 
 883      7472 6978 
 883      2064 6562 
 886               	__c.4868:
 887 01fa 643A 0974 		.string	"d:\ttoggle debug enable\n"
 887      6F67 676C 
 887      6520 6465 
 887      6275 6720 
 887      656E 6162 
 890               	__c.4866:
 891 0212 633A 0965 		.string	"c:\tenter console mode\n"
 891      6E74 6572 
 891      2063 6F6E 
 891      736F 6C65 
 891      206D 6F64 
 894               	__c.4864:
 895 0229 0A0A 2D2D 		.string	"\n\n----- Command Help -----\n"
 895      2D2D 2D20 
 895      436F 6D6D 
 895      616E 6420 
 895      4865 6C70 
 898               	__c.4976:
 899 0245 3F00      		.string	"?"
 902               	__c.4968:
 903 0247 4E4B 524F 		.string	"NKRO: disabled\n"
 903      3A20 6469 
 903      7361 626C 
 903      6564 0A00 
 906               	__c.4966:
 907 0257 4E4B 524F 		.string	"NKRO: enabled\n"
 907      3A20 656E 
 907      6162 6C65 
 907      640A 00
 910               	__c.4963:
 911 0266 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 911      5F6B 6579 
 911      626F 6172 
 911      645F 6C65 
 911      6473 2829 
 914               	__c.4961:
 915 0280 0A0A 2D2D 		.string	"\n\n----- Status -----\n"
 915      2D2D 2D20 
 915      5374 6174 
 915      7573 202D 
 915      2D2D 2D2D 
 918               	__c.4958:
 919 0296 7469 6D65 		.string	"timer_count: %04lX\n"
 919      725F 636F 
 919      756E 743A 
 919      2025 3034 
 919      6C58 0A00 
 922               	__c.4955:
 923 02aa 4743 433A 		.string	"GCC: 5.3.0 AVR-LIBC: 2.0.0 AVR_ARCH: avr5\n"
 923      2035 2E33 
 923      2E30 2041 
 923      5652 2D4C 
 923      4942 433A 
 926               	__c.4953:
 927 02d5 4F50 5449 		.string	"OPTIONS: LUFA CONSOLE COMMAND NKRO 4096\n"
 927      4F4E 533A 
 927      204C 5546 
 927      4120 434F 
 927      4E53 4F4C 
 930               	__c.4951:
 931 02fe 4255 494C 		.string	"BUILD: 914701a-dirty (17:18:56 Aug 14 2016)\n"
 931      443A 2039 
 931      3134 3730 
 931      3161 2D64 
 931      6972 7479 
 934               	__c.4949:
 935 032b 5649 443A 		.string	"VID: 0x16C0(technomancy) PID: 0x047C(Atreus) VER: 36\n"
 935      2030 7831 
 935      3643 3028 
 935      7465 6368 
 935      6E6F 6D61 
 938               	__c.4947:
 939 0361 4445 5343 		.string	"DESC: TMK keyboard firmware for Atreus\n"
 939      3A20 544D 
 939      4B20 6B65 
 939      7962 6F61 
 939      7264 2066 
 942               	__c.4945:
 943 0389 0A0A 2D2D 		.string	"\n\n----- Version -----\n"
 943      2D2D 2D20 
 943      5665 7273 
 943      696F 6E20 
 943      2D2D 2D2D 
 946               	__c.4942:
 947 03a0 0A44 4542 		.string	"\nDEBUG: mouse disabled.\n"
 947      5547 3A20 
 947      6D6F 7573 
 947      6520 6469 
 947      7361 626C 
 950               	__c.4940:
 951 03b9 0A44 4542 		.string	"\nDEBUG: mouse enabled.\n"
 951      5547 3A20 
 951      6D6F 7573 
 951      6520 656E 
 951      6162 6C65 
 954               	__c.4937:
 955 03d1 0A44 4542 		.string	"\nDEBUG: keyboard disabled.\n"
 955      5547 3A20 
 955      6B65 7962 
 955      6F61 7264 
 955      2064 6973 
 958               	__c.4935:
 959 03ed 0A44 4542 		.string	"\nDEBUG: keyboard enabled.\n"
 959      5547 3A20 
 959      6B65 7962 
 959      6F61 7264 
 959      2065 6E61 
 962               	__c.4932:
 963 0408 0A44 4542 		.string	"\nDEBUG: matrix disabled.\n"
 963      5547 3A20 
 963      6D61 7472 
 963      6978 2064 
 963      6973 6162 
 966               	__c.4930:
 967 0422 0A44 4542 		.string	"\nDEBUG: matrix enabled.\n"
 967      5547 3A20 
 967      6D61 7472 
 967      6978 2065 
 967      6E61 626C 
 970               	__c.4927:
 971 043b 0A44 4542 		.string	"\nDEBUG: enabled.\n"
 971      5547 3A20 
 971      656E 6162 
 971      6C65 642E 
 971      0A00 
 974               	__c.4925:
 975 044d 0A44 4542 		.string	"\nDEBUG: disabled.\n"
 975      5547 3A20 
 975      6469 7361 
 975      626C 6564 
 975      2E0A 00
 978               	__c.4922:
 979 0460 6E6F 7420 		.string	"not supported.\n"
 979      7375 7070 
 979      6F72 7465 
 979      642E 0A00 
 982               	__c.4920:
 983 0470 0A0A 4A75 		.string	"\n\nJump to bootloader... "
 983      6D70 2074 
 983      6F20 626F 
 983      6F74 6C6F 
 983      6164 6572 
 986               	__c.4917:
 987 0489 433E 2000 		.string	"C> "
 990               	__c.4915:
 991 048d 0A45 6E74 		.string	"\nEnter Console Mode\n"
 991      6572 2043 
 991      6F6E 736F 
 991      6C65 204D 
 991      6F64 650A 
 994               	__c.4909:
 995 04a2 556E 6C6F 		.string	"Unlocked.\n"
 995      636B 6564 
 995      2E0A 00
 998               	__c.4907:
 999 04ad 4C6F 636B 		.string	"Locked.\n"
 999      6564 2E0A 
 999      00
 1000               		.local	host_driver.4905
 1001               		.comm	host_driver.4905,2,1
 1002               		.local	state
 1003               		.comm	state,1,1
 1004               		.comm	debug_config,1,1
 1005               		.text
 1006               	.Letext0:
 1007               		.file 3 "/usr/avr/include/stdint.h"
 1008               		.file 4 "../../common/report.h"
 1009               		.file 5 "../../common/host_driver.h"
 1010               		.file 6 "../../common/debug_config.h"
 1011               		.file 7 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 1012               		.file 8 "../../common/host.h"
 1013               		.file 9 "../../common/timer.h"
 1014               		.file 10 "../../common/action_layer.h"
 1015               		.file 11 "../../common/action_util.h"
 1016               		.file 12 "../../common/xprintf.h"
 1017               		.file 13 "../../common/util.h"
 1018               		.file 14 "../../common/action.h"
 1019               		.file 15 "../../common/bootloader.h"
 1020               		.file 16 "../../common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
     /tmp/cce0swo8.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cce0swo8.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cce0swo8.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cce0swo8.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cce0swo8.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cce0swo8.s:12     .text.switch_default_layer:0000000000000000 switch_default_layer
     /tmp/cce0swo8.s:810    .progmem.data:0000000000000027 __c.5016
     /tmp/cce0swo8.s:806    .progmem.data:0000000000000024 __c.5018
     /tmp/cce0swo8.s:802    .progmem.data:000000000000001f __c.5020
     /tmp/cce0swo8.s:798    .progmem.data:000000000000001c __c.5022
     /tmp/cce0swo8.s:794    .progmem.data:000000000000001a __c.5024
     /tmp/cce0swo8.s:122    .text.command_extra:0000000000000000 command_extra
     /tmp/cce0swo8.s:141    .text.command_proc:0000000000000000 command_proc
     /tmp/cce0swo8.s:1001   .bss:0000000000000002 state
                            *COM*:0000000000000001 debug_config
     /tmp/cce0swo8.s:818    .progmem.data:000000000000004b __c.4981
     /tmp/cce0swo8.s:814    .progmem.data:000000000000003e __c.4983
     /tmp/cce0swo8.s:990    .progmem.data:000000000000048d __c.4915
     /tmp/cce0swo8.s:986    .progmem.data:0000000000000489 __c.4917
     /tmp/cce0swo8.s:942    .progmem.data:0000000000000389 __c.4945
     /tmp/cce0swo8.s:938    .progmem.data:0000000000000361 __c.4947
     /tmp/cce0swo8.s:934    .progmem.data:000000000000032b __c.4949
     /tmp/cce0swo8.s:930    .progmem.data:00000000000002fe __c.4951
     /tmp/cce0swo8.s:926    .progmem.data:00000000000002d5 __c.4953
     /tmp/cce0swo8.s:922    .progmem.data:00000000000002aa __c.4955
     /tmp/cce0swo8.s:982    .progmem.data:0000000000000470 __c.4920
     /tmp/cce0swo8.s:978    .progmem.data:0000000000000460 __c.4922
                             .bss:0000000000000000 host_driver.4905
     /tmp/cce0swo8.s:998    .progmem.data:00000000000004ad __c.4907
     /tmp/cce0swo8.s:994    .progmem.data:00000000000004a2 __c.4909
     /tmp/cce0swo8.s:894    .progmem.data:0000000000000229 __c.4864
     /tmp/cce0swo8.s:890    .progmem.data:0000000000000212 __c.4866
     /tmp/cce0swo8.s:886    .progmem.data:00000000000001fa __c.4868
     /tmp/cce0swo8.s:882    .progmem.data:00000000000001e2 __c.4870
     /tmp/cce0swo8.s:878    .progmem.data:00000000000001c8 __c.4872
     /tmp/cce0swo8.s:874    .progmem.data:00000000000001b1 __c.4874
     /tmp/cce0swo8.s:870    .progmem.data:0000000000000191 __c.4876
     /tmp/cce0swo8.s:866    .progmem.data:000000000000017b __c.4878
     /tmp/cce0swo8.s:862    .progmem.data:000000000000016a __c.4880
     /tmp/cce0swo8.s:858    .progmem.data:0000000000000152 __c.4882
     /tmp/cce0swo8.s:854    .progmem.data:0000000000000142 __c.4884
     /tmp/cce0swo8.s:850    .progmem.data:0000000000000128 __c.4886
     /tmp/cce0swo8.s:846    .progmem.data:000000000000010f __c.4888
     /tmp/cce0swo8.s:842    .progmem.data:00000000000000f6 __c.4890
     /tmp/cce0swo8.s:838    .progmem.data:00000000000000dd __c.4892
     /tmp/cce0swo8.s:834    .progmem.data:00000000000000c4 __c.4894
     /tmp/cce0swo8.s:830    .progmem.data:00000000000000a3 __c.4896
     /tmp/cce0swo8.s:826    .progmem.data:0000000000000081 __c.4898
     /tmp/cce0swo8.s:822    .progmem.data:0000000000000067 __c.4900
     /tmp/cce0swo8.s:974    .progmem.data:000000000000044d __c.4925
     /tmp/cce0swo8.s:970    .progmem.data:000000000000043b __c.4927
     /tmp/cce0swo8.s:966    .progmem.data:0000000000000422 __c.4930
     /tmp/cce0swo8.s:962    .progmem.data:0000000000000408 __c.4932
     /tmp/cce0swo8.s:958    .progmem.data:00000000000003ed __c.4935
     /tmp/cce0swo8.s:954    .progmem.data:00000000000003d1 __c.4937
     /tmp/cce0swo8.s:950    .progmem.data:00000000000003b9 __c.4940
     /tmp/cce0swo8.s:946    .progmem.data:00000000000003a0 __c.4942
     /tmp/cce0swo8.s:918    .progmem.data:0000000000000296 __c.4958
     /tmp/cce0swo8.s:914    .progmem.data:0000000000000280 __c.4961
     /tmp/cce0swo8.s:910    .progmem.data:0000000000000266 __c.4963
     /tmp/cce0swo8.s:906    .progmem.data:0000000000000257 __c.4966
     /tmp/cce0swo8.s:902    .progmem.data:0000000000000247 __c.4968
     /tmp/cce0swo8.s:898    .progmem.data:0000000000000245 __c.4976
     /tmp/cce0swo8.s:790    .progmem.data:0000000000000016 __c.4998
     /tmp/cce0swo8.s:786    .progmem.data:0000000000000002 __c.4993
     /tmp/cce0swo8.s:782    .progmem.data:0000000000000000 __c.4996

UNDEFINED SYMBOLS
xputs
default_layer_state
biton32
__xprintf
default_layer_set
clear_keyboard
keyboard_report
bootloader_jump
host_get_driver
host_set_driver
timer_count
host_keyboard_leds
keyboard_nkro
__do_clear_bss
