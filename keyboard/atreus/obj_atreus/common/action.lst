   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB102:
  15               		.file 1 "../../common/action.c"
   1:../../common/action.c **** /*
   2:../../common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/action.c **** 
   4:../../common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/action.c **** (at your option) any later version.
   8:../../common/action.c **** 
   9:../../common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/action.c **** GNU General Public License for more details.
  13:../../common/action.c **** 
  14:../../common/action.c **** You should have received a copy of the GNU General Public License
  15:../../common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/action.c **** */
  17:../../common/action.c **** #include "host.h"
  18:../../common/action.c **** #include "keycode.h"
  19:../../common/action.c **** #include "keyboard.h"
  20:../../common/action.c **** #include "mousekey.h"
  21:../../common/action.c **** #include "command.h"
  22:../../common/action.c **** #include "led.h"
  23:../../common/action.c **** #include "backlight.h"
  24:../../common/action.c **** #include "action_layer.h"
  25:../../common/action.c **** #include "action_tapping.h"
  26:../../common/action.c **** #include "action_macro.h"
  27:../../common/action.c **** #include "action_util.h"
  28:../../common/action.c **** #include "action.h"
  29:../../common/action.c **** 
  30:../../common/action.c **** #ifdef DEBUG_ACTION
  31:../../common/action.c **** #include "debug.h"
  32:../../common/action.c **** #else
  33:../../common/action.c **** #include "nodebug.h"
  34:../../common/action.c **** #endif
  35:../../common/action.c **** 
  36:../../common/action.c **** 
  37:../../common/action.c **** void action_exec(keyevent_t event)
  38:../../common/action.c **** {
  16               		.loc 1 38 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  39:../../common/action.c ****     if (!IS_NOEVENT(event)) {
  40:../../common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:../../common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:../../common/action.c ****     }
  43:../../common/action.c **** 
  44:../../common/action.c ****     keyrecord_t record = { .event = event };
  48               		.loc 1 44 0
  49 001e DE01      		movw r26,r28
  50 0020 1196      		adiw r26,1
  51 0022 86E0      		ldi r24,lo8(6)
  52 0024 FD01      		movw r30,r26
  53               		0:
  54 0026 1192      		st Z+,__zero_reg__
  55 0028 8A95      		dec r24
  56 002a 01F4      		brne 0b
  57 002c 85E0      		ldi r24,lo8(5)
  58 002e FE01      		movw r30,r28
  59 0030 3796      		adiw r30,7
  60               		0:
  61 0032 0190      		ld r0,Z+
  62 0034 0D92      		st X+,r0
  63 0036 8A95      		dec r24
  64 0038 01F4      		brne 0b
  45:../../common/action.c **** 
  46:../../common/action.c **** #ifndef NO_ACTION_TAPPING
  47:../../common/action.c ****     action_tapping_process(record);
  65               		.loc 1 47 0
  66 003a 4981      		ldd r20,Y+1
  67               	.LVL1:
  68 003c 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70 003e 6B81      		ldd r22,Y+3
  71 0040 7C81      		ldd r23,Y+4
  72 0042 8D81      		ldd r24,Y+5
  73 0044 9E81      		ldd r25,Y+6
  74 0046 0E94 0000 		call action_tapping_process
  75               	.LVL3:
  76               	/* epilogue start */
  48:../../common/action.c **** #else
  49:../../common/action.c ****     process_action(&record);
  50:../../common/action.c ****     if (!IS_NOEVENT(record.event)) {
  51:../../common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  52:../../common/action.c ****     }
  53:../../common/action.c **** #endif
  54:../../common/action.c **** }
  77               		.loc 1 54 0
  78 004a 2B96      		adiw r28,11
  79 004c 0FB6      		in __tmp_reg__,__SREG__
  80 004e F894      		cli
  81 0050 DEBF      		out __SP_H__,r29
  82 0052 0FBE      		out __SREG__,__tmp_reg__
  83 0054 CDBF      		out __SP_L__,r28
  84 0056 DF91      		pop r29
  85 0058 CF91      		pop r28
  86 005a 0895      		ret
  87               		.cfi_endproc
  88               	.LFE102:
  90               		.section	.text.register_code,"ax",@progbits
  91               	.global	register_code
  93               	register_code:
  94               	.LFB104:
  55:../../common/action.c **** 
  56:../../common/action.c **** void process_action(keyrecord_t *record)
  57:../../common/action.c **** {
  58:../../common/action.c ****     keyevent_t event = record->event;
  59:../../common/action.c **** #ifndef NO_ACTION_TAPPING
  60:../../common/action.c ****     uint8_t tap_count = record->tap.count;
  61:../../common/action.c **** #endif
  62:../../common/action.c **** 
  63:../../common/action.c ****     if (IS_NOEVENT(event)) { return; }
  64:../../common/action.c **** 
  65:../../common/action.c ****     action_t action = layer_switch_get_action(event.key);
  66:../../common/action.c ****     dprint("ACTION: "); debug_action(action);
  67:../../common/action.c **** #ifndef NO_ACTION_LAYER
  68:../../common/action.c ****     dprint(" layer_state: "); layer_debug();
  69:../../common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  70:../../common/action.c **** #endif
  71:../../common/action.c ****     dprintln();
  72:../../common/action.c **** 
  73:../../common/action.c ****     switch (action.kind.id) {
  74:../../common/action.c ****         /* Key and Mods */
  75:../../common/action.c ****         case ACT_LMODS:
  76:../../common/action.c ****         case ACT_RMODS:
  77:../../common/action.c ****             {
  78:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  79:../../common/action.c ****                                                                 action.key.mods<<4;
  80:../../common/action.c ****                 if (event.pressed) {
  81:../../common/action.c ****                     if (mods) {
  82:../../common/action.c ****                         add_weak_mods(mods);
  83:../../common/action.c ****                         send_keyboard_report();
  84:../../common/action.c ****                     }
  85:../../common/action.c ****                     register_code(action.key.code);
  86:../../common/action.c ****                 } else {
  87:../../common/action.c ****                     unregister_code(action.key.code);
  88:../../common/action.c ****                     if (mods) {
  89:../../common/action.c ****                         del_weak_mods(mods);
  90:../../common/action.c ****                         send_keyboard_report();
  91:../../common/action.c ****                     }
  92:../../common/action.c ****                 }
  93:../../common/action.c ****             }
  94:../../common/action.c ****             break;
  95:../../common/action.c **** #ifndef NO_ACTION_TAPPING
  96:../../common/action.c ****         case ACT_LMODS_TAP:
  97:../../common/action.c ****         case ACT_RMODS_TAP:
  98:../../common/action.c ****             {
  99:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 100:../../common/action.c ****                                                                     action.key.mods<<4;
 101:../../common/action.c ****                 switch (action.layer_tap.code) {
 102:../../common/action.c ****     #ifndef NO_ACTION_ONESHOT
 103:../../common/action.c ****                     case MODS_ONESHOT:
 104:../../common/action.c ****                         // Oneshot modifier
 105:../../common/action.c ****                         if (event.pressed) {
 106:../../common/action.c ****                             if (tap_count == 0) {
 107:../../common/action.c ****                                 register_mods(mods);
 108:../../common/action.c ****                             }
 109:../../common/action.c ****                             else if (tap_count == 1) {
 110:../../common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 111:../../common/action.c ****                                 set_oneshot_mods(mods);
 112:../../common/action.c ****                             }
 113:../../common/action.c ****                             else {
 114:../../common/action.c ****                                 register_mods(mods);
 115:../../common/action.c ****                             }
 116:../../common/action.c ****                         } else {
 117:../../common/action.c ****                             if (tap_count == 0) {
 118:../../common/action.c ****                                 clear_oneshot_mods();
 119:../../common/action.c ****                                 unregister_mods(mods);
 120:../../common/action.c ****                             }
 121:../../common/action.c ****                             else if (tap_count == 1) {
 122:../../common/action.c ****                                 // Retain Oneshot mods
 123:../../common/action.c ****                             }
 124:../../common/action.c ****                             else {
 125:../../common/action.c ****                                 clear_oneshot_mods();
 126:../../common/action.c ****                                 unregister_mods(mods);
 127:../../common/action.c ****                             }
 128:../../common/action.c ****                         }
 129:../../common/action.c ****                         break;
 130:../../common/action.c ****     #endif
 131:../../common/action.c ****                     case MODS_TAP_TOGGLE:
 132:../../common/action.c ****                         if (event.pressed) {
 133:../../common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 134:../../common/action.c ****                                 register_mods(mods);
 135:../../common/action.c ****                             }
 136:../../common/action.c ****                         } else {
 137:../../common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 138:../../common/action.c ****                                 unregister_mods(mods);
 139:../../common/action.c ****                             }
 140:../../common/action.c ****                         }
 141:../../common/action.c ****                         break;
 142:../../common/action.c ****                     default:
 143:../../common/action.c ****                         if (event.pressed) {
 144:../../common/action.c ****                             if (tap_count > 0) {
 145:../../common/action.c ****                                 if (record->tap.interrupted) {
 146:../../common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 147:../../common/action.c ****                                     // ad hoc: set 0 to cancel tap
 148:../../common/action.c ****                                     record->tap.count = 0;
 149:../../common/action.c ****                                     register_mods(mods);
 150:../../common/action.c ****                                 } else {
 151:../../common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 152:../../common/action.c ****                                     register_code(action.key.code);
 153:../../common/action.c ****                                 }
 154:../../common/action.c ****                             } else {
 155:../../common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 156:../../common/action.c ****                                 register_mods(mods);
 157:../../common/action.c ****                             }
 158:../../common/action.c ****                         } else {
 159:../../common/action.c ****                             if (tap_count > 0) {
 160:../../common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 161:../../common/action.c ****                                 unregister_code(action.key.code);
 162:../../common/action.c ****                             } else {
 163:../../common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 164:../../common/action.c ****                                 unregister_mods(mods);
 165:../../common/action.c ****                             }
 166:../../common/action.c ****                         }
 167:../../common/action.c ****                         break;
 168:../../common/action.c ****                 }
 169:../../common/action.c ****             }
 170:../../common/action.c ****             break;
 171:../../common/action.c **** #endif
 172:../../common/action.c **** #ifdef EXTRAKEY_ENABLE
 173:../../common/action.c ****         /* other HID usage */
 174:../../common/action.c ****         case ACT_USAGE:
 175:../../common/action.c ****             switch (action.usage.page) {
 176:../../common/action.c ****                 case PAGE_SYSTEM:
 177:../../common/action.c ****                     if (event.pressed) {
 178:../../common/action.c ****                         host_system_send(action.usage.code);
 179:../../common/action.c ****                     } else {
 180:../../common/action.c ****                         host_system_send(0);
 181:../../common/action.c ****                     }
 182:../../common/action.c ****                     break;
 183:../../common/action.c ****                 case PAGE_CONSUMER:
 184:../../common/action.c ****                     if (event.pressed) {
 185:../../common/action.c ****                         host_consumer_send(action.usage.code);
 186:../../common/action.c ****                     } else {
 187:../../common/action.c ****                         host_consumer_send(0);
 188:../../common/action.c ****                     }
 189:../../common/action.c ****                     break;
 190:../../common/action.c ****             }
 191:../../common/action.c ****             break;
 192:../../common/action.c **** #endif
 193:../../common/action.c **** #ifdef MOUSEKEY_ENABLE
 194:../../common/action.c ****         /* Mouse key */
 195:../../common/action.c ****         case ACT_MOUSEKEY:
 196:../../common/action.c ****             if (event.pressed) {
 197:../../common/action.c ****                 mousekey_on(action.key.code);
 198:../../common/action.c ****                 mousekey_send();
 199:../../common/action.c ****             } else {
 200:../../common/action.c ****                 mousekey_off(action.key.code);
 201:../../common/action.c ****                 mousekey_send();
 202:../../common/action.c ****             }
 203:../../common/action.c ****             break;
 204:../../common/action.c **** #endif
 205:../../common/action.c **** #ifndef NO_ACTION_LAYER
 206:../../common/action.c ****         case ACT_LAYER:
 207:../../common/action.c ****             if (action.layer_bitop.on == 0) {
 208:../../common/action.c ****                 /* Default Layer Bitwise Operation */
 209:../../common/action.c ****                 if (!event.pressed) {
 210:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 211:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 212:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 213:../../common/action.c ****                     switch (action.layer_bitop.op) {
 214:../../common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 215:../../common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 216:../../common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 217:../../common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 218:../../common/action.c ****                     }
 219:../../common/action.c ****                 }
 220:../../common/action.c ****             } else {
 221:../../common/action.c ****                 /* Layer Bitwise Operation */
 222:../../common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 223:../../common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 224:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 225:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 226:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 227:../../common/action.c ****                     switch (action.layer_bitop.op) {
 228:../../common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 229:../../common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 230:../../common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 231:../../common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 232:../../common/action.c ****                     }
 233:../../common/action.c ****                 }
 234:../../common/action.c ****             }
 235:../../common/action.c ****             break;
 236:../../common/action.c ****     #ifndef NO_ACTION_TAPPING
 237:../../common/action.c ****         case ACT_LAYER_TAP:
 238:../../common/action.c ****         case ACT_LAYER_TAP_EXT:
 239:../../common/action.c ****             switch (action.layer_tap.code) {
 240:../../common/action.c ****                 case OP_TAP_TOGGLE:
 241:../../common/action.c ****                     /* tap toggle */
 242:../../common/action.c ****                     if (event.pressed) {
 243:../../common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 244:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 245:../../common/action.c ****                         }
 246:../../common/action.c ****                     } else {
 247:../../common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 248:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 249:../../common/action.c ****                         }
 250:../../common/action.c ****                     }
 251:../../common/action.c ****                     break;
 252:../../common/action.c ****                 case OP_ON_OFF:
 253:../../common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 254:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 255:../../common/action.c ****                     break;
 256:../../common/action.c ****                 case OP_OFF_ON:
 257:../../common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 258:../../common/action.c ****                                     layer_on(action.layer_tap.val);
 259:../../common/action.c ****                     break;
 260:../../common/action.c ****                 case OP_SET_CLEAR:
 261:../../common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 262:../../common/action.c ****                                     layer_clear();
 263:../../common/action.c ****                     break;
 264:../../common/action.c ****                 default:
 265:../../common/action.c ****                     /* tap key */
 266:../../common/action.c ****                     if (event.pressed) {
 267:../../common/action.c ****                         if (tap_count > 0) {
 268:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 269:../../common/action.c ****                             register_code(action.layer_tap.code);
 270:../../common/action.c ****                         } else {
 271:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 272:../../common/action.c ****                             layer_on(action.layer_tap.val);
 273:../../common/action.c ****                         }
 274:../../common/action.c ****                     } else {
 275:../../common/action.c ****                         if (tap_count > 0) {
 276:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 277:../../common/action.c ****                             unregister_code(action.layer_tap.code);
 278:../../common/action.c ****                         } else {
 279:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 280:../../common/action.c ****                             layer_off(action.layer_tap.val);
 281:../../common/action.c ****                         }
 282:../../common/action.c ****                     }
 283:../../common/action.c ****                     break;
 284:../../common/action.c ****             }
 285:../../common/action.c ****             break;
 286:../../common/action.c ****     #endif
 287:../../common/action.c **** #endif
 288:../../common/action.c ****         /* Extentions */
 289:../../common/action.c **** #ifndef NO_ACTION_MACRO
 290:../../common/action.c ****         case ACT_MACRO:
 291:../../common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 292:../../common/action.c ****             break;
 293:../../common/action.c **** #endif
 294:../../common/action.c **** #ifdef BACKLIGHT_ENABLE
 295:../../common/action.c ****         case ACT_BACKLIGHT:
 296:../../common/action.c ****             if (!event.pressed) {
 297:../../common/action.c ****                 switch (action.backlight.id) {
 298:../../common/action.c ****                     case BACKLIGHT_INCREASE:
 299:../../common/action.c ****                         backlight_increase();
 300:../../common/action.c ****                         break;
 301:../../common/action.c ****                     case BACKLIGHT_DECREASE:
 302:../../common/action.c ****                         backlight_decrease();
 303:../../common/action.c ****                         break;
 304:../../common/action.c ****                     case BACKLIGHT_TOGGLE:
 305:../../common/action.c ****                         backlight_toggle();
 306:../../common/action.c ****                         break;
 307:../../common/action.c ****                     case BACKLIGHT_STEP:
 308:../../common/action.c ****                         backlight_step();
 309:../../common/action.c ****                         break;
 310:../../common/action.c ****                 }
 311:../../common/action.c ****             }
 312:../../common/action.c ****             break;
 313:../../common/action.c **** #endif
 314:../../common/action.c ****         case ACT_COMMAND:
 315:../../common/action.c ****             break;
 316:../../common/action.c **** #ifndef NO_ACTION_FUNCTION
 317:../../common/action.c ****         case ACT_FUNCTION:
 318:../../common/action.c ****             action_function(record, action.func.id, action.func.opt);
 319:../../common/action.c ****             break;
 320:../../common/action.c **** #endif
 321:../../common/action.c ****         default:
 322:../../common/action.c ****             break;
 323:../../common/action.c ****     }
 324:../../common/action.c **** }
 325:../../common/action.c **** 
 326:../../common/action.c **** 
 327:../../common/action.c **** 
 328:../../common/action.c **** 
 329:../../common/action.c **** /*
 330:../../common/action.c ****  * Utilities for actions.
 331:../../common/action.c ****  */
 332:../../common/action.c **** void register_code(uint8_t code)
 333:../../common/action.c **** {
  95               		.loc 1 333 0
  96               		.cfi_startproc
  97               	.LVL4:
  98 0000 CF93      		push r28
  99               	.LCFI4:
 100               		.cfi_def_cfa_offset 3
 101               		.cfi_offset 28, -2
 102               	/* prologue: function */
 103               	/* frame size = 0 */
 104               	/* stack size = 1 */
 105               	.L__stack_usage = 1
 106 0002 C82F      		mov r28,r24
 334:../../common/action.c ****     if (code == KC_NO) {
 107               		.loc 1 334 0
 108 0004 8823      		tst r24
 109 0006 01F4      		brne .+2
 110 0008 00C0      		rjmp .L2
 335:../../common/action.c ****         return;
 336:../../common/action.c ****     }
 337:../../common/action.c **** 
 338:../../common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 339:../../common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 340:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 341:../../common/action.c ****         // Resync: ignore if caps lock already is on
 342:../../common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 343:../../common/action.c **** #endif
 344:../../common/action.c ****         add_key(KC_CAPSLOCK);
 345:../../common/action.c ****         send_keyboard_report();
 346:../../common/action.c ****         del_key(KC_CAPSLOCK);
 347:../../common/action.c ****         send_keyboard_report();
 348:../../common/action.c ****     }
 349:../../common/action.c **** 
 350:../../common/action.c ****     else if (KC_LOCKING_NUM == code) {
 351:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 352:../../common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 353:../../common/action.c **** #endif
 354:../../common/action.c ****         add_key(KC_NUMLOCK);
 355:../../common/action.c ****         send_keyboard_report();
 356:../../common/action.c ****         del_key(KC_NUMLOCK);
 357:../../common/action.c ****         send_keyboard_report();
 358:../../common/action.c ****     }
 359:../../common/action.c **** 
 360:../../common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 361:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 362:../../common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 363:../../common/action.c **** #endif
 364:../../common/action.c ****         add_key(KC_SCROLLLOCK);
 365:../../common/action.c ****         send_keyboard_report();
 366:../../common/action.c ****         del_key(KC_SCROLLLOCK);
 367:../../common/action.c ****         send_keyboard_report();
 368:../../common/action.c ****     }
 369:../../common/action.c **** #endif
 370:../../common/action.c **** 
 371:../../common/action.c ****     else if IS_KEY(code) {
 111               		.loc 1 371 0
 112 000a 8CEF      		ldi r24,lo8(-4)
 113               	.LVL5:
 114 000c 8C0F      		add r24,r28
 115 000e 813A      		cpi r24,lo8(-95)
 116 0010 00F4      		brsh .L5
 372:../../common/action.c ****         // TODO: should push command_proc out of this block?
 373:../../common/action.c ****         if (command_proc(code)) return;
 117               		.loc 1 373 0
 118 0012 8C2F      		mov r24,r28
 119 0014 0E94 0000 		call command_proc
 120               	.LVL6:
 121 0018 8111      		cpse r24,__zero_reg__
 122 001a 00C0      		rjmp .L2
 374:../../common/action.c **** 
 375:../../common/action.c **** #ifndef NO_ACTION_ONESHOT
 376:../../common/action.c **** /* TODO: remove
 377:../../common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 378:../../common/action.c ****             uint8_t tmp_mods = get_mods();
 379:../../common/action.c ****             add_mods(oneshot_state.mods);
 380:../../common/action.c **** 
 381:../../common/action.c ****             add_key(code);
 382:../../common/action.c ****             send_keyboard_report();
 383:../../common/action.c **** 
 384:../../common/action.c ****             set_mods(tmp_mods);
 385:../../common/action.c ****             send_keyboard_report();
 386:../../common/action.c ****             oneshot_cancel();
 387:../../common/action.c ****         } else 
 388:../../common/action.c **** */
 389:../../common/action.c **** #endif
 390:../../common/action.c ****         {
 391:../../common/action.c ****             add_key(code);
 123               		.loc 1 391 0
 124 001c 8C2F      		mov r24,r28
 125 001e 0E94 0000 		call add_key
 126               	.LVL7:
 127 0022 00C0      		rjmp .L32
 128               	.L5:
 392:../../common/action.c ****             send_keyboard_report();
 393:../../common/action.c ****         }
 394:../../common/action.c ****     }
 395:../../common/action.c ****     else if IS_MOD(code) {
 129               		.loc 1 395 0
 130 0024 80E2      		ldi r24,lo8(32)
 131 0026 8C0F      		add r24,r28
 132 0028 8830      		cpi r24,lo8(8)
 133 002a 00F4      		brsh .L7
 396:../../common/action.c ****         add_mods(MOD_BIT(code));
 134               		.loc 1 396 0
 135 002c C770      		andi r28,lo8(7)
 136               	.LVL8:
 137 002e 81E0      		ldi r24,lo8(1)
 138 0030 00C0      		rjmp 2f
 139               		1:
 140 0032 880F      		lsl r24
 141               		2:
 142 0034 CA95      		dec r28
 143 0036 02F4      		brpl 1b
 144 0038 0E94 0000 		call add_mods
 145               	.LVL9:
 146               	.L32:
 147               	/* epilogue start */
 397:../../common/action.c ****         send_keyboard_report();
 398:../../common/action.c ****     }
 399:../../common/action.c ****     else if IS_SYSTEM(code) {
 400:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 401:../../common/action.c ****     }
 402:../../common/action.c ****     else if IS_CONSUMER(code) {
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 404:../../common/action.c ****     }
 405:../../common/action.c **** }
 148               		.loc 1 405 0
 149 003c CF91      		pop r28
 397:../../common/action.c ****         send_keyboard_report();
 150               		.loc 1 397 0
 151 003e 0C94 0000 		jmp send_keyboard_report
 152               	.LVL10:
 153               	.L7:
 399:../../common/action.c ****     else if IS_SYSTEM(code) {
 154               		.loc 1 399 0
 155 0042 8BE5      		ldi r24,lo8(91)
 156 0044 8C0F      		add r24,r28
 157 0046 8330      		cpi r24,lo8(3)
 158 0048 00F4      		brsh .L8
 400:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 159               		.loc 1 400 0
 160 004a C53A      		cpi r28,lo8(-91)
 161 004c 01F0      		breq .L11
 400:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 162               		.loc 1 400 0 is_stmt 0 discriminator 1
 163 004e C63A      		cpi r28,lo8(-90)
 164 0050 01F4      		brne .L12
 400:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 165               		.loc 1 400 0
 166 0052 82E8      		ldi r24,lo8(-126)
 167 0054 90E0      		ldi r25,0
 168 0056 00C0      		rjmp .L9
 169               	.L11:
 170 0058 81E8      		ldi r24,lo8(-127)
 171 005a 90E0      		ldi r25,0
 172 005c 00C0      		rjmp .L9
 173               	.L12:
 174 005e 83E8      		ldi r24,lo8(-125)
 175 0060 90E0      		ldi r25,0
 176               	.L9:
 177               	/* epilogue start */
 178               		.loc 1 405 0 is_stmt 1 discriminator 4
 179 0062 CF91      		pop r28
 180               	.LVL11:
 400:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 181               		.loc 1 400 0 discriminator 4
 182 0064 0C94 0000 		jmp host_system_send
 183               	.LVL12:
 184               	.L8:
 402:../../common/action.c ****     else if IS_CONSUMER(code) {
 185               		.loc 1 402 0
 186 0068 88E5      		ldi r24,lo8(88)
 187 006a 8C0F      		add r24,r28
 188 006c 8331      		cpi r24,lo8(19)
 189 006e 00F0      		brlo .+2
 190 0070 00C0      		rjmp .L2
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 191               		.loc 1 403 0
 192 0072 C83A      		cpi r28,lo8(-88)
 193 0074 01F0      		breq .L13
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 194               		.loc 1 403 0 is_stmt 0 discriminator 1
 195 0076 C93A      		cpi r28,lo8(-87)
 196 0078 01F0      		breq .L14
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 197               		.loc 1 403 0 discriminator 3
 198 007a CA3A      		cpi r28,lo8(-86)
 199 007c 01F0      		breq .L15
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 200               		.loc 1 403 0 discriminator 5
 201 007e CB3A      		cpi r28,lo8(-85)
 202 0080 01F0      		breq .L16
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 203               		.loc 1 403 0 discriminator 7
 204 0082 CC3A      		cpi r28,lo8(-84)
 205 0084 01F0      		breq .L17
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 206               		.loc 1 403 0 discriminator 9
 207 0086 CD3A      		cpi r28,lo8(-83)
 208 0088 01F0      		breq .L18
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 209               		.loc 1 403 0 discriminator 11
 210 008a C03B      		cpi r28,lo8(-80)
 211 008c 01F0      		breq .L19
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 212               		.loc 1 403 0 discriminator 13
 213 008e CE3A      		cpi r28,lo8(-82)
 214 0090 01F0      		breq .L20
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 215               		.loc 1 403 0 discriminator 15
 216 0092 CF3A      		cpi r28,lo8(-81)
 217 0094 01F0      		breq .L21
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 218               		.loc 1 403 0 discriminator 17
 219 0096 C13B      		cpi r28,lo8(-79)
 220 0098 01F0      		breq .L22
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 221               		.loc 1 403 0 discriminator 19
 222 009a C23B      		cpi r28,lo8(-78)
 223 009c 01F0      		breq .L23
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 224               		.loc 1 403 0 discriminator 21
 225 009e C33B      		cpi r28,lo8(-77)
 226 00a0 01F0      		breq .L24
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 227               		.loc 1 403 0 discriminator 23
 228 00a2 C43B      		cpi r28,lo8(-76)
 229 00a4 01F0      		breq .L25
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 230               		.loc 1 403 0 discriminator 25
 231 00a6 C53B      		cpi r28,lo8(-75)
 232 00a8 01F0      		breq .L26
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 233               		.loc 1 403 0 discriminator 27
 234 00aa C63B      		cpi r28,lo8(-74)
 235 00ac 01F0      		breq .L27
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 236               		.loc 1 403 0 discriminator 29
 237 00ae C73B      		cpi r28,lo8(-73)
 238 00b0 01F0      		breq .L28
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 239               		.loc 1 403 0 discriminator 31
 240 00b2 C83B      		cpi r28,lo8(-72)
 241 00b4 01F0      		breq .L29
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 242               		.loc 1 403 0 discriminator 33
 243 00b6 C93B      		cpi r28,lo8(-71)
 244 00b8 01F0      		breq .L30
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 245               		.loc 1 403 0 discriminator 35
 246 00ba CA3B      		cpi r28,lo8(-70)
 247 00bc 01F4      		brne .L31
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 248               		.loc 1 403 0
 249 00be 8AE2      		ldi r24,lo8(42)
 250 00c0 92E0      		ldi r25,lo8(2)
 251 00c2 00C0      		rjmp .L10
 252               	.L13:
 253 00c4 82EE      		ldi r24,lo8(-30)
 254 00c6 90E0      		ldi r25,0
 255 00c8 00C0      		rjmp .L10
 256               	.L14:
 257 00ca 89EE      		ldi r24,lo8(-23)
 258 00cc 90E0      		ldi r25,0
 259 00ce 00C0      		rjmp .L10
 260               	.L15:
 261 00d0 8AEE      		ldi r24,lo8(-22)
 262 00d2 90E0      		ldi r25,0
 263 00d4 00C0      		rjmp .L10
 264               	.L16:
 265 00d6 85EB      		ldi r24,lo8(-75)
 266 00d8 90E0      		ldi r25,0
 267 00da 00C0      		rjmp .L10
 268               	.L17:
 269 00dc 86EB      		ldi r24,lo8(-74)
 270 00de 90E0      		ldi r25,0
 271 00e0 00C0      		rjmp .L10
 272               	.L18:
 273 00e2 87EB      		ldi r24,lo8(-73)
 274 00e4 90E0      		ldi r25,0
 275 00e6 00C0      		rjmp .L10
 276               	.L19:
 277 00e8 8CEC      		ldi r24,lo8(-52)
 278 00ea 90E0      		ldi r25,0
 279 00ec 00C0      		rjmp .L10
 280               	.L20:
 281 00ee 8DEC      		ldi r24,lo8(-51)
 282 00f0 90E0      		ldi r25,0
 283 00f2 00C0      		rjmp .L10
 284               	.L21:
 285 00f4 83E8      		ldi r24,lo8(-125)
 286 00f6 91E0      		ldi r25,lo8(1)
 287 00f8 00C0      		rjmp .L10
 288               	.L22:
 289 00fa 8AE8      		ldi r24,lo8(-118)
 290 00fc 91E0      		ldi r25,lo8(1)
 291 00fe 00C0      		rjmp .L10
 292               	.L23:
 293 0100 82E9      		ldi r24,lo8(-110)
 294 0102 91E0      		ldi r25,lo8(1)
 295 0104 00C0      		rjmp .L10
 296               	.L24:
 297 0106 84E9      		ldi r24,lo8(-108)
 298 0108 91E0      		ldi r25,lo8(1)
 299 010a 00C0      		rjmp .L10
 300               	.L25:
 301 010c 81E2      		ldi r24,lo8(33)
 302 010e 92E0      		ldi r25,lo8(2)
 303 0110 00C0      		rjmp .L10
 304               	.L26:
 305 0112 83E2      		ldi r24,lo8(35)
 306 0114 92E0      		ldi r25,lo8(2)
 307 0116 00C0      		rjmp .L10
 308               	.L27:
 309 0118 84E2      		ldi r24,lo8(36)
 310 011a 92E0      		ldi r25,lo8(2)
 311 011c 00C0      		rjmp .L10
 312               	.L28:
 313 011e 85E2      		ldi r24,lo8(37)
 314 0120 92E0      		ldi r25,lo8(2)
 315 0122 00C0      		rjmp .L10
 316               	.L29:
 317 0124 86E2      		ldi r24,lo8(38)
 318 0126 92E0      		ldi r25,lo8(2)
 319 0128 00C0      		rjmp .L10
 320               	.L30:
 321 012a 87E2      		ldi r24,lo8(39)
 322 012c 92E0      		ldi r25,lo8(2)
 323 012e 00C0      		rjmp .L10
 324               	.L31:
 325 0130 80E0      		ldi r24,0
 326 0132 90E0      		ldi r25,0
 327               	.L10:
 328               	/* epilogue start */
 329               		.loc 1 405 0 is_stmt 1 discriminator 39
 330 0134 CF91      		pop r28
 331               	.LVL13:
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 332               		.loc 1 403 0 discriminator 39
 333 0136 0C94 0000 		jmp host_consumer_send
 334               	.LVL14:
 335               	.L2:
 336               	/* epilogue start */
 337               		.loc 1 405 0
 338 013a CF91      		pop r28
 339               	.LVL15:
 340 013c 0895      		ret
 341               		.cfi_endproc
 342               	.LFE104:
 344               		.section	.text.unregister_code,"ax",@progbits
 345               	.global	unregister_code
 347               	unregister_code:
 348               	.LFB105:
 406:../../common/action.c **** 
 407:../../common/action.c **** void unregister_code(uint8_t code)
 408:../../common/action.c **** {
 349               		.loc 1 408 0
 350               		.cfi_startproc
 351               	.LVL16:
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	/* stack size = 0 */
 355               	.L__stack_usage = 0
 409:../../common/action.c ****     if (code == KC_NO) {
 356               		.loc 1 409 0
 357 0000 8823      		tst r24
 358 0002 01F0      		breq .L34
 410:../../common/action.c ****         return;
 411:../../common/action.c ****     }
 412:../../common/action.c **** 
 413:../../common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 414:../../common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 415:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 416:../../common/action.c ****         // Resync: ignore if caps lock already is off
 417:../../common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 418:../../common/action.c **** #endif
 419:../../common/action.c ****         add_key(KC_CAPSLOCK);
 420:../../common/action.c ****         send_keyboard_report();
 421:../../common/action.c ****         del_key(KC_CAPSLOCK);
 422:../../common/action.c ****         send_keyboard_report();
 423:../../common/action.c ****     }
 424:../../common/action.c **** 
 425:../../common/action.c ****     else if (KC_LOCKING_NUM == code) {
 426:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 427:../../common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 428:../../common/action.c **** #endif
 429:../../common/action.c ****         add_key(KC_NUMLOCK);
 430:../../common/action.c ****         send_keyboard_report();
 431:../../common/action.c ****         del_key(KC_NUMLOCK);
 432:../../common/action.c ****         send_keyboard_report();
 433:../../common/action.c ****     }
 434:../../common/action.c **** 
 435:../../common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 436:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 437:../../common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 438:../../common/action.c **** #endif
 439:../../common/action.c ****         add_key(KC_SCROLLLOCK);
 440:../../common/action.c ****         send_keyboard_report();
 441:../../common/action.c ****         del_key(KC_SCROLLLOCK);
 442:../../common/action.c ****         send_keyboard_report();
 443:../../common/action.c ****     }
 444:../../common/action.c **** #endif
 445:../../common/action.c **** 
 446:../../common/action.c ****     else if IS_KEY(code) {
 359               		.loc 1 446 0
 360 0004 9CEF      		ldi r25,lo8(-4)
 361 0006 980F      		add r25,r24
 362 0008 913A      		cpi r25,lo8(-95)
 363 000a 00F4      		brsh .L36
 447:../../common/action.c ****         del_key(code);
 364               		.loc 1 447 0
 365 000c 0E94 0000 		call del_key
 366               	.LVL17:
 367 0010 00C0      		rjmp .L42
 368               	.LVL18:
 369               	.L36:
 448:../../common/action.c ****         send_keyboard_report();
 449:../../common/action.c ****     }
 450:../../common/action.c ****     else if IS_MOD(code) {
 370               		.loc 1 450 0
 371 0012 90E2      		ldi r25,lo8(32)
 372 0014 980F      		add r25,r24
 373 0016 9830      		cpi r25,lo8(8)
 374 0018 00F4      		brsh .L37
 451:../../common/action.c ****         del_mods(MOD_BIT(code));
 375               		.loc 1 451 0
 376 001a 8770      		andi r24,lo8(7)
 377               	.LVL19:
 378 001c 91E0      		ldi r25,lo8(1)
 379 001e 00C0      		rjmp 2f
 380               		1:
 381 0020 990F      		lsl r25
 382               		2:
 383 0022 8A95      		dec r24
 384 0024 02F4      		brpl 1b
 385 0026 892F      		mov r24,r25
 386 0028 0E94 0000 		call del_mods
 387               	.LVL20:
 388               	.L42:
 452:../../common/action.c ****         send_keyboard_report();
 389               		.loc 1 452 0
 390 002c 0C94 0000 		jmp send_keyboard_report
 391               	.LVL21:
 392               	.L37:
 453:../../common/action.c ****     }
 454:../../common/action.c ****     else if IS_SYSTEM(code) {
 393               		.loc 1 454 0
 394 0030 9BE5      		ldi r25,lo8(91)
 395 0032 980F      		add r25,r24
 396 0034 9330      		cpi r25,lo8(3)
 397 0036 00F4      		brsh .L38
 455:../../common/action.c ****         host_system_send(0);
 398               		.loc 1 455 0
 399 0038 80E0      		ldi r24,0
 400 003a 90E0      		ldi r25,0
 401               	.LVL22:
 402 003c 0C94 0000 		jmp host_system_send
 403               	.LVL23:
 404               	.L38:
 456:../../common/action.c ****     }
 457:../../common/action.c ****     else if IS_CONSUMER(code) {
 405               		.loc 1 457 0
 406 0040 885A      		subi r24,lo8(-(88))
 407               	.LVL24:
 408 0042 8331      		cpi r24,lo8(19)
 409 0044 00F4      		brsh .L34
 458:../../common/action.c ****         host_consumer_send(0);
 410               		.loc 1 458 0
 411 0046 80E0      		ldi r24,0
 412 0048 90E0      		ldi r25,0
 413               	.LVL25:
 414 004a 0C94 0000 		jmp host_consumer_send
 415               	.LVL26:
 416               	.L34:
 417 004e 0895      		ret
 418               		.cfi_endproc
 419               	.LFE105:
 421               		.section	.text.register_mods,"ax",@progbits
 422               	.global	register_mods
 424               	register_mods:
 425               	.LFB106:
 459:../../common/action.c ****     }
 460:../../common/action.c **** }
 461:../../common/action.c **** 
 462:../../common/action.c **** void register_mods(uint8_t mods)
 463:../../common/action.c **** {
 426               		.loc 1 463 0
 427               		.cfi_startproc
 428               	.LVL27:
 429               	/* prologue: function */
 430               	/* frame size = 0 */
 431               	/* stack size = 0 */
 432               	.L__stack_usage = 0
 464:../../common/action.c ****     if (mods) {
 433               		.loc 1 464 0
 434 0000 8823      		tst r24
 435 0002 01F0      		breq .L43
 465:../../common/action.c ****         add_mods(mods);
 436               		.loc 1 465 0
 437 0004 0E94 0000 		call add_mods
 438               	.LVL28:
 466:../../common/action.c ****         send_keyboard_report();
 439               		.loc 1 466 0
 440 0008 0C94 0000 		jmp send_keyboard_report
 441               	.LVL29:
 442               	.L43:
 443 000c 0895      		ret
 444               		.cfi_endproc
 445               	.LFE106:
 447               		.section	.text.unregister_mods,"ax",@progbits
 448               	.global	unregister_mods
 450               	unregister_mods:
 451               	.LFB107:
 467:../../common/action.c ****     }
 468:../../common/action.c **** }
 469:../../common/action.c **** 
 470:../../common/action.c **** void unregister_mods(uint8_t mods)
 471:../../common/action.c **** {
 452               		.loc 1 471 0
 453               		.cfi_startproc
 454               	.LVL30:
 455               	/* prologue: function */
 456               	/* frame size = 0 */
 457               	/* stack size = 0 */
 458               	.L__stack_usage = 0
 472:../../common/action.c ****     if (mods) {
 459               		.loc 1 472 0
 460 0000 8823      		tst r24
 461 0002 01F0      		breq .L45
 473:../../common/action.c ****         del_mods(mods);
 462               		.loc 1 473 0
 463 0004 0E94 0000 		call del_mods
 464               	.LVL31:
 474:../../common/action.c ****         send_keyboard_report();
 465               		.loc 1 474 0
 466 0008 0C94 0000 		jmp send_keyboard_report
 467               	.LVL32:
 468               	.L45:
 469 000c 0895      		ret
 470               		.cfi_endproc
 471               	.LFE107:
 473               		.section	.text.process_action,"ax",@progbits
 474               	.global	process_action
 476               	process_action:
 477               	.LFB103:
  57:../../common/action.c **** {
 478               		.loc 1 57 0
 479               		.cfi_startproc
 480               	.LVL33:
 481 0000 CF92      		push r12
 482               	.LCFI5:
 483               		.cfi_def_cfa_offset 3
 484               		.cfi_offset 12, -2
 485 0002 DF92      		push r13
 486               	.LCFI6:
 487               		.cfi_def_cfa_offset 4
 488               		.cfi_offset 13, -3
 489 0004 EF92      		push r14
 490               	.LCFI7:
 491               		.cfi_def_cfa_offset 5
 492               		.cfi_offset 14, -4
 493 0006 FF92      		push r15
 494               	.LCFI8:
 495               		.cfi_def_cfa_offset 6
 496               		.cfi_offset 15, -5
 497 0008 0F93      		push r16
 498               	.LCFI9:
 499               		.cfi_def_cfa_offset 7
 500               		.cfi_offset 16, -6
 501 000a 1F93      		push r17
 502               	.LCFI10:
 503               		.cfi_def_cfa_offset 8
 504               		.cfi_offset 17, -7
 505 000c CF93      		push r28
 506               	.LCFI11:
 507               		.cfi_def_cfa_offset 9
 508               		.cfi_offset 28, -8
 509 000e DF93      		push r29
 510               	.LCFI12:
 511               		.cfi_def_cfa_offset 10
 512               		.cfi_offset 29, -9
 513 0010 CDB7      		in r28,__SP_L__
 514 0012 DEB7      		in r29,__SP_H__
 515               	.LCFI13:
 516               		.cfi_def_cfa_register 28
 517 0014 2897      		sbiw r28,8
 518               	.LCFI14:
 519               		.cfi_def_cfa_offset 18
 520 0016 0FB6      		in __tmp_reg__,__SREG__
 521 0018 F894      		cli
 522 001a DEBF      		out __SP_H__,r29
 523 001c 0FBE      		out __SREG__,__tmp_reg__
 524 001e CDBF      		out __SP_L__,r28
 525               	/* prologue: function */
 526               	/* frame size = 8 */
 527               	/* stack size = 16 */
 528               	.L__stack_usage = 16
 529 0020 8C01      		movw r16,r24
  58:../../common/action.c ****     keyevent_t event = record->event;
 530               		.loc 1 58 0
 531 0022 85E0      		ldi r24,lo8(5)
 532               	.LVL34:
 533 0024 F801      		movw r30,r16
 534 0026 DE01      		movw r26,r28
 535 0028 1196      		adiw r26,1
 536               		0:
 537 002a 0190      		ld r0,Z+
 538 002c 0D92      		st X+,r0
 539 002e 8A95      		dec r24
 540 0030 01F4      		brne 0b
 541 0032 F801      		movw r30,r16
 542 0034 4081      		ld r20,Z
 543               	.LVL35:
 544 0036 3181      		ldd r19,Z+1
 545               	.LVL36:
 546 0038 F280      		ldd r15,Z+2
 547               	.LVL37:
  60:../../common/action.c ****     uint8_t tap_count = record->tap.count;
 548               		.loc 1 60 0
 549 003a 2581      		ldd r18,Z+5
 550 003c 2295      		swap r18
 551 003e 2F70      		andi r18,lo8(15)
 552               	.LVL38:
 553               	.LBB8:
 554               	.LBB9:
 555               		.file 2 "../../common/keyboard.h"
   1:../../common/keyboard.h **** /*
   2:../../common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/keyboard.h **** 
   4:../../common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/keyboard.h **** (at your option) any later version.
   8:../../common/keyboard.h **** 
   9:../../common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/keyboard.h **** GNU General Public License for more details.
  13:../../common/keyboard.h **** 
  14:../../common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/keyboard.h **** */
  17:../../common/keyboard.h **** 
  18:../../common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../common/keyboard.h **** #define KEYBOARD_H
  20:../../common/keyboard.h **** 
  21:../../common/keyboard.h **** #include <stdbool.h>
  22:../../common/keyboard.h **** #include <stdint.h>
  23:../../common/keyboard.h **** 
  24:../../common/keyboard.h **** 
  25:../../common/keyboard.h **** #ifdef __cplusplus
  26:../../common/keyboard.h **** extern "C" {
  27:../../common/keyboard.h **** #endif
  28:../../common/keyboard.h **** 
  29:../../common/keyboard.h **** /* key matrix position */
  30:../../common/keyboard.h **** typedef struct {
  31:../../common/keyboard.h ****     uint8_t col;
  32:../../common/keyboard.h ****     uint8_t row;
  33:../../common/keyboard.h **** } key_t;
  34:../../common/keyboard.h **** 
  35:../../common/keyboard.h **** /* key event */
  36:../../common/keyboard.h **** typedef struct {
  37:../../common/keyboard.h ****     key_t    key;
  38:../../common/keyboard.h ****     bool     pressed;
  39:../../common/keyboard.h ****     uint16_t time;
  40:../../common/keyboard.h **** } keyevent_t;
  41:../../common/keyboard.h **** 
  42:../../common/keyboard.h **** /* equivalent test of key_t */
  43:../../common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../common/keyboard.h **** 
  45:../../common/keyboard.h **** /* Rules for No Event:
  46:../../common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../common/keyboard.h ****  */
  49:../../common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 556               		.loc 2 49 0
 557 0040 8381      		ldd r24,Z+3
 558 0042 9481      		ldd r25,Z+4
 559 0044 892B      		or r24,r25
 560 0046 01F0      		breq .L105
 561 0048 3F3F      		cpi r19,lo8(-1)
 562 004a 01F4      		brne .L106
 563 004c 81E0      		ldi r24,lo8(1)
 564 004e 4F3F      		cpi r20,lo8(-1)
 565 0050 01F4      		brne .L106
 566 0052 00C0      		rjmp .L48
 567               	.LVL39:
 568               	.L105:
 569 0054 81E0      		ldi r24,lo8(1)
 570               	.LVL40:
 571 0056 00C0      		rjmp .L48
 572               	.L106:
 573 0058 80E0      		ldi r24,0
 574               	.L48:
 575               	.LBE9:
 576               	.LBE8:
  63:../../common/action.c ****     if (IS_NOEVENT(event)) { return; }
 577               		.loc 1 63 0
 578 005a 80FD      		sbrc r24,0
 579 005c 00C0      		rjmp .L47
  65:../../common/action.c ****     action_t action = layer_switch_get_action(event.key);
 580               		.loc 1 65 0
 581 005e 4983      		std Y+1,r20
 582 0060 3A83      		std Y+2,r19
 583 0062 8981      		ldd r24,Y+1
 584 0064 9A81      		ldd r25,Y+2
 585 0066 2F83      		std Y+7,r18
 586               	.LVL41:
 587 0068 0E94 0000 		call layer_switch_get_action
 588               	.LVL42:
  68:../../common/action.c ****     dprint(" layer_state: "); layer_debug();
 589               		.loc 1 68 0
 590 006c 9E83      		std Y+6,r25
 591 006e 8887      		std Y+8,r24
 592 0070 0E94 0000 		call layer_debug
 593               	.LVL43:
  69:../../common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 594               		.loc 1 69 0
 595 0074 0E94 0000 		call default_layer_debug
 596               	.LVL44:
  73:../../common/action.c ****     switch (action.kind.id) {
 597               		.loc 1 73 0
 598 0078 3E81      		ldd r19,Y+6
 599 007a E32F      		mov r30,r19
 600               	.LVL45:
 601 007c E295      		swap r30
 602 007e EF70      		andi r30,lo8(15)
 603 0080 F0E0      		ldi r31,0
 604 0082 E050      		subi r30,lo8(-(gs(.L53)))
 605 0084 F040      		sbci r31,hi8(-(gs(.L53)))
 606 0086 2F81      		ldd r18,Y+7
 607 0088 6885      		ldd r22,Y+8
 608 008a 0C94 0000 		jmp __tablejump2__
 609               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 610               		.p2align	1
 611               	.L53:
 612 0000 0000      		.word gs(.L52)
 613 0002 0000      		.word gs(.L52)
 614 0004 0000      		.word gs(.L54)
 615 0006 0000      		.word gs(.L54)
 616 0008 0000      		.word gs(.L47)
 617 000a 0000      		.word gs(.L47)
 618 000c 0000      		.word gs(.L47)
 619 000e 0000      		.word gs(.L47)
 620 0010 0000      		.word gs(.L55)
 621 0012 0000      		.word gs(.L47)
 622 0014 0000      		.word gs(.L56)
 623 0016 0000      		.word gs(.L56)
 624 0018 0000      		.word gs(.L57)
 625 001a 0000      		.word gs(.L47)
 626 001c 0000      		.word gs(.L47)
 627 001e 0000      		.word gs(.L58)
 628               		.section	.text.process_action
 629               	.L52:
 630               	.LBB10:
  78:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 631               		.loc 1 78 0
 632 008e 932F      		mov r25,r19
 633 0090 907F      		andi r25,lo8(-16)
 634 0092 132F      		mov r17,r19
 635 0094 1F70      		andi r17,lo8(15)
 636 0096 9923      		tst r25
 637 0098 01F0      		breq .L60
  78:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 638               		.loc 1 78 0 is_stmt 0 discriminator 2
 639 009a 1295      		swap r17
 640 009c 107F      		andi r17,lo8(-16)
 641               	.L60:
 642               	.LVL46:
  80:../../common/action.c ****                 if (event.pressed) {
 643               		.loc 1 80 0 is_stmt 1 discriminator 3
 644 009e FF20      		tst r15
 645 00a0 01F0      		breq .L61
  81:../../common/action.c ****                     if (mods) {
 646               		.loc 1 81 0
 647 00a2 1123      		tst r17
 648 00a4 01F4      		brne .+2
 649 00a6 00C0      		rjmp .L135
  82:../../common/action.c ****                         add_weak_mods(mods);
 650               		.loc 1 82 0
 651 00a8 812F      		mov r24,r17
 652 00aa 6887      		std Y+8,r22
 653 00ac 0E94 0000 		call add_weak_mods
 654               	.LVL47:
  83:../../common/action.c ****                         send_keyboard_report();
 655               		.loc 1 83 0
 656 00b0 0E94 0000 		call send_keyboard_report
 657               	.LVL48:
 658 00b4 6885      		ldd r22,Y+8
 659 00b6 00C0      		rjmp .L135
 660               	.L61:
 661               	.LVL49:
  87:../../common/action.c ****                     unregister_code(action.key.code);
 662               		.loc 1 87 0
 663 00b8 862F      		mov r24,r22
 664 00ba 0E94 0000 		call unregister_code
 665               	.LVL50:
  88:../../common/action.c ****                     if (mods) {
 666               		.loc 1 88 0
 667 00be 1123      		tst r17
 668 00c0 01F4      		brne .+2
 669 00c2 00C0      		rjmp .L47
  89:../../common/action.c ****                         del_weak_mods(mods);
 670               		.loc 1 89 0
 671 00c4 812F      		mov r24,r17
 672 00c6 0E94 0000 		call del_weak_mods
 673               	.LVL51:
 674               	/* epilogue start */
 675               	.LBE10:
 324:../../common/action.c **** }
 676               		.loc 1 324 0
 677 00ca 2896      		adiw r28,8
 678 00cc 0FB6      		in __tmp_reg__,__SREG__
 679 00ce F894      		cli
 680 00d0 DEBF      		out __SP_H__,r29
 681 00d2 0FBE      		out __SREG__,__tmp_reg__
 682 00d4 CDBF      		out __SP_L__,r28
 683 00d6 DF91      		pop r29
 684 00d8 CF91      		pop r28
 685 00da 1F91      		pop r17
 686               	.LVL52:
 687 00dc 0F91      		pop r16
 688               	.LVL53:
 689 00de FF90      		pop r15
 690               	.LVL54:
 691 00e0 EF90      		pop r14
 692 00e2 DF90      		pop r13
 693 00e4 CF90      		pop r12
 694               	.LBB11:
  90:../../common/action.c ****                         send_keyboard_report();
 695               		.loc 1 90 0
 696 00e6 0C94 0000 		jmp send_keyboard_report
 697               	.LVL55:
 698               	.L54:
 699               	.LBE11:
 700               	.LBB12:
  99:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 701               		.loc 1 99 0
 702 00ea 932F      		mov r25,r19
 703 00ec 907F      		andi r25,lo8(-16)
 704 00ee 832F      		mov r24,r19
 705 00f0 8F70      		andi r24,lo8(15)
 706 00f2 9032      		cpi r25,lo8(32)
 707 00f4 01F0      		breq .L65
  99:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 708               		.loc 1 99 0 is_stmt 0 discriminator 2
 709 00f6 8295      		swap r24
 710 00f8 807F      		andi r24,lo8(-16)
 711               	.L65:
 712               	.LVL56:
 101:../../common/action.c ****                 switch (action.layer_tap.code) {
 713               		.loc 1 101 0 is_stmt 1 discriminator 3
 714 00fa 6623      		tst r22
 715               	.LVL57:
 716 00fc 01F0      		breq .L67
 717 00fe 6130      		cpi r22,lo8(1)
 718 0100 01F0      		breq .L68
 719 0102 00C0      		rjmp .L139
 720               	.L67:
 105:../../common/action.c ****                         if (event.pressed) {
 721               		.loc 1 105 0
 722 0104 FF20      		tst r15
 723 0106 01F0      		breq .L69
 106:../../common/action.c ****                             if (tap_count == 0) {
 724               		.loc 1 106 0
 725 0108 2223      		tst r18
 726 010a 01F0      		breq .L134
 109:../../common/action.c ****                             else if (tap_count == 1) {
 727               		.loc 1 109 0
 728 010c 2130      		cpi r18,lo8(1)
 729 010e 01F4      		brne .L134
 730               	/* epilogue start */
 731               	.LBE12:
 324:../../common/action.c **** }
 732               		.loc 1 324 0
 733 0110 2896      		adiw r28,8
 734 0112 0FB6      		in __tmp_reg__,__SREG__
 735 0114 F894      		cli
 736 0116 DEBF      		out __SP_H__,r29
 737 0118 0FBE      		out __SREG__,__tmp_reg__
 738 011a CDBF      		out __SP_L__,r28
 739 011c DF91      		pop r29
 740 011e CF91      		pop r28
 741 0120 1F91      		pop r17
 742 0122 0F91      		pop r16
 743               	.LVL58:
 744 0124 FF90      		pop r15
 745               	.LVL59:
 746 0126 EF90      		pop r14
 747 0128 DF90      		pop r13
 748 012a CF90      		pop r12
 749               	.LBB13:
 111:../../common/action.c ****                                 set_oneshot_mods(mods);
 750               		.loc 1 111 0
 751 012c 0C94 0000 		jmp set_oneshot_mods
 752               	.LVL60:
 753               	.L69:
 117:../../common/action.c ****                             if (tap_count == 0) {
 754               		.loc 1 117 0
 755 0130 2223      		tst r18
 756 0132 01F0      		breq .L132
 121:../../common/action.c ****                             else if (tap_count == 1) {
 757               		.loc 1 121 0
 758 0134 2130      		cpi r18,lo8(1)
 759 0136 01F4      		brne .+2
 760 0138 00C0      		rjmp .L47
 761               	.L132:
 125:../../common/action.c ****                                 clear_oneshot_mods();
 762               		.loc 1 125 0
 763 013a 8E83      		std Y+6,r24
 764 013c 0E94 0000 		call clear_oneshot_mods
 765               	.LVL61:
 126:../../common/action.c ****                                 unregister_mods(mods);
 766               		.loc 1 126 0
 767 0140 8E81      		ldd r24,Y+6
 768 0142 00C0      		rjmp .L78
 769               	.LVL62:
 770               	.L68:
 132:../../common/action.c ****                         if (event.pressed) {
 771               		.loc 1 132 0
 772 0144 FF20      		tst r15
 773 0146 01F0      		breq .L74
 133:../../common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 774               		.loc 1 133 0
 775 0148 2630      		cpi r18,lo8(6)
 776 014a 00F0      		brlo .+2
 777 014c 00C0      		rjmp .L47
 778 014e 00C0      		rjmp .L134
 779               	.L74:
 137:../../common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 780               		.loc 1 137 0
 781 0150 2530      		cpi r18,lo8(5)
 782 0152 00F0      		brlo .+2
 783 0154 00C0      		rjmp .L47
 784 0156 00C0      		rjmp .L78
 785               	.L139:
 143:../../common/action.c ****                         if (event.pressed) {
 786               		.loc 1 143 0
 787 0158 FF20      		tst r15
 788 015a 01F0      		breq .L75
 144:../../common/action.c ****                             if (tap_count > 0) {
 789               		.loc 1 144 0
 790 015c 2223      		tst r18
 791 015e 01F0      		breq .L134
 145:../../common/action.c ****                                 if (record->tap.interrupted) {
 792               		.loc 1 145 0
 793 0160 F801      		movw r30,r16
 794 0162 9581      		ldd r25,Z+5
 795 0164 90FF      		sbrs r25,0
 796 0166 00C0      		rjmp .L135
 148:../../common/action.c ****                                     record->tap.count = 0;
 797               		.loc 1 148 0
 798 0168 9F70      		andi r25,lo8(15)
 799 016a 9583      		std Z+5,r25
 800               	.L134:
 801               	/* epilogue start */
 802               	.LBE13:
 324:../../common/action.c **** }
 803               		.loc 1 324 0
 804 016c 2896      		adiw r28,8
 805 016e 0FB6      		in __tmp_reg__,__SREG__
 806 0170 F894      		cli
 807 0172 DEBF      		out __SP_H__,r29
 808 0174 0FBE      		out __SREG__,__tmp_reg__
 809 0176 CDBF      		out __SP_L__,r28
 810 0178 DF91      		pop r29
 811 017a CF91      		pop r28
 812 017c 1F91      		pop r17
 813 017e 0F91      		pop r16
 814               	.LVL63:
 815 0180 FF90      		pop r15
 816               	.LVL64:
 817 0182 EF90      		pop r14
 818 0184 DF90      		pop r13
 819 0186 CF90      		pop r12
 820               	.LBB14:
 149:../../common/action.c ****                                     register_mods(mods);
 821               		.loc 1 149 0
 822 0188 0C94 0000 		jmp register_mods
 823               	.LVL65:
 824               	.L75:
 159:../../common/action.c ****                             if (tap_count > 0) {
 825               		.loc 1 159 0
 826 018c 2111      		cpse r18,__zero_reg__
 827 018e 00C0      		rjmp .L136
 828               	.LVL66:
 829               	.L78:
 830               	/* epilogue start */
 831               	.LBE14:
 324:../../common/action.c **** }
 832               		.loc 1 324 0
 833 0190 2896      		adiw r28,8
 834 0192 0FB6      		in __tmp_reg__,__SREG__
 835 0194 F894      		cli
 836 0196 DEBF      		out __SP_H__,r29
 837 0198 0FBE      		out __SREG__,__tmp_reg__
 838 019a CDBF      		out __SP_L__,r28
 839 019c DF91      		pop r29
 840 019e CF91      		pop r28
 841 01a0 1F91      		pop r17
 842 01a2 0F91      		pop r16
 843               	.LVL67:
 844 01a4 FF90      		pop r15
 845               	.LVL68:
 846 01a6 EF90      		pop r14
 847 01a8 DF90      		pop r13
 848 01aa CF90      		pop r12
 849               	.LBB15:
 164:../../common/action.c ****                                 unregister_mods(mods);
 850               		.loc 1 164 0
 851 01ac 0C94 0000 		jmp unregister_mods
 852               	.LVL69:
 853               	.L55:
 854               	.LBE15:
 207:../../common/action.c ****             if (action.layer_bitop.on == 0) {
 855               		.loc 1 207 0
 856 01b0 932F      		mov r25,r19
 857 01b2 9370      		andi r25,lo8(3)
 858 01b4 01F0      		breq .+2
 859 01b6 00C0      		rjmp .L79
 209:../../common/action.c ****                 if (!event.pressed) {
 860               		.loc 1 209 0
 861 01b8 F110      		cpse r15,__zero_reg__
 862 01ba 00C0      		rjmp .L47
 863               	.LVL70:
 864               	.LBB16:
 210:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 865               		.loc 1 210 0
 866 01bc 262F      		mov r18,r22
 867 01be 2295      		swap r18
 868 01c0 2695      		lsr r18
 869 01c2 2770      		andi r18,lo8(7)
 870 01c4 220F      		lsl r18
 871 01c6 220F      		lsl r18
 211:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 872               		.loc 1 211 0
 873 01c8 862F      		mov r24,r22
 874 01ca 8F70      		andi r24,lo8(15)
 875 01cc C82E      		mov r12,r24
 876 01ce D12C      		mov r13,__zero_reg__
 877 01d0 E12C      		mov r14,__zero_reg__
 878 01d2 F12C      		mov r15,__zero_reg__
 879 01d4 022E      		mov r0,r18
 880 01d6 00C0      		rjmp 2f
 881               		1:
 882 01d8 CC0C      		lsl r12
 883 01da DD1C      		rol r13
 884 01dc EE1C      		rol r14
 885 01de FF1C      		rol r15
 886               		2:
 887 01e0 0A94      		dec r0
 888 01e2 02F4      		brpl 1b
 889               	.LVL71:
 212:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 890               		.loc 1 212 0
 891 01e4 64FF      		sbrs r22,4
 892 01e6 00C0      		rjmp .L107
 212:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 893               		.loc 1 212 0 is_stmt 0 discriminator 1
 894 01e8 6FE0      		ldi r22,lo8(15)
 895 01ea 70E0      		ldi r23,0
 896 01ec 80E0      		ldi r24,0
 897 01ee 90E0      		ldi r25,0
 898               	.LVL72:
 899 01f0 00C0      		rjmp 2f
 900               		1:
 901 01f2 660F      		lsl r22
 902 01f4 771F      		rol r23
 903 01f6 881F      		rol r24
 904 01f8 991F      		rol r25
 905               		2:
 906 01fa 2A95      		dec r18
 907 01fc 02F4      		brpl 1b
 908 01fe 6095      		com r22
 909 0200 7095      		com r23
 910 0202 8095      		com r24
 911 0204 9095      		com r25
 912 0206 00C0      		rjmp .L80
 913               	.LVL73:
 914               	.L107:
 212:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 915               		.loc 1 212 0
 916 0208 60E0      		ldi r22,0
 917 020a 70E0      		ldi r23,0
 918 020c CB01      		movw r24,r22
 919               	.LVL74:
 920               	.L80:
 213:../../common/action.c ****                     switch (action.layer_bitop.op) {
 921               		.loc 1 213 0 is_stmt 1 discriminator 3
 922 020e 232F      		mov r18,r19
 923 0210 2695      		lsr r18
 924 0212 2695      		lsr r18
 925 0214 2370      		andi r18,lo8(3)
 926 0216 422F      		mov r20,r18
 927 0218 50E0      		ldi r21,0
 928 021a 4230      		cpi r20,2
 929 021c 5105      		cpc r21,__zero_reg__
 930 021e 01F0      		breq .L82
 931 0220 4330      		cpi r20,3
 932 0222 5105      		cpc r21,__zero_reg__
 933 0224 01F0      		breq .L83
 934 0226 6C29      		or r22,r12
 935 0228 7D29      		or r23,r13
 936 022a 8E29      		or r24,r14
 937 022c 9F29      		or r25,r15
 938               	.LVL75:
 939 022e 4130      		cpi r20,1
 940 0230 5105      		cpc r21,__zero_reg__
 941 0232 01F0      		breq .L137
 942               	/* epilogue start */
 943               	.LBE16:
 324:../../common/action.c **** }
 944               		.loc 1 324 0 discriminator 3
 945 0234 2896      		adiw r28,8
 946               	.LVL76:
 947 0236 0FB6      		in __tmp_reg__,__SREG__
 948 0238 F894      		cli
 949 023a DEBF      		out __SP_H__,r29
 950 023c 0FBE      		out __SREG__,__tmp_reg__
 951 023e CDBF      		out __SP_L__,r28
 952 0240 DF91      		pop r29
 953 0242 CF91      		pop r28
 954               	.LVL77:
 955 0244 1F91      		pop r17
 956 0246 0F91      		pop r16
 957               	.LVL78:
 958 0248 FF90      		pop r15
 959               	.LVL79:
 960 024a EF90      		pop r14
 961 024c DF90      		pop r13
 962 024e CF90      		pop r12
 963               	.LVL80:
 964               	.LBB17:
 214:../../common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 965               		.loc 1 214 0 discriminator 3
 966 0250 0C94 0000 		jmp default_layer_and
 967               	.LVL81:
 968               	.L82:
 216:../../common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 969               		.loc 1 216 0
 970 0254 6C29      		or r22,r12
 971 0256 7D29      		or r23,r13
 972 0258 8E29      		or r24,r14
 973 025a 9F29      		or r25,r15
 974               	.LVL82:
 975               	/* epilogue start */
 976               	.LBE17:
 324:../../common/action.c **** }
 977               		.loc 1 324 0
 978 025c 2896      		adiw r28,8
 979               	.LVL83:
 980 025e 0FB6      		in __tmp_reg__,__SREG__
 981 0260 F894      		cli
 982 0262 DEBF      		out __SP_H__,r29
 983 0264 0FBE      		out __SREG__,__tmp_reg__
 984 0266 CDBF      		out __SP_L__,r28
 985 0268 DF91      		pop r29
 986 026a CF91      		pop r28
 987               	.LVL84:
 988 026c 1F91      		pop r17
 989 026e 0F91      		pop r16
 990               	.LVL85:
 991 0270 FF90      		pop r15
 992               	.LVL86:
 993 0272 EF90      		pop r14
 994 0274 DF90      		pop r13
 995 0276 CF90      		pop r12
 996               	.LVL87:
 997               	.LBB18:
 216:../../common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 998               		.loc 1 216 0
 999 0278 0C94 0000 		jmp default_layer_xor
 1000               	.LVL88:
 1001               	.L83:
 217:../../common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1002               		.loc 1 217 0
 1003 027c 0E94 0000 		call default_layer_and
 1004               	.LVL89:
 1005 0280 C701      		movw r24,r14
 1006 0282 B601      		movw r22,r12
 1007               	.L137:
 1008               	/* epilogue start */
 1009               	.LBE18:
 324:../../common/action.c **** }
 1010               		.loc 1 324 0
 1011 0284 2896      		adiw r28,8
 1012 0286 0FB6      		in __tmp_reg__,__SREG__
 1013 0288 F894      		cli
 1014 028a DEBF      		out __SP_H__,r29
 1015 028c 0FBE      		out __SREG__,__tmp_reg__
 1016 028e CDBF      		out __SP_L__,r28
 1017 0290 DF91      		pop r29
 1018 0292 CF91      		pop r28
 1019 0294 1F91      		pop r17
 1020 0296 0F91      		pop r16
 1021               	.LVL90:
 1022 0298 FF90      		pop r15
 1023               	.LVL91:
 1024 029a EF90      		pop r14
 1025 029c DF90      		pop r13
 1026 029e CF90      		pop r12
 1027               	.LVL92:
 1028               	.LBB19:
 217:../../common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1029               		.loc 1 217 0
 1030 02a0 0C94 0000 		jmp default_layer_or
 1031               	.LVL93:
 1032               	.L79:
 1033               	.LBE19:
 222:../../common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1034               		.loc 1 222 0
 1035 02a4 FF20      		tst r15
 1036 02a6 01F0      		breq .L85
 222:../../common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1037               		.loc 1 222 0 is_stmt 0 discriminator 1
 1038 02a8 932F      		mov r25,r19
 1039 02aa 9170      		andi r25,lo8(1)
 1040 02ac 00C0      		rjmp .L86
 1041               	.L85:
 222:../../common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1042               		.loc 1 222 0 discriminator 2
 1043 02ae 9695      		lsr r25
 1044               	.L86:
 222:../../common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1045               		.loc 1 222 0 discriminator 3
 1046 02b0 9923      		tst r25
 1047 02b2 01F4      		brne .+2
 1048 02b4 00C0      		rjmp .L47
 1049               	.LVL94:
 1050               	.LBB20:
 224:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1051               		.loc 1 224 0 is_stmt 1
 1052 02b6 262F      		mov r18,r22
 1053 02b8 2295      		swap r18
 1054 02ba 2695      		lsr r18
 1055 02bc 2770      		andi r18,lo8(7)
 1056 02be 220F      		lsl r18
 1057 02c0 220F      		lsl r18
 225:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1058               		.loc 1 225 0
 1059 02c2 862F      		mov r24,r22
 1060 02c4 8F70      		andi r24,lo8(15)
 1061 02c6 C82E      		mov r12,r24
 1062 02c8 D12C      		mov r13,__zero_reg__
 1063 02ca E12C      		mov r14,__zero_reg__
 1064 02cc F12C      		mov r15,__zero_reg__
 1065 02ce 022E      		mov r0,r18
 1066 02d0 00C0      		rjmp 2f
 1067               		1:
 1068 02d2 CC0C      		lsl r12
 1069 02d4 DD1C      		rol r13
 1070 02d6 EE1C      		rol r14
 1071 02d8 FF1C      		rol r15
 1072               		2:
 1073 02da 0A94      		dec r0
 1074 02dc 02F4      		brpl 1b
 1075               	.LVL95:
 226:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1076               		.loc 1 226 0
 1077 02de 64FF      		sbrs r22,4
 1078 02e0 00C0      		rjmp .L108
 226:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1079               		.loc 1 226 0 is_stmt 0 discriminator 1
 1080 02e2 6FE0      		ldi r22,lo8(15)
 1081 02e4 70E0      		ldi r23,0
 1082 02e6 80E0      		ldi r24,0
 1083 02e8 90E0      		ldi r25,0
 1084               	.LVL96:
 1085 02ea 00C0      		rjmp 2f
 1086               		1:
 1087 02ec 660F      		lsl r22
 1088 02ee 771F      		rol r23
 1089 02f0 881F      		rol r24
 1090 02f2 991F      		rol r25
 1091               		2:
 1092 02f4 2A95      		dec r18
 1093 02f6 02F4      		brpl 1b
 1094 02f8 6095      		com r22
 1095 02fa 7095      		com r23
 1096 02fc 8095      		com r24
 1097 02fe 9095      		com r25
 1098 0300 00C0      		rjmp .L87
 1099               	.LVL97:
 1100               	.L108:
 226:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1101               		.loc 1 226 0
 1102 0302 60E0      		ldi r22,0
 1103 0304 70E0      		ldi r23,0
 1104 0306 CB01      		movw r24,r22
 1105               	.LVL98:
 1106               	.L87:
 227:../../common/action.c ****                     switch (action.layer_bitop.op) {
 1107               		.loc 1 227 0 is_stmt 1 discriminator 3
 1108 0308 232F      		mov r18,r19
 1109 030a 2695      		lsr r18
 1110 030c 2695      		lsr r18
 1111 030e 2370      		andi r18,lo8(3)
 1112 0310 422F      		mov r20,r18
 1113 0312 50E0      		ldi r21,0
 1114 0314 4230      		cpi r20,2
 1115 0316 5105      		cpc r21,__zero_reg__
 1116 0318 01F0      		breq .L89
 1117 031a 4330      		cpi r20,3
 1118 031c 5105      		cpc r21,__zero_reg__
 1119 031e 01F0      		breq .L90
 1120 0320 6C29      		or r22,r12
 1121 0322 7D29      		or r23,r13
 1122 0324 8E29      		or r24,r14
 1123 0326 9F29      		or r25,r15
 1124               	.LVL99:
 1125 0328 4130      		cpi r20,1
 1126 032a 5105      		cpc r21,__zero_reg__
 1127 032c 01F0      		breq .L138
 1128               	/* epilogue start */
 1129               	.LBE20:
 324:../../common/action.c **** }
 1130               		.loc 1 324 0 discriminator 3
 1131 032e 2896      		adiw r28,8
 1132               	.LVL100:
 1133 0330 0FB6      		in __tmp_reg__,__SREG__
 1134 0332 F894      		cli
 1135 0334 DEBF      		out __SP_H__,r29
 1136 0336 0FBE      		out __SREG__,__tmp_reg__
 1137 0338 CDBF      		out __SP_L__,r28
 1138 033a DF91      		pop r29
 1139 033c CF91      		pop r28
 1140               	.LVL101:
 1141 033e 1F91      		pop r17
 1142 0340 0F91      		pop r16
 1143               	.LVL102:
 1144 0342 FF90      		pop r15
 1145               	.LVL103:
 1146 0344 EF90      		pop r14
 1147 0346 DF90      		pop r13
 1148 0348 CF90      		pop r12
 1149               	.LVL104:
 1150               	.LBB21:
 228:../../common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1151               		.loc 1 228 0 discriminator 3
 1152 034a 0C94 0000 		jmp layer_and
 1153               	.LVL105:
 1154               	.L89:
 230:../../common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1155               		.loc 1 230 0
 1156 034e 6C29      		or r22,r12
 1157 0350 7D29      		or r23,r13
 1158 0352 8E29      		or r24,r14
 1159 0354 9F29      		or r25,r15
 1160               	.LVL106:
 1161               	/* epilogue start */
 1162               	.LBE21:
 324:../../common/action.c **** }
 1163               		.loc 1 324 0
 1164 0356 2896      		adiw r28,8
 1165               	.LVL107:
 1166 0358 0FB6      		in __tmp_reg__,__SREG__
 1167 035a F894      		cli
 1168 035c DEBF      		out __SP_H__,r29
 1169 035e 0FBE      		out __SREG__,__tmp_reg__
 1170 0360 CDBF      		out __SP_L__,r28
 1171 0362 DF91      		pop r29
 1172 0364 CF91      		pop r28
 1173               	.LVL108:
 1174 0366 1F91      		pop r17
 1175 0368 0F91      		pop r16
 1176               	.LVL109:
 1177 036a FF90      		pop r15
 1178               	.LVL110:
 1179 036c EF90      		pop r14
 1180 036e DF90      		pop r13
 1181 0370 CF90      		pop r12
 1182               	.LVL111:
 1183               	.LBB22:
 230:../../common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1184               		.loc 1 230 0
 1185 0372 0C94 0000 		jmp layer_xor
 1186               	.LVL112:
 1187               	.L90:
 231:../../common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1188               		.loc 1 231 0
 1189 0376 0E94 0000 		call layer_and
 1190               	.LVL113:
 1191 037a C701      		movw r24,r14
 1192 037c B601      		movw r22,r12
 1193               	.L138:
 1194               	/* epilogue start */
 1195               	.LBE22:
 324:../../common/action.c **** }
 1196               		.loc 1 324 0
 1197 037e 2896      		adiw r28,8
 1198 0380 0FB6      		in __tmp_reg__,__SREG__
 1199 0382 F894      		cli
 1200 0384 DEBF      		out __SP_H__,r29
 1201 0386 0FBE      		out __SREG__,__tmp_reg__
 1202 0388 CDBF      		out __SP_L__,r28
 1203 038a DF91      		pop r29
 1204 038c CF91      		pop r28
 1205 038e 1F91      		pop r17
 1206 0390 0F91      		pop r16
 1207               	.LVL114:
 1208 0392 FF90      		pop r15
 1209               	.LVL115:
 1210 0394 EF90      		pop r14
 1211 0396 DF90      		pop r13
 1212 0398 CF90      		pop r12
 1213               	.LVL116:
 1214               	.LBB23:
 231:../../common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1215               		.loc 1 231 0
 1216 039a 0C94 0000 		jmp layer_or
 1217               	.LVL117:
 1218               	.L56:
 1219               	.LBE23:
 239:../../common/action.c ****             switch (action.layer_tap.code) {
 1220               		.loc 1 239 0
 1221 039e 613F      		cpi r22,lo8(-15)
 1222 03a0 01F0      		breq .L93
 1223               	.LVL118:
 1224 03a2 00F4      		brsh .L94
 1225 03a4 603F      		cpi r22,lo8(-16)
 1226 03a6 01F0      		breq .L95
 1227 03a8 00C0      		rjmp .L92
 1228               	.L94:
 1229 03aa 623F      		cpi r22,lo8(-14)
 1230 03ac 01F0      		breq .L96
 1231 03ae 633F      		cpi r22,lo8(-13)
 1232 03b0 01F4      		brne .+2
 1233 03b2 00C0      		rjmp .L97
 1234 03b4 00C0      		rjmp .L92
 1235               	.L95:
 242:../../common/action.c ****                     if (event.pressed) {
 1236               		.loc 1 242 0
 1237 03b6 FF20      		tst r15
 1238 03b8 01F0      		breq .L98
 243:../../common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1239               		.loc 1 243 0
 1240 03ba 2530      		cpi r18,lo8(5)
 1241 03bc 00F0      		brlo .+2
 1242 03be 00C0      		rjmp .L47
 1243               	.L99:
 244:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 1244               		.loc 1 244 0
 1245 03c0 832F      		mov r24,r19
 1246 03c2 8F71      		andi r24,lo8(31)
 1247               	/* epilogue start */
 324:../../common/action.c **** }
 1248               		.loc 1 324 0
 1249 03c4 2896      		adiw r28,8
 1250 03c6 0FB6      		in __tmp_reg__,__SREG__
 1251 03c8 F894      		cli
 1252 03ca DEBF      		out __SP_H__,r29
 1253 03cc 0FBE      		out __SREG__,__tmp_reg__
 1254 03ce CDBF      		out __SP_L__,r28
 1255 03d0 DF91      		pop r29
 1256 03d2 CF91      		pop r28
 1257 03d4 1F91      		pop r17
 1258 03d6 0F91      		pop r16
 1259               	.LVL119:
 1260 03d8 FF90      		pop r15
 1261               	.LVL120:
 1262 03da EF90      		pop r14
 1263 03dc DF90      		pop r13
 1264 03de CF90      		pop r12
 244:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 1265               		.loc 1 244 0
 1266 03e0 0C94 0000 		jmp layer_invert
 1267               	.LVL121:
 1268               	.L98:
 247:../../common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1269               		.loc 1 247 0
 1270 03e4 2630      		cpi r18,lo8(6)
 1271 03e6 00F0      		brlo .+2
 1272 03e8 00C0      		rjmp .L47
 1273 03ea 00C0      		rjmp .L99
 1274               	.L93:
 253:../../common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1275               		.loc 1 253 0
 1276 03ec FF20      		tst r15
 1277 03ee 01F0      		breq .L100
 1278               	.L101:
 253:../../common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1279               		.loc 1 253 0 is_stmt 0 discriminator 1
 1280 03f0 832F      		mov r24,r19
 1281 03f2 8F71      		andi r24,lo8(31)
 1282               	/* epilogue start */
 324:../../common/action.c **** }
 1283               		.loc 1 324 0 is_stmt 1 discriminator 1
 1284 03f4 2896      		adiw r28,8
 1285 03f6 0FB6      		in __tmp_reg__,__SREG__
 1286 03f8 F894      		cli
 1287 03fa DEBF      		out __SP_H__,r29
 1288 03fc 0FBE      		out __SREG__,__tmp_reg__
 1289 03fe CDBF      		out __SP_L__,r28
 1290 0400 DF91      		pop r29
 1291 0402 CF91      		pop r28
 1292 0404 1F91      		pop r17
 1293 0406 0F91      		pop r16
 1294               	.LVL122:
 1295 0408 FF90      		pop r15
 1296               	.LVL123:
 1297 040a EF90      		pop r14
 1298 040c DF90      		pop r13
 1299 040e CF90      		pop r12
 253:../../common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1300               		.loc 1 253 0 discriminator 1
 1301 0410 0C94 0000 		jmp layer_on
 1302               	.LVL124:
 1303               	.L96:
 257:../../common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 1304               		.loc 1 257 0
 1305 0414 FF20      		tst r15
 1306 0416 01F0      		breq .L101
 1307               	.L100:
 254:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 1308               		.loc 1 254 0
 1309 0418 832F      		mov r24,r19
 1310 041a 8F71      		andi r24,lo8(31)
 1311               	/* epilogue start */
 324:../../common/action.c **** }
 1312               		.loc 1 324 0
 1313 041c 2896      		adiw r28,8
 1314 041e 0FB6      		in __tmp_reg__,__SREG__
 1315 0420 F894      		cli
 1316 0422 DEBF      		out __SP_H__,r29
 1317 0424 0FBE      		out __SREG__,__tmp_reg__
 1318 0426 CDBF      		out __SP_L__,r28
 1319 0428 DF91      		pop r29
 1320 042a CF91      		pop r28
 1321 042c 1F91      		pop r17
 1322 042e 0F91      		pop r16
 1323               	.LVL125:
 1324 0430 FF90      		pop r15
 1325               	.LVL126:
 1326 0432 EF90      		pop r14
 1327 0434 DF90      		pop r13
 1328 0436 CF90      		pop r12
 254:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 1329               		.loc 1 254 0
 1330 0438 0C94 0000 		jmp layer_off
 1331               	.LVL127:
 1332               	.L97:
 261:../../common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1333               		.loc 1 261 0
 1334 043c FF20      		tst r15
 1335 043e 01F0      		breq .L102
 261:../../common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1336               		.loc 1 261 0 is_stmt 0 discriminator 1
 1337 0440 832F      		mov r24,r19
 1338 0442 8F71      		andi r24,lo8(31)
 1339               	/* epilogue start */
 324:../../common/action.c **** }
 1340               		.loc 1 324 0 is_stmt 1 discriminator 1
 1341 0444 2896      		adiw r28,8
 1342 0446 0FB6      		in __tmp_reg__,__SREG__
 1343 0448 F894      		cli
 1344 044a DEBF      		out __SP_H__,r29
 1345 044c 0FBE      		out __SREG__,__tmp_reg__
 1346 044e CDBF      		out __SP_L__,r28
 1347 0450 DF91      		pop r29
 1348 0452 CF91      		pop r28
 1349 0454 1F91      		pop r17
 1350 0456 0F91      		pop r16
 1351               	.LVL128:
 1352 0458 FF90      		pop r15
 1353               	.LVL129:
 1354 045a EF90      		pop r14
 1355 045c DF90      		pop r13
 1356 045e CF90      		pop r12
 261:../../common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1357               		.loc 1 261 0 discriminator 1
 1358 0460 0C94 0000 		jmp layer_move
 1359               	.LVL130:
 1360               	.L102:
 1361               	/* epilogue start */
 324:../../common/action.c **** }
 1362               		.loc 1 324 0
 1363 0464 2896      		adiw r28,8
 1364 0466 0FB6      		in __tmp_reg__,__SREG__
 1365 0468 F894      		cli
 1366 046a DEBF      		out __SP_H__,r29
 1367 046c 0FBE      		out __SREG__,__tmp_reg__
 1368 046e CDBF      		out __SP_L__,r28
 1369 0470 DF91      		pop r29
 1370 0472 CF91      		pop r28
 1371 0474 1F91      		pop r17
 1372 0476 0F91      		pop r16
 1373               	.LVL131:
 1374 0478 FF90      		pop r15
 1375               	.LVL132:
 1376 047a EF90      		pop r14
 1377 047c DF90      		pop r13
 1378 047e CF90      		pop r12
 262:../../common/action.c ****                                     layer_clear();
 1379               		.loc 1 262 0
 1380 0480 0C94 0000 		jmp layer_clear
 1381               	.LVL133:
 1382               	.L92:
 266:../../common/action.c ****                     if (event.pressed) {
 1383               		.loc 1 266 0
 1384 0484 FF20      		tst r15
 1385 0486 01F0      		breq .L103
 267:../../common/action.c ****                         if (tap_count > 0) {
 1386               		.loc 1 267 0
 1387 0488 2223      		tst r18
 1388 048a 01F4      		brne .+2
 1389 048c 00C0      		rjmp .L101
 1390               	.L135:
 269:../../common/action.c ****                             register_code(action.layer_tap.code);
 1391               		.loc 1 269 0
 1392 048e 862F      		mov r24,r22
 1393               	/* epilogue start */
 324:../../common/action.c **** }
 1394               		.loc 1 324 0
 1395 0490 2896      		adiw r28,8
 1396 0492 0FB6      		in __tmp_reg__,__SREG__
 1397 0494 F894      		cli
 1398 0496 DEBF      		out __SP_H__,r29
 1399 0498 0FBE      		out __SREG__,__tmp_reg__
 1400 049a CDBF      		out __SP_L__,r28
 1401 049c DF91      		pop r29
 1402 049e CF91      		pop r28
 1403 04a0 1F91      		pop r17
 1404 04a2 0F91      		pop r16
 1405               	.LVL134:
 1406 04a4 FF90      		pop r15
 1407               	.LVL135:
 1408 04a6 EF90      		pop r14
 1409 04a8 DF90      		pop r13
 1410 04aa CF90      		pop r12
 269:../../common/action.c ****                             register_code(action.layer_tap.code);
 1411               		.loc 1 269 0
 1412 04ac 0C94 0000 		jmp register_code
 1413               	.LVL136:
 1414               	.L103:
 275:../../common/action.c ****                         if (tap_count > 0) {
 1415               		.loc 1 275 0
 1416 04b0 2223      		tst r18
 1417 04b2 01F4      		brne .+2
 1418 04b4 00C0      		rjmp .L100
 1419               	.L136:
 277:../../common/action.c ****                             unregister_code(action.layer_tap.code);
 1420               		.loc 1 277 0
 1421 04b6 862F      		mov r24,r22
 1422               	/* epilogue start */
 324:../../common/action.c **** }
 1423               		.loc 1 324 0
 1424 04b8 2896      		adiw r28,8
 1425 04ba 0FB6      		in __tmp_reg__,__SREG__
 1426 04bc F894      		cli
 1427 04be DEBF      		out __SP_H__,r29
 1428 04c0 0FBE      		out __SREG__,__tmp_reg__
 1429 04c2 CDBF      		out __SP_L__,r28
 1430 04c4 DF91      		pop r29
 1431 04c6 CF91      		pop r28
 1432 04c8 1F91      		pop r17
 1433 04ca 0F91      		pop r16
 1434               	.LVL137:
 1435 04cc FF90      		pop r15
 1436               	.LVL138:
 1437 04ce EF90      		pop r14
 1438 04d0 DF90      		pop r13
 1439 04d2 CF90      		pop r12
 277:../../common/action.c ****                             unregister_code(action.layer_tap.code);
 1440               		.loc 1 277 0
 1441 04d4 0C94 0000 		jmp unregister_code
 1442               	.LVL139:
 1443               	.L57:
 291:../../common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1444               		.loc 1 291 0
 1445 04d8 432F      		mov r20,r19
 1446 04da 4F70      		andi r20,lo8(15)
 1447 04dc C801      		movw r24,r16
 1448 04de 0E94 0000 		call action_get_macro
 1449               	.LVL140:
 1450               	/* epilogue start */
 324:../../common/action.c **** }
 1451               		.loc 1 324 0
 1452 04e2 2896      		adiw r28,8
 1453 04e4 0FB6      		in __tmp_reg__,__SREG__
 1454 04e6 F894      		cli
 1455 04e8 DEBF      		out __SP_H__,r29
 1456 04ea 0FBE      		out __SREG__,__tmp_reg__
 1457 04ec CDBF      		out __SP_L__,r28
 1458 04ee DF91      		pop r29
 1459 04f0 CF91      		pop r28
 1460 04f2 1F91      		pop r17
 1461 04f4 0F91      		pop r16
 1462               	.LVL141:
 1463 04f6 FF90      		pop r15
 1464               	.LVL142:
 1465 04f8 EF90      		pop r14
 1466 04fa DF90      		pop r13
 1467 04fc CF90      		pop r12
 291:../../common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1468               		.loc 1 291 0
 1469 04fe 0C94 0000 		jmp action_macro_play
 1470               	.LVL143:
 1471               	.L58:
 318:../../common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1472               		.loc 1 318 0
 1473 0502 432F      		mov r20,r19
 1474 0504 4F70      		andi r20,lo8(15)
 1475 0506 C801      		movw r24,r16
 1476               	/* epilogue start */
 324:../../common/action.c **** }
 1477               		.loc 1 324 0
 1478 0508 2896      		adiw r28,8
 1479 050a 0FB6      		in __tmp_reg__,__SREG__
 1480 050c F894      		cli
 1481 050e DEBF      		out __SP_H__,r29
 1482 0510 0FBE      		out __SREG__,__tmp_reg__
 1483 0512 CDBF      		out __SP_L__,r28
 1484 0514 DF91      		pop r29
 1485 0516 CF91      		pop r28
 1486 0518 1F91      		pop r17
 1487 051a 0F91      		pop r16
 1488               	.LVL144:
 1489 051c FF90      		pop r15
 1490               	.LVL145:
 1491 051e EF90      		pop r14
 1492 0520 DF90      		pop r13
 1493 0522 CF90      		pop r12
 318:../../common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1494               		.loc 1 318 0
 1495 0524 0C94 0000 		jmp action_function
 1496               	.LVL146:
 1497               	.L47:
 1498               	/* epilogue start */
 324:../../common/action.c **** }
 1499               		.loc 1 324 0
 1500 0528 2896      		adiw r28,8
 1501 052a 0FB6      		in __tmp_reg__,__SREG__
 1502 052c F894      		cli
 1503 052e DEBF      		out __SP_H__,r29
 1504 0530 0FBE      		out __SREG__,__tmp_reg__
 1505 0532 CDBF      		out __SP_L__,r28
 1506 0534 DF91      		pop r29
 1507 0536 CF91      		pop r28
 1508 0538 1F91      		pop r17
 1509 053a 0F91      		pop r16
 1510               	.LVL147:
 1511 053c FF90      		pop r15
 1512               	.LVL148:
 1513 053e EF90      		pop r14
 1514 0540 DF90      		pop r13
 1515 0542 CF90      		pop r12
 1516 0544 0895      		ret
 1517               		.cfi_endproc
 1518               	.LFE103:
 1520               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1521               	.global	clear_keyboard_but_mods
 1523               	clear_keyboard_but_mods:
 1524               	.LFB109:
 475:../../common/action.c ****     }
 476:../../common/action.c **** }
 477:../../common/action.c **** 
 478:../../common/action.c **** void clear_keyboard(void)
 479:../../common/action.c **** {
 480:../../common/action.c ****     clear_mods();
 481:../../common/action.c ****     clear_keyboard_but_mods();
 482:../../common/action.c **** }
 483:../../common/action.c **** 
 484:../../common/action.c **** void clear_keyboard_but_mods(void)
 485:../../common/action.c **** {
 1525               		.loc 1 485 0
 1526               		.cfi_startproc
 1527               	/* prologue: function */
 1528               	/* frame size = 0 */
 1529               	/* stack size = 0 */
 1530               	.L__stack_usage = 0
 486:../../common/action.c ****     clear_weak_mods();
 1531               		.loc 1 486 0
 1532 0000 0E94 0000 		call clear_weak_mods
 1533               	.LVL149:
 487:../../common/action.c ****     clear_keys();
 1534               		.loc 1 487 0
 1535 0004 0E94 0000 		call clear_keys
 1536               	.LVL150:
 488:../../common/action.c ****     send_keyboard_report();
 1537               		.loc 1 488 0
 1538 0008 0C94 0000 		jmp send_keyboard_report
 1539               	.LVL151:
 1540               		.cfi_endproc
 1541               	.LFE109:
 1543               		.section	.text.clear_keyboard,"ax",@progbits
 1544               	.global	clear_keyboard
 1546               	clear_keyboard:
 1547               	.LFB108:
 479:../../common/action.c **** {
 1548               		.loc 1 479 0
 1549               		.cfi_startproc
 1550               	/* prologue: function */
 1551               	/* frame size = 0 */
 1552               	/* stack size = 0 */
 1553               	.L__stack_usage = 0
 480:../../common/action.c ****     clear_mods();
 1554               		.loc 1 480 0
 1555 0000 0E94 0000 		call clear_mods
 1556               	.LVL152:
 481:../../common/action.c ****     clear_keyboard_but_mods();
 1557               		.loc 1 481 0
 1558 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1559               	.LVL153:
 1560               		.cfi_endproc
 1561               	.LFE108:
 1563               		.section	.text.is_tap_key,"ax",@progbits
 1564               	.global	is_tap_key
 1566               	is_tap_key:
 1567               	.LFB110:
 489:../../common/action.c **** #ifdef MOUSEKEY_ENABLE
 490:../../common/action.c ****     mousekey_clear();
 491:../../common/action.c ****     mousekey_send();
 492:../../common/action.c **** #endif
 493:../../common/action.c **** #ifdef EXTRAKEY_ENABLE
 494:../../common/action.c ****     host_system_send(0);
 495:../../common/action.c ****     host_consumer_send(0);
 496:../../common/action.c **** #endif
 497:../../common/action.c **** }
 498:../../common/action.c **** 
 499:../../common/action.c **** bool is_tap_key(key_t key)
 500:../../common/action.c **** {
 1568               		.loc 1 500 0
 1569               		.cfi_startproc
 1570               	.LVL154:
 1571               	/* prologue: function */
 1572               	/* frame size = 0 */
 1573               	/* stack size = 0 */
 1574               	.L__stack_usage = 0
 501:../../common/action.c ****     action_t action = layer_switch_get_action(key);
 1575               		.loc 1 501 0
 1576 0000 0E94 0000 		call layer_switch_get_action
 1577               	.LVL155:
 502:../../common/action.c **** 
 503:../../common/action.c ****     switch (action.kind.id) {
 1578               		.loc 1 503 0
 1579 0004 292F      		mov r18,r25
 1580 0006 2295      		swap r18
 1581 0008 2F70      		andi r18,lo8(15)
 1582 000a 30E0      		ldi r19,0
 1583 000c 2C30      		cpi r18,12
 1584 000e 3105      		cpc r19,__zero_reg__
 1585 0010 04F4      		brge .L144
 1586 0012 2A30      		cpi r18,10
 1587 0014 3105      		cpc r19,__zero_reg__
 1588 0016 04F4      		brge .L145
 1589 0018 2250      		subi r18,2
 1590 001a 3109      		sbc r19,__zero_reg__
 1591 001c 2230      		cpi r18,2
 1592 001e 3105      		cpc r19,__zero_reg__
 1593 0020 00F4      		brsh .L147
 1594 0022 00C0      		rjmp .L145
 1595               	.L144:
 1596 0024 2C30      		cpi r18,12
 1597 0026 3105      		cpc r19,__zero_reg__
 1598 0028 01F0      		breq .L146
 1599 002a 2F30      		cpi r18,15
 1600 002c 3105      		cpc r19,__zero_reg__
 1601 002e 01F0      		breq .L146
 1602 0030 00C0      		rjmp .L147
 1603               	.L145:
 504:../../common/action.c ****         case ACT_LMODS_TAP:
 505:../../common/action.c ****         case ACT_RMODS_TAP:
 506:../../common/action.c ****         case ACT_LAYER_TAP:
 507:../../common/action.c ****         case ACT_LAYER_TAP_EXT:
 508:../../common/action.c ****             return true;
 1604               		.loc 1 508 0
 1605 0032 81E0      		ldi r24,lo8(1)
 1606 0034 0895      		ret
 1607               	.L146:
 509:../../common/action.c ****         case ACT_MACRO:
 510:../../common/action.c ****         case ACT_FUNCTION:
 511:../../common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1608               		.loc 1 511 0
 1609 0036 93FB      		bst r25,3
 1610 0038 8827      		clr r24
 1611 003a 80F9      		bld r24,0
 1612 003c 0895      		ret
 1613               	.L147:
 512:../../common/action.c ****             return false;
 513:../../common/action.c ****     }
 514:../../common/action.c ****     return false;
 1614               		.loc 1 514 0
 1615 003e 80E0      		ldi r24,0
 515:../../common/action.c **** }
 1616               		.loc 1 515 0
 1617 0040 0895      		ret
 1618               		.cfi_endproc
 1619               	.LFE110:
 1621               		.section	.text.debug_event,"ax",@progbits
 1622               	.global	debug_event
 1624               	debug_event:
 1625               	.LFB111:
 516:../../common/action.c **** 
 517:../../common/action.c **** 
 518:../../common/action.c **** /*
 519:../../common/action.c ****  * debug print
 520:../../common/action.c ****  */
 521:../../common/action.c **** void debug_event(keyevent_t event)
 522:../../common/action.c **** {
 1626               		.loc 1 522 0
 1627               		.cfi_startproc
 1628 0000 CF93      		push r28
 1629               	.LCFI15:
 1630               		.cfi_def_cfa_offset 3
 1631               		.cfi_offset 28, -2
 1632 0002 DF93      		push r29
 1633               	.LCFI16:
 1634               		.cfi_def_cfa_offset 4
 1635               		.cfi_offset 29, -3
 1636 0004 00D0      		rcall .
 1637 0006 00D0      		rcall .
 1638 0008 1F92      		push __zero_reg__
 1639               	.LCFI17:
 1640               		.cfi_def_cfa_offset 9
 1641 000a CDB7      		in r28,__SP_L__
 1642 000c DEB7      		in r29,__SP_H__
 1643               	.LCFI18:
 1644               		.cfi_def_cfa_register 28
 1645               	/* prologue: function */
 1646               	/* frame size = 5 */
 1647               	/* stack size = 7 */
 1648               	.L__stack_usage = 7
 1649               	/* epilogue start */
 523:../../common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 524:../../common/action.c **** }
 1650               		.loc 1 524 0
 1651 000e 0F90      		pop __tmp_reg__
 1652 0010 0F90      		pop __tmp_reg__
 1653 0012 0F90      		pop __tmp_reg__
 1654 0014 0F90      		pop __tmp_reg__
 1655 0016 0F90      		pop __tmp_reg__
 1656 0018 DF91      		pop r29
 1657 001a CF91      		pop r28
 1658 001c 0895      		ret
 1659               		.cfi_endproc
 1660               	.LFE111:
 1662               		.section	.text.debug_record,"ax",@progbits
 1663               	.global	debug_record
 1665               	debug_record:
 1666               	.LFB112:
 525:../../common/action.c **** 
 526:../../common/action.c **** void debug_record(keyrecord_t record)
 527:../../common/action.c **** {
 1667               		.loc 1 527 0
 1668               		.cfi_startproc
 1669 0000 CF93      		push r28
 1670               	.LCFI19:
 1671               		.cfi_def_cfa_offset 3
 1672               		.cfi_offset 28, -2
 1673 0002 DF93      		push r29
 1674               	.LCFI20:
 1675               		.cfi_def_cfa_offset 4
 1676               		.cfi_offset 29, -3
 1677 0004 00D0      		rcall .
 1678 0006 00D0      		rcall .
 1679 0008 00D0      		rcall .
 1680               	.LCFI21:
 1681               		.cfi_def_cfa_offset 10
 1682 000a CDB7      		in r28,__SP_L__
 1683 000c DEB7      		in r29,__SP_H__
 1684               	.LCFI22:
 1685               		.cfi_def_cfa_register 28
 1686               	/* prologue: function */
 1687               	/* frame size = 6 */
 1688               	/* stack size = 8 */
 1689               	.L__stack_usage = 8
 1690               	/* epilogue start */
 528:../../common/action.c ****     debug_event(record.event);
 529:../../common/action.c **** #ifndef NO_ACTION_TAPPING
 530:../../common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 531:../../common/action.c **** #endif
 532:../../common/action.c **** }
 1691               		.loc 1 532 0
 1692 000e 2696      		adiw r28,6
 1693 0010 0FB6      		in __tmp_reg__,__SREG__
 1694 0012 F894      		cli
 1695 0014 DEBF      		out __SP_H__,r29
 1696 0016 0FBE      		out __SREG__,__tmp_reg__
 1697 0018 CDBF      		out __SP_L__,r28
 1698 001a DF91      		pop r29
 1699 001c CF91      		pop r28
 1700 001e 0895      		ret
 1701               		.cfi_endproc
 1702               	.LFE112:
 1704               		.section	.text.debug_action,"ax",@progbits
 1705               	.global	debug_action
 1707               	debug_action:
 1708               	.LFB113:
 533:../../common/action.c **** 
 534:../../common/action.c **** void debug_action(action_t action)
 535:../../common/action.c **** {
 1709               		.loc 1 535 0
 1710               		.cfi_startproc
 1711               	.LVL156:
 1712               	/* prologue: function */
 1713               	/* frame size = 0 */
 1714               	/* stack size = 0 */
 1715               	.L__stack_usage = 0
 1716 0000 0895      		ret
 1717               		.cfi_endproc
 1718               	.LFE113:
 1720               		.comm	debug_config,1,1
 1721               		.comm	mk_wheel_time_to_max,1,1
 1722               		.comm	mk_wheel_max_speed,1,1
 1723               		.comm	mk_time_to_max,1,1
 1724               		.comm	mk_max_speed,1,1
 1725               		.comm	mk_interval,1,1
 1726               		.comm	mk_delay,1,1
 1727               		.text
 1728               	.Letext0:
 1729               		.file 3 "/usr/lib/avr/include/stdint.h"
 1730               		.file 4 "../../common/keycode.h"
 1731               		.file 5 "../../common/action_code.h"
 1732               		.file 6 "../../common/action_macro.h"
 1733               		.file 7 "../../common/action.h"
 1734               		.file 8 "../../common/debug_config.h"
 1735               		.file 9 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 1736               		.file 10 "../../common/mousekey.h"
 1737               		.file 11 "../../common/action_tapping.h"
 1738               		.file 12 "../../common/action_util.h"
 1739               		.file 13 "../../common/host.h"
 1740               		.file 14 "../../common/action_layer.h"
 1741               		.file 15 "../../common/command.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/ccsKGL6W.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccsKGL6W.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccsKGL6W.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccsKGL6W.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccsKGL6W.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccsKGL6W.s:13     .text.action_exec:0000000000000000 action_exec
     /tmp/ccsKGL6W.s:93     .text.register_code:0000000000000000 register_code
     /tmp/ccsKGL6W.s:347    .text.unregister_code:0000000000000000 unregister_code
     /tmp/ccsKGL6W.s:424    .text.register_mods:0000000000000000 register_mods
     /tmp/ccsKGL6W.s:450    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/ccsKGL6W.s:476    .text.process_action:0000000000000000 process_action
     /tmp/ccsKGL6W.s:1523   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/ccsKGL6W.s:1546   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/ccsKGL6W.s:1566   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/ccsKGL6W.s:1624   .text.debug_event:0000000000000000 debug_event
     /tmp/ccsKGL6W.s:1665   .text.debug_record:0000000000000000 debug_record
     /tmp/ccsKGL6W.s:1707   .text.debug_action:0000000000000000 debug_action
                            *COM*:0000000000000001 debug_config
                            *COM*:0000000000000001 mk_wheel_time_to_max
                            *COM*:0000000000000001 mk_wheel_max_speed
                            *COM*:0000000000000001 mk_time_to_max
                            *COM*:0000000000000001 mk_max_speed
                            *COM*:0000000000000001 mk_interval
                            *COM*:0000000000000001 mk_delay

UNDEFINED SYMBOLS
action_tapping_process
command_proc
add_key
add_mods
send_keyboard_report
host_system_send
host_consumer_send
del_key
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_invert
layer_on
layer_off
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
clear_mods
__do_clear_bss
