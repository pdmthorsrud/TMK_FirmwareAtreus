   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB102:
  15               		.file 1 "../../common/action.c"
   1:../../common/action.c **** /*
   2:../../common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/action.c **** 
   4:../../common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/action.c **** (at your option) any later version.
   8:../../common/action.c **** 
   9:../../common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/action.c **** GNU General Public License for more details.
  13:../../common/action.c **** 
  14:../../common/action.c **** You should have received a copy of the GNU General Public License
  15:../../common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/action.c **** */
  17:../../common/action.c **** #include "host.h"
  18:../../common/action.c **** #include "keycode.h"
  19:../../common/action.c **** #include "keyboard.h"
  20:../../common/action.c **** #include "mousekey.h"
  21:../../common/action.c **** #include "command.h"
  22:../../common/action.c **** #include "led.h"
  23:../../common/action.c **** #include "backlight.h"
  24:../../common/action.c **** #include "action_layer.h"
  25:../../common/action.c **** #include "action_tapping.h"
  26:../../common/action.c **** #include "action_macro.h"
  27:../../common/action.c **** #include "action_util.h"
  28:../../common/action.c **** #include "action.h"
  29:../../common/action.c **** 
  30:../../common/action.c **** #ifdef DEBUG_ACTION
  31:../../common/action.c **** #include "debug.h"
  32:../../common/action.c **** #else
  33:../../common/action.c **** #include "nodebug.h"
  34:../../common/action.c **** #endif
  35:../../common/action.c **** 
  36:../../common/action.c **** 
  37:../../common/action.c **** void action_exec(keyevent_t event)
  38:../../common/action.c **** {
  16               		.loc 1 38 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  39:../../common/action.c ****     if (!IS_NOEVENT(event)) {
  40:../../common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:../../common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:../../common/action.c ****     }
  43:../../common/action.c **** 
  44:../../common/action.c ****     keyrecord_t record = { .event = event };
  48               		.loc 1 44 0
  49 001e DE01      		movw r26,r28
  50 0020 1196      		adiw r26,1
  51 0022 86E0      		ldi r24,lo8(6)
  52 0024 FD01      		movw r30,r26
  53               		0:
  54 0026 1192      		st Z+,__zero_reg__
  55 0028 8A95      		dec r24
  56 002a 01F4      		brne 0b
  57 002c 85E0      		ldi r24,lo8(5)
  58 002e FE01      		movw r30,r28
  59 0030 3796      		adiw r30,7
  60               		0:
  61 0032 0190      		ld r0,Z+
  62 0034 0D92      		st X+,r0
  63 0036 8A95      		dec r24
  64 0038 01F4      		brne 0b
  45:../../common/action.c **** 
  46:../../common/action.c **** #ifndef NO_ACTION_TAPPING
  47:../../common/action.c ****     action_tapping_process(record);
  65               		.loc 1 47 0
  66 003a 4981      		ldd r20,Y+1
  67               	.LVL1:
  68 003c 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70 003e 6B81      		ldd r22,Y+3
  71 0040 7C81      		ldd r23,Y+4
  72 0042 8D81      		ldd r24,Y+5
  73 0044 9E81      		ldd r25,Y+6
  74 0046 0E94 0000 		call action_tapping_process
  75               	.LVL3:
  76               	/* epilogue start */
  48:../../common/action.c **** #else
  49:../../common/action.c ****     process_action(&record);
  50:../../common/action.c ****     if (!IS_NOEVENT(record.event)) {
  51:../../common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  52:../../common/action.c ****     }
  53:../../common/action.c **** #endif
  54:../../common/action.c **** }
  77               		.loc 1 54 0
  78 004a 2B96      		adiw r28,11
  79 004c 0FB6      		in __tmp_reg__,__SREG__
  80 004e F894      		cli
  81 0050 DEBF      		out __SP_H__,r29
  82 0052 0FBE      		out __SREG__,__tmp_reg__
  83 0054 CDBF      		out __SP_L__,r28
  84 0056 DF91      		pop r29
  85 0058 CF91      		pop r28
  86 005a 0895      		ret
  87               		.cfi_endproc
  88               	.LFE102:
  90               		.section	.text.register_code,"ax",@progbits
  91               	.global	register_code
  93               	register_code:
  94               	.LFB104:
  55:../../common/action.c **** 
  56:../../common/action.c **** void process_action(keyrecord_t *record)
  57:../../common/action.c **** {
  58:../../common/action.c ****     keyevent_t event = record->event;
  59:../../common/action.c **** #ifndef NO_ACTION_TAPPING
  60:../../common/action.c ****     uint8_t tap_count = record->tap.count;
  61:../../common/action.c **** #endif
  62:../../common/action.c **** 
  63:../../common/action.c ****     if (IS_NOEVENT(event)) { return; }
  64:../../common/action.c **** 
  65:../../common/action.c ****     action_t action = layer_switch_get_action(event.key);
  66:../../common/action.c ****     dprint("ACTION: "); debug_action(action);
  67:../../common/action.c **** #ifndef NO_ACTION_LAYER
  68:../../common/action.c ****     dprint(" layer_state: "); layer_debug();
  69:../../common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  70:../../common/action.c **** #endif
  71:../../common/action.c ****     dprintln();
  72:../../common/action.c **** 
  73:../../common/action.c ****     switch (action.kind.id) {
  74:../../common/action.c ****         /* Key and Mods */
  75:../../common/action.c ****         case ACT_LMODS:
  76:../../common/action.c ****         case ACT_RMODS:
  77:../../common/action.c ****             {
  78:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  79:../../common/action.c ****                                                                 action.key.mods<<4;
  80:../../common/action.c ****                 if (event.pressed) {
  81:../../common/action.c ****                     if (mods) {
  82:../../common/action.c ****                         add_weak_mods(mods);
  83:../../common/action.c ****                         send_keyboard_report();
  84:../../common/action.c ****                     }
  85:../../common/action.c ****                     register_code(action.key.code);
  86:../../common/action.c ****                 } else {
  87:../../common/action.c ****                     unregister_code(action.key.code);
  88:../../common/action.c ****                     if (mods) {
  89:../../common/action.c ****                         del_weak_mods(mods);
  90:../../common/action.c ****                         send_keyboard_report();
  91:../../common/action.c ****                     }
  92:../../common/action.c ****                 }
  93:../../common/action.c ****             }
  94:../../common/action.c ****             break;
  95:../../common/action.c **** #ifndef NO_ACTION_TAPPING
  96:../../common/action.c ****         case ACT_LMODS_TAP:
  97:../../common/action.c ****         case ACT_RMODS_TAP:
  98:../../common/action.c ****             {
  99:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 100:../../common/action.c ****                                                                     action.key.mods<<4;
 101:../../common/action.c ****                 switch (action.layer_tap.code) {
 102:../../common/action.c ****     #ifndef NO_ACTION_ONESHOT
 103:../../common/action.c ****                     case MODS_ONESHOT:
 104:../../common/action.c ****                         // Oneshot modifier
 105:../../common/action.c ****                         if (event.pressed) {
 106:../../common/action.c ****                             if (tap_count == 0) {
 107:../../common/action.c ****                                 register_mods(mods);
 108:../../common/action.c ****                             }
 109:../../common/action.c ****                             else if (tap_count == 1) {
 110:../../common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 111:../../common/action.c ****                                 set_oneshot_mods(mods);
 112:../../common/action.c ****                             }
 113:../../common/action.c ****                             else {
 114:../../common/action.c ****                                 register_mods(mods);
 115:../../common/action.c ****                             }
 116:../../common/action.c ****                         } else {
 117:../../common/action.c ****                             if (tap_count == 0) {
 118:../../common/action.c ****                                 clear_oneshot_mods();
 119:../../common/action.c ****                                 unregister_mods(mods);
 120:../../common/action.c ****                             }
 121:../../common/action.c ****                             else if (tap_count == 1) {
 122:../../common/action.c ****                                 // Retain Oneshot mods
 123:../../common/action.c ****                             }
 124:../../common/action.c ****                             else {
 125:../../common/action.c ****                                 clear_oneshot_mods();
 126:../../common/action.c ****                                 unregister_mods(mods);
 127:../../common/action.c ****                             }
 128:../../common/action.c ****                         }
 129:../../common/action.c ****                         break;
 130:../../common/action.c ****     #endif
 131:../../common/action.c ****                     case MODS_TAP_TOGGLE:
 132:../../common/action.c ****                         if (event.pressed) {
 133:../../common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 134:../../common/action.c ****                                 register_mods(mods);
 135:../../common/action.c ****                             }
 136:../../common/action.c ****                         } else {
 137:../../common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 138:../../common/action.c ****                                 unregister_mods(mods);
 139:../../common/action.c ****                             }
 140:../../common/action.c ****                         }
 141:../../common/action.c ****                         break;
 142:../../common/action.c ****                     default:
 143:../../common/action.c ****                         if (event.pressed) {
 144:../../common/action.c ****                             if (tap_count > 0) {
 145:../../common/action.c ****                                 if (record->tap.interrupted) {
 146:../../common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 147:../../common/action.c ****                                     // ad hoc: set 0 to cancel tap
 148:../../common/action.c ****                                     record->tap.count = 0;
 149:../../common/action.c ****                                     register_mods(mods);
 150:../../common/action.c ****                                 } else {
 151:../../common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 152:../../common/action.c ****                                     register_code(action.key.code);
 153:../../common/action.c ****                                 }
 154:../../common/action.c ****                             } else {
 155:../../common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 156:../../common/action.c ****                                 register_mods(mods);
 157:../../common/action.c ****                             }
 158:../../common/action.c ****                         } else {
 159:../../common/action.c ****                             if (tap_count > 0) {
 160:../../common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 161:../../common/action.c ****                                 unregister_code(action.key.code);
 162:../../common/action.c ****                             } else {
 163:../../common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 164:../../common/action.c ****                                 unregister_mods(mods);
 165:../../common/action.c ****                             }
 166:../../common/action.c ****                         }
 167:../../common/action.c ****                         break;
 168:../../common/action.c ****                 }
 169:../../common/action.c ****             }
 170:../../common/action.c ****             break;
 171:../../common/action.c **** #endif
 172:../../common/action.c **** #ifdef EXTRAKEY_ENABLE
 173:../../common/action.c ****         /* other HID usage */
 174:../../common/action.c ****         case ACT_USAGE:
 175:../../common/action.c ****             switch (action.usage.page) {
 176:../../common/action.c ****                 case PAGE_SYSTEM:
 177:../../common/action.c ****                     if (event.pressed) {
 178:../../common/action.c ****                         host_system_send(action.usage.code);
 179:../../common/action.c ****                     } else {
 180:../../common/action.c ****                         host_system_send(0);
 181:../../common/action.c ****                     }
 182:../../common/action.c ****                     break;
 183:../../common/action.c ****                 case PAGE_CONSUMER:
 184:../../common/action.c ****                     if (event.pressed) {
 185:../../common/action.c ****                         host_consumer_send(action.usage.code);
 186:../../common/action.c ****                     } else {
 187:../../common/action.c ****                         host_consumer_send(0);
 188:../../common/action.c ****                     }
 189:../../common/action.c ****                     break;
 190:../../common/action.c ****             }
 191:../../common/action.c ****             break;
 192:../../common/action.c **** #endif
 193:../../common/action.c **** #ifdef MOUSEKEY_ENABLE
 194:../../common/action.c ****         /* Mouse key */
 195:../../common/action.c ****         case ACT_MOUSEKEY:
 196:../../common/action.c ****             if (event.pressed) {
 197:../../common/action.c ****                 mousekey_on(action.key.code);
 198:../../common/action.c ****                 mousekey_send();
 199:../../common/action.c ****             } else {
 200:../../common/action.c ****                 mousekey_off(action.key.code);
 201:../../common/action.c ****                 mousekey_send();
 202:../../common/action.c ****             }
 203:../../common/action.c ****             break;
 204:../../common/action.c **** #endif
 205:../../common/action.c **** #ifndef NO_ACTION_LAYER
 206:../../common/action.c ****         case ACT_LAYER:
 207:../../common/action.c ****             if (action.layer_bitop.on == 0) {
 208:../../common/action.c ****                 /* Default Layer Bitwise Operation */
 209:../../common/action.c ****                 if (!event.pressed) {
 210:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 211:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 212:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 213:../../common/action.c ****                     switch (action.layer_bitop.op) {
 214:../../common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 215:../../common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 216:../../common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 217:../../common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 218:../../common/action.c ****                     }
 219:../../common/action.c ****                 }
 220:../../common/action.c ****             } else {
 221:../../common/action.c ****                 /* Layer Bitwise Operation */
 222:../../common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 223:../../common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 224:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 225:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 226:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 227:../../common/action.c ****                     switch (action.layer_bitop.op) {
 228:../../common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 229:../../common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 230:../../common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 231:../../common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 232:../../common/action.c ****                     }
 233:../../common/action.c ****                 }
 234:../../common/action.c ****             }
 235:../../common/action.c ****             break;
 236:../../common/action.c ****     #ifndef NO_ACTION_TAPPING
 237:../../common/action.c ****         case ACT_LAYER_TAP:
 238:../../common/action.c ****         case ACT_LAYER_TAP_EXT:
 239:../../common/action.c ****             switch (action.layer_tap.code) {
 240:../../common/action.c ****                 case OP_TAP_TOGGLE:
 241:../../common/action.c ****                     /* tap toggle */
 242:../../common/action.c ****                     if (event.pressed) {
 243:../../common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 244:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 245:../../common/action.c ****                         }
 246:../../common/action.c ****                     } else {
 247:../../common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 248:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 249:../../common/action.c ****                         }
 250:../../common/action.c ****                     }
 251:../../common/action.c ****                     break;
 252:../../common/action.c ****                 case OP_ON_OFF:
 253:../../common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 254:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 255:../../common/action.c ****                     break;
 256:../../common/action.c ****                 case OP_OFF_ON:
 257:../../common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 258:../../common/action.c ****                                     layer_on(action.layer_tap.val);
 259:../../common/action.c ****                     break;
 260:../../common/action.c ****                 case OP_SET_CLEAR:
 261:../../common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 262:../../common/action.c ****                                     layer_clear();
 263:../../common/action.c ****                     break;
 264:../../common/action.c ****                 default:
 265:../../common/action.c ****                     /* tap key */
 266:../../common/action.c ****                     if (event.pressed) {
 267:../../common/action.c ****                         if (tap_count > 0) {
 268:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 269:../../common/action.c ****                             register_code(action.layer_tap.code);
 270:../../common/action.c ****                         } else {
 271:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 272:../../common/action.c ****                             layer_on(action.layer_tap.val);
 273:../../common/action.c ****                         }
 274:../../common/action.c ****                     } else {
 275:../../common/action.c ****                         if (tap_count > 0) {
 276:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 277:../../common/action.c ****                             unregister_code(action.layer_tap.code);
 278:../../common/action.c ****                         } else {
 279:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 280:../../common/action.c ****                             layer_off(action.layer_tap.val);
 281:../../common/action.c ****                         }
 282:../../common/action.c ****                     }
 283:../../common/action.c ****                     break;
 284:../../common/action.c ****             }
 285:../../common/action.c ****             break;
 286:../../common/action.c ****     #endif
 287:../../common/action.c **** #endif
 288:../../common/action.c ****         /* Extentions */
 289:../../common/action.c **** #ifndef NO_ACTION_MACRO
 290:../../common/action.c ****         case ACT_MACRO:
 291:../../common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 292:../../common/action.c ****             break;
 293:../../common/action.c **** #endif
 294:../../common/action.c **** #ifdef BACKLIGHT_ENABLE
 295:../../common/action.c ****         case ACT_BACKLIGHT:
 296:../../common/action.c ****             if (!event.pressed) {
 297:../../common/action.c ****                 switch (action.backlight.id) {
 298:../../common/action.c ****                     case BACKLIGHT_INCREASE:
 299:../../common/action.c ****                         backlight_increase();
 300:../../common/action.c ****                         break;
 301:../../common/action.c ****                     case BACKLIGHT_DECREASE:
 302:../../common/action.c ****                         backlight_decrease();
 303:../../common/action.c ****                         break;
 304:../../common/action.c ****                     case BACKLIGHT_TOGGLE:
 305:../../common/action.c ****                         backlight_toggle();
 306:../../common/action.c ****                         break;
 307:../../common/action.c ****                     case BACKLIGHT_STEP:
 308:../../common/action.c ****                         backlight_step();
 309:../../common/action.c ****                         break;
 310:../../common/action.c ****                 }
 311:../../common/action.c ****             }
 312:../../common/action.c ****             break;
 313:../../common/action.c **** #endif
 314:../../common/action.c ****         case ACT_COMMAND:
 315:../../common/action.c ****             break;
 316:../../common/action.c **** #ifndef NO_ACTION_FUNCTION
 317:../../common/action.c ****         case ACT_FUNCTION:
 318:../../common/action.c ****             action_function(record, action.func.id, action.func.opt);
 319:../../common/action.c ****             break;
 320:../../common/action.c **** #endif
 321:../../common/action.c ****         default:
 322:../../common/action.c ****             break;
 323:../../common/action.c ****     }
 324:../../common/action.c **** }
 325:../../common/action.c **** 
 326:../../common/action.c **** 
 327:../../common/action.c **** 
 328:../../common/action.c **** 
 329:../../common/action.c **** /*
 330:../../common/action.c ****  * Utilities for actions.
 331:../../common/action.c ****  */
 332:../../common/action.c **** void register_code(uint8_t code)
 333:../../common/action.c **** {
  95               		.loc 1 333 0
  96               		.cfi_startproc
  97               	.LVL4:
  98 0000 CF93      		push r28
  99               	.LCFI4:
 100               		.cfi_def_cfa_offset 3
 101               		.cfi_offset 28, -2
 102               	/* prologue: function */
 103               	/* frame size = 0 */
 104               	/* stack size = 1 */
 105               	.L__stack_usage = 1
 106 0002 C82F      		mov r28,r24
 334:../../common/action.c ****     if (code == KC_NO) {
 107               		.loc 1 334 0
 108 0004 8823      		tst r24
 109 0006 01F4      		brne .+2
 110 0008 00C0      		rjmp .L2
 335:../../common/action.c ****         return;
 336:../../common/action.c ****     }
 337:../../common/action.c **** 
 338:../../common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 339:../../common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 340:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 341:../../common/action.c ****         // Resync: ignore if caps lock already is on
 342:../../common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 343:../../common/action.c **** #endif
 344:../../common/action.c ****         add_key(KC_CAPSLOCK);
 345:../../common/action.c ****         send_keyboard_report();
 346:../../common/action.c ****         del_key(KC_CAPSLOCK);
 347:../../common/action.c ****         send_keyboard_report();
 348:../../common/action.c ****     }
 349:../../common/action.c **** 
 350:../../common/action.c ****     else if (KC_LOCKING_NUM == code) {
 351:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 352:../../common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 353:../../common/action.c **** #endif
 354:../../common/action.c ****         add_key(KC_NUMLOCK);
 355:../../common/action.c ****         send_keyboard_report();
 356:../../common/action.c ****         del_key(KC_NUMLOCK);
 357:../../common/action.c ****         send_keyboard_report();
 358:../../common/action.c ****     }
 359:../../common/action.c **** 
 360:../../common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 361:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 362:../../common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 363:../../common/action.c **** #endif
 364:../../common/action.c ****         add_key(KC_SCROLLLOCK);
 365:../../common/action.c ****         send_keyboard_report();
 366:../../common/action.c ****         del_key(KC_SCROLLLOCK);
 367:../../common/action.c ****         send_keyboard_report();
 368:../../common/action.c ****     }
 369:../../common/action.c **** #endif
 370:../../common/action.c **** 
 371:../../common/action.c ****     else if IS_KEY(code) {
 111               		.loc 1 371 0
 112 000a 8CEF      		ldi r24,lo8(-4)
 113               	.LVL5:
 114 000c 8C0F      		add r24,r28
 115 000e 813A      		cpi r24,lo8(-95)
 116 0010 00F4      		brsh .L5
 372:../../common/action.c ****         // TODO: should push command_proc out of this block?
 373:../../common/action.c ****         if (command_proc(code)) return;
 117               		.loc 1 373 0
 118 0012 8C2F      		mov r24,r28
 119 0014 0E94 0000 		call command_proc
 120               	.LVL6:
 121 0018 8111      		cpse r24,__zero_reg__
 122 001a 00C0      		rjmp .L2
 374:../../common/action.c **** 
 375:../../common/action.c **** #ifndef NO_ACTION_ONESHOT
 376:../../common/action.c **** /* TODO: remove
 377:../../common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 378:../../common/action.c ****             uint8_t tmp_mods = get_mods();
 379:../../common/action.c ****             add_mods(oneshot_state.mods);
 380:../../common/action.c **** 
 381:../../common/action.c ****             add_key(code);
 382:../../common/action.c ****             send_keyboard_report();
 383:../../common/action.c **** 
 384:../../common/action.c ****             set_mods(tmp_mods);
 385:../../common/action.c ****             send_keyboard_report();
 386:../../common/action.c ****             oneshot_cancel();
 387:../../common/action.c ****         } else 
 388:../../common/action.c **** */
 389:../../common/action.c **** #endif
 390:../../common/action.c ****         {
 391:../../common/action.c ****             add_key(code);
 123               		.loc 1 391 0
 124 001c 8C2F      		mov r24,r28
 125 001e 0E94 0000 		call add_key
 126               	.LVL7:
 127 0022 00C0      		rjmp .L32
 128               	.L5:
 392:../../common/action.c ****             send_keyboard_report();
 393:../../common/action.c ****         }
 394:../../common/action.c ****     }
 395:../../common/action.c ****     else if IS_MOD(code) {
 129               		.loc 1 395 0
 130 0024 80E2      		ldi r24,lo8(32)
 131 0026 8C0F      		add r24,r28
 132 0028 8830      		cpi r24,lo8(8)
 133 002a 00F4      		brsh .L7
 396:../../common/action.c ****         add_mods(MOD_BIT(code));
 134               		.loc 1 396 0
 135 002c C770      		andi r28,lo8(7)
 136               	.LVL8:
 137 002e 81E0      		ldi r24,lo8(1)
 138 0030 00C0      		rjmp 2f
 139               		1:
 140 0032 880F      		lsl r24
 141               		2:
 142 0034 CA95      		dec r28
 143 0036 02F4      		brpl 1b
 144 0038 0E94 0000 		call add_mods
 145               	.LVL9:
 146               	.L32:
 147               	/* epilogue start */
 397:../../common/action.c ****         send_keyboard_report();
 398:../../common/action.c ****     }
 399:../../common/action.c ****     else if IS_SYSTEM(code) {
 400:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 401:../../common/action.c ****     }
 402:../../common/action.c ****     else if IS_CONSUMER(code) {
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 404:../../common/action.c ****     }
 405:../../common/action.c **** }
 148               		.loc 1 405 0
 149 003c CF91      		pop r28
 397:../../common/action.c ****         send_keyboard_report();
 150               		.loc 1 397 0
 151 003e 0C94 0000 		jmp send_keyboard_report
 152               	.LVL10:
 153               	.L7:
 399:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 154               		.loc 1 399 0
 155 0042 8BE5      		ldi r24,lo8(91)
 156 0044 8C0F      		add r24,r28
 157 0046 8330      		cpi r24,lo8(3)
 158 0048 00F4      		brsh .L8
 400:../../common/action.c ****     }
 159               		.loc 1 400 0
 160 004a C53A      		cpi r28,lo8(-91)
 161 004c 01F0      		breq .L11
 400:../../common/action.c ****     }
 162               		.loc 1 400 0 is_stmt 0 discriminator 1
 163 004e C63A      		cpi r28,lo8(-90)
 164 0050 01F0      		breq .L12
 400:../../common/action.c ****     }
 165               		.loc 1 400 0
 166 0052 83E8      		ldi r24,lo8(-125)
 167 0054 90E0      		ldi r25,0
 168 0056 00C0      		rjmp .L9
 169               	.L11:
 170 0058 81E8      		ldi r24,lo8(-127)
 171 005a 90E0      		ldi r25,0
 172 005c 00C0      		rjmp .L9
 173               	.L12:
 174 005e 82E8      		ldi r24,lo8(-126)
 175 0060 90E0      		ldi r25,0
 176               	.L9:
 177               	/* epilogue start */
 178               		.loc 1 405 0 is_stmt 1 discriminator 12
 179 0062 CF91      		pop r28
 180               	.LVL11:
 400:../../common/action.c ****     }
 181               		.loc 1 400 0 discriminator 12
 182 0064 0C94 0000 		jmp host_system_send
 183               	.LVL12:
 184               	.L8:
 402:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 185               		.loc 1 402 0
 186 0068 88E5      		ldi r24,lo8(88)
 187 006a 8C0F      		add r24,r28
 188 006c 8331      		cpi r24,lo8(19)
 189 006e 00F0      		brlo .+2
 190 0070 00C0      		rjmp .L2
 403:../../common/action.c ****     }
 191               		.loc 1 403 0
 192 0072 C83A      		cpi r28,lo8(-88)
 193 0074 01F0      		breq .L13
 403:../../common/action.c ****     }
 194               		.loc 1 403 0 is_stmt 0 discriminator 1
 195 0076 C93A      		cpi r28,lo8(-87)
 196 0078 01F0      		breq .L14
 403:../../common/action.c ****     }
 197               		.loc 1 403 0 discriminator 3
 198 007a CA3A      		cpi r28,lo8(-86)
 199 007c 01F0      		breq .L15
 403:../../common/action.c ****     }
 200               		.loc 1 403 0 discriminator 5
 201 007e CB3A      		cpi r28,lo8(-85)
 202 0080 01F0      		breq .L16
 403:../../common/action.c ****     }
 203               		.loc 1 403 0 discriminator 7
 204 0082 CC3A      		cpi r28,lo8(-84)
 205 0084 01F0      		breq .L17
 403:../../common/action.c ****     }
 206               		.loc 1 403 0 discriminator 9
 207 0086 CD3A      		cpi r28,lo8(-83)
 208 0088 01F0      		breq .L18
 403:../../common/action.c ****     }
 209               		.loc 1 403 0 discriminator 11
 210 008a C03B      		cpi r28,lo8(-80)
 211 008c 01F0      		breq .L19
 403:../../common/action.c ****     }
 212               		.loc 1 403 0 discriminator 13
 213 008e CE3A      		cpi r28,lo8(-82)
 214 0090 01F0      		breq .L20
 403:../../common/action.c ****     }
 215               		.loc 1 403 0 discriminator 15
 216 0092 CF3A      		cpi r28,lo8(-81)
 217 0094 01F0      		breq .L21
 403:../../common/action.c ****     }
 218               		.loc 1 403 0 discriminator 17
 219 0096 C13B      		cpi r28,lo8(-79)
 220 0098 01F0      		breq .L22
 403:../../common/action.c ****     }
 221               		.loc 1 403 0 discriminator 19
 222 009a C23B      		cpi r28,lo8(-78)
 223 009c 01F0      		breq .L23
 403:../../common/action.c ****     }
 224               		.loc 1 403 0 discriminator 21
 225 009e C33B      		cpi r28,lo8(-77)
 226 00a0 01F0      		breq .L24
 403:../../common/action.c ****     }
 227               		.loc 1 403 0 discriminator 23
 228 00a2 C43B      		cpi r28,lo8(-76)
 229 00a4 01F0      		breq .L25
 403:../../common/action.c ****     }
 230               		.loc 1 403 0 discriminator 25
 231 00a6 C53B      		cpi r28,lo8(-75)
 232 00a8 01F0      		breq .L26
 403:../../common/action.c ****     }
 233               		.loc 1 403 0 discriminator 27
 234 00aa C63B      		cpi r28,lo8(-74)
 235 00ac 01F0      		breq .L27
 403:../../common/action.c ****     }
 236               		.loc 1 403 0 discriminator 29
 237 00ae C73B      		cpi r28,lo8(-73)
 238 00b0 01F0      		breq .L28
 403:../../common/action.c ****     }
 239               		.loc 1 403 0 discriminator 31
 240 00b2 C83B      		cpi r28,lo8(-72)
 241 00b4 01F0      		breq .L29
 403:../../common/action.c ****     }
 242               		.loc 1 403 0 discriminator 33
 243 00b6 C93B      		cpi r28,lo8(-71)
 244 00b8 01F0      		breq .L30
 403:../../common/action.c ****     }
 245               		.loc 1 403 0 discriminator 35
 246 00ba CA3B      		cpi r28,lo8(-70)
 247 00bc 01F0      		breq .L31
 403:../../common/action.c ****     }
 248               		.loc 1 403 0
 249 00be 80E0      		ldi r24,0
 250 00c0 90E0      		ldi r25,0
 251 00c2 00C0      		rjmp .L10
 252               	.L13:
 253 00c4 82EE      		ldi r24,lo8(-30)
 254 00c6 90E0      		ldi r25,0
 255 00c8 00C0      		rjmp .L10
 256               	.L14:
 257 00ca 89EE      		ldi r24,lo8(-23)
 258 00cc 90E0      		ldi r25,0
 259 00ce 00C0      		rjmp .L10
 260               	.L15:
 261 00d0 8AEE      		ldi r24,lo8(-22)
 262 00d2 90E0      		ldi r25,0
 263 00d4 00C0      		rjmp .L10
 264               	.L16:
 265 00d6 85EB      		ldi r24,lo8(-75)
 266 00d8 90E0      		ldi r25,0
 267 00da 00C0      		rjmp .L10
 268               	.L17:
 269 00dc 86EB      		ldi r24,lo8(-74)
 270 00de 90E0      		ldi r25,0
 271 00e0 00C0      		rjmp .L10
 272               	.L18:
 273 00e2 87EB      		ldi r24,lo8(-73)
 274 00e4 90E0      		ldi r25,0
 275 00e6 00C0      		rjmp .L10
 276               	.L19:
 277 00e8 8CEC      		ldi r24,lo8(-52)
 278 00ea 90E0      		ldi r25,0
 279 00ec 00C0      		rjmp .L10
 280               	.L20:
 281 00ee 8DEC      		ldi r24,lo8(-51)
 282 00f0 90E0      		ldi r25,0
 283 00f2 00C0      		rjmp .L10
 284               	.L21:
 285 00f4 83E8      		ldi r24,lo8(-125)
 286 00f6 91E0      		ldi r25,lo8(1)
 287 00f8 00C0      		rjmp .L10
 288               	.L22:
 289 00fa 8AE8      		ldi r24,lo8(-118)
 290 00fc 91E0      		ldi r25,lo8(1)
 291 00fe 00C0      		rjmp .L10
 292               	.L23:
 293 0100 82E9      		ldi r24,lo8(-110)
 294 0102 91E0      		ldi r25,lo8(1)
 295 0104 00C0      		rjmp .L10
 296               	.L24:
 297 0106 84E9      		ldi r24,lo8(-108)
 298 0108 91E0      		ldi r25,lo8(1)
 299 010a 00C0      		rjmp .L10
 300               	.L25:
 301 010c 81E2      		ldi r24,lo8(33)
 302 010e 92E0      		ldi r25,lo8(2)
 303 0110 00C0      		rjmp .L10
 304               	.L26:
 305 0112 83E2      		ldi r24,lo8(35)
 306 0114 92E0      		ldi r25,lo8(2)
 307 0116 00C0      		rjmp .L10
 308               	.L27:
 309 0118 84E2      		ldi r24,lo8(36)
 310 011a 92E0      		ldi r25,lo8(2)
 311 011c 00C0      		rjmp .L10
 312               	.L28:
 313 011e 85E2      		ldi r24,lo8(37)
 314 0120 92E0      		ldi r25,lo8(2)
 315 0122 00C0      		rjmp .L10
 316               	.L29:
 317 0124 86E2      		ldi r24,lo8(38)
 318 0126 92E0      		ldi r25,lo8(2)
 319 0128 00C0      		rjmp .L10
 320               	.L30:
 321 012a 87E2      		ldi r24,lo8(39)
 322 012c 92E0      		ldi r25,lo8(2)
 323 012e 00C0      		rjmp .L10
 324               	.L31:
 325 0130 8AE2      		ldi r24,lo8(42)
 326 0132 92E0      		ldi r25,lo8(2)
 327               	.L10:
 328               	/* epilogue start */
 329               		.loc 1 405 0 is_stmt 1 discriminator 76
 330 0134 CF91      		pop r28
 331               	.LVL13:
 403:../../common/action.c ****     }
 332               		.loc 1 403 0 discriminator 76
 333 0136 0C94 0000 		jmp host_consumer_send
 334               	.LVL14:
 335               	.L2:
 336               	/* epilogue start */
 337               		.loc 1 405 0
 338 013a CF91      		pop r28
 339               	.LVL15:
 340 013c 0895      		ret
 341               		.cfi_endproc
 342               	.LFE104:
 344               		.section	.text.unregister_code,"ax",@progbits
 345               	.global	unregister_code
 347               	unregister_code:
 348               	.LFB105:
 406:../../common/action.c **** 
 407:../../common/action.c **** void unregister_code(uint8_t code)
 408:../../common/action.c **** {
 349               		.loc 1 408 0
 350               		.cfi_startproc
 351               	.LVL16:
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	/* stack size = 0 */
 355               	.L__stack_usage = 0
 409:../../common/action.c ****     if (code == KC_NO) {
 356               		.loc 1 409 0
 357 0000 8823      		tst r24
 358 0002 01F0      		breq .L34
 410:../../common/action.c ****         return;
 411:../../common/action.c ****     }
 412:../../common/action.c **** 
 413:../../common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 414:../../common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 415:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 416:../../common/action.c ****         // Resync: ignore if caps lock already is off
 417:../../common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 418:../../common/action.c **** #endif
 419:../../common/action.c ****         add_key(KC_CAPSLOCK);
 420:../../common/action.c ****         send_keyboard_report();
 421:../../common/action.c ****         del_key(KC_CAPSLOCK);
 422:../../common/action.c ****         send_keyboard_report();
 423:../../common/action.c ****     }
 424:../../common/action.c **** 
 425:../../common/action.c ****     else if (KC_LOCKING_NUM == code) {
 426:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 427:../../common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 428:../../common/action.c **** #endif
 429:../../common/action.c ****         add_key(KC_NUMLOCK);
 430:../../common/action.c ****         send_keyboard_report();
 431:../../common/action.c ****         del_key(KC_NUMLOCK);
 432:../../common/action.c ****         send_keyboard_report();
 433:../../common/action.c ****     }
 434:../../common/action.c **** 
 435:../../common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 436:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 437:../../common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 438:../../common/action.c **** #endif
 439:../../common/action.c ****         add_key(KC_SCROLLLOCK);
 440:../../common/action.c ****         send_keyboard_report();
 441:../../common/action.c ****         del_key(KC_SCROLLLOCK);
 442:../../common/action.c ****         send_keyboard_report();
 443:../../common/action.c ****     }
 444:../../common/action.c **** #endif
 445:../../common/action.c **** 
 446:../../common/action.c ****     else if IS_KEY(code) {
 359               		.loc 1 446 0
 360 0004 9CEF      		ldi r25,lo8(-4)
 361 0006 980F      		add r25,r24
 362 0008 913A      		cpi r25,lo8(-95)
 363 000a 00F4      		brsh .L36
 447:../../common/action.c ****         del_key(code);
 364               		.loc 1 447 0
 365 000c 0E94 0000 		call del_key
 366               	.LVL17:
 367 0010 00C0      		rjmp .L42
 368               	.LVL18:
 369               	.L36:
 448:../../common/action.c ****         send_keyboard_report();
 449:../../common/action.c ****     }
 450:../../common/action.c ****     else if IS_MOD(code) {
 370               		.loc 1 450 0
 371 0012 90E2      		ldi r25,lo8(32)
 372 0014 980F      		add r25,r24
 373 0016 9830      		cpi r25,lo8(8)
 374 0018 00F4      		brsh .L37
 451:../../common/action.c ****         del_mods(MOD_BIT(code));
 375               		.loc 1 451 0
 376 001a 8770      		andi r24,lo8(7)
 377               	.LVL19:
 378 001c 91E0      		ldi r25,lo8(1)
 379 001e 00C0      		rjmp 2f
 380               		1:
 381 0020 990F      		lsl r25
 382               		2:
 383 0022 8A95      		dec r24
 384 0024 02F4      		brpl 1b
 385 0026 892F      		mov r24,r25
 386 0028 0E94 0000 		call del_mods
 387               	.LVL20:
 388               	.L42:
 452:../../common/action.c ****         send_keyboard_report();
 389               		.loc 1 452 0
 390 002c 0C94 0000 		jmp send_keyboard_report
 391               	.LVL21:
 392               	.L37:
 453:../../common/action.c ****     }
 454:../../common/action.c ****     else if IS_SYSTEM(code) {
 393               		.loc 1 454 0
 394 0030 9BE5      		ldi r25,lo8(91)
 395 0032 980F      		add r25,r24
 396 0034 9330      		cpi r25,lo8(3)
 397 0036 00F4      		brsh .L38
 455:../../common/action.c ****         host_system_send(0);
 398               		.loc 1 455 0
 399 0038 80E0      		ldi r24,0
 400 003a 90E0      		ldi r25,0
 401               	.LVL22:
 402 003c 0C94 0000 		jmp host_system_send
 403               	.LVL23:
 404               	.L38:
 456:../../common/action.c ****     }
 457:../../common/action.c ****     else if IS_CONSUMER(code) {
 405               		.loc 1 457 0
 406 0040 885A      		subi r24,lo8(-(88))
 407               	.LVL24:
 408 0042 8331      		cpi r24,lo8(19)
 409 0044 00F4      		brsh .L34
 458:../../common/action.c ****         host_consumer_send(0);
 410               		.loc 1 458 0
 411 0046 80E0      		ldi r24,0
 412 0048 90E0      		ldi r25,0
 413               	.LVL25:
 414 004a 0C94 0000 		jmp host_consumer_send
 415               	.LVL26:
 416               	.L34:
 417 004e 0895      		ret
 418               		.cfi_endproc
 419               	.LFE105:
 421               		.section	.text.register_mods,"ax",@progbits
 422               	.global	register_mods
 424               	register_mods:
 425               	.LFB106:
 459:../../common/action.c ****     }
 460:../../common/action.c **** }
 461:../../common/action.c **** 
 462:../../common/action.c **** void register_mods(uint8_t mods)
 463:../../common/action.c **** {
 426               		.loc 1 463 0
 427               		.cfi_startproc
 428               	.LVL27:
 429               	/* prologue: function */
 430               	/* frame size = 0 */
 431               	/* stack size = 0 */
 432               	.L__stack_usage = 0
 464:../../common/action.c ****     if (mods) {
 433               		.loc 1 464 0
 434 0000 8823      		tst r24
 435 0002 01F0      		breq .L43
 465:../../common/action.c ****         add_mods(mods);
 436               		.loc 1 465 0
 437 0004 0E94 0000 		call add_mods
 438               	.LVL28:
 466:../../common/action.c ****         send_keyboard_report();
 439               		.loc 1 466 0
 440 0008 0C94 0000 		jmp send_keyboard_report
 441               	.LVL29:
 442               	.L43:
 443 000c 0895      		ret
 444               		.cfi_endproc
 445               	.LFE106:
 447               		.section	.text.unregister_mods,"ax",@progbits
 448               	.global	unregister_mods
 450               	unregister_mods:
 451               	.LFB107:
 467:../../common/action.c ****     }
 468:../../common/action.c **** }
 469:../../common/action.c **** 
 470:../../common/action.c **** void unregister_mods(uint8_t mods)
 471:../../common/action.c **** {
 452               		.loc 1 471 0
 453               		.cfi_startproc
 454               	.LVL30:
 455               	/* prologue: function */
 456               	/* frame size = 0 */
 457               	/* stack size = 0 */
 458               	.L__stack_usage = 0
 472:../../common/action.c ****     if (mods) {
 459               		.loc 1 472 0
 460 0000 8823      		tst r24
 461 0002 01F0      		breq .L45
 473:../../common/action.c ****         del_mods(mods);
 462               		.loc 1 473 0
 463 0004 0E94 0000 		call del_mods
 464               	.LVL31:
 474:../../common/action.c ****         send_keyboard_report();
 465               		.loc 1 474 0
 466 0008 0C94 0000 		jmp send_keyboard_report
 467               	.LVL32:
 468               	.L45:
 469 000c 0895      		ret
 470               		.cfi_endproc
 471               	.LFE107:
 473               		.section	.text.process_action,"ax",@progbits
 474               	.global	process_action
 476               	process_action:
 477               	.LFB103:
  57:../../common/action.c ****     keyevent_t event = record->event;
 478               		.loc 1 57 0
 479               		.cfi_startproc
 480               	.LVL33:
 481 0000 BF92      		push r11
 482               	.LCFI5:
 483               		.cfi_def_cfa_offset 3
 484               		.cfi_offset 11, -2
 485 0002 CF92      		push r12
 486               	.LCFI6:
 487               		.cfi_def_cfa_offset 4
 488               		.cfi_offset 12, -3
 489 0004 DF92      		push r13
 490               	.LCFI7:
 491               		.cfi_def_cfa_offset 5
 492               		.cfi_offset 13, -4
 493 0006 EF92      		push r14
 494               	.LCFI8:
 495               		.cfi_def_cfa_offset 6
 496               		.cfi_offset 14, -5
 497 0008 FF92      		push r15
 498               	.LCFI9:
 499               		.cfi_def_cfa_offset 7
 500               		.cfi_offset 15, -6
 501 000a 0F93      		push r16
 502               	.LCFI10:
 503               		.cfi_def_cfa_offset 8
 504               		.cfi_offset 16, -7
 505 000c 1F93      		push r17
 506               	.LCFI11:
 507               		.cfi_def_cfa_offset 9
 508               		.cfi_offset 17, -8
 509 000e CF93      		push r28
 510               	.LCFI12:
 511               		.cfi_def_cfa_offset 10
 512               		.cfi_offset 28, -9
 513 0010 DF93      		push r29
 514               	.LCFI13:
 515               		.cfi_def_cfa_offset 11
 516               		.cfi_offset 29, -10
 517 0012 00D0      		rcall .
 518 0014 00D0      		rcall .
 519 0016 00D0      		rcall .
 520               	.LCFI14:
 521               		.cfi_def_cfa_offset 17
 522 0018 CDB7      		in r28,__SP_L__
 523 001a DEB7      		in r29,__SP_H__
 524               	.LCFI15:
 525               		.cfi_def_cfa_register 28
 526               	/* prologue: function */
 527               	/* frame size = 6 */
 528               	/* stack size = 15 */
 529               	.L__stack_usage = 15
 530 001c 6C01      		movw r12,r24
  58:../../common/action.c **** #ifndef NO_ACTION_TAPPING
 531               		.loc 1 58 0
 532 001e 85E0      		ldi r24,lo8(5)
 533               	.LVL34:
 534 0020 F601      		movw r30,r12
 535 0022 DE01      		movw r26,r28
 536 0024 1196      		adiw r26,1
 537               		0:
 538 0026 0190      		ld r0,Z+
 539 0028 0D92      		st X+,r0
 540 002a 8A95      		dec r24
 541 002c 01F4      		brne 0b
 542               	.LVL35:
 543               	.LBB8:
 544               	.LBB9:
 545               		.file 2 "../../common/keyboard.h"
   1:../../common/keyboard.h **** /*
   2:../../common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/keyboard.h **** 
   4:../../common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/keyboard.h **** (at your option) any later version.
   8:../../common/keyboard.h **** 
   9:../../common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/keyboard.h **** GNU General Public License for more details.
  13:../../common/keyboard.h **** 
  14:../../common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/keyboard.h **** */
  17:../../common/keyboard.h **** 
  18:../../common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../common/keyboard.h **** #define KEYBOARD_H
  20:../../common/keyboard.h **** 
  21:../../common/keyboard.h **** #include <stdbool.h>
  22:../../common/keyboard.h **** #include <stdint.h>
  23:../../common/keyboard.h **** 
  24:../../common/keyboard.h **** 
  25:../../common/keyboard.h **** #ifdef __cplusplus
  26:../../common/keyboard.h **** extern "C" {
  27:../../common/keyboard.h **** #endif
  28:../../common/keyboard.h **** 
  29:../../common/keyboard.h **** /* key matrix position */
  30:../../common/keyboard.h **** typedef struct {
  31:../../common/keyboard.h ****     uint8_t col;
  32:../../common/keyboard.h ****     uint8_t row;
  33:../../common/keyboard.h **** } key_t;
  34:../../common/keyboard.h **** 
  35:../../common/keyboard.h **** /* key event */
  36:../../common/keyboard.h **** typedef struct {
  37:../../common/keyboard.h ****     key_t    key;
  38:../../common/keyboard.h ****     bool     pressed;
  39:../../common/keyboard.h ****     uint16_t time;
  40:../../common/keyboard.h **** } keyevent_t;
  41:../../common/keyboard.h **** 
  42:../../common/keyboard.h **** /* equivalent test of key_t */
  43:../../common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../common/keyboard.h **** 
  45:../../common/keyboard.h **** /* Rules for No Event:
  46:../../common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../common/keyboard.h ****  */
  49:../../common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 546               		.loc 2 49 0
 547 002e F601      		movw r30,r12
 548 0030 8381      		ldd r24,Z+3
 549 0032 9481      		ldd r25,Z+4
 550 0034 892B      		or r24,r25
 551 0036 01F4      		brne .+2
 552 0038 00C0      		rjmp .L47
 553               	.LBE9:
 554               	.LBE8:
  58:../../common/action.c **** #ifndef NO_ACTION_TAPPING
 555               		.loc 1 58 0
 556 003a 9081      		ld r25,Z
 557 003c 8181      		ldd r24,Z+1
 558               	.LBB11:
 559               	.LBB10:
 560               		.loc 2 49 0
 561 003e 8F3F      		cpi r24,lo8(-1)
 562 0040 01F4      		brne .L49
 563               	.LBE10:
 564               	.LBE11:
  63:../../common/action.c **** 
 565               		.loc 1 63 0
 566 0042 9F3F      		cpi r25,lo8(-1)
 567 0044 01F4      		brne .+2
 568 0046 00C0      		rjmp .L47
 569               	.L49:
  58:../../common/action.c **** #ifndef NO_ACTION_TAPPING
 570               		.loc 1 58 0
 571 0048 F601      		movw r30,r12
 572 004a F280      		ldd r15,Z+2
  60:../../common/action.c **** #endif
 573               		.loc 1 60 0
 574 004c 0581      		ldd r16,Z+5
 575 004e 0295      		swap r16
 576 0050 0F70      		andi r16,lo8(15)
  65:../../common/action.c ****     dprint("ACTION: "); debug_action(action);
 577               		.loc 1 65 0
 578 0052 9983      		std Y+1,r25
 579 0054 8A83      		std Y+2,r24
 580 0056 8981      		ldd r24,Y+1
 581 0058 9A81      		ldd r25,Y+2
 582 005a 0E94 0000 		call layer_switch_get_action
 583               	.LVL36:
 584 005e 182F      		mov r17,r24
 585               	.LVL37:
 586 0060 B92E      		mov r11,r25
  68:../../common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 587               		.loc 1 68 0
 588 0062 0E94 0000 		call layer_debug
 589               	.LVL38:
  69:../../common/action.c **** #endif
 590               		.loc 1 69 0
 591 0066 0E94 0000 		call default_layer_debug
 592               	.LVL39:
  73:../../common/action.c ****         /* Key and Mods */
 593               		.loc 1 73 0
 594 006a EB2D      		mov r30,r11
 595 006c E295      		swap r30
 596 006e EF70      		andi r30,lo8(15)
 597 0070 4E2F      		mov r20,r30
 598 0072 50E0      		ldi r21,0
 599 0074 FA01      		movw r30,r20
 600 0076 E050      		subi r30,lo8(-(gs(.L52)))
 601 0078 F040      		sbci r31,hi8(-(gs(.L52)))
 602 007a 0C94 0000 		jmp __tablejump2__
 603               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 604               		.p2align	1
 605               	.L52:
 606 0000 0000      		.word gs(.L51)
 607 0002 0000      		.word gs(.L51)
 608 0004 0000      		.word gs(.L53)
 609 0006 0000      		.word gs(.L53)
 610 0008 0000      		.word gs(.L47)
 611 000a 0000      		.word gs(.L47)
 612 000c 0000      		.word gs(.L47)
 613 000e 0000      		.word gs(.L47)
 614 0010 0000      		.word gs(.L54)
 615 0012 0000      		.word gs(.L47)
 616 0014 0000      		.word gs(.L55)
 617 0016 0000      		.word gs(.L55)
 618 0018 0000      		.word gs(.L56)
 619 001a 0000      		.word gs(.L47)
 620 001c 0000      		.word gs(.L47)
 621 001e 0000      		.word gs(.L57)
 622               		.section	.text.process_action
 623               	.L51:
 624               	.LBB12:
  78:../../common/action.c ****                                                                 action.key.mods<<4;
 625               		.loc 1 78 0
 626 007e 9B2D      		mov r25,r11
 627 0080 907F      		andi r25,lo8(-16)
 628 0082 8B2D      		mov r24,r11
 629 0084 8F70      		andi r24,lo8(15)
 630 0086 082F      		mov r16,r24
 631 0088 9923      		tst r25
 632 008a 01F0      		breq .L59
  78:../../common/action.c ****                                                                 action.key.mods<<4;
 633               		.loc 1 78 0 is_stmt 0 discriminator 2
 634 008c 0295      		swap r16
 635 008e 007F      		andi r16,lo8(-16)
 636               	.L59:
 637               	.LVL40:
  80:../../common/action.c ****                     if (mods) {
 638               		.loc 1 80 0 is_stmt 1 discriminator 4
 639 0090 FF20      		tst r15
 640 0092 01F0      		breq .L60
  81:../../common/action.c ****                         add_weak_mods(mods);
 641               		.loc 1 81 0
 642 0094 0023      		tst r16
 643 0096 01F4      		brne .+2
 644 0098 00C0      		rjmp .L135
  82:../../common/action.c ****                         send_keyboard_report();
 645               		.loc 1 82 0
 646 009a 802F      		mov r24,r16
 647 009c 0E94 0000 		call add_weak_mods
 648               	.LVL41:
  83:../../common/action.c ****                     }
 649               		.loc 1 83 0
 650 00a0 0E94 0000 		call send_keyboard_report
 651               	.LVL42:
 652 00a4 00C0      		rjmp .L135
 653               	.L60:
 654               	.LVL43:
  87:../../common/action.c ****                     if (mods) {
 655               		.loc 1 87 0
 656 00a6 812F      		mov r24,r17
 657 00a8 0E94 0000 		call unregister_code
 658               	.LVL44:
  88:../../common/action.c ****                         del_weak_mods(mods);
 659               		.loc 1 88 0
 660 00ac 0023      		tst r16
 661 00ae 01F4      		brne .+2
 662 00b0 00C0      		rjmp .L47
  89:../../common/action.c ****                         send_keyboard_report();
 663               		.loc 1 89 0
 664 00b2 802F      		mov r24,r16
 665 00b4 0E94 0000 		call del_weak_mods
 666               	.LVL45:
 667               	/* epilogue start */
 668               	.LBE12:
 324:../../common/action.c **** 
 669               		.loc 1 324 0
 670 00b8 2696      		adiw r28,6
 671               	.LVL46:
 672 00ba 0FB6      		in __tmp_reg__,__SREG__
 673 00bc F894      		cli
 674 00be DEBF      		out __SP_H__,r29
 675 00c0 0FBE      		out __SREG__,__tmp_reg__
 676 00c2 CDBF      		out __SP_L__,r28
 677               	.LVL47:
 678 00c4 DF91      		pop r29
 679 00c6 CF91      		pop r28
 680 00c8 1F91      		pop r17
 681               	.LVL48:
 682 00ca 0F91      		pop r16
 683               	.LVL49:
 684 00cc FF90      		pop r15
 685 00ce EF90      		pop r14
 686 00d0 DF90      		pop r13
 687 00d2 CF90      		pop r12
 688               	.LVL50:
 689 00d4 BF90      		pop r11
 690               	.LBB13:
  90:../../common/action.c ****                     }
 691               		.loc 1 90 0
 692 00d6 0C94 0000 		jmp send_keyboard_report
 693               	.LVL51:
 694               	.L53:
 695               	.LBE13:
 696               	.LBB14:
  99:../../common/action.c ****                                                                     action.key.mods<<4;
 697               		.loc 1 99 0
 698 00da 9B2D      		mov r25,r11
 699 00dc 907F      		andi r25,lo8(-16)
 700 00de 8B2D      		mov r24,r11
 701 00e0 8F70      		andi r24,lo8(15)
 702 00e2 9032      		cpi r25,lo8(32)
 703 00e4 01F0      		breq .L64
  99:../../common/action.c ****                                                                     action.key.mods<<4;
 704               		.loc 1 99 0 is_stmt 0 discriminator 2
 705 00e6 8295      		swap r24
 706 00e8 807F      		andi r24,lo8(-16)
 707               	.L64:
 708               	.LVL52:
 101:../../common/action.c ****     #ifndef NO_ACTION_ONESHOT
 709               		.loc 1 101 0 is_stmt 1 discriminator 4
 710 00ea 1123      		tst r17
 711 00ec 01F0      		breq .L66
 712 00ee 1130      		cpi r17,lo8(1)
 713 00f0 01F0      		breq .L67
 714 00f2 00C0      		rjmp .L139
 715               	.L66:
 105:../../common/action.c ****                             if (tap_count == 0) {
 716               		.loc 1 105 0
 717 00f4 FF20      		tst r15
 718 00f6 01F0      		breq .L68
 106:../../common/action.c ****                                 register_mods(mods);
 719               		.loc 1 106 0
 720 00f8 0023      		tst r16
 721 00fa 01F0      		breq .L134
 109:../../common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 722               		.loc 1 109 0
 723 00fc 0130      		cpi r16,lo8(1)
 724 00fe 01F4      		brne .L134
 725               	/* epilogue start */
 726               	.LBE14:
 324:../../common/action.c **** 
 727               		.loc 1 324 0
 728 0100 2696      		adiw r28,6
 729 0102 0FB6      		in __tmp_reg__,__SREG__
 730 0104 F894      		cli
 731 0106 DEBF      		out __SP_H__,r29
 732 0108 0FBE      		out __SREG__,__tmp_reg__
 733 010a CDBF      		out __SP_L__,r28
 734 010c DF91      		pop r29
 735 010e CF91      		pop r28
 736 0110 1F91      		pop r17
 737               	.LVL53:
 738 0112 0F91      		pop r16
 739 0114 FF90      		pop r15
 740 0116 EF90      		pop r14
 741 0118 DF90      		pop r13
 742 011a CF90      		pop r12
 743               	.LVL54:
 744 011c BF90      		pop r11
 745               	.LBB15:
 111:../../common/action.c ****                             }
 746               		.loc 1 111 0
 747 011e 0C94 0000 		jmp set_oneshot_mods
 748               	.LVL55:
 749               	.L68:
 117:../../common/action.c ****                                 clear_oneshot_mods();
 750               		.loc 1 117 0
 751 0122 0023      		tst r16
 752 0124 01F0      		breq .L132
 121:../../common/action.c ****                                 // Retain Oneshot mods
 753               		.loc 1 121 0
 754 0126 0130      		cpi r16,lo8(1)
 755 0128 01F4      		brne .+2
 756 012a 00C0      		rjmp .L47
 757               	.L132:
 125:../../common/action.c ****                                 unregister_mods(mods);
 758               		.loc 1 125 0
 759 012c 8E83      		std Y+6,r24
 760 012e 0E94 0000 		call clear_oneshot_mods
 761               	.LVL56:
 126:../../common/action.c ****                             }
 762               		.loc 1 126 0
 763 0132 8E81      		ldd r24,Y+6
 764 0134 00C0      		rjmp .L77
 765               	.LVL57:
 766               	.L67:
 132:../../common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 767               		.loc 1 132 0
 768 0136 FF20      		tst r15
 769 0138 01F0      		breq .L73
 133:../../common/action.c ****                                 register_mods(mods);
 770               		.loc 1 133 0
 771 013a 0630      		cpi r16,lo8(6)
 772 013c 00F0      		brlo .+2
 773 013e 00C0      		rjmp .L47
 774 0140 00C0      		rjmp .L134
 775               	.L73:
 137:../../common/action.c ****                                 unregister_mods(mods);
 776               		.loc 1 137 0
 777 0142 0530      		cpi r16,lo8(5)
 778 0144 00F0      		brlo .+2
 779 0146 00C0      		rjmp .L47
 780 0148 00C0      		rjmp .L77
 781               	.L139:
 143:../../common/action.c ****                             if (tap_count > 0) {
 782               		.loc 1 143 0
 783 014a FF20      		tst r15
 784 014c 01F0      		breq .L74
 144:../../common/action.c ****                                 if (record->tap.interrupted) {
 785               		.loc 1 144 0
 786 014e 0023      		tst r16
 787 0150 01F0      		breq .L134
 145:../../common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 788               		.loc 1 145 0
 789 0152 F601      		movw r30,r12
 790 0154 9581      		ldd r25,Z+5
 791 0156 90FF      		sbrs r25,0
 792 0158 00C0      		rjmp .L135
 148:../../common/action.c ****                                     register_mods(mods);
 793               		.loc 1 148 0
 794 015a 9F70      		andi r25,lo8(15)
 795 015c 9583      		std Z+5,r25
 796               	.L134:
 797               	/* epilogue start */
 798               	.LBE15:
 324:../../common/action.c **** 
 799               		.loc 1 324 0
 800 015e 2696      		adiw r28,6
 801 0160 0FB6      		in __tmp_reg__,__SREG__
 802 0162 F894      		cli
 803 0164 DEBF      		out __SP_H__,r29
 804 0166 0FBE      		out __SREG__,__tmp_reg__
 805 0168 CDBF      		out __SP_L__,r28
 806 016a DF91      		pop r29
 807 016c CF91      		pop r28
 808 016e 1F91      		pop r17
 809               	.LVL58:
 810 0170 0F91      		pop r16
 811 0172 FF90      		pop r15
 812 0174 EF90      		pop r14
 813 0176 DF90      		pop r13
 814 0178 CF90      		pop r12
 815               	.LVL59:
 816 017a BF90      		pop r11
 817               	.LBB16:
 149:../../common/action.c ****                                 } else {
 818               		.loc 1 149 0
 819 017c 0C94 0000 		jmp register_mods
 820               	.LVL60:
 821               	.L74:
 159:../../common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 822               		.loc 1 159 0
 823 0180 0111      		cpse r16,__zero_reg__
 824 0182 00C0      		rjmp .L136
 825               	.LVL61:
 826               	.L77:
 827               	/* epilogue start */
 828               	.LBE16:
 324:../../common/action.c **** 
 829               		.loc 1 324 0
 830 0184 2696      		adiw r28,6
 831 0186 0FB6      		in __tmp_reg__,__SREG__
 832 0188 F894      		cli
 833 018a DEBF      		out __SP_H__,r29
 834 018c 0FBE      		out __SREG__,__tmp_reg__
 835 018e CDBF      		out __SP_L__,r28
 836 0190 DF91      		pop r29
 837 0192 CF91      		pop r28
 838 0194 1F91      		pop r17
 839               	.LVL62:
 840 0196 0F91      		pop r16
 841 0198 FF90      		pop r15
 842 019a EF90      		pop r14
 843 019c DF90      		pop r13
 844 019e CF90      		pop r12
 845               	.LVL63:
 846 01a0 BF90      		pop r11
 847               	.LBB17:
 164:../../common/action.c ****                             }
 848               		.loc 1 164 0
 849 01a2 0C94 0000 		jmp unregister_mods
 850               	.LVL64:
 851               	.L54:
 852               	.LBE17:
 207:../../common/action.c ****                 /* Default Layer Bitwise Operation */
 853               		.loc 1 207 0
 854 01a6 9B2D      		mov r25,r11
 855 01a8 9370      		andi r25,lo8(3)
 856 01aa 01F0      		breq .+2
 857 01ac 00C0      		rjmp .L78
 209:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 858               		.loc 1 209 0
 859 01ae F110      		cpse r15,__zero_reg__
 860 01b0 00C0      		rjmp .L47
 861               	.LVL65:
 862               	.LBB18:
 210:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 863               		.loc 1 210 0
 864 01b2 912F      		mov r25,r17
 865 01b4 9295      		swap r25
 866 01b6 9695      		lsr r25
 867 01b8 9770      		andi r25,lo8(7)
 211:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 868               		.loc 1 211 0
 869 01ba 990F      		lsl r25
 870 01bc 990F      		lsl r25
 871 01be 812F      		mov r24,r17
 872 01c0 8F70      		andi r24,lo8(15)
 873 01c2 C82E      		mov r12,r24
 874               	.LVL66:
 875 01c4 D12C      		mov r13,__zero_reg__
 876 01c6 E12C      		mov r14,__zero_reg__
 877 01c8 F12C      		mov r15,__zero_reg__
 878 01ca 092E      		mov r0,r25
 879 01cc 00C0      		rjmp 2f
 880               		1:
 881 01ce CC0C      		lsl r12
 882 01d0 DD1C      		rol r13
 883 01d2 EE1C      		rol r14
 884 01d4 FF1C      		rol r15
 885               		2:
 886 01d6 0A94      		dec r0
 887 01d8 02F4      		brpl 1b
 888               	.LVL67:
 212:../../common/action.c ****                     switch (action.layer_bitop.op) {
 889               		.loc 1 212 0
 890 01da 14FF      		sbrs r17,4
 891 01dc 00C0      		rjmp .L104
 212:../../common/action.c ****                     switch (action.layer_bitop.op) {
 892               		.loc 1 212 0 is_stmt 0 discriminator 1
 893 01de 0FE0      		ldi r16,lo8(15)
 894 01e0 10E0      		ldi r17,0
 895 01e2 20E0      		ldi r18,0
 896 01e4 30E0      		ldi r19,0
 897 01e6 00C0      		rjmp 2f
 898               		1:
 899 01e8 000F      		lsl r16
 900 01ea 111F      		rol r17
 901 01ec 221F      		rol r18
 902 01ee 331F      		rol r19
 903               		2:
 904 01f0 9A95      		dec r25
 905 01f2 02F4      		brpl 1b
 906 01f4 C901      		movw r24,r18
 907 01f6 B801      		movw r22,r16
 908 01f8 6095      		com r22
 909 01fa 7095      		com r23
 910 01fc 8095      		com r24
 911 01fe 9095      		com r25
 912 0200 00C0      		rjmp .L79
 913               	.L104:
 212:../../common/action.c ****                     switch (action.layer_bitop.op) {
 914               		.loc 1 212 0
 915 0202 60E0      		ldi r22,0
 916 0204 70E0      		ldi r23,0
 917 0206 CB01      		movw r24,r22
 918               	.L79:
 919               	.LVL68:
 213:../../common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 920               		.loc 1 213 0 is_stmt 1 discriminator 4
 921 0208 4B2D      		mov r20,r11
 922 020a 4695      		lsr r20
 923 020c 4695      		lsr r20
 924 020e 4370      		andi r20,lo8(3)
 925 0210 4230      		cpi r20,lo8(2)
 926 0212 01F0      		breq .L81
 927 0214 00F4      		brsh .L82
 928 0216 6C29      		or r22,r12
 929 0218 7D29      		or r23,r13
 930 021a 8E29      		or r24,r14
 931 021c 9F29      		or r25,r15
 932               	.LVL69:
 933 021e 4130      		cpi r20,lo8(1)
 934 0220 01F0      		breq .L137
 935               	/* epilogue start */
 936               	.LBE18:
 324:../../common/action.c **** 
 937               		.loc 1 324 0 discriminator 4
 938 0222 2696      		adiw r28,6
 939 0224 0FB6      		in __tmp_reg__,__SREG__
 940 0226 F894      		cli
 941 0228 DEBF      		out __SP_H__,r29
 942 022a 0FBE      		out __SREG__,__tmp_reg__
 943 022c CDBF      		out __SP_L__,r28
 944 022e DF91      		pop r29
 945 0230 CF91      		pop r28
 946 0232 1F91      		pop r17
 947               	.LVL70:
 948 0234 0F91      		pop r16
 949 0236 FF90      		pop r15
 950 0238 EF90      		pop r14
 951 023a DF90      		pop r13
 952 023c CF90      		pop r12
 953               	.LVL71:
 954 023e BF90      		pop r11
 955               	.LBB19:
 214:../../common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 956               		.loc 1 214 0 discriminator 4
 957 0240 0C94 0000 		jmp default_layer_and
 958               	.LVL72:
 959               	.L81:
 216:../../common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 960               		.loc 1 216 0
 961 0244 6C29      		or r22,r12
 962 0246 7D29      		or r23,r13
 963 0248 8E29      		or r24,r14
 964 024a 9F29      		or r25,r15
 965               	.LVL73:
 966               	/* epilogue start */
 967               	.LBE19:
 324:../../common/action.c **** 
 968               		.loc 1 324 0
 969 024c 2696      		adiw r28,6
 970 024e 0FB6      		in __tmp_reg__,__SREG__
 971 0250 F894      		cli
 972 0252 DEBF      		out __SP_H__,r29
 973 0254 0FBE      		out __SREG__,__tmp_reg__
 974 0256 CDBF      		out __SP_L__,r28
 975 0258 DF91      		pop r29
 976 025a CF91      		pop r28
 977 025c 1F91      		pop r17
 978               	.LVL74:
 979 025e 0F91      		pop r16
 980 0260 FF90      		pop r15
 981 0262 EF90      		pop r14
 982 0264 DF90      		pop r13
 983 0266 CF90      		pop r12
 984               	.LVL75:
 985 0268 BF90      		pop r11
 986               	.LBB20:
 216:../../common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 987               		.loc 1 216 0
 988 026a 0C94 0000 		jmp default_layer_xor
 989               	.LVL76:
 990               	.L82:
 217:../../common/action.c ****                     }
 991               		.loc 1 217 0
 992 026e 0E94 0000 		call default_layer_and
 993               	.LVL77:
 994 0272 C701      		movw r24,r14
 995 0274 B601      		movw r22,r12
 996               	.L137:
 997               	/* epilogue start */
 998               	.LBE20:
 324:../../common/action.c **** 
 999               		.loc 1 324 0
 1000 0276 2696      		adiw r28,6
 1001 0278 0FB6      		in __tmp_reg__,__SREG__
 1002 027a F894      		cli
 1003 027c DEBF      		out __SP_H__,r29
 1004 027e 0FBE      		out __SREG__,__tmp_reg__
 1005 0280 CDBF      		out __SP_L__,r28
 1006 0282 DF91      		pop r29
 1007 0284 CF91      		pop r28
 1008 0286 1F91      		pop r17
 1009               	.LVL78:
 1010 0288 0F91      		pop r16
 1011 028a FF90      		pop r15
 1012 028c EF90      		pop r14
 1013 028e DF90      		pop r13
 1014 0290 CF90      		pop r12
 1015               	.LVL79:
 1016 0292 BF90      		pop r11
 1017               	.LBB21:
 217:../../common/action.c ****                     }
 1018               		.loc 1 217 0
 1019 0294 0C94 0000 		jmp default_layer_or
 1020               	.LVL80:
 1021               	.L78:
 1022               	.LBE21:
 222:../../common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1023               		.loc 1 222 0
 1024 0298 FF20      		tst r15
 1025 029a 01F0      		breq .L84
 222:../../common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1026               		.loc 1 222 0 is_stmt 0 discriminator 1
 1027 029c 9B2D      		mov r25,r11
 1028 029e 9170      		andi r25,lo8(1)
 1029 02a0 00C0      		rjmp .L85
 1030               	.L84:
 222:../../common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1031               		.loc 1 222 0 discriminator 2
 1032 02a2 9695      		lsr r25
 1033               	.L85:
 222:../../common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1034               		.loc 1 222 0 discriminator 4
 1035 02a4 9923      		tst r25
 1036 02a6 01F4      		brne .+2
 1037 02a8 00C0      		rjmp .L47
 1038               	.LVL81:
 1039               	.LBB22:
 224:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1040               		.loc 1 224 0 is_stmt 1
 1041 02aa 912F      		mov r25,r17
 1042 02ac 9295      		swap r25
 1043 02ae 9695      		lsr r25
 1044 02b0 9770      		andi r25,lo8(7)
 225:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1045               		.loc 1 225 0
 1046 02b2 990F      		lsl r25
 1047 02b4 990F      		lsl r25
 1048 02b6 812F      		mov r24,r17
 1049 02b8 8F70      		andi r24,lo8(15)
 1050 02ba C82E      		mov r12,r24
 1051               	.LVL82:
 1052 02bc D12C      		mov r13,__zero_reg__
 1053 02be E12C      		mov r14,__zero_reg__
 1054 02c0 F12C      		mov r15,__zero_reg__
 1055 02c2 092E      		mov r0,r25
 1056 02c4 00C0      		rjmp 2f
 1057               		1:
 1058 02c6 CC0C      		lsl r12
 1059 02c8 DD1C      		rol r13
 1060 02ca EE1C      		rol r14
 1061 02cc FF1C      		rol r15
 1062               		2:
 1063 02ce 0A94      		dec r0
 1064 02d0 02F4      		brpl 1b
 1065               	.LVL83:
 226:../../common/action.c ****                     switch (action.layer_bitop.op) {
 1066               		.loc 1 226 0
 1067 02d2 14FF      		sbrs r17,4
 1068 02d4 00C0      		rjmp .L105
 226:../../common/action.c ****                     switch (action.layer_bitop.op) {
 1069               		.loc 1 226 0 is_stmt 0 discriminator 1
 1070 02d6 0FE0      		ldi r16,lo8(15)
 1071 02d8 10E0      		ldi r17,0
 1072 02da 20E0      		ldi r18,0
 1073 02dc 30E0      		ldi r19,0
 1074 02de 00C0      		rjmp 2f
 1075               		1:
 1076 02e0 000F      		lsl r16
 1077 02e2 111F      		rol r17
 1078 02e4 221F      		rol r18
 1079 02e6 331F      		rol r19
 1080               		2:
 1081 02e8 9A95      		dec r25
 1082 02ea 02F4      		brpl 1b
 1083 02ec C901      		movw r24,r18
 1084 02ee B801      		movw r22,r16
 1085 02f0 6095      		com r22
 1086 02f2 7095      		com r23
 1087 02f4 8095      		com r24
 1088 02f6 9095      		com r25
 1089 02f8 00C0      		rjmp .L86
 1090               	.L105:
 226:../../common/action.c ****                     switch (action.layer_bitop.op) {
 1091               		.loc 1 226 0
 1092 02fa 60E0      		ldi r22,0
 1093 02fc 70E0      		ldi r23,0
 1094 02fe CB01      		movw r24,r22
 1095               	.L86:
 1096               	.LVL84:
 227:../../common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1097               		.loc 1 227 0 is_stmt 1 discriminator 4
 1098 0300 4B2D      		mov r20,r11
 1099 0302 4695      		lsr r20
 1100 0304 4695      		lsr r20
 1101 0306 4370      		andi r20,lo8(3)
 1102 0308 4230      		cpi r20,lo8(2)
 1103 030a 01F0      		breq .L88
 1104 030c 00F4      		brsh .L89
 1105 030e 6C29      		or r22,r12
 1106 0310 7D29      		or r23,r13
 1107 0312 8E29      		or r24,r14
 1108 0314 9F29      		or r25,r15
 1109               	.LVL85:
 1110 0316 4130      		cpi r20,lo8(1)
 1111 0318 01F0      		breq .L138
 1112               	/* epilogue start */
 1113               	.LBE22:
 324:../../common/action.c **** 
 1114               		.loc 1 324 0 discriminator 4
 1115 031a 2696      		adiw r28,6
 1116 031c 0FB6      		in __tmp_reg__,__SREG__
 1117 031e F894      		cli
 1118 0320 DEBF      		out __SP_H__,r29
 1119 0322 0FBE      		out __SREG__,__tmp_reg__
 1120 0324 CDBF      		out __SP_L__,r28
 1121 0326 DF91      		pop r29
 1122 0328 CF91      		pop r28
 1123 032a 1F91      		pop r17
 1124               	.LVL86:
 1125 032c 0F91      		pop r16
 1126 032e FF90      		pop r15
 1127 0330 EF90      		pop r14
 1128 0332 DF90      		pop r13
 1129 0334 CF90      		pop r12
 1130               	.LVL87:
 1131 0336 BF90      		pop r11
 1132               	.LBB23:
 228:../../common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1133               		.loc 1 228 0 discriminator 4
 1134 0338 0C94 0000 		jmp layer_and
 1135               	.LVL88:
 1136               	.L88:
 230:../../common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1137               		.loc 1 230 0
 1138 033c 6C29      		or r22,r12
 1139 033e 7D29      		or r23,r13
 1140 0340 8E29      		or r24,r14
 1141 0342 9F29      		or r25,r15
 1142               	.LVL89:
 1143               	/* epilogue start */
 1144               	.LBE23:
 324:../../common/action.c **** 
 1145               		.loc 1 324 0
 1146 0344 2696      		adiw r28,6
 1147 0346 0FB6      		in __tmp_reg__,__SREG__
 1148 0348 F894      		cli
 1149 034a DEBF      		out __SP_H__,r29
 1150 034c 0FBE      		out __SREG__,__tmp_reg__
 1151 034e CDBF      		out __SP_L__,r28
 1152 0350 DF91      		pop r29
 1153 0352 CF91      		pop r28
 1154 0354 1F91      		pop r17
 1155               	.LVL90:
 1156 0356 0F91      		pop r16
 1157 0358 FF90      		pop r15
 1158 035a EF90      		pop r14
 1159 035c DF90      		pop r13
 1160 035e CF90      		pop r12
 1161               	.LVL91:
 1162 0360 BF90      		pop r11
 1163               	.LBB24:
 230:../../common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1164               		.loc 1 230 0
 1165 0362 0C94 0000 		jmp layer_xor
 1166               	.LVL92:
 1167               	.L89:
 231:../../common/action.c ****                     }
 1168               		.loc 1 231 0
 1169 0366 0E94 0000 		call layer_and
 1170               	.LVL93:
 1171 036a C701      		movw r24,r14
 1172 036c B601      		movw r22,r12
 1173               	.L138:
 1174               	/* epilogue start */
 1175               	.LBE24:
 324:../../common/action.c **** 
 1176               		.loc 1 324 0
 1177 036e 2696      		adiw r28,6
 1178 0370 0FB6      		in __tmp_reg__,__SREG__
 1179 0372 F894      		cli
 1180 0374 DEBF      		out __SP_H__,r29
 1181 0376 0FBE      		out __SREG__,__tmp_reg__
 1182 0378 CDBF      		out __SP_L__,r28
 1183 037a DF91      		pop r29
 1184 037c CF91      		pop r28
 1185 037e 1F91      		pop r17
 1186               	.LVL94:
 1187 0380 0F91      		pop r16
 1188 0382 FF90      		pop r15
 1189 0384 EF90      		pop r14
 1190 0386 DF90      		pop r13
 1191 0388 CF90      		pop r12
 1192               	.LVL95:
 1193 038a BF90      		pop r11
 1194               	.LBB25:
 231:../../common/action.c ****                     }
 1195               		.loc 1 231 0
 1196 038c 0C94 0000 		jmp layer_or
 1197               	.LVL96:
 1198               	.L55:
 1199               	.LBE25:
 239:../../common/action.c ****                 case OP_TAP_TOGGLE:
 1200               		.loc 1 239 0
 1201 0390 113F      		cpi r17,lo8(-15)
 1202 0392 01F0      		breq .L92
 1203 0394 00F4      		brsh .L93
 1204 0396 103F      		cpi r17,lo8(-16)
 1205 0398 01F0      		breq .L94
 1206 039a 00C0      		rjmp .L91
 1207               	.L93:
 1208 039c 123F      		cpi r17,lo8(-14)
 1209 039e 01F0      		breq .L95
 1210 03a0 133F      		cpi r17,lo8(-13)
 1211 03a2 01F4      		brne .+2
 1212 03a4 00C0      		rjmp .L96
 1213 03a6 00C0      		rjmp .L91
 1214               	.L94:
 242:../../common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1215               		.loc 1 242 0
 1216 03a8 FF20      		tst r15
 1217 03aa 01F0      		breq .L97
 243:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 1218               		.loc 1 243 0
 1219 03ac 0530      		cpi r16,lo8(5)
 1220 03ae 00F0      		brlo .+2
 1221 03b0 00C0      		rjmp .L47
 1222               	.L98:
 244:../../common/action.c ****                         }
 1223               		.loc 1 244 0
 1224 03b2 8B2D      		mov r24,r11
 1225 03b4 8F71      		andi r24,lo8(31)
 1226               	/* epilogue start */
 324:../../common/action.c **** 
 1227               		.loc 1 324 0
 1228 03b6 2696      		adiw r28,6
 1229 03b8 0FB6      		in __tmp_reg__,__SREG__
 1230 03ba F894      		cli
 1231 03bc DEBF      		out __SP_H__,r29
 1232 03be 0FBE      		out __SREG__,__tmp_reg__
 1233 03c0 CDBF      		out __SP_L__,r28
 1234 03c2 DF91      		pop r29
 1235 03c4 CF91      		pop r28
 1236 03c6 1F91      		pop r17
 1237               	.LVL97:
 1238 03c8 0F91      		pop r16
 1239 03ca FF90      		pop r15
 1240 03cc EF90      		pop r14
 1241 03ce DF90      		pop r13
 1242 03d0 CF90      		pop r12
 1243               	.LVL98:
 1244 03d2 BF90      		pop r11
 244:../../common/action.c ****                         }
 1245               		.loc 1 244 0
 1246 03d4 0C94 0000 		jmp layer_invert
 1247               	.LVL99:
 1248               	.L97:
 247:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 1249               		.loc 1 247 0
 1250 03d8 0630      		cpi r16,lo8(6)
 1251 03da 00F0      		brlo .+2
 1252 03dc 00C0      		rjmp .L47
 1253 03de 00C0      		rjmp .L98
 1254               	.L92:
 253:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 1255               		.loc 1 253 0
 1256 03e0 FF20      		tst r15
 1257 03e2 01F0      		breq .L99
 1258               	.L100:
 253:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 1259               		.loc 1 253 0 is_stmt 0 discriminator 1
 1260 03e4 8B2D      		mov r24,r11
 1261 03e6 8F71      		andi r24,lo8(31)
 1262               	/* epilogue start */
 324:../../common/action.c **** 
 1263               		.loc 1 324 0 is_stmt 1 discriminator 1
 1264 03e8 2696      		adiw r28,6
 1265 03ea 0FB6      		in __tmp_reg__,__SREG__
 1266 03ec F894      		cli
 1267 03ee DEBF      		out __SP_H__,r29
 1268 03f0 0FBE      		out __SREG__,__tmp_reg__
 1269 03f2 CDBF      		out __SP_L__,r28
 1270 03f4 DF91      		pop r29
 1271 03f6 CF91      		pop r28
 1272 03f8 1F91      		pop r17
 1273               	.LVL100:
 1274 03fa 0F91      		pop r16
 1275 03fc FF90      		pop r15
 1276 03fe EF90      		pop r14
 1277 0400 DF90      		pop r13
 1278 0402 CF90      		pop r12
 1279               	.LVL101:
 1280 0404 BF90      		pop r11
 253:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 1281               		.loc 1 253 0 discriminator 1
 1282 0406 0C94 0000 		jmp layer_on
 1283               	.LVL102:
 1284               	.L95:
 257:../../common/action.c ****                                     layer_on(action.layer_tap.val);
 1285               		.loc 1 257 0
 1286 040a FF20      		tst r15
 1287 040c 01F0      		breq .L100
 1288               	.L99:
 254:../../common/action.c ****                     break;
 1289               		.loc 1 254 0
 1290 040e 8B2D      		mov r24,r11
 1291 0410 8F71      		andi r24,lo8(31)
 1292               	/* epilogue start */
 324:../../common/action.c **** 
 1293               		.loc 1 324 0
 1294 0412 2696      		adiw r28,6
 1295 0414 0FB6      		in __tmp_reg__,__SREG__
 1296 0416 F894      		cli
 1297 0418 DEBF      		out __SP_H__,r29
 1298 041a 0FBE      		out __SREG__,__tmp_reg__
 1299 041c CDBF      		out __SP_L__,r28
 1300 041e DF91      		pop r29
 1301 0420 CF91      		pop r28
 1302 0422 1F91      		pop r17
 1303               	.LVL103:
 1304 0424 0F91      		pop r16
 1305 0426 FF90      		pop r15
 1306 0428 EF90      		pop r14
 1307 042a DF90      		pop r13
 1308 042c CF90      		pop r12
 1309               	.LVL104:
 1310 042e BF90      		pop r11
 254:../../common/action.c ****                     break;
 1311               		.loc 1 254 0
 1312 0430 0C94 0000 		jmp layer_off
 1313               	.LVL105:
 1314               	.L96:
 261:../../common/action.c ****                                     layer_clear();
 1315               		.loc 1 261 0
 1316 0434 FF20      		tst r15
 1317 0436 01F0      		breq .L101
 261:../../common/action.c ****                                     layer_clear();
 1318               		.loc 1 261 0 is_stmt 0 discriminator 1
 1319 0438 8B2D      		mov r24,r11
 1320 043a 8F71      		andi r24,lo8(31)
 1321               	/* epilogue start */
 324:../../common/action.c **** 
 1322               		.loc 1 324 0 is_stmt 1 discriminator 1
 1323 043c 2696      		adiw r28,6
 1324 043e 0FB6      		in __tmp_reg__,__SREG__
 1325 0440 F894      		cli
 1326 0442 DEBF      		out __SP_H__,r29
 1327 0444 0FBE      		out __SREG__,__tmp_reg__
 1328 0446 CDBF      		out __SP_L__,r28
 1329 0448 DF91      		pop r29
 1330 044a CF91      		pop r28
 1331 044c 1F91      		pop r17
 1332               	.LVL106:
 1333 044e 0F91      		pop r16
 1334 0450 FF90      		pop r15
 1335 0452 EF90      		pop r14
 1336 0454 DF90      		pop r13
 1337 0456 CF90      		pop r12
 1338               	.LVL107:
 1339 0458 BF90      		pop r11
 261:../../common/action.c ****                                     layer_clear();
 1340               		.loc 1 261 0 discriminator 1
 1341 045a 0C94 0000 		jmp layer_move
 1342               	.LVL108:
 1343               	.L101:
 1344               	/* epilogue start */
 324:../../common/action.c **** 
 1345               		.loc 1 324 0
 1346 045e 2696      		adiw r28,6
 1347 0460 0FB6      		in __tmp_reg__,__SREG__
 1348 0462 F894      		cli
 1349 0464 DEBF      		out __SP_H__,r29
 1350 0466 0FBE      		out __SREG__,__tmp_reg__
 1351 0468 CDBF      		out __SP_L__,r28
 1352 046a DF91      		pop r29
 1353 046c CF91      		pop r28
 1354 046e 1F91      		pop r17
 1355               	.LVL109:
 1356 0470 0F91      		pop r16
 1357 0472 FF90      		pop r15
 1358 0474 EF90      		pop r14
 1359 0476 DF90      		pop r13
 1360 0478 CF90      		pop r12
 1361               	.LVL110:
 1362 047a BF90      		pop r11
 262:../../common/action.c ****                     break;
 1363               		.loc 1 262 0
 1364 047c 0C94 0000 		jmp layer_clear
 1365               	.LVL111:
 1366               	.L91:
 266:../../common/action.c ****                         if (tap_count > 0) {
 1367               		.loc 1 266 0
 1368 0480 FF20      		tst r15
 1369 0482 01F0      		breq .L102
 267:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1370               		.loc 1 267 0
 1371 0484 0023      		tst r16
 1372 0486 01F4      		brne .+2
 1373 0488 00C0      		rjmp .L100
 1374               	.L135:
 269:../../common/action.c ****                         } else {
 1375               		.loc 1 269 0
 1376 048a 812F      		mov r24,r17
 1377               	/* epilogue start */
 324:../../common/action.c **** 
 1378               		.loc 1 324 0
 1379 048c 2696      		adiw r28,6
 1380 048e 0FB6      		in __tmp_reg__,__SREG__
 1381 0490 F894      		cli
 1382 0492 DEBF      		out __SP_H__,r29
 1383 0494 0FBE      		out __SREG__,__tmp_reg__
 1384 0496 CDBF      		out __SP_L__,r28
 1385 0498 DF91      		pop r29
 1386 049a CF91      		pop r28
 1387 049c 1F91      		pop r17
 1388               	.LVL112:
 1389 049e 0F91      		pop r16
 1390 04a0 FF90      		pop r15
 1391 04a2 EF90      		pop r14
 1392 04a4 DF90      		pop r13
 1393 04a6 CF90      		pop r12
 1394               	.LVL113:
 1395 04a8 BF90      		pop r11
 269:../../common/action.c ****                         } else {
 1396               		.loc 1 269 0
 1397 04aa 0C94 0000 		jmp register_code
 1398               	.LVL114:
 1399               	.L102:
 275:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1400               		.loc 1 275 0
 1401 04ae 0023      		tst r16
 1402 04b0 01F4      		brne .+2
 1403 04b2 00C0      		rjmp .L99
 1404               	.L136:
 277:../../common/action.c ****                         } else {
 1405               		.loc 1 277 0
 1406 04b4 812F      		mov r24,r17
 1407               	/* epilogue start */
 324:../../common/action.c **** 
 1408               		.loc 1 324 0
 1409 04b6 2696      		adiw r28,6
 1410 04b8 0FB6      		in __tmp_reg__,__SREG__
 1411 04ba F894      		cli
 1412 04bc DEBF      		out __SP_H__,r29
 1413 04be 0FBE      		out __SREG__,__tmp_reg__
 1414 04c0 CDBF      		out __SP_L__,r28
 1415 04c2 DF91      		pop r29
 1416 04c4 CF91      		pop r28
 1417 04c6 1F91      		pop r17
 1418               	.LVL115:
 1419 04c8 0F91      		pop r16
 1420 04ca FF90      		pop r15
 1421 04cc EF90      		pop r14
 1422 04ce DF90      		pop r13
 1423 04d0 CF90      		pop r12
 1424               	.LVL116:
 1425 04d2 BF90      		pop r11
 277:../../common/action.c ****                         } else {
 1426               		.loc 1 277 0
 1427 04d4 0C94 0000 		jmp unregister_code
 1428               	.LVL117:
 1429               	.L56:
 291:../../common/action.c ****             break;
 1430               		.loc 1 291 0
 1431 04d8 4B2D      		mov r20,r11
 1432 04da 4F70      		andi r20,lo8(15)
 1433               	.LVL118:
 1434 04dc 612F      		mov r22,r17
 1435 04de C601      		movw r24,r12
 1436 04e0 0E94 0000 		call action_get_macro
 1437               	.LVL119:
 1438               	/* epilogue start */
 324:../../common/action.c **** 
 1439               		.loc 1 324 0
 1440 04e4 2696      		adiw r28,6
 1441 04e6 0FB6      		in __tmp_reg__,__SREG__
 1442 04e8 F894      		cli
 1443 04ea DEBF      		out __SP_H__,r29
 1444 04ec 0FBE      		out __SREG__,__tmp_reg__
 1445 04ee CDBF      		out __SP_L__,r28
 1446 04f0 DF91      		pop r29
 1447 04f2 CF91      		pop r28
 1448 04f4 1F91      		pop r17
 1449               	.LVL120:
 1450 04f6 0F91      		pop r16
 1451 04f8 FF90      		pop r15
 1452 04fa EF90      		pop r14
 1453 04fc DF90      		pop r13
 1454 04fe CF90      		pop r12
 1455               	.LVL121:
 1456 0500 BF90      		pop r11
 291:../../common/action.c ****             break;
 1457               		.loc 1 291 0
 1458 0502 0C94 0000 		jmp action_macro_play
 1459               	.LVL122:
 1460               	.L57:
 318:../../common/action.c ****             break;
 1461               		.loc 1 318 0
 1462 0506 4B2D      		mov r20,r11
 1463 0508 4F70      		andi r20,lo8(15)
 1464               	.LVL123:
 1465 050a 612F      		mov r22,r17
 1466 050c C601      		movw r24,r12
 1467               	/* epilogue start */
 324:../../common/action.c **** 
 1468               		.loc 1 324 0
 1469 050e 2696      		adiw r28,6
 1470 0510 0FB6      		in __tmp_reg__,__SREG__
 1471 0512 F894      		cli
 1472 0514 DEBF      		out __SP_H__,r29
 1473 0516 0FBE      		out __SREG__,__tmp_reg__
 1474 0518 CDBF      		out __SP_L__,r28
 1475 051a DF91      		pop r29
 1476 051c CF91      		pop r28
 1477 051e 1F91      		pop r17
 1478               	.LVL124:
 1479 0520 0F91      		pop r16
 1480 0522 FF90      		pop r15
 1481 0524 EF90      		pop r14
 1482 0526 DF90      		pop r13
 1483 0528 CF90      		pop r12
 1484               	.LVL125:
 1485 052a BF90      		pop r11
 318:../../common/action.c ****             break;
 1486               		.loc 1 318 0
 1487 052c 0C94 0000 		jmp action_function
 1488               	.LVL126:
 1489               	.L47:
 1490               	/* epilogue start */
 324:../../common/action.c **** 
 1491               		.loc 1 324 0
 1492 0530 2696      		adiw r28,6
 1493 0532 0FB6      		in __tmp_reg__,__SREG__
 1494 0534 F894      		cli
 1495 0536 DEBF      		out __SP_H__,r29
 1496 0538 0FBE      		out __SREG__,__tmp_reg__
 1497 053a CDBF      		out __SP_L__,r28
 1498 053c DF91      		pop r29
 1499 053e CF91      		pop r28
 1500 0540 1F91      		pop r17
 1501               	.LVL127:
 1502 0542 0F91      		pop r16
 1503 0544 FF90      		pop r15
 1504 0546 EF90      		pop r14
 1505 0548 DF90      		pop r13
 1506 054a CF90      		pop r12
 1507               	.LVL128:
 1508 054c BF90      		pop r11
 1509 054e 0895      		ret
 1510               		.cfi_endproc
 1511               	.LFE103:
 1513               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1514               	.global	clear_keyboard_but_mods
 1516               	clear_keyboard_but_mods:
 1517               	.LFB109:
 475:../../common/action.c ****     }
 476:../../common/action.c **** }
 477:../../common/action.c **** 
 478:../../common/action.c **** void clear_keyboard(void)
 479:../../common/action.c **** {
 480:../../common/action.c ****     clear_mods();
 481:../../common/action.c ****     clear_keyboard_but_mods();
 482:../../common/action.c **** }
 483:../../common/action.c **** 
 484:../../common/action.c **** void clear_keyboard_but_mods(void)
 485:../../common/action.c **** {
 1518               		.loc 1 485 0
 1519               		.cfi_startproc
 1520               	/* prologue: function */
 1521               	/* frame size = 0 */
 1522               	/* stack size = 0 */
 1523               	.L__stack_usage = 0
 486:../../common/action.c ****     clear_weak_mods();
 1524               		.loc 1 486 0
 1525 0000 0E94 0000 		call clear_weak_mods
 1526               	.LVL129:
 487:../../common/action.c ****     clear_keys();
 1527               		.loc 1 487 0
 1528 0004 0E94 0000 		call clear_keys
 1529               	.LVL130:
 488:../../common/action.c ****     send_keyboard_report();
 1530               		.loc 1 488 0
 1531 0008 0C94 0000 		jmp send_keyboard_report
 1532               	.LVL131:
 1533               		.cfi_endproc
 1534               	.LFE109:
 1536               		.section	.text.clear_keyboard,"ax",@progbits
 1537               	.global	clear_keyboard
 1539               	clear_keyboard:
 1540               	.LFB108:
 479:../../common/action.c ****     clear_mods();
 1541               		.loc 1 479 0
 1542               		.cfi_startproc
 1543               	/* prologue: function */
 1544               	/* frame size = 0 */
 1545               	/* stack size = 0 */
 1546               	.L__stack_usage = 0
 480:../../common/action.c ****     clear_keyboard_but_mods();
 1547               		.loc 1 480 0
 1548 0000 0E94 0000 		call clear_mods
 1549               	.LVL132:
 481:../../common/action.c **** }
 1550               		.loc 1 481 0
 1551 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1552               	.LVL133:
 1553               		.cfi_endproc
 1554               	.LFE108:
 1556               		.section	.text.is_tap_key,"ax",@progbits
 1557               	.global	is_tap_key
 1559               	is_tap_key:
 1560               	.LFB110:
 489:../../common/action.c **** #ifdef MOUSEKEY_ENABLE
 490:../../common/action.c ****     mousekey_clear();
 491:../../common/action.c ****     mousekey_send();
 492:../../common/action.c **** #endif
 493:../../common/action.c **** #ifdef EXTRAKEY_ENABLE
 494:../../common/action.c ****     host_system_send(0);
 495:../../common/action.c ****     host_consumer_send(0);
 496:../../common/action.c **** #endif
 497:../../common/action.c **** }
 498:../../common/action.c **** 
 499:../../common/action.c **** bool is_tap_key(key_t key)
 500:../../common/action.c **** {
 1561               		.loc 1 500 0
 1562               		.cfi_startproc
 1563               	.LVL134:
 1564               	/* prologue: function */
 1565               	/* frame size = 0 */
 1566               	/* stack size = 0 */
 1567               	.L__stack_usage = 0
 501:../../common/action.c ****     action_t action = layer_switch_get_action(key);
 1568               		.loc 1 501 0
 1569 0000 0E94 0000 		call layer_switch_get_action
 1570               	.LVL135:
 502:../../common/action.c **** 
 503:../../common/action.c ****     switch (action.kind.id) {
 1571               		.loc 1 503 0
 1572 0004 292F      		mov r18,r25
 1573 0006 2295      		swap r18
 1574 0008 2F70      		andi r18,lo8(15)
 1575 000a 2C30      		cpi r18,lo8(12)
 1576 000c 00F4      		brsh .L144
 1577 000e 2A30      		cpi r18,lo8(10)
 1578 0010 00F4      		brsh .L147
 1579 0012 2250      		subi r18,lo8(-(-2))
 1580 0014 2230      		cpi r18,lo8(2)
 1581 0016 00F4      		brsh .L143
 1582 0018 00C0      		rjmp .L147
 1583               	.L144:
 1584 001a 2C30      		cpi r18,lo8(12)
 1585 001c 01F0      		breq .L146
 1586 001e 2F30      		cpi r18,lo8(15)
 1587 0020 01F0      		breq .L146
 1588               	.L143:
 504:../../common/action.c ****         case ACT_LMODS_TAP:
 505:../../common/action.c ****         case ACT_RMODS_TAP:
 506:../../common/action.c ****         case ACT_LAYER_TAP:
 507:../../common/action.c ****         case ACT_LAYER_TAP_EXT:
 508:../../common/action.c ****             return true;
 509:../../common/action.c ****         case ACT_MACRO:
 510:../../common/action.c ****         case ACT_FUNCTION:
 511:../../common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 512:../../common/action.c ****             return false;
 513:../../common/action.c ****     }
 514:../../common/action.c ****     return false;
 1589               		.loc 1 514 0
 1590 0022 80E0      		ldi r24,0
 1591 0024 0895      		ret
 1592               	.L146:
 511:../../common/action.c ****             return false;
 1593               		.loc 1 511 0
 1594 0026 93FB      		bst r25,3
 1595 0028 8827      		clr r24
 1596 002a 80F9      		bld r24,0
 1597 002c 0895      		ret
 1598               	.L147:
 508:../../common/action.c ****         case ACT_MACRO:
 1599               		.loc 1 508 0
 1600 002e 81E0      		ldi r24,lo8(1)
 515:../../common/action.c **** }
 1601               		.loc 1 515 0
 1602 0030 0895      		ret
 1603               		.cfi_endproc
 1604               	.LFE110:
 1606               		.section	.text.debug_event,"ax",@progbits
 1607               	.global	debug_event
 1609               	debug_event:
 1610               	.LFB111:
 516:../../common/action.c **** 
 517:../../common/action.c **** 
 518:../../common/action.c **** /*
 519:../../common/action.c ****  * debug print
 520:../../common/action.c ****  */
 521:../../common/action.c **** void debug_event(keyevent_t event)
 522:../../common/action.c **** {
 1611               		.loc 1 522 0
 1612               		.cfi_startproc
 1613 0000 CF93      		push r28
 1614               	.LCFI16:
 1615               		.cfi_def_cfa_offset 3
 1616               		.cfi_offset 28, -2
 1617 0002 DF93      		push r29
 1618               	.LCFI17:
 1619               		.cfi_def_cfa_offset 4
 1620               		.cfi_offset 29, -3
 1621 0004 00D0      		rcall .
 1622 0006 00D0      		rcall .
 1623 0008 1F92      		push __zero_reg__
 1624               	.LCFI18:
 1625               		.cfi_def_cfa_offset 9
 1626 000a CDB7      		in r28,__SP_L__
 1627 000c DEB7      		in r29,__SP_H__
 1628               	.LCFI19:
 1629               		.cfi_def_cfa_register 28
 1630               	/* prologue: function */
 1631               	/* frame size = 5 */
 1632               	/* stack size = 7 */
 1633               	.L__stack_usage = 7
 1634               	/* epilogue start */
 523:../../common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 524:../../common/action.c **** }
 1635               		.loc 1 524 0
 1636 000e 0F90      		pop __tmp_reg__
 1637 0010 0F90      		pop __tmp_reg__
 1638 0012 0F90      		pop __tmp_reg__
 1639 0014 0F90      		pop __tmp_reg__
 1640 0016 0F90      		pop __tmp_reg__
 1641 0018 DF91      		pop r29
 1642 001a CF91      		pop r28
 1643 001c 0895      		ret
 1644               		.cfi_endproc
 1645               	.LFE111:
 1647               		.section	.text.debug_record,"ax",@progbits
 1648               	.global	debug_record
 1650               	debug_record:
 1651               	.LFB112:
 525:../../common/action.c **** 
 526:../../common/action.c **** void debug_record(keyrecord_t record)
 527:../../common/action.c **** {
 1652               		.loc 1 527 0
 1653               		.cfi_startproc
 1654 0000 CF93      		push r28
 1655               	.LCFI20:
 1656               		.cfi_def_cfa_offset 3
 1657               		.cfi_offset 28, -2
 1658 0002 DF93      		push r29
 1659               	.LCFI21:
 1660               		.cfi_def_cfa_offset 4
 1661               		.cfi_offset 29, -3
 1662 0004 00D0      		rcall .
 1663 0006 00D0      		rcall .
 1664 0008 00D0      		rcall .
 1665               	.LCFI22:
 1666               		.cfi_def_cfa_offset 10
 1667 000a CDB7      		in r28,__SP_L__
 1668 000c DEB7      		in r29,__SP_H__
 1669               	.LCFI23:
 1670               		.cfi_def_cfa_register 28
 1671               	/* prologue: function */
 1672               	/* frame size = 6 */
 1673               	/* stack size = 8 */
 1674               	.L__stack_usage = 8
 1675               	/* epilogue start */
 528:../../common/action.c ****     debug_event(record.event);
 529:../../common/action.c **** #ifndef NO_ACTION_TAPPING
 530:../../common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 531:../../common/action.c **** #endif
 532:../../common/action.c **** }
 1676               		.loc 1 532 0
 1677 000e 2696      		adiw r28,6
 1678 0010 0FB6      		in __tmp_reg__,__SREG__
 1679 0012 F894      		cli
 1680 0014 DEBF      		out __SP_H__,r29
 1681 0016 0FBE      		out __SREG__,__tmp_reg__
 1682 0018 CDBF      		out __SP_L__,r28
 1683 001a DF91      		pop r29
 1684 001c CF91      		pop r28
 1685 001e 0895      		ret
 1686               		.cfi_endproc
 1687               	.LFE112:
 1689               		.section	.text.debug_action,"ax",@progbits
 1690               	.global	debug_action
 1692               	debug_action:
 1693               	.LFB113:
 533:../../common/action.c **** 
 534:../../common/action.c **** void debug_action(action_t action)
 535:../../common/action.c **** {
 1694               		.loc 1 535 0
 1695               		.cfi_startproc
 1696               	.LVL136:
 1697               	/* prologue: function */
 1698               	/* frame size = 0 */
 1699               	/* stack size = 0 */
 1700               	.L__stack_usage = 0
 1701 0000 0895      		ret
 1702               		.cfi_endproc
 1703               	.LFE113:
 1705               		.comm	debug_config,1,1
 1706               		.comm	mk_wheel_time_to_max,1,1
 1707               		.comm	mk_wheel_max_speed,1,1
 1708               		.comm	mk_time_to_max,1,1
 1709               		.comm	mk_max_speed,1,1
 1710               		.comm	mk_interval,1,1
 1711               		.comm	mk_delay,1,1
 1712               		.text
 1713               	.Letext0:
 1714               		.file 3 "/usr/avr/include/stdint.h"
 1715               		.file 4 "../../common/keycode.h"
 1716               		.file 5 "../../common/action_code.h"
 1717               		.file 6 "../../common/action.h"
 1718               		.file 7 "../../common/debug_config.h"
 1719               		.file 8 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 1720               		.file 9 "../../common/mousekey.h"
 1721               		.file 10 "../../common/action_tapping.h"
 1722               		.file 11 "../../common/command.h"
 1723               		.file 12 "../../common/action_util.h"
 1724               		.file 13 "../../common/host.h"
 1725               		.file 14 "../../common/action_layer.h"
 1726               		.file 15 "../../common/action_macro.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/ccOEuSul.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccOEuSul.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccOEuSul.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccOEuSul.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccOEuSul.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccOEuSul.s:13     .text.action_exec:0000000000000000 action_exec
     /tmp/ccOEuSul.s:93     .text.register_code:0000000000000000 register_code
     /tmp/ccOEuSul.s:347    .text.unregister_code:0000000000000000 unregister_code
     /tmp/ccOEuSul.s:424    .text.register_mods:0000000000000000 register_mods
     /tmp/ccOEuSul.s:450    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/ccOEuSul.s:476    .text.process_action:0000000000000000 process_action
     /tmp/ccOEuSul.s:1516   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/ccOEuSul.s:1539   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/ccOEuSul.s:1559   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/ccOEuSul.s:1609   .text.debug_event:0000000000000000 debug_event
     /tmp/ccOEuSul.s:1650   .text.debug_record:0000000000000000 debug_record
     /tmp/ccOEuSul.s:1692   .text.debug_action:0000000000000000 debug_action
                            *COM*:0000000000000001 debug_config
                            *COM*:0000000000000001 mk_wheel_time_to_max
                            *COM*:0000000000000001 mk_wheel_max_speed
                            *COM*:0000000000000001 mk_time_to_max
                            *COM*:0000000000000001 mk_max_speed
                            *COM*:0000000000000001 mk_interval
                            *COM*:0000000000000001 mk_delay

UNDEFINED SYMBOLS
action_tapping_process
command_proc
add_key
add_mods
send_keyboard_report
host_system_send
host_consumer_send
del_key
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_invert
layer_on
layer_off
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
clear_mods
__do_clear_bss
