   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB102:
  15               		.file 1 "../../common/action.c"
   1:../../common/action.c **** /*
   2:../../common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/action.c **** 
   4:../../common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/action.c **** (at your option) any later version.
   8:../../common/action.c **** 
   9:../../common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/action.c **** GNU General Public License for more details.
  13:../../common/action.c **** 
  14:../../common/action.c **** You should have received a copy of the GNU General Public License
  15:../../common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/action.c **** */
  17:../../common/action.c **** #include "host.h"
  18:../../common/action.c **** #include "keycode.h"
  19:../../common/action.c **** #include "keyboard.h"
  20:../../common/action.c **** #include "mousekey.h"
  21:../../common/action.c **** #include "command.h"
  22:../../common/action.c **** #include "led.h"
  23:../../common/action.c **** #include "backlight.h"
  24:../../common/action.c **** #include "action_layer.h"
  25:../../common/action.c **** #include "action_tapping.h"
  26:../../common/action.c **** #include "action_macro.h"
  27:../../common/action.c **** #include "action_util.h"
  28:../../common/action.c **** #include "action.h"
  29:../../common/action.c **** 
  30:../../common/action.c **** #ifdef DEBUG_ACTION
  31:../../common/action.c **** #include "debug.h"
  32:../../common/action.c **** #else
  33:../../common/action.c **** #include "nodebug.h"
  34:../../common/action.c **** #endif
  35:../../common/action.c **** 
  36:../../common/action.c **** 
  37:../../common/action.c **** void action_exec(keyevent_t event)
  38:../../common/action.c **** {
  16               		.loc 1 38 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  39:../../common/action.c ****     if (!IS_NOEVENT(event)) {
  40:../../common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:../../common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:../../common/action.c ****     }
  43:../../common/action.c **** 
  44:../../common/action.c ****     keyrecord_t record = { .event = event };
  48               		.loc 1 44 0
  49 001e DE01      		movw r26,r28
  50 0020 1196      		adiw r26,1
  51 0022 86E0      		ldi r24,lo8(6)
  52 0024 FD01      		movw r30,r26
  53               		0:
  54 0026 1192      		st Z+,__zero_reg__
  55 0028 8A95      		dec r24
  56 002a 01F4      		brne 0b
  57 002c 85E0      		ldi r24,lo8(5)
  58 002e FE01      		movw r30,r28
  59 0030 3796      		adiw r30,7
  60               		0:
  61 0032 0190      		ld r0,Z+
  62 0034 0D92      		st X+,r0
  63 0036 8A95      		dec r24
  64 0038 01F4      		brne 0b
  45:../../common/action.c **** 
  46:../../common/action.c **** #ifndef NO_ACTION_TAPPING
  47:../../common/action.c ****     action_tapping_process(record);
  65               		.loc 1 47 0
  66 003a 4981      		ldd r20,Y+1
  67               	.LVL1:
  68 003c 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70 003e 6B81      		ldd r22,Y+3
  71 0040 7C81      		ldd r23,Y+4
  72 0042 8D81      		ldd r24,Y+5
  73 0044 9E81      		ldd r25,Y+6
  74 0046 0E94 0000 		call action_tapping_process
  75               	.LVL3:
  76               	/* epilogue start */
  48:../../common/action.c **** #else
  49:../../common/action.c ****     process_action(&record);
  50:../../common/action.c ****     if (!IS_NOEVENT(record.event)) {
  51:../../common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  52:../../common/action.c ****     }
  53:../../common/action.c **** #endif
  54:../../common/action.c **** }
  77               		.loc 1 54 0
  78 004a 2B96      		adiw r28,11
  79 004c 0FB6      		in __tmp_reg__,__SREG__
  80 004e F894      		cli
  81 0050 DEBF      		out __SP_H__,r29
  82 0052 0FBE      		out __SREG__,__tmp_reg__
  83 0054 CDBF      		out __SP_L__,r28
  84 0056 DF91      		pop r29
  85 0058 CF91      		pop r28
  86 005a 0895      		ret
  87               		.cfi_endproc
  88               	.LFE102:
  90               		.section	.text.register_code,"ax",@progbits
  91               	.global	register_code
  93               	register_code:
  94               	.LFB104:
  55:../../common/action.c **** 
  56:../../common/action.c **** void process_action(keyrecord_t *record)
  57:../../common/action.c **** {
  58:../../common/action.c ****     keyevent_t event = record->event;
  59:../../common/action.c **** #ifndef NO_ACTION_TAPPING
  60:../../common/action.c ****     uint8_t tap_count = record->tap.count;
  61:../../common/action.c **** #endif
  62:../../common/action.c **** 
  63:../../common/action.c ****     if (IS_NOEVENT(event)) { return; }
  64:../../common/action.c **** 
  65:../../common/action.c ****     action_t action = layer_switch_get_action(event.key);
  66:../../common/action.c ****     dprint("ACTION: "); debug_action(action);
  67:../../common/action.c **** #ifndef NO_ACTION_LAYER
  68:../../common/action.c ****     dprint(" layer_state: "); layer_debug();
  69:../../common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  70:../../common/action.c **** #endif
  71:../../common/action.c ****     dprintln();
  72:../../common/action.c **** 
  73:../../common/action.c ****     switch (action.kind.id) {
  74:../../common/action.c ****         /* Key and Mods */
  75:../../common/action.c ****         case ACT_LMODS:
  76:../../common/action.c ****         case ACT_RMODS:
  77:../../common/action.c ****             {
  78:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  79:../../common/action.c ****                                                                 action.key.mods<<4;
  80:../../common/action.c ****                 if (event.pressed) {
  81:../../common/action.c ****                     if (mods) {
  82:../../common/action.c ****                         add_weak_mods(mods);
  83:../../common/action.c ****                         send_keyboard_report();
  84:../../common/action.c ****                     }
  85:../../common/action.c ****                     register_code(action.key.code);
  86:../../common/action.c ****                 } else {
  87:../../common/action.c ****                     unregister_code(action.key.code);
  88:../../common/action.c ****                     if (mods) {
  89:../../common/action.c ****                         del_weak_mods(mods);
  90:../../common/action.c ****                         send_keyboard_report();
  91:../../common/action.c ****                     }
  92:../../common/action.c ****                 }
  93:../../common/action.c ****             }
  94:../../common/action.c ****             break;
  95:../../common/action.c **** #ifndef NO_ACTION_TAPPING
  96:../../common/action.c ****         case ACT_LMODS_TAP:
  97:../../common/action.c ****         case ACT_RMODS_TAP:
  98:../../common/action.c ****             {
  99:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 100:../../common/action.c ****                                                                     action.key.mods<<4;
 101:../../common/action.c ****                 switch (action.layer_tap.code) {
 102:../../common/action.c ****     #ifndef NO_ACTION_ONESHOT
 103:../../common/action.c ****                     case MODS_ONESHOT:
 104:../../common/action.c ****                         // Oneshot modifier
 105:../../common/action.c ****                         if (event.pressed) {
 106:../../common/action.c ****                             if (tap_count == 0) {
 107:../../common/action.c ****                                 register_mods(mods);
 108:../../common/action.c ****                             }
 109:../../common/action.c ****                             else if (tap_count == 1) {
 110:../../common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 111:../../common/action.c ****                                 set_oneshot_mods(mods);
 112:../../common/action.c ****                             }
 113:../../common/action.c ****                             else {
 114:../../common/action.c ****                                 register_mods(mods);
 115:../../common/action.c ****                             }
 116:../../common/action.c ****                         } else {
 117:../../common/action.c ****                             if (tap_count == 0) {
 118:../../common/action.c ****                                 clear_oneshot_mods();
 119:../../common/action.c ****                                 unregister_mods(mods);
 120:../../common/action.c ****                             }
 121:../../common/action.c ****                             else if (tap_count == 1) {
 122:../../common/action.c ****                                 // Retain Oneshot mods
 123:../../common/action.c ****                             }
 124:../../common/action.c ****                             else {
 125:../../common/action.c ****                                 clear_oneshot_mods();
 126:../../common/action.c ****                                 unregister_mods(mods);
 127:../../common/action.c ****                             }
 128:../../common/action.c ****                         }
 129:../../common/action.c ****                         break;
 130:../../common/action.c ****     #endif
 131:../../common/action.c ****                     case MODS_TAP_TOGGLE:
 132:../../common/action.c ****                         if (event.pressed) {
 133:../../common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 134:../../common/action.c ****                                 register_mods(mods);
 135:../../common/action.c ****                             }
 136:../../common/action.c ****                         } else {
 137:../../common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 138:../../common/action.c ****                                 unregister_mods(mods);
 139:../../common/action.c ****                             }
 140:../../common/action.c ****                         }
 141:../../common/action.c ****                         break;
 142:../../common/action.c ****                     default:
 143:../../common/action.c ****                         if (event.pressed) {
 144:../../common/action.c ****                             if (tap_count > 0) {
 145:../../common/action.c ****                                 if (record->tap.interrupted) {
 146:../../common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 147:../../common/action.c ****                                     // ad hoc: set 0 to cancel tap
 148:../../common/action.c ****                                     record->tap.count = 0;
 149:../../common/action.c ****                                     register_mods(mods);
 150:../../common/action.c ****                                 } else {
 151:../../common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 152:../../common/action.c ****                                     register_code(action.key.code);
 153:../../common/action.c ****                                 }
 154:../../common/action.c ****                             } else {
 155:../../common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 156:../../common/action.c ****                                 register_mods(mods);
 157:../../common/action.c ****                             }
 158:../../common/action.c ****                         } else {
 159:../../common/action.c ****                             if (tap_count > 0) {
 160:../../common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 161:../../common/action.c ****                                 unregister_code(action.key.code);
 162:../../common/action.c ****                             } else {
 163:../../common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 164:../../common/action.c ****                                 unregister_mods(mods);
 165:../../common/action.c ****                             }
 166:../../common/action.c ****                         }
 167:../../common/action.c ****                         break;
 168:../../common/action.c ****                 }
 169:../../common/action.c ****             }
 170:../../common/action.c ****             break;
 171:../../common/action.c **** #endif
 172:../../common/action.c **** #ifdef EXTRAKEY_ENABLE
 173:../../common/action.c ****         /* other HID usage */
 174:../../common/action.c ****         case ACT_USAGE:
 175:../../common/action.c ****             switch (action.usage.page) {
 176:../../common/action.c ****                 case PAGE_SYSTEM:
 177:../../common/action.c ****                     if (event.pressed) {
 178:../../common/action.c ****                         host_system_send(action.usage.code);
 179:../../common/action.c ****                     } else {
 180:../../common/action.c ****                         host_system_send(0);
 181:../../common/action.c ****                     }
 182:../../common/action.c ****                     break;
 183:../../common/action.c ****                 case PAGE_CONSUMER:
 184:../../common/action.c ****                     if (event.pressed) {
 185:../../common/action.c ****                         host_consumer_send(action.usage.code);
 186:../../common/action.c ****                     } else {
 187:../../common/action.c ****                         host_consumer_send(0);
 188:../../common/action.c ****                     }
 189:../../common/action.c ****                     break;
 190:../../common/action.c ****             }
 191:../../common/action.c ****             break;
 192:../../common/action.c **** #endif
 193:../../common/action.c **** #ifdef MOUSEKEY_ENABLE
 194:../../common/action.c ****         /* Mouse key */
 195:../../common/action.c ****         case ACT_MOUSEKEY:
 196:../../common/action.c ****             if (event.pressed) {
 197:../../common/action.c ****                 mousekey_on(action.key.code);
 198:../../common/action.c ****                 mousekey_send();
 199:../../common/action.c ****             } else {
 200:../../common/action.c ****                 mousekey_off(action.key.code);
 201:../../common/action.c ****                 mousekey_send();
 202:../../common/action.c ****             }
 203:../../common/action.c ****             break;
 204:../../common/action.c **** #endif
 205:../../common/action.c **** #ifndef NO_ACTION_LAYER
 206:../../common/action.c ****         case ACT_LAYER:
 207:../../common/action.c ****             if (action.layer_bitop.on == 0) {
 208:../../common/action.c ****                 /* Default Layer Bitwise Operation */
 209:../../common/action.c ****                 if (!event.pressed) {
 210:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 211:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 212:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 213:../../common/action.c ****                     switch (action.layer_bitop.op) {
 214:../../common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 215:../../common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 216:../../common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 217:../../common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 218:../../common/action.c ****                     }
 219:../../common/action.c ****                 }
 220:../../common/action.c ****             } else {
 221:../../common/action.c ****                 /* Layer Bitwise Operation */
 222:../../common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 223:../../common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 224:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 225:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 226:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 227:../../common/action.c ****                     switch (action.layer_bitop.op) {
 228:../../common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 229:../../common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 230:../../common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 231:../../common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 232:../../common/action.c ****                     }
 233:../../common/action.c ****                 }
 234:../../common/action.c ****             }
 235:../../common/action.c ****             break;
 236:../../common/action.c ****     #ifndef NO_ACTION_TAPPING
 237:../../common/action.c ****         case ACT_LAYER_TAP:
 238:../../common/action.c ****         case ACT_LAYER_TAP_EXT:
 239:../../common/action.c ****             switch (action.layer_tap.code) {
 240:../../common/action.c ****                 case OP_TAP_TOGGLE:
 241:../../common/action.c ****                     /* tap toggle */
 242:../../common/action.c ****                     if (event.pressed) {
 243:../../common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 244:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 245:../../common/action.c ****                         }
 246:../../common/action.c ****                     } else {
 247:../../common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 248:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 249:../../common/action.c ****                         }
 250:../../common/action.c ****                     }
 251:../../common/action.c ****                     break;
 252:../../common/action.c ****                 case OP_ON_OFF:
 253:../../common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 254:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 255:../../common/action.c ****                     break;
 256:../../common/action.c ****                 case OP_OFF_ON:
 257:../../common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 258:../../common/action.c ****                                     layer_on(action.layer_tap.val);
 259:../../common/action.c ****                     break;
 260:../../common/action.c ****                 case OP_SET_CLEAR:
 261:../../common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 262:../../common/action.c ****                                     layer_clear();
 263:../../common/action.c ****                     break;
 264:../../common/action.c ****                 default:
 265:../../common/action.c ****                     /* tap key */
 266:../../common/action.c ****                     if (event.pressed) {
 267:../../common/action.c ****                         if (tap_count > 0) {
 268:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 269:../../common/action.c ****                             register_code(action.layer_tap.code);
 270:../../common/action.c ****                         } else {
 271:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 272:../../common/action.c ****                             layer_on(action.layer_tap.val);
 273:../../common/action.c ****                         }
 274:../../common/action.c ****                     } else {
 275:../../common/action.c ****                         if (tap_count > 0) {
 276:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 277:../../common/action.c ****                             unregister_code(action.layer_tap.code);
 278:../../common/action.c ****                         } else {
 279:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 280:../../common/action.c ****                             layer_off(action.layer_tap.val);
 281:../../common/action.c ****                         }
 282:../../common/action.c ****                     }
 283:../../common/action.c ****                     break;
 284:../../common/action.c ****             }
 285:../../common/action.c ****             break;
 286:../../common/action.c ****     #endif
 287:../../common/action.c **** #endif
 288:../../common/action.c ****         /* Extentions */
 289:../../common/action.c **** #ifndef NO_ACTION_MACRO
 290:../../common/action.c ****         case ACT_MACRO:
 291:../../common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 292:../../common/action.c ****             break;
 293:../../common/action.c **** #endif
 294:../../common/action.c **** #ifdef BACKLIGHT_ENABLE
 295:../../common/action.c ****         case ACT_BACKLIGHT:
 296:../../common/action.c ****             if (!event.pressed) {
 297:../../common/action.c ****                 switch (action.backlight.id) {
 298:../../common/action.c ****                     case BACKLIGHT_INCREASE:
 299:../../common/action.c ****                         backlight_increase();
 300:../../common/action.c ****                         break;
 301:../../common/action.c ****                     case BACKLIGHT_DECREASE:
 302:../../common/action.c ****                         backlight_decrease();
 303:../../common/action.c ****                         break;
 304:../../common/action.c ****                     case BACKLIGHT_TOGGLE:
 305:../../common/action.c ****                         backlight_toggle();
 306:../../common/action.c ****                         break;
 307:../../common/action.c ****                     case BACKLIGHT_STEP:
 308:../../common/action.c ****                         backlight_step();
 309:../../common/action.c ****                         break;
 310:../../common/action.c ****                 }
 311:../../common/action.c ****             }
 312:../../common/action.c ****             break;
 313:../../common/action.c **** #endif
 314:../../common/action.c ****         case ACT_COMMAND:
 315:../../common/action.c ****             break;
 316:../../common/action.c **** #ifndef NO_ACTION_FUNCTION
 317:../../common/action.c ****         case ACT_FUNCTION:
 318:../../common/action.c ****             action_function(record, action.func.id, action.func.opt);
 319:../../common/action.c ****             break;
 320:../../common/action.c **** #endif
 321:../../common/action.c ****         default:
 322:../../common/action.c ****             break;
 323:../../common/action.c ****     }
 324:../../common/action.c **** }
 325:../../common/action.c **** 
 326:../../common/action.c **** 
 327:../../common/action.c **** 
 328:../../common/action.c **** 
 329:../../common/action.c **** /*
 330:../../common/action.c ****  * Utilities for actions.
 331:../../common/action.c ****  */
 332:../../common/action.c **** void register_code(uint8_t code)
 333:../../common/action.c **** {
  95               		.loc 1 333 0
  96               		.cfi_startproc
  97               	.LVL4:
  98 0000 CF93      		push r28
  99               	.LCFI4:
 100               		.cfi_def_cfa_offset 3
 101               		.cfi_offset 28, -2
 102               	/* prologue: function */
 103               	/* frame size = 0 */
 104               	/* stack size = 1 */
 105               	.L__stack_usage = 1
 334:../../common/action.c ****     if (code == KC_NO) {
 106               		.loc 1 334 0
 107 0002 8823      		tst r24
 108 0004 01F4      		brne .+2
 109 0006 00C0      		rjmp .L2
 110 0008 C82F      		mov r28,r24
 335:../../common/action.c ****         return;
 336:../../common/action.c ****     }
 337:../../common/action.c **** 
 338:../../common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 339:../../common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 340:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 341:../../common/action.c ****         // Resync: ignore if caps lock already is on
 342:../../common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 343:../../common/action.c **** #endif
 344:../../common/action.c ****         add_key(KC_CAPSLOCK);
 345:../../common/action.c ****         send_keyboard_report();
 346:../../common/action.c ****         del_key(KC_CAPSLOCK);
 347:../../common/action.c ****         send_keyboard_report();
 348:../../common/action.c ****     }
 349:../../common/action.c **** 
 350:../../common/action.c ****     else if (KC_LOCKING_NUM == code) {
 351:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 352:../../common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 353:../../common/action.c **** #endif
 354:../../common/action.c ****         add_key(KC_NUMLOCK);
 355:../../common/action.c ****         send_keyboard_report();
 356:../../common/action.c ****         del_key(KC_NUMLOCK);
 357:../../common/action.c ****         send_keyboard_report();
 358:../../common/action.c ****     }
 359:../../common/action.c **** 
 360:../../common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 361:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 362:../../common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 363:../../common/action.c **** #endif
 364:../../common/action.c ****         add_key(KC_SCROLLLOCK);
 365:../../common/action.c ****         send_keyboard_report();
 366:../../common/action.c ****         del_key(KC_SCROLLLOCK);
 367:../../common/action.c ****         send_keyboard_report();
 368:../../common/action.c ****     }
 369:../../common/action.c **** #endif
 370:../../common/action.c **** 
 371:../../common/action.c ****     else if IS_KEY(code) {
 111               		.loc 1 371 0
 112 000a 8CEF      		ldi r24,lo8(-4)
 113               	.LVL5:
 114 000c 8C0F      		add r24,r28
 115 000e 813A      		cpi r24,lo8(-95)
 116 0010 00F4      		brsh .L5
 372:../../common/action.c ****         // TODO: should push command_proc out of this block?
 373:../../common/action.c ****         if (command_proc(code)) return;
 117               		.loc 1 373 0
 118 0012 8C2F      		mov r24,r28
 119 0014 0E94 0000 		call command_proc
 120               	.LVL6:
 121 0018 8111      		cpse r24,__zero_reg__
 122 001a 00C0      		rjmp .L2
 374:../../common/action.c **** 
 375:../../common/action.c **** #ifndef NO_ACTION_ONESHOT
 376:../../common/action.c **** /* TODO: remove
 377:../../common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 378:../../common/action.c ****             uint8_t tmp_mods = get_mods();
 379:../../common/action.c ****             add_mods(oneshot_state.mods);
 380:../../common/action.c **** 
 381:../../common/action.c ****             add_key(code);
 382:../../common/action.c ****             send_keyboard_report();
 383:../../common/action.c **** 
 384:../../common/action.c ****             set_mods(tmp_mods);
 385:../../common/action.c ****             send_keyboard_report();
 386:../../common/action.c ****             oneshot_cancel();
 387:../../common/action.c ****         } else 
 388:../../common/action.c **** */
 389:../../common/action.c **** #endif
 390:../../common/action.c ****         {
 391:../../common/action.c ****             add_key(code);
 123               		.loc 1 391 0
 124 001c 8C2F      		mov r24,r28
 125 001e 0E94 0000 		call add_key
 126               	.LVL7:
 127 0022 00C0      		rjmp .L32
 128               	.L5:
 392:../../common/action.c ****             send_keyboard_report();
 393:../../common/action.c ****         }
 394:../../common/action.c ****     }
 395:../../common/action.c ****     else if IS_MOD(code) {
 129               		.loc 1 395 0
 130 0024 80E2      		ldi r24,lo8(32)
 131 0026 8C0F      		add r24,r28
 132 0028 8830      		cpi r24,lo8(8)
 133 002a 00F4      		brsh .L7
 396:../../common/action.c ****         add_mods(MOD_BIT(code));
 134               		.loc 1 396 0
 135 002c C770      		andi r28,lo8(7)
 136               	.LVL8:
 137 002e 81E0      		ldi r24,lo8(1)
 138 0030 00C0      		rjmp 2f
 139               		1:
 140 0032 880F      		lsl r24
 141               		2:
 142 0034 CA95      		dec r28
 143 0036 02F4      		brpl 1b
 144 0038 0E94 0000 		call add_mods
 145               	.LVL9:
 146               	.L32:
 147               	/* epilogue start */
 397:../../common/action.c ****         send_keyboard_report();
 398:../../common/action.c ****     }
 399:../../common/action.c ****     else if IS_SYSTEM(code) {
 400:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 401:../../common/action.c ****     }
 402:../../common/action.c ****     else if IS_CONSUMER(code) {
 403:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 404:../../common/action.c ****     }
 405:../../common/action.c **** }
 148               		.loc 1 405 0
 149 003c CF91      		pop r28
 397:../../common/action.c ****         send_keyboard_report();
 150               		.loc 1 397 0
 151 003e 0C94 0000 		jmp send_keyboard_report
 152               	.LVL10:
 153               	.L7:
 399:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 154               		.loc 1 399 0
 155 0042 8BE5      		ldi r24,lo8(91)
 156 0044 8C0F      		add r24,r28
 157 0046 8330      		cpi r24,lo8(3)
 158 0048 00F4      		brsh .L8
 400:../../common/action.c ****     }
 159               		.loc 1 400 0
 160 004a C53A      		cpi r28,lo8(-91)
 161 004c 01F0      		breq .L11
 400:../../common/action.c ****     }
 162               		.loc 1 400 0 is_stmt 0 discriminator 1
 163 004e C63A      		cpi r28,lo8(-90)
 164 0050 01F0      		breq .L12
 400:../../common/action.c ****     }
 165               		.loc 1 400 0
 166 0052 83E8      		ldi r24,lo8(-125)
 167 0054 90E0      		ldi r25,0
 168 0056 00C0      		rjmp .L9
 169               	.L11:
 170 0058 81E8      		ldi r24,lo8(-127)
 171 005a 90E0      		ldi r25,0
 172 005c 00C0      		rjmp .L9
 173               	.L12:
 174 005e 82E8      		ldi r24,lo8(-126)
 175 0060 90E0      		ldi r25,0
 176               	.L9:
 177               	/* epilogue start */
 178               		.loc 1 405 0 is_stmt 1 discriminator 12
 179 0062 CF91      		pop r28
 180               	.LVL11:
 400:../../common/action.c ****     }
 181               		.loc 1 400 0 discriminator 12
 182 0064 0C94 0000 		jmp host_system_send
 183               	.LVL12:
 184               	.L8:
 402:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 185               		.loc 1 402 0
 186 0068 88E5      		ldi r24,lo8(88)
 187 006a 8C0F      		add r24,r28
 188 006c 8331      		cpi r24,lo8(19)
 189 006e 00F0      		brlo .+2
 190 0070 00C0      		rjmp .L2
 403:../../common/action.c ****     }
 191               		.loc 1 403 0
 192 0072 C83A      		cpi r28,lo8(-88)
 193 0074 01F0      		breq .L13
 403:../../common/action.c ****     }
 194               		.loc 1 403 0 is_stmt 0 discriminator 1
 195 0076 C93A      		cpi r28,lo8(-87)
 196 0078 01F0      		breq .L14
 403:../../common/action.c ****     }
 197               		.loc 1 403 0 discriminator 3
 198 007a CA3A      		cpi r28,lo8(-86)
 199 007c 01F0      		breq .L15
 403:../../common/action.c ****     }
 200               		.loc 1 403 0 discriminator 5
 201 007e CB3A      		cpi r28,lo8(-85)
 202 0080 01F0      		breq .L16
 403:../../common/action.c ****     }
 203               		.loc 1 403 0 discriminator 7
 204 0082 CC3A      		cpi r28,lo8(-84)
 205 0084 01F0      		breq .L17
 403:../../common/action.c ****     }
 206               		.loc 1 403 0 discriminator 9
 207 0086 CD3A      		cpi r28,lo8(-83)
 208 0088 01F0      		breq .L18
 403:../../common/action.c ****     }
 209               		.loc 1 403 0 discriminator 11
 210 008a C03B      		cpi r28,lo8(-80)
 211 008c 01F0      		breq .L19
 403:../../common/action.c ****     }
 212               		.loc 1 403 0 discriminator 13
 213 008e CE3A      		cpi r28,lo8(-82)
 214 0090 01F0      		breq .L20
 403:../../common/action.c ****     }
 215               		.loc 1 403 0 discriminator 15
 216 0092 CF3A      		cpi r28,lo8(-81)
 217 0094 01F0      		breq .L21
 403:../../common/action.c ****     }
 218               		.loc 1 403 0 discriminator 17
 219 0096 C13B      		cpi r28,lo8(-79)
 220 0098 01F0      		breq .L22
 403:../../common/action.c ****     }
 221               		.loc 1 403 0 discriminator 19
 222 009a C23B      		cpi r28,lo8(-78)
 223 009c 01F0      		breq .L23
 403:../../common/action.c ****     }
 224               		.loc 1 403 0 discriminator 21
 225 009e C33B      		cpi r28,lo8(-77)
 226 00a0 01F0      		breq .L24
 403:../../common/action.c ****     }
 227               		.loc 1 403 0 discriminator 23
 228 00a2 C43B      		cpi r28,lo8(-76)
 229 00a4 01F0      		breq .L25
 403:../../common/action.c ****     }
 230               		.loc 1 403 0 discriminator 25
 231 00a6 C53B      		cpi r28,lo8(-75)
 232 00a8 01F0      		breq .L26
 403:../../common/action.c ****     }
 233               		.loc 1 403 0 discriminator 27
 234 00aa C63B      		cpi r28,lo8(-74)
 235 00ac 01F0      		breq .L27
 403:../../common/action.c ****     }
 236               		.loc 1 403 0 discriminator 29
 237 00ae C73B      		cpi r28,lo8(-73)
 238 00b0 01F0      		breq .L28
 403:../../common/action.c ****     }
 239               		.loc 1 403 0 discriminator 31
 240 00b2 C83B      		cpi r28,lo8(-72)
 241 00b4 01F0      		breq .L29
 403:../../common/action.c ****     }
 242               		.loc 1 403 0 discriminator 33
 243 00b6 C93B      		cpi r28,lo8(-71)
 244 00b8 01F0      		breq .L30
 403:../../common/action.c ****     }
 245               		.loc 1 403 0 discriminator 35
 246 00ba CA3B      		cpi r28,lo8(-70)
 247 00bc 01F0      		breq .L31
 403:../../common/action.c ****     }
 248               		.loc 1 403 0
 249 00be 80E0      		ldi r24,0
 250 00c0 90E0      		ldi r25,0
 251 00c2 00C0      		rjmp .L10
 252               	.L13:
 253 00c4 82EE      		ldi r24,lo8(-30)
 254 00c6 90E0      		ldi r25,0
 255 00c8 00C0      		rjmp .L10
 256               	.L14:
 257 00ca 89EE      		ldi r24,lo8(-23)
 258 00cc 90E0      		ldi r25,0
 259 00ce 00C0      		rjmp .L10
 260               	.L15:
 261 00d0 8AEE      		ldi r24,lo8(-22)
 262 00d2 90E0      		ldi r25,0
 263 00d4 00C0      		rjmp .L10
 264               	.L16:
 265 00d6 85EB      		ldi r24,lo8(-75)
 266 00d8 90E0      		ldi r25,0
 267 00da 00C0      		rjmp .L10
 268               	.L17:
 269 00dc 86EB      		ldi r24,lo8(-74)
 270 00de 90E0      		ldi r25,0
 271 00e0 00C0      		rjmp .L10
 272               	.L18:
 273 00e2 87EB      		ldi r24,lo8(-73)
 274 00e4 90E0      		ldi r25,0
 275 00e6 00C0      		rjmp .L10
 276               	.L19:
 277 00e8 8CEC      		ldi r24,lo8(-52)
 278 00ea 90E0      		ldi r25,0
 279 00ec 00C0      		rjmp .L10
 280               	.L20:
 281 00ee 8DEC      		ldi r24,lo8(-51)
 282 00f0 90E0      		ldi r25,0
 283 00f2 00C0      		rjmp .L10
 284               	.L21:
 285 00f4 83E8      		ldi r24,lo8(-125)
 286 00f6 91E0      		ldi r25,lo8(1)
 287 00f8 00C0      		rjmp .L10
 288               	.L22:
 289 00fa 8AE8      		ldi r24,lo8(-118)
 290 00fc 91E0      		ldi r25,lo8(1)
 291 00fe 00C0      		rjmp .L10
 292               	.L23:
 293 0100 82E9      		ldi r24,lo8(-110)
 294 0102 91E0      		ldi r25,lo8(1)
 295 0104 00C0      		rjmp .L10
 296               	.L24:
 297 0106 84E9      		ldi r24,lo8(-108)
 298 0108 91E0      		ldi r25,lo8(1)
 299 010a 00C0      		rjmp .L10
 300               	.L25:
 301 010c 81E2      		ldi r24,lo8(33)
 302 010e 92E0      		ldi r25,lo8(2)
 303 0110 00C0      		rjmp .L10
 304               	.L26:
 305 0112 83E2      		ldi r24,lo8(35)
 306 0114 92E0      		ldi r25,lo8(2)
 307 0116 00C0      		rjmp .L10
 308               	.L27:
 309 0118 84E2      		ldi r24,lo8(36)
 310 011a 92E0      		ldi r25,lo8(2)
 311 011c 00C0      		rjmp .L10
 312               	.L28:
 313 011e 85E2      		ldi r24,lo8(37)
 314 0120 92E0      		ldi r25,lo8(2)
 315 0122 00C0      		rjmp .L10
 316               	.L29:
 317 0124 86E2      		ldi r24,lo8(38)
 318 0126 92E0      		ldi r25,lo8(2)
 319 0128 00C0      		rjmp .L10
 320               	.L30:
 321 012a 87E2      		ldi r24,lo8(39)
 322 012c 92E0      		ldi r25,lo8(2)
 323 012e 00C0      		rjmp .L10
 324               	.L31:
 325 0130 8AE2      		ldi r24,lo8(42)
 326 0132 92E0      		ldi r25,lo8(2)
 327               	.L10:
 328               	/* epilogue start */
 329               		.loc 1 405 0 is_stmt 1 discriminator 76
 330 0134 CF91      		pop r28
 331               	.LVL13:
 403:../../common/action.c ****     }
 332               		.loc 1 403 0 discriminator 76
 333 0136 0C94 0000 		jmp host_consumer_send
 334               	.LVL14:
 335               	.L2:
 336               	/* epilogue start */
 337               		.loc 1 405 0
 338 013a CF91      		pop r28
 339 013c 0895      		ret
 340               		.cfi_endproc
 341               	.LFE104:
 343               		.section	.text.unregister_code,"ax",@progbits
 344               	.global	unregister_code
 346               	unregister_code:
 347               	.LFB105:
 406:../../common/action.c **** 
 407:../../common/action.c **** void unregister_code(uint8_t code)
 408:../../common/action.c **** {
 348               		.loc 1 408 0
 349               		.cfi_startproc
 350               	.LVL15:
 351               	/* prologue: function */
 352               	/* frame size = 0 */
 353               	/* stack size = 0 */
 354               	.L__stack_usage = 0
 409:../../common/action.c ****     if (code == KC_NO) {
 355               		.loc 1 409 0
 356 0000 8823      		tst r24
 357 0002 01F0      		breq .L34
 410:../../common/action.c ****         return;
 411:../../common/action.c ****     }
 412:../../common/action.c **** 
 413:../../common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 414:../../common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 415:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 416:../../common/action.c ****         // Resync: ignore if caps lock already is off
 417:../../common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 418:../../common/action.c **** #endif
 419:../../common/action.c ****         add_key(KC_CAPSLOCK);
 420:../../common/action.c ****         send_keyboard_report();
 421:../../common/action.c ****         del_key(KC_CAPSLOCK);
 422:../../common/action.c ****         send_keyboard_report();
 423:../../common/action.c ****     }
 424:../../common/action.c **** 
 425:../../common/action.c ****     else if (KC_LOCKING_NUM == code) {
 426:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 427:../../common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 428:../../common/action.c **** #endif
 429:../../common/action.c ****         add_key(KC_NUMLOCK);
 430:../../common/action.c ****         send_keyboard_report();
 431:../../common/action.c ****         del_key(KC_NUMLOCK);
 432:../../common/action.c ****         send_keyboard_report();
 433:../../common/action.c ****     }
 434:../../common/action.c **** 
 435:../../common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 436:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 437:../../common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 438:../../common/action.c **** #endif
 439:../../common/action.c ****         add_key(KC_SCROLLLOCK);
 440:../../common/action.c ****         send_keyboard_report();
 441:../../common/action.c ****         del_key(KC_SCROLLLOCK);
 442:../../common/action.c ****         send_keyboard_report();
 443:../../common/action.c ****     }
 444:../../common/action.c **** #endif
 445:../../common/action.c **** 
 446:../../common/action.c ****     else if IS_KEY(code) {
 358               		.loc 1 446 0
 359 0004 9CEF      		ldi r25,lo8(-4)
 360 0006 980F      		add r25,r24
 361 0008 913A      		cpi r25,lo8(-95)
 362 000a 00F4      		brsh .L36
 447:../../common/action.c ****         del_key(code);
 363               		.loc 1 447 0
 364 000c 0E94 0000 		call del_key
 365               	.LVL16:
 366 0010 00C0      		rjmp .L42
 367               	.LVL17:
 368               	.L36:
 448:../../common/action.c ****         send_keyboard_report();
 449:../../common/action.c ****     }
 450:../../common/action.c ****     else if IS_MOD(code) {
 369               		.loc 1 450 0
 370 0012 90E2      		ldi r25,lo8(32)
 371 0014 980F      		add r25,r24
 372 0016 9830      		cpi r25,lo8(8)
 373 0018 00F4      		brsh .L37
 451:../../common/action.c ****         del_mods(MOD_BIT(code));
 374               		.loc 1 451 0
 375 001a 8770      		andi r24,lo8(7)
 376               	.LVL18:
 377 001c 91E0      		ldi r25,lo8(1)
 378 001e 00C0      		rjmp 2f
 379               		1:
 380 0020 990F      		lsl r25
 381               		2:
 382 0022 8A95      		dec r24
 383 0024 02F4      		brpl 1b
 384 0026 892F      		mov r24,r25
 385 0028 0E94 0000 		call del_mods
 386               	.LVL19:
 387               	.L42:
 452:../../common/action.c ****         send_keyboard_report();
 388               		.loc 1 452 0
 389 002c 0C94 0000 		jmp send_keyboard_report
 390               	.LVL20:
 391               	.L37:
 453:../../common/action.c ****     }
 454:../../common/action.c ****     else if IS_SYSTEM(code) {
 392               		.loc 1 454 0
 393 0030 9BE5      		ldi r25,lo8(91)
 394 0032 980F      		add r25,r24
 395 0034 9330      		cpi r25,lo8(3)
 396 0036 00F4      		brsh .L38
 455:../../common/action.c ****         host_system_send(0);
 397               		.loc 1 455 0
 398 0038 80E0      		ldi r24,0
 399 003a 90E0      		ldi r25,0
 400               	.LVL21:
 401 003c 0C94 0000 		jmp host_system_send
 402               	.LVL22:
 403               	.L38:
 456:../../common/action.c ****     }
 457:../../common/action.c ****     else if IS_CONSUMER(code) {
 404               		.loc 1 457 0
 405 0040 885A      		subi r24,lo8(-(88))
 406               	.LVL23:
 407 0042 8331      		cpi r24,lo8(19)
 408 0044 00F4      		brsh .L34
 458:../../common/action.c ****         host_consumer_send(0);
 409               		.loc 1 458 0
 410 0046 80E0      		ldi r24,0
 411 0048 90E0      		ldi r25,0
 412               	.LVL24:
 413 004a 0C94 0000 		jmp host_consumer_send
 414               	.LVL25:
 415               	.L34:
 416 004e 0895      		ret
 417               		.cfi_endproc
 418               	.LFE105:
 420               		.section	.text.register_mods,"ax",@progbits
 421               	.global	register_mods
 423               	register_mods:
 424               	.LFB106:
 459:../../common/action.c ****     }
 460:../../common/action.c **** }
 461:../../common/action.c **** 
 462:../../common/action.c **** void register_mods(uint8_t mods)
 463:../../common/action.c **** {
 425               		.loc 1 463 0
 426               		.cfi_startproc
 427               	.LVL26:
 428               	/* prologue: function */
 429               	/* frame size = 0 */
 430               	/* stack size = 0 */
 431               	.L__stack_usage = 0
 464:../../common/action.c ****     if (mods) {
 432               		.loc 1 464 0
 433 0000 8823      		tst r24
 434 0002 01F0      		breq .L43
 465:../../common/action.c ****         add_mods(mods);
 435               		.loc 1 465 0
 436 0004 0E94 0000 		call add_mods
 437               	.LVL27:
 466:../../common/action.c ****         send_keyboard_report();
 438               		.loc 1 466 0
 439 0008 0C94 0000 		jmp send_keyboard_report
 440               	.LVL28:
 441               	.L43:
 442 000c 0895      		ret
 443               		.cfi_endproc
 444               	.LFE106:
 446               		.section	.text.unregister_mods,"ax",@progbits
 447               	.global	unregister_mods
 449               	unregister_mods:
 450               	.LFB107:
 467:../../common/action.c ****     }
 468:../../common/action.c **** }
 469:../../common/action.c **** 
 470:../../common/action.c **** void unregister_mods(uint8_t mods)
 471:../../common/action.c **** {
 451               		.loc 1 471 0
 452               		.cfi_startproc
 453               	.LVL29:
 454               	/* prologue: function */
 455               	/* frame size = 0 */
 456               	/* stack size = 0 */
 457               	.L__stack_usage = 0
 472:../../common/action.c ****     if (mods) {
 458               		.loc 1 472 0
 459 0000 8823      		tst r24
 460 0002 01F0      		breq .L45
 473:../../common/action.c ****         del_mods(mods);
 461               		.loc 1 473 0
 462 0004 0E94 0000 		call del_mods
 463               	.LVL30:
 474:../../common/action.c ****         send_keyboard_report();
 464               		.loc 1 474 0
 465 0008 0C94 0000 		jmp send_keyboard_report
 466               	.LVL31:
 467               	.L45:
 468 000c 0895      		ret
 469               		.cfi_endproc
 470               	.LFE107:
 472               		.section	.text.process_action,"ax",@progbits
 473               	.global	process_action
 475               	process_action:
 476               	.LFB103:
  57:../../common/action.c ****     keyevent_t event = record->event;
 477               		.loc 1 57 0
 478               		.cfi_startproc
 479               	.LVL32:
 480 0000 CF92      		push r12
 481               	.LCFI5:
 482               		.cfi_def_cfa_offset 3
 483               		.cfi_offset 12, -2
 484 0002 DF92      		push r13
 485               	.LCFI6:
 486               		.cfi_def_cfa_offset 4
 487               		.cfi_offset 13, -3
 488 0004 EF92      		push r14
 489               	.LCFI7:
 490               		.cfi_def_cfa_offset 5
 491               		.cfi_offset 14, -4
 492 0006 FF92      		push r15
 493               	.LCFI8:
 494               		.cfi_def_cfa_offset 6
 495               		.cfi_offset 15, -5
 496 0008 0F93      		push r16
 497               	.LCFI9:
 498               		.cfi_def_cfa_offset 7
 499               		.cfi_offset 16, -6
 500 000a 1F93      		push r17
 501               	.LCFI10:
 502               		.cfi_def_cfa_offset 8
 503               		.cfi_offset 17, -7
 504 000c CF93      		push r28
 505               	.LCFI11:
 506               		.cfi_def_cfa_offset 9
 507               		.cfi_offset 28, -8
 508 000e DF93      		push r29
 509               	.LCFI12:
 510               		.cfi_def_cfa_offset 10
 511               		.cfi_offset 29, -9
 512 0010 00D0      		rcall .
 513 0012 00D0      		rcall .
 514 0014 00D0      		rcall .
 515               	.LCFI13:
 516               		.cfi_def_cfa_offset 16
 517 0016 CDB7      		in r28,__SP_L__
 518 0018 DEB7      		in r29,__SP_H__
 519               	.LCFI14:
 520               		.cfi_def_cfa_register 28
 521               	/* prologue: function */
 522               	/* frame size = 6 */
 523               	/* stack size = 14 */
 524               	.L__stack_usage = 14
  58:../../common/action.c **** #ifndef NO_ACTION_TAPPING
 525               		.loc 1 58 0
 526 001a 25E0      		ldi r18,lo8(5)
 527 001c FC01      		movw r30,r24
 528 001e DE01      		movw r26,r28
 529 0020 1196      		adiw r26,1
 530               		0:
 531 0022 0190      		ld r0,Z+
 532 0024 0D92      		st X+,r0
 533 0026 2A95      		dec r18
 534 0028 01F4      		brne 0b
 535 002a FC01      		movw r30,r24
 536 002c 3081      		ld r19,Z
 537               	.LVL33:
 538 002e 2181      		ldd r18,Z+1
 539               	.LVL34:
 540 0030 F280      		ldd r15,Z+2
 541               	.LVL35:
  60:../../common/action.c **** #endif
 542               		.loc 1 60 0
 543 0032 0581      		ldd r16,Z+5
 544 0034 0295      		swap r16
 545 0036 0F70      		andi r16,lo8(15)
 546               	.LVL36:
 547               	.LBB8:
 548               	.LBB9:
 549               		.file 2 "../../common/keyboard.h"
   1:../../common/keyboard.h **** /*
   2:../../common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/keyboard.h **** 
   4:../../common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/keyboard.h **** (at your option) any later version.
   8:../../common/keyboard.h **** 
   9:../../common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/keyboard.h **** GNU General Public License for more details.
  13:../../common/keyboard.h **** 
  14:../../common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/keyboard.h **** */
  17:../../common/keyboard.h **** 
  18:../../common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../common/keyboard.h **** #define KEYBOARD_H
  20:../../common/keyboard.h **** 
  21:../../common/keyboard.h **** #include <stdbool.h>
  22:../../common/keyboard.h **** #include <stdint.h>
  23:../../common/keyboard.h **** 
  24:../../common/keyboard.h **** 
  25:../../common/keyboard.h **** #ifdef __cplusplus
  26:../../common/keyboard.h **** extern "C" {
  27:../../common/keyboard.h **** #endif
  28:../../common/keyboard.h **** 
  29:../../common/keyboard.h **** /* key matrix position */
  30:../../common/keyboard.h **** typedef struct {
  31:../../common/keyboard.h ****     uint8_t col;
  32:../../common/keyboard.h ****     uint8_t row;
  33:../../common/keyboard.h **** } key_t;
  34:../../common/keyboard.h **** 
  35:../../common/keyboard.h **** /* key event */
  36:../../common/keyboard.h **** typedef struct {
  37:../../common/keyboard.h ****     key_t    key;
  38:../../common/keyboard.h ****     bool     pressed;
  39:../../common/keyboard.h ****     uint16_t time;
  40:../../common/keyboard.h **** } keyevent_t;
  41:../../common/keyboard.h **** 
  42:../../common/keyboard.h **** /* equivalent test of key_t */
  43:../../common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../common/keyboard.h **** 
  45:../../common/keyboard.h **** /* Rules for No Event:
  46:../../common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../common/keyboard.h ****  */
  49:../../common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 550               		.loc 2 49 0
 551 0038 4381      		ldd r20,Z+3
 552 003a 5481      		ldd r21,Z+4
 553 003c 452B      		or r20,r21
 554 003e 01F4      		brne .+2
 555 0040 00C0      		rjmp .L47
 556 0042 2F3F      		cpi r18,lo8(-1)
 557 0044 01F4      		brne .L49
 558               	.LBE9:
 559               	.LBE8:
  63:../../common/action.c **** 
 560               		.loc 1 63 0
 561 0046 3F3F      		cpi r19,lo8(-1)
 562 0048 01F4      		brne .+2
 563 004a 00C0      		rjmp .L47
 564               	.L49:
 565 004c 6C01      		movw r12,r24
  65:../../common/action.c ****     dprint("ACTION: "); debug_action(action);
 566               		.loc 1 65 0
 567 004e 3983      		std Y+1,r19
 568 0050 2A83      		std Y+2,r18
 569 0052 8981      		ldd r24,Y+1
 570 0054 9A81      		ldd r25,Y+2
 571               	.LVL37:
 572 0056 0E94 0000 		call layer_switch_get_action
 573               	.LVL38:
 574 005a 182F      		mov r17,r24
 575               	.LVL39:
  68:../../common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 576               		.loc 1 68 0
 577 005c 9E83      		std Y+6,r25
 578 005e 0E94 0000 		call layer_debug
 579               	.LVL40:
  69:../../common/action.c **** #endif
 580               		.loc 1 69 0
 581 0062 0E94 0000 		call default_layer_debug
 582               	.LVL41:
  73:../../common/action.c ****         /* Key and Mods */
 583               		.loc 1 73 0
 584 0066 2E81      		ldd r18,Y+6
 585 0068 E22F      		mov r30,r18
 586 006a E295      		swap r30
 587 006c EF70      		andi r30,lo8(15)
 588 006e F0E0      		ldi r31,0
 589 0070 E050      		subi r30,lo8(-(gs(.L52)))
 590 0072 F040      		sbci r31,hi8(-(gs(.L52)))
 591 0074 0C94 0000 		jmp __tablejump2__
 592               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 593               		.p2align	1
 594               	.L52:
 595 0000 0000      		.word gs(.L51)
 596 0002 0000      		.word gs(.L51)
 597 0004 0000      		.word gs(.L53)
 598 0006 0000      		.word gs(.L53)
 599 0008 0000      		.word gs(.L47)
 600 000a 0000      		.word gs(.L47)
 601 000c 0000      		.word gs(.L47)
 602 000e 0000      		.word gs(.L47)
 603 0010 0000      		.word gs(.L54)
 604 0012 0000      		.word gs(.L47)
 605 0014 0000      		.word gs(.L55)
 606 0016 0000      		.word gs(.L55)
 607 0018 0000      		.word gs(.L56)
 608 001a 0000      		.word gs(.L47)
 609 001c 0000      		.word gs(.L47)
 610 001e 0000      		.word gs(.L57)
 611               		.section	.text.process_action
 612               	.L51:
 613               	.LBB10:
  78:../../common/action.c ****                                                                 action.key.mods<<4;
 614               		.loc 1 78 0
 615 0078 822F      		mov r24,r18
 616 007a 807F      		andi r24,lo8(-16)
 617 007c 922F      		mov r25,r18
 618 007e 9F70      		andi r25,lo8(15)
 619 0080 092F      		mov r16,r25
 620               	.LVL42:
 621 0082 8823      		tst r24
 622 0084 01F0      		breq .L59
  78:../../common/action.c ****                                                                 action.key.mods<<4;
 623               		.loc 1 78 0 is_stmt 0 discriminator 2
 624 0086 0295      		swap r16
 625 0088 007F      		andi r16,lo8(-16)
 626               	.L59:
 627               	.LVL43:
  80:../../common/action.c ****                     if (mods) {
 628               		.loc 1 80 0 is_stmt 1 discriminator 4
 629 008a FF20      		tst r15
 630 008c 01F0      		breq .L60
  81:../../common/action.c ****                         add_weak_mods(mods);
 631               		.loc 1 81 0
 632 008e 0023      		tst r16
 633 0090 01F4      		brne .+2
 634 0092 00C0      		rjmp .L135
  82:../../common/action.c ****                         send_keyboard_report();
 635               		.loc 1 82 0
 636 0094 802F      		mov r24,r16
 637 0096 0E94 0000 		call add_weak_mods
 638               	.LVL44:
  83:../../common/action.c ****                     }
 639               		.loc 1 83 0
 640 009a 0E94 0000 		call send_keyboard_report
 641               	.LVL45:
 642 009e 00C0      		rjmp .L135
 643               	.L60:
 644               	.LVL46:
  87:../../common/action.c ****                     if (mods) {
 645               		.loc 1 87 0
 646 00a0 812F      		mov r24,r17
 647 00a2 0E94 0000 		call unregister_code
 648               	.LVL47:
  88:../../common/action.c ****                         del_weak_mods(mods);
 649               		.loc 1 88 0
 650 00a6 0023      		tst r16
 651 00a8 01F4      		brne .+2
 652 00aa 00C0      		rjmp .L47
  89:../../common/action.c ****                         send_keyboard_report();
 653               		.loc 1 89 0
 654 00ac 802F      		mov r24,r16
 655 00ae 0E94 0000 		call del_weak_mods
 656               	.LVL48:
 657               	/* epilogue start */
 658               	.LBE10:
 324:../../common/action.c **** 
 659               		.loc 1 324 0
 660 00b2 2696      		adiw r28,6
 661               	.LVL49:
 662 00b4 0FB6      		in __tmp_reg__,__SREG__
 663 00b6 F894      		cli
 664 00b8 DEBF      		out __SP_H__,r29
 665 00ba 0FBE      		out __SREG__,__tmp_reg__
 666 00bc CDBF      		out __SP_L__,r28
 667               	.LVL50:
 668 00be DF91      		pop r29
 669 00c0 CF91      		pop r28
 670 00c2 1F91      		pop r17
 671 00c4 0F91      		pop r16
 672               	.LVL51:
 673 00c6 FF90      		pop r15
 674               	.LVL52:
 675 00c8 EF90      		pop r14
 676 00ca DF90      		pop r13
 677 00cc CF90      		pop r12
 678               	.LVL53:
 679               	.LBB11:
  90:../../common/action.c ****                     }
 680               		.loc 1 90 0
 681 00ce 0C94 0000 		jmp send_keyboard_report
 682               	.LVL54:
 683               	.L53:
 684               	.LBE11:
 685               	.LBB12:
  99:../../common/action.c ****                                                                     action.key.mods<<4;
 686               		.loc 1 99 0
 687 00d2 822F      		mov r24,r18
 688 00d4 807F      		andi r24,lo8(-16)
 689 00d6 922F      		mov r25,r18
 690 00d8 9F70      		andi r25,lo8(15)
 691 00da 8032      		cpi r24,lo8(32)
 692 00dc 01F4      		brne .L63
  99:../../common/action.c ****                                                                     action.key.mods<<4;
 693               		.loc 1 99 0 is_stmt 0 discriminator 1
 694 00de 892F      		mov r24,r25
 695 00e0 00C0      		rjmp .L64
 696               	.L63:
  99:../../common/action.c ****                                                                     action.key.mods<<4;
 697               		.loc 1 99 0 discriminator 2
 698 00e2 892F      		mov r24,r25
 699 00e4 8295      		swap r24
 700 00e6 807F      		andi r24,lo8(-16)
 701               	.L64:
 702               	.LVL55:
 101:../../common/action.c ****     #ifndef NO_ACTION_ONESHOT
 703               		.loc 1 101 0 is_stmt 1 discriminator 4
 704 00e8 1123      		tst r17
 705 00ea 01F0      		breq .L66
 706 00ec 1130      		cpi r17,lo8(1)
 707 00ee 01F0      		breq .L67
 708 00f0 00C0      		rjmp .L139
 709               	.L66:
 105:../../common/action.c ****                             if (tap_count == 0) {
 710               		.loc 1 105 0
 711 00f2 FF20      		tst r15
 712 00f4 01F0      		breq .L68
 106:../../common/action.c ****                                 register_mods(mods);
 713               		.loc 1 106 0
 714 00f6 0023      		tst r16
 715 00f8 01F0      		breq .L134
 109:../../common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 716               		.loc 1 109 0
 717 00fa 0130      		cpi r16,lo8(1)
 718 00fc 01F4      		brne .L134
 719               	/* epilogue start */
 720               	.LBE12:
 324:../../common/action.c **** 
 721               		.loc 1 324 0
 722 00fe 2696      		adiw r28,6
 723 0100 0FB6      		in __tmp_reg__,__SREG__
 724 0102 F894      		cli
 725 0104 DEBF      		out __SP_H__,r29
 726 0106 0FBE      		out __SREG__,__tmp_reg__
 727 0108 CDBF      		out __SP_L__,r28
 728 010a DF91      		pop r29
 729 010c CF91      		pop r28
 730 010e 1F91      		pop r17
 731               	.LVL56:
 732 0110 0F91      		pop r16
 733               	.LVL57:
 734 0112 FF90      		pop r15
 735               	.LVL58:
 736 0114 EF90      		pop r14
 737 0116 DF90      		pop r13
 738 0118 CF90      		pop r12
 739               	.LVL59:
 740               	.LBB13:
 111:../../common/action.c ****                             }
 741               		.loc 1 111 0
 742 011a 0C94 0000 		jmp set_oneshot_mods
 743               	.LVL60:
 744               	.L68:
 117:../../common/action.c ****                                 clear_oneshot_mods();
 745               		.loc 1 117 0
 746 011e 0023      		tst r16
 747 0120 01F0      		breq .L132
 121:../../common/action.c ****                                 // Retain Oneshot mods
 748               		.loc 1 121 0
 749 0122 0130      		cpi r16,lo8(1)
 750 0124 01F4      		brne .+2
 751 0126 00C0      		rjmp .L47
 752               	.L132:
 125:../../common/action.c ****                                 unregister_mods(mods);
 753               		.loc 1 125 0
 754 0128 8E83      		std Y+6,r24
 755 012a 0E94 0000 		call clear_oneshot_mods
 756               	.LVL61:
 126:../../common/action.c ****                             }
 757               		.loc 1 126 0
 758 012e 8E81      		ldd r24,Y+6
 759 0130 00C0      		rjmp .L77
 760               	.LVL62:
 761               	.L67:
 132:../../common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 762               		.loc 1 132 0
 763 0132 FF20      		tst r15
 764 0134 01F0      		breq .L73
 133:../../common/action.c ****                                 register_mods(mods);
 765               		.loc 1 133 0
 766 0136 0630      		cpi r16,lo8(6)
 767 0138 00F0      		brlo .+2
 768 013a 00C0      		rjmp .L47
 769 013c 00C0      		rjmp .L134
 770               	.L73:
 137:../../common/action.c ****                                 unregister_mods(mods);
 771               		.loc 1 137 0
 772 013e 0530      		cpi r16,lo8(5)
 773 0140 00F0      		brlo .+2
 774 0142 00C0      		rjmp .L47
 775 0144 00C0      		rjmp .L77
 776               	.L139:
 143:../../common/action.c ****                             if (tap_count > 0) {
 777               		.loc 1 143 0
 778 0146 FF20      		tst r15
 779 0148 01F0      		breq .L74
 144:../../common/action.c ****                                 if (record->tap.interrupted) {
 780               		.loc 1 144 0
 781 014a 0023      		tst r16
 782 014c 01F0      		breq .L134
 145:../../common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 783               		.loc 1 145 0
 784 014e F601      		movw r30,r12
 785 0150 9581      		ldd r25,Z+5
 786 0152 90FF      		sbrs r25,0
 787 0154 00C0      		rjmp .L135
 148:../../common/action.c ****                                     register_mods(mods);
 788               		.loc 1 148 0
 789 0156 9F70      		andi r25,lo8(15)
 790 0158 9583      		std Z+5,r25
 791               	.L134:
 792               	/* epilogue start */
 793               	.LBE13:
 324:../../common/action.c **** 
 794               		.loc 1 324 0
 795 015a 2696      		adiw r28,6
 796 015c 0FB6      		in __tmp_reg__,__SREG__
 797 015e F894      		cli
 798 0160 DEBF      		out __SP_H__,r29
 799 0162 0FBE      		out __SREG__,__tmp_reg__
 800 0164 CDBF      		out __SP_L__,r28
 801 0166 DF91      		pop r29
 802 0168 CF91      		pop r28
 803 016a 1F91      		pop r17
 804               	.LVL63:
 805 016c 0F91      		pop r16
 806               	.LVL64:
 807 016e FF90      		pop r15
 808               	.LVL65:
 809 0170 EF90      		pop r14
 810 0172 DF90      		pop r13
 811 0174 CF90      		pop r12
 812               	.LVL66:
 813               	.LBB14:
 149:../../common/action.c ****                                 } else {
 814               		.loc 1 149 0
 815 0176 0C94 0000 		jmp register_mods
 816               	.LVL67:
 817               	.L74:
 159:../../common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 818               		.loc 1 159 0
 819 017a 0111      		cpse r16,__zero_reg__
 820 017c 00C0      		rjmp .L136
 821               	.LVL68:
 822               	.L77:
 823               	/* epilogue start */
 824               	.LBE14:
 324:../../common/action.c **** 
 825               		.loc 1 324 0
 826 017e 2696      		adiw r28,6
 827 0180 0FB6      		in __tmp_reg__,__SREG__
 828 0182 F894      		cli
 829 0184 DEBF      		out __SP_H__,r29
 830 0186 0FBE      		out __SREG__,__tmp_reg__
 831 0188 CDBF      		out __SP_L__,r28
 832 018a DF91      		pop r29
 833 018c CF91      		pop r28
 834 018e 1F91      		pop r17
 835               	.LVL69:
 836 0190 0F91      		pop r16
 837               	.LVL70:
 838 0192 FF90      		pop r15
 839               	.LVL71:
 840 0194 EF90      		pop r14
 841 0196 DF90      		pop r13
 842 0198 CF90      		pop r12
 843               	.LVL72:
 844               	.LBB15:
 164:../../common/action.c ****                             }
 845               		.loc 1 164 0
 846 019a 0C94 0000 		jmp unregister_mods
 847               	.LVL73:
 848               	.L54:
 849               	.LBE15:
 207:../../common/action.c ****                 /* Default Layer Bitwise Operation */
 850               		.loc 1 207 0
 851 019e 822F      		mov r24,r18
 852 01a0 8370      		andi r24,lo8(3)
 853 01a2 01F0      		breq .+2
 854 01a4 00C0      		rjmp .L78
 209:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 855               		.loc 1 209 0
 856 01a6 F110      		cpse r15,__zero_reg__
 857 01a8 00C0      		rjmp .L47
 858               	.LVL74:
 859               	.LBB16:
 210:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 860               		.loc 1 210 0
 861 01aa 812F      		mov r24,r17
 862 01ac 8295      		swap r24
 863 01ae 8695      		lsr r24
 864 01b0 8770      		andi r24,lo8(7)
 865 01b2 880F      		lsl r24
 866 01b4 880F      		lsl r24
 211:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 867               		.loc 1 211 0
 868 01b6 912F      		mov r25,r17
 869 01b8 9F70      		andi r25,lo8(15)
 870 01ba C92E      		mov r12,r25
 871               	.LVL75:
 872 01bc D12C      		mov r13,__zero_reg__
 873 01be E12C      		mov r14,__zero_reg__
 874 01c0 F12C      		mov r15,__zero_reg__
 875 01c2 082E      		mov r0,r24
 876 01c4 00C0      		rjmp 2f
 877               		1:
 878 01c6 CC0C      		lsl r12
 879 01c8 DD1C      		rol r13
 880 01ca EE1C      		rol r14
 881 01cc FF1C      		rol r15
 882               		2:
 883 01ce 0A94      		dec r0
 884 01d0 02F4      		brpl 1b
 885               	.LVL76:
 212:../../common/action.c ****                     switch (action.layer_bitop.op) {
 886               		.loc 1 212 0
 887 01d2 14FF      		sbrs r17,4
 888 01d4 00C0      		rjmp .L104
 212:../../common/action.c ****                     switch (action.layer_bitop.op) {
 889               		.loc 1 212 0 is_stmt 0 discriminator 1
 890 01d6 4FE0      		ldi r20,lo8(15)
 891 01d8 50E0      		ldi r21,0
 892 01da 60E0      		ldi r22,0
 893 01dc 70E0      		ldi r23,0
 894 01de 00C0      		rjmp 2f
 895               		1:
 896 01e0 440F      		lsl r20
 897 01e2 551F      		rol r21
 898 01e4 661F      		rol r22
 899 01e6 771F      		rol r23
 900               		2:
 901 01e8 8A95      		dec r24
 902 01ea 02F4      		brpl 1b
 903 01ec CB01      		movw r24,r22
 904 01ee BA01      		movw r22,r20
 905 01f0 6095      		com r22
 906 01f2 7095      		com r23
 907 01f4 8095      		com r24
 908 01f6 9095      		com r25
 909 01f8 00C0      		rjmp .L79
 910               	.L104:
 212:../../common/action.c ****                     switch (action.layer_bitop.op) {
 911               		.loc 1 212 0
 912 01fa 60E0      		ldi r22,0
 913 01fc 70E0      		ldi r23,0
 914 01fe CB01      		movw r24,r22
 915               	.L79:
 916               	.LVL77:
 213:../../common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 917               		.loc 1 213 0 is_stmt 1 discriminator 4
 918 0200 2695      		lsr r18
 919 0202 2695      		lsr r18
 920               	.LVL78:
 921 0204 2370      		andi r18,lo8(3)
 922 0206 422F      		mov r20,r18
 923 0208 50E0      		ldi r21,0
 924 020a 4230      		cpi r20,2
 925 020c 5105      		cpc r21,__zero_reg__
 926 020e 01F0      		breq .L81
 927 0210 4330      		cpi r20,3
 928 0212 5105      		cpc r21,__zero_reg__
 929 0214 01F0      		breq .L82
 930 0216 6C29      		or r22,r12
 931 0218 7D29      		or r23,r13
 932 021a 8E29      		or r24,r14
 933 021c 9F29      		or r25,r15
 934               	.LVL79:
 935 021e 4130      		cpi r20,1
 936 0220 5105      		cpc r21,__zero_reg__
 937 0222 01F0      		breq .L137
 938               	/* epilogue start */
 939               	.LBE16:
 324:../../common/action.c **** 
 940               		.loc 1 324 0 discriminator 4
 941 0224 2696      		adiw r28,6
 942               	.LVL80:
 943 0226 0FB6      		in __tmp_reg__,__SREG__
 944 0228 F894      		cli
 945 022a DEBF      		out __SP_H__,r29
 946 022c 0FBE      		out __SREG__,__tmp_reg__
 947 022e CDBF      		out __SP_L__,r28
 948 0230 DF91      		pop r29
 949 0232 CF91      		pop r28
 950               	.LVL81:
 951 0234 1F91      		pop r17
 952               	.LVL82:
 953 0236 0F91      		pop r16
 954               	.LVL83:
 955 0238 FF90      		pop r15
 956               	.LVL84:
 957 023a EF90      		pop r14
 958 023c DF90      		pop r13
 959 023e CF90      		pop r12
 960               	.LVL85:
 961               	.LBB17:
 214:../../common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 962               		.loc 1 214 0 discriminator 4
 963 0240 0C94 0000 		jmp default_layer_and
 964               	.LVL86:
 965               	.L81:
 216:../../common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 966               		.loc 1 216 0
 967 0244 6C29      		or r22,r12
 968 0246 7D29      		or r23,r13
 969 0248 8E29      		or r24,r14
 970 024a 9F29      		or r25,r15
 971               	.LVL87:
 972               	/* epilogue start */
 973               	.LBE17:
 324:../../common/action.c **** 
 974               		.loc 1 324 0
 975 024c 2696      		adiw r28,6
 976               	.LVL88:
 977 024e 0FB6      		in __tmp_reg__,__SREG__
 978 0250 F894      		cli
 979 0252 DEBF      		out __SP_H__,r29
 980 0254 0FBE      		out __SREG__,__tmp_reg__
 981 0256 CDBF      		out __SP_L__,r28
 982 0258 DF91      		pop r29
 983 025a CF91      		pop r28
 984               	.LVL89:
 985 025c 1F91      		pop r17
 986               	.LVL90:
 987 025e 0F91      		pop r16
 988               	.LVL91:
 989 0260 FF90      		pop r15
 990               	.LVL92:
 991 0262 EF90      		pop r14
 992 0264 DF90      		pop r13
 993 0266 CF90      		pop r12
 994               	.LVL93:
 995               	.LBB18:
 216:../../common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 996               		.loc 1 216 0
 997 0268 0C94 0000 		jmp default_layer_xor
 998               	.LVL94:
 999               	.L82:
 217:../../common/action.c ****                     }
 1000               		.loc 1 217 0
 1001 026c 0E94 0000 		call default_layer_and
 1002               	.LVL95:
 1003 0270 C701      		movw r24,r14
 1004 0272 B601      		movw r22,r12
 1005               	.L137:
 1006               	/* epilogue start */
 1007               	.LBE18:
 324:../../common/action.c **** 
 1008               		.loc 1 324 0
 1009 0274 2696      		adiw r28,6
 1010 0276 0FB6      		in __tmp_reg__,__SREG__
 1011 0278 F894      		cli
 1012 027a DEBF      		out __SP_H__,r29
 1013 027c 0FBE      		out __SREG__,__tmp_reg__
 1014 027e CDBF      		out __SP_L__,r28
 1015 0280 DF91      		pop r29
 1016 0282 CF91      		pop r28
 1017 0284 1F91      		pop r17
 1018 0286 0F91      		pop r16
 1019               	.LVL96:
 1020 0288 FF90      		pop r15
 1021               	.LVL97:
 1022 028a EF90      		pop r14
 1023 028c DF90      		pop r13
 1024 028e CF90      		pop r12
 1025               	.LVL98:
 1026               	.LBB19:
 217:../../common/action.c ****                     }
 1027               		.loc 1 217 0
 1028 0290 0C94 0000 		jmp default_layer_or
 1029               	.LVL99:
 1030               	.L78:
 1031               	.LBE19:
 222:../../common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1032               		.loc 1 222 0
 1033 0294 FF20      		tst r15
 1034 0296 01F0      		breq .L84
 222:../../common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1035               		.loc 1 222 0 is_stmt 0 discriminator 1
 1036 0298 822F      		mov r24,r18
 1037 029a 8170      		andi r24,lo8(1)
 1038 029c 00C0      		rjmp .L85
 1039               	.L84:
 222:../../common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1040               		.loc 1 222 0 discriminator 2
 1041 029e 8695      		lsr r24
 1042               	.L85:
 222:../../common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1043               		.loc 1 222 0 discriminator 4
 1044 02a0 8823      		tst r24
 1045 02a2 01F4      		brne .+2
 1046 02a4 00C0      		rjmp .L47
 1047               	.LVL100:
 1048               	.LBB20:
 224:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1049               		.loc 1 224 0 is_stmt 1
 1050 02a6 812F      		mov r24,r17
 1051 02a8 8295      		swap r24
 1052 02aa 8695      		lsr r24
 1053 02ac 8770      		andi r24,lo8(7)
 1054 02ae 880F      		lsl r24
 1055 02b0 880F      		lsl r24
 225:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1056               		.loc 1 225 0
 1057 02b2 912F      		mov r25,r17
 1058 02b4 9F70      		andi r25,lo8(15)
 1059 02b6 C92E      		mov r12,r25
 1060               	.LVL101:
 1061 02b8 D12C      		mov r13,__zero_reg__
 1062 02ba E12C      		mov r14,__zero_reg__
 1063 02bc F12C      		mov r15,__zero_reg__
 1064 02be 082E      		mov r0,r24
 1065 02c0 00C0      		rjmp 2f
 1066               		1:
 1067 02c2 CC0C      		lsl r12
 1068 02c4 DD1C      		rol r13
 1069 02c6 EE1C      		rol r14
 1070 02c8 FF1C      		rol r15
 1071               		2:
 1072 02ca 0A94      		dec r0
 1073 02cc 02F4      		brpl 1b
 1074               	.LVL102:
 226:../../common/action.c ****                     switch (action.layer_bitop.op) {
 1075               		.loc 1 226 0
 1076 02ce 14FF      		sbrs r17,4
 1077 02d0 00C0      		rjmp .L105
 226:../../common/action.c ****                     switch (action.layer_bitop.op) {
 1078               		.loc 1 226 0 is_stmt 0 discriminator 1
 1079 02d2 4FE0      		ldi r20,lo8(15)
 1080 02d4 50E0      		ldi r21,0
 1081 02d6 60E0      		ldi r22,0
 1082 02d8 70E0      		ldi r23,0
 1083 02da 00C0      		rjmp 2f
 1084               		1:
 1085 02dc 440F      		lsl r20
 1086 02de 551F      		rol r21
 1087 02e0 661F      		rol r22
 1088 02e2 771F      		rol r23
 1089               		2:
 1090 02e4 8A95      		dec r24
 1091 02e6 02F4      		brpl 1b
 1092 02e8 CB01      		movw r24,r22
 1093 02ea BA01      		movw r22,r20
 1094 02ec 6095      		com r22
 1095 02ee 7095      		com r23
 1096 02f0 8095      		com r24
 1097 02f2 9095      		com r25
 1098 02f4 00C0      		rjmp .L86
 1099               	.L105:
 226:../../common/action.c ****                     switch (action.layer_bitop.op) {
 1100               		.loc 1 226 0
 1101 02f6 60E0      		ldi r22,0
 1102 02f8 70E0      		ldi r23,0
 1103 02fa CB01      		movw r24,r22
 1104               	.L86:
 1105               	.LVL103:
 227:../../common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1106               		.loc 1 227 0 is_stmt 1 discriminator 4
 1107 02fc 2695      		lsr r18
 1108 02fe 2695      		lsr r18
 1109               	.LVL104:
 1110 0300 2370      		andi r18,lo8(3)
 1111 0302 422F      		mov r20,r18
 1112 0304 50E0      		ldi r21,0
 1113 0306 4230      		cpi r20,2
 1114 0308 5105      		cpc r21,__zero_reg__
 1115 030a 01F0      		breq .L88
 1116 030c 4330      		cpi r20,3
 1117 030e 5105      		cpc r21,__zero_reg__
 1118 0310 01F0      		breq .L89
 1119 0312 6C29      		or r22,r12
 1120 0314 7D29      		or r23,r13
 1121 0316 8E29      		or r24,r14
 1122 0318 9F29      		or r25,r15
 1123               	.LVL105:
 1124 031a 4130      		cpi r20,1
 1125 031c 5105      		cpc r21,__zero_reg__
 1126 031e 01F0      		breq .L138
 1127               	/* epilogue start */
 1128               	.LBE20:
 324:../../common/action.c **** 
 1129               		.loc 1 324 0 discriminator 4
 1130 0320 2696      		adiw r28,6
 1131               	.LVL106:
 1132 0322 0FB6      		in __tmp_reg__,__SREG__
 1133 0324 F894      		cli
 1134 0326 DEBF      		out __SP_H__,r29
 1135 0328 0FBE      		out __SREG__,__tmp_reg__
 1136 032a CDBF      		out __SP_L__,r28
 1137 032c DF91      		pop r29
 1138 032e CF91      		pop r28
 1139               	.LVL107:
 1140 0330 1F91      		pop r17
 1141               	.LVL108:
 1142 0332 0F91      		pop r16
 1143               	.LVL109:
 1144 0334 FF90      		pop r15
 1145               	.LVL110:
 1146 0336 EF90      		pop r14
 1147 0338 DF90      		pop r13
 1148 033a CF90      		pop r12
 1149               	.LVL111:
 1150               	.LBB21:
 228:../../common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1151               		.loc 1 228 0 discriminator 4
 1152 033c 0C94 0000 		jmp layer_and
 1153               	.LVL112:
 1154               	.L88:
 230:../../common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1155               		.loc 1 230 0
 1156 0340 6C29      		or r22,r12
 1157 0342 7D29      		or r23,r13
 1158 0344 8E29      		or r24,r14
 1159 0346 9F29      		or r25,r15
 1160               	.LVL113:
 1161               	/* epilogue start */
 1162               	.LBE21:
 324:../../common/action.c **** 
 1163               		.loc 1 324 0
 1164 0348 2696      		adiw r28,6
 1165               	.LVL114:
 1166 034a 0FB6      		in __tmp_reg__,__SREG__
 1167 034c F894      		cli
 1168 034e DEBF      		out __SP_H__,r29
 1169 0350 0FBE      		out __SREG__,__tmp_reg__
 1170 0352 CDBF      		out __SP_L__,r28
 1171 0354 DF91      		pop r29
 1172 0356 CF91      		pop r28
 1173               	.LVL115:
 1174 0358 1F91      		pop r17
 1175               	.LVL116:
 1176 035a 0F91      		pop r16
 1177               	.LVL117:
 1178 035c FF90      		pop r15
 1179               	.LVL118:
 1180 035e EF90      		pop r14
 1181 0360 DF90      		pop r13
 1182 0362 CF90      		pop r12
 1183               	.LVL119:
 1184               	.LBB22:
 230:../../common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1185               		.loc 1 230 0
 1186 0364 0C94 0000 		jmp layer_xor
 1187               	.LVL120:
 1188               	.L89:
 231:../../common/action.c ****                     }
 1189               		.loc 1 231 0
 1190 0368 0E94 0000 		call layer_and
 1191               	.LVL121:
 1192 036c C701      		movw r24,r14
 1193 036e B601      		movw r22,r12
 1194               	.L138:
 1195               	/* epilogue start */
 1196               	.LBE22:
 324:../../common/action.c **** 
 1197               		.loc 1 324 0
 1198 0370 2696      		adiw r28,6
 1199 0372 0FB6      		in __tmp_reg__,__SREG__
 1200 0374 F894      		cli
 1201 0376 DEBF      		out __SP_H__,r29
 1202 0378 0FBE      		out __SREG__,__tmp_reg__
 1203 037a CDBF      		out __SP_L__,r28
 1204 037c DF91      		pop r29
 1205 037e CF91      		pop r28
 1206 0380 1F91      		pop r17
 1207 0382 0F91      		pop r16
 1208               	.LVL122:
 1209 0384 FF90      		pop r15
 1210               	.LVL123:
 1211 0386 EF90      		pop r14
 1212 0388 DF90      		pop r13
 1213 038a CF90      		pop r12
 1214               	.LVL124:
 1215               	.LBB23:
 231:../../common/action.c ****                     }
 1216               		.loc 1 231 0
 1217 038c 0C94 0000 		jmp layer_or
 1218               	.LVL125:
 1219               	.L55:
 1220               	.LBE23:
 239:../../common/action.c ****                 case OP_TAP_TOGGLE:
 1221               		.loc 1 239 0
 1222 0390 113F      		cpi r17,lo8(-15)
 1223 0392 01F0      		breq .L92
 1224 0394 00F4      		brsh .L93
 1225 0396 103F      		cpi r17,lo8(-16)
 1226 0398 01F0      		breq .L94
 1227 039a 00C0      		rjmp .L91
 1228               	.L93:
 1229 039c 123F      		cpi r17,lo8(-14)
 1230 039e 01F0      		breq .L95
 1231 03a0 133F      		cpi r17,lo8(-13)
 1232 03a2 01F4      		brne .+2
 1233 03a4 00C0      		rjmp .L96
 1234 03a6 00C0      		rjmp .L91
 1235               	.L94:
 242:../../common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1236               		.loc 1 242 0
 1237 03a8 FF20      		tst r15
 1238 03aa 01F0      		breq .L97
 243:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 1239               		.loc 1 243 0
 1240 03ac 0530      		cpi r16,lo8(5)
 1241 03ae 00F0      		brlo .+2
 1242 03b0 00C0      		rjmp .L47
 1243               	.L98:
 244:../../common/action.c ****                         }
 1244               		.loc 1 244 0
 1245 03b2 822F      		mov r24,r18
 1246 03b4 8F71      		andi r24,lo8(31)
 1247               	/* epilogue start */
 324:../../common/action.c **** 
 1248               		.loc 1 324 0
 1249 03b6 2696      		adiw r28,6
 1250 03b8 0FB6      		in __tmp_reg__,__SREG__
 1251 03ba F894      		cli
 1252 03bc DEBF      		out __SP_H__,r29
 1253 03be 0FBE      		out __SREG__,__tmp_reg__
 1254 03c0 CDBF      		out __SP_L__,r28
 1255 03c2 DF91      		pop r29
 1256 03c4 CF91      		pop r28
 1257 03c6 1F91      		pop r17
 1258               	.LVL126:
 1259 03c8 0F91      		pop r16
 1260               	.LVL127:
 1261 03ca FF90      		pop r15
 1262               	.LVL128:
 1263 03cc EF90      		pop r14
 1264 03ce DF90      		pop r13
 1265 03d0 CF90      		pop r12
 1266               	.LVL129:
 244:../../common/action.c ****                         }
 1267               		.loc 1 244 0
 1268 03d2 0C94 0000 		jmp layer_invert
 1269               	.LVL130:
 1270               	.L97:
 247:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 1271               		.loc 1 247 0
 1272 03d6 0630      		cpi r16,lo8(6)
 1273 03d8 00F0      		brlo .+2
 1274 03da 00C0      		rjmp .L47
 1275 03dc 00C0      		rjmp .L98
 1276               	.L92:
 253:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 1277               		.loc 1 253 0
 1278 03de FF20      		tst r15
 1279 03e0 01F0      		breq .L99
 1280               	.L100:
 253:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 1281               		.loc 1 253 0 is_stmt 0 discriminator 1
 1282 03e2 822F      		mov r24,r18
 1283 03e4 8F71      		andi r24,lo8(31)
 1284               	/* epilogue start */
 324:../../common/action.c **** 
 1285               		.loc 1 324 0 is_stmt 1 discriminator 1
 1286 03e6 2696      		adiw r28,6
 1287 03e8 0FB6      		in __tmp_reg__,__SREG__
 1288 03ea F894      		cli
 1289 03ec DEBF      		out __SP_H__,r29
 1290 03ee 0FBE      		out __SREG__,__tmp_reg__
 1291 03f0 CDBF      		out __SP_L__,r28
 1292 03f2 DF91      		pop r29
 1293 03f4 CF91      		pop r28
 1294 03f6 1F91      		pop r17
 1295               	.LVL131:
 1296 03f8 0F91      		pop r16
 1297               	.LVL132:
 1298 03fa FF90      		pop r15
 1299               	.LVL133:
 1300 03fc EF90      		pop r14
 1301 03fe DF90      		pop r13
 1302 0400 CF90      		pop r12
 1303               	.LVL134:
 253:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 1304               		.loc 1 253 0 discriminator 1
 1305 0402 0C94 0000 		jmp layer_on
 1306               	.LVL135:
 1307               	.L95:
 257:../../common/action.c ****                                     layer_on(action.layer_tap.val);
 1308               		.loc 1 257 0
 1309 0406 FF20      		tst r15
 1310 0408 01F0      		breq .L100
 1311               	.L99:
 254:../../common/action.c ****                     break;
 1312               		.loc 1 254 0
 1313 040a 822F      		mov r24,r18
 1314 040c 8F71      		andi r24,lo8(31)
 1315               	/* epilogue start */
 324:../../common/action.c **** 
 1316               		.loc 1 324 0
 1317 040e 2696      		adiw r28,6
 1318 0410 0FB6      		in __tmp_reg__,__SREG__
 1319 0412 F894      		cli
 1320 0414 DEBF      		out __SP_H__,r29
 1321 0416 0FBE      		out __SREG__,__tmp_reg__
 1322 0418 CDBF      		out __SP_L__,r28
 1323 041a DF91      		pop r29
 1324 041c CF91      		pop r28
 1325 041e 1F91      		pop r17
 1326               	.LVL136:
 1327 0420 0F91      		pop r16
 1328               	.LVL137:
 1329 0422 FF90      		pop r15
 1330               	.LVL138:
 1331 0424 EF90      		pop r14
 1332 0426 DF90      		pop r13
 1333 0428 CF90      		pop r12
 1334               	.LVL139:
 254:../../common/action.c ****                     break;
 1335               		.loc 1 254 0
 1336 042a 0C94 0000 		jmp layer_off
 1337               	.LVL140:
 1338               	.L96:
 261:../../common/action.c ****                                     layer_clear();
 1339               		.loc 1 261 0
 1340 042e FF20      		tst r15
 1341 0430 01F0      		breq .L101
 261:../../common/action.c ****                                     layer_clear();
 1342               		.loc 1 261 0 is_stmt 0 discriminator 1
 1343 0432 822F      		mov r24,r18
 1344 0434 8F71      		andi r24,lo8(31)
 1345               	/* epilogue start */
 324:../../common/action.c **** 
 1346               		.loc 1 324 0 is_stmt 1 discriminator 1
 1347 0436 2696      		adiw r28,6
 1348 0438 0FB6      		in __tmp_reg__,__SREG__
 1349 043a F894      		cli
 1350 043c DEBF      		out __SP_H__,r29
 1351 043e 0FBE      		out __SREG__,__tmp_reg__
 1352 0440 CDBF      		out __SP_L__,r28
 1353 0442 DF91      		pop r29
 1354 0444 CF91      		pop r28
 1355 0446 1F91      		pop r17
 1356               	.LVL141:
 1357 0448 0F91      		pop r16
 1358               	.LVL142:
 1359 044a FF90      		pop r15
 1360               	.LVL143:
 1361 044c EF90      		pop r14
 1362 044e DF90      		pop r13
 1363 0450 CF90      		pop r12
 1364               	.LVL144:
 261:../../common/action.c ****                                     layer_clear();
 1365               		.loc 1 261 0 discriminator 1
 1366 0452 0C94 0000 		jmp layer_move
 1367               	.LVL145:
 1368               	.L101:
 1369               	/* epilogue start */
 324:../../common/action.c **** 
 1370               		.loc 1 324 0
 1371 0456 2696      		adiw r28,6
 1372 0458 0FB6      		in __tmp_reg__,__SREG__
 1373 045a F894      		cli
 1374 045c DEBF      		out __SP_H__,r29
 1375 045e 0FBE      		out __SREG__,__tmp_reg__
 1376 0460 CDBF      		out __SP_L__,r28
 1377 0462 DF91      		pop r29
 1378 0464 CF91      		pop r28
 1379 0466 1F91      		pop r17
 1380               	.LVL146:
 1381 0468 0F91      		pop r16
 1382               	.LVL147:
 1383 046a FF90      		pop r15
 1384               	.LVL148:
 1385 046c EF90      		pop r14
 1386 046e DF90      		pop r13
 1387 0470 CF90      		pop r12
 1388               	.LVL149:
 262:../../common/action.c ****                     break;
 1389               		.loc 1 262 0
 1390 0472 0C94 0000 		jmp layer_clear
 1391               	.LVL150:
 1392               	.L91:
 266:../../common/action.c ****                         if (tap_count > 0) {
 1393               		.loc 1 266 0
 1394 0476 FF20      		tst r15
 1395 0478 01F0      		breq .L102
 267:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1396               		.loc 1 267 0
 1397 047a 0023      		tst r16
 1398 047c 01F4      		brne .+2
 1399 047e 00C0      		rjmp .L100
 1400               	.LVL151:
 1401               	.L135:
 269:../../common/action.c ****                         } else {
 1402               		.loc 1 269 0
 1403 0480 812F      		mov r24,r17
 1404               	/* epilogue start */
 324:../../common/action.c **** 
 1405               		.loc 1 324 0
 1406 0482 2696      		adiw r28,6
 1407 0484 0FB6      		in __tmp_reg__,__SREG__
 1408 0486 F894      		cli
 1409 0488 DEBF      		out __SP_H__,r29
 1410 048a 0FBE      		out __SREG__,__tmp_reg__
 1411 048c CDBF      		out __SP_L__,r28
 1412 048e DF91      		pop r29
 1413 0490 CF91      		pop r28
 1414 0492 1F91      		pop r17
 1415               	.LVL152:
 1416 0494 0F91      		pop r16
 1417 0496 FF90      		pop r15
 1418               	.LVL153:
 1419 0498 EF90      		pop r14
 1420 049a DF90      		pop r13
 1421 049c CF90      		pop r12
 1422               	.LVL154:
 269:../../common/action.c ****                         } else {
 1423               		.loc 1 269 0
 1424 049e 0C94 0000 		jmp register_code
 1425               	.LVL155:
 1426               	.L102:
 275:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1427               		.loc 1 275 0
 1428 04a2 0023      		tst r16
 1429 04a4 01F4      		brne .+2
 1430 04a6 00C0      		rjmp .L99
 1431               	.L136:
 277:../../common/action.c ****                         } else {
 1432               		.loc 1 277 0
 1433 04a8 812F      		mov r24,r17
 1434               	/* epilogue start */
 324:../../common/action.c **** 
 1435               		.loc 1 324 0
 1436 04aa 2696      		adiw r28,6
 1437 04ac 0FB6      		in __tmp_reg__,__SREG__
 1438 04ae F894      		cli
 1439 04b0 DEBF      		out __SP_H__,r29
 1440 04b2 0FBE      		out __SREG__,__tmp_reg__
 1441 04b4 CDBF      		out __SP_L__,r28
 1442 04b6 DF91      		pop r29
 1443 04b8 CF91      		pop r28
 1444 04ba 1F91      		pop r17
 1445               	.LVL156:
 1446 04bc 0F91      		pop r16
 1447               	.LVL157:
 1448 04be FF90      		pop r15
 1449               	.LVL158:
 1450 04c0 EF90      		pop r14
 1451 04c2 DF90      		pop r13
 1452 04c4 CF90      		pop r12
 1453               	.LVL159:
 277:../../common/action.c ****                         } else {
 1454               		.loc 1 277 0
 1455 04c6 0C94 0000 		jmp unregister_code
 1456               	.LVL160:
 1457               	.L56:
 291:../../common/action.c ****             break;
 1458               		.loc 1 291 0
 1459 04ca 422F      		mov r20,r18
 1460 04cc 4F70      		andi r20,lo8(15)
 1461               	.LVL161:
 1462 04ce 612F      		mov r22,r17
 1463 04d0 C601      		movw r24,r12
 1464 04d2 0E94 0000 		call action_get_macro
 1465               	.LVL162:
 1466               	/* epilogue start */
 324:../../common/action.c **** 
 1467               		.loc 1 324 0
 1468 04d6 2696      		adiw r28,6
 1469 04d8 0FB6      		in __tmp_reg__,__SREG__
 1470 04da F894      		cli
 1471 04dc DEBF      		out __SP_H__,r29
 1472 04de 0FBE      		out __SREG__,__tmp_reg__
 1473 04e0 CDBF      		out __SP_L__,r28
 1474 04e2 DF91      		pop r29
 1475 04e4 CF91      		pop r28
 1476 04e6 1F91      		pop r17
 1477 04e8 0F91      		pop r16
 1478               	.LVL163:
 1479 04ea FF90      		pop r15
 1480               	.LVL164:
 1481 04ec EF90      		pop r14
 1482 04ee DF90      		pop r13
 1483 04f0 CF90      		pop r12
 1484               	.LVL165:
 291:../../common/action.c ****             break;
 1485               		.loc 1 291 0
 1486 04f2 0C94 0000 		jmp action_macro_play
 1487               	.LVL166:
 1488               	.L57:
 318:../../common/action.c ****             break;
 1489               		.loc 1 318 0
 1490 04f6 422F      		mov r20,r18
 1491 04f8 4F70      		andi r20,lo8(15)
 1492               	.LVL167:
 1493 04fa 612F      		mov r22,r17
 1494 04fc C601      		movw r24,r12
 1495               	/* epilogue start */
 324:../../common/action.c **** 
 1496               		.loc 1 324 0
 1497 04fe 2696      		adiw r28,6
 1498 0500 0FB6      		in __tmp_reg__,__SREG__
 1499 0502 F894      		cli
 1500 0504 DEBF      		out __SP_H__,r29
 1501 0506 0FBE      		out __SREG__,__tmp_reg__
 1502 0508 CDBF      		out __SP_L__,r28
 1503 050a DF91      		pop r29
 1504 050c CF91      		pop r28
 1505 050e 1F91      		pop r17
 1506               	.LVL168:
 1507 0510 0F91      		pop r16
 1508               	.LVL169:
 1509 0512 FF90      		pop r15
 1510               	.LVL170:
 1511 0514 EF90      		pop r14
 1512 0516 DF90      		pop r13
 1513 0518 CF90      		pop r12
 1514               	.LVL171:
 318:../../common/action.c ****             break;
 1515               		.loc 1 318 0
 1516 051a 0C94 0000 		jmp action_function
 1517               	.LVL172:
 1518               	.L47:
 1519               	/* epilogue start */
 324:../../common/action.c **** 
 1520               		.loc 1 324 0
 1521 051e 2696      		adiw r28,6
 1522 0520 0FB6      		in __tmp_reg__,__SREG__
 1523 0522 F894      		cli
 1524 0524 DEBF      		out __SP_H__,r29
 1525 0526 0FBE      		out __SREG__,__tmp_reg__
 1526 0528 CDBF      		out __SP_L__,r28
 1527 052a DF91      		pop r29
 1528 052c CF91      		pop r28
 1529 052e 1F91      		pop r17
 1530               	.LVL173:
 1531 0530 0F91      		pop r16
 1532 0532 FF90      		pop r15
 1533               	.LVL174:
 1534 0534 EF90      		pop r14
 1535 0536 DF90      		pop r13
 1536 0538 CF90      		pop r12
 1537 053a 0895      		ret
 1538               		.cfi_endproc
 1539               	.LFE103:
 1541               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1542               	.global	clear_keyboard_but_mods
 1544               	clear_keyboard_but_mods:
 1545               	.LFB109:
 475:../../common/action.c ****     }
 476:../../common/action.c **** }
 477:../../common/action.c **** 
 478:../../common/action.c **** void clear_keyboard(void)
 479:../../common/action.c **** {
 480:../../common/action.c ****     clear_mods();
 481:../../common/action.c ****     clear_keyboard_but_mods();
 482:../../common/action.c **** }
 483:../../common/action.c **** 
 484:../../common/action.c **** void clear_keyboard_but_mods(void)
 485:../../common/action.c **** {
 1546               		.loc 1 485 0
 1547               		.cfi_startproc
 1548               	/* prologue: function */
 1549               	/* frame size = 0 */
 1550               	/* stack size = 0 */
 1551               	.L__stack_usage = 0
 486:../../common/action.c ****     clear_weak_mods();
 1552               		.loc 1 486 0
 1553 0000 0E94 0000 		call clear_weak_mods
 1554               	.LVL175:
 487:../../common/action.c ****     clear_keys();
 1555               		.loc 1 487 0
 1556 0004 0E94 0000 		call clear_keys
 1557               	.LVL176:
 488:../../common/action.c ****     send_keyboard_report();
 1558               		.loc 1 488 0
 1559 0008 0C94 0000 		jmp send_keyboard_report
 1560               	.LVL177:
 1561               		.cfi_endproc
 1562               	.LFE109:
 1564               		.section	.text.clear_keyboard,"ax",@progbits
 1565               	.global	clear_keyboard
 1567               	clear_keyboard:
 1568               	.LFB108:
 479:../../common/action.c ****     clear_mods();
 1569               		.loc 1 479 0
 1570               		.cfi_startproc
 1571               	/* prologue: function */
 1572               	/* frame size = 0 */
 1573               	/* stack size = 0 */
 1574               	.L__stack_usage = 0
 480:../../common/action.c ****     clear_keyboard_but_mods();
 1575               		.loc 1 480 0
 1576 0000 0E94 0000 		call clear_mods
 1577               	.LVL178:
 481:../../common/action.c **** }
 1578               		.loc 1 481 0
 1579 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1580               	.LVL179:
 1581               		.cfi_endproc
 1582               	.LFE108:
 1584               		.section	.text.is_tap_key,"ax",@progbits
 1585               	.global	is_tap_key
 1587               	is_tap_key:
 1588               	.LFB110:
 489:../../common/action.c **** #ifdef MOUSEKEY_ENABLE
 490:../../common/action.c ****     mousekey_clear();
 491:../../common/action.c ****     mousekey_send();
 492:../../common/action.c **** #endif
 493:../../common/action.c **** #ifdef EXTRAKEY_ENABLE
 494:../../common/action.c ****     host_system_send(0);
 495:../../common/action.c ****     host_consumer_send(0);
 496:../../common/action.c **** #endif
 497:../../common/action.c **** }
 498:../../common/action.c **** 
 499:../../common/action.c **** bool is_tap_key(key_t key)
 500:../../common/action.c **** {
 1589               		.loc 1 500 0
 1590               		.cfi_startproc
 1591               	.LVL180:
 1592               	/* prologue: function */
 1593               	/* frame size = 0 */
 1594               	/* stack size = 0 */
 1595               	.L__stack_usage = 0
 501:../../common/action.c ****     action_t action = layer_switch_get_action(key);
 1596               		.loc 1 501 0
 1597 0000 0E94 0000 		call layer_switch_get_action
 1598               	.LVL181:
 502:../../common/action.c **** 
 503:../../common/action.c ****     switch (action.kind.id) {
 1599               		.loc 1 503 0
 1600 0004 292F      		mov r18,r25
 1601 0006 2295      		swap r18
 1602 0008 2F70      		andi r18,lo8(15)
 1603 000a 30E0      		ldi r19,0
 1604 000c 2C30      		cpi r18,12
 1605 000e 3105      		cpc r19,__zero_reg__
 1606 0010 04F4      		brge .L144
 1607 0012 2A30      		cpi r18,10
 1608 0014 3105      		cpc r19,__zero_reg__
 1609 0016 04F4      		brge .L147
 1610 0018 2250      		subi r18,2
 1611 001a 3109      		sbc r19,__zero_reg__
 1612 001c 2230      		cpi r18,2
 1613 001e 3105      		cpc r19,__zero_reg__
 1614 0020 00F4      		brsh .L143
 1615 0022 00C0      		rjmp .L147
 1616               	.L144:
 1617 0024 2C30      		cpi r18,12
 1618 0026 3105      		cpc r19,__zero_reg__
 1619 0028 01F0      		breq .L146
 1620 002a 2F30      		cpi r18,15
 1621 002c 3105      		cpc r19,__zero_reg__
 1622 002e 01F0      		breq .L146
 1623               	.L143:
 504:../../common/action.c ****         case ACT_LMODS_TAP:
 505:../../common/action.c ****         case ACT_RMODS_TAP:
 506:../../common/action.c ****         case ACT_LAYER_TAP:
 507:../../common/action.c ****         case ACT_LAYER_TAP_EXT:
 508:../../common/action.c ****             return true;
 509:../../common/action.c ****         case ACT_MACRO:
 510:../../common/action.c ****         case ACT_FUNCTION:
 511:../../common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 512:../../common/action.c ****             return false;
 513:../../common/action.c ****     }
 514:../../common/action.c ****     return false;
 1624               		.loc 1 514 0
 1625 0030 80E0      		ldi r24,0
 1626 0032 0895      		ret
 1627               	.L146:
 511:../../common/action.c ****             return false;
 1628               		.loc 1 511 0
 1629 0034 93FB      		bst r25,3
 1630 0036 8827      		clr r24
 1631 0038 80F9      		bld r24,0
 1632 003a 0895      		ret
 1633               	.L147:
 508:../../common/action.c ****         case ACT_MACRO:
 1634               		.loc 1 508 0
 1635 003c 81E0      		ldi r24,lo8(1)
 515:../../common/action.c **** }
 1636               		.loc 1 515 0
 1637 003e 0895      		ret
 1638               		.cfi_endproc
 1639               	.LFE110:
 1641               		.section	.text.debug_event,"ax",@progbits
 1642               	.global	debug_event
 1644               	debug_event:
 1645               	.LFB111:
 516:../../common/action.c **** 
 517:../../common/action.c **** 
 518:../../common/action.c **** /*
 519:../../common/action.c ****  * debug print
 520:../../common/action.c ****  */
 521:../../common/action.c **** void debug_event(keyevent_t event)
 522:../../common/action.c **** {
 1646               		.loc 1 522 0
 1647               		.cfi_startproc
 1648 0000 CF93      		push r28
 1649               	.LCFI15:
 1650               		.cfi_def_cfa_offset 3
 1651               		.cfi_offset 28, -2
 1652 0002 DF93      		push r29
 1653               	.LCFI16:
 1654               		.cfi_def_cfa_offset 4
 1655               		.cfi_offset 29, -3
 1656 0004 00D0      		rcall .
 1657 0006 00D0      		rcall .
 1658 0008 1F92      		push __zero_reg__
 1659               	.LCFI17:
 1660               		.cfi_def_cfa_offset 9
 1661 000a CDB7      		in r28,__SP_L__
 1662 000c DEB7      		in r29,__SP_H__
 1663               	.LCFI18:
 1664               		.cfi_def_cfa_register 28
 1665               	/* prologue: function */
 1666               	/* frame size = 5 */
 1667               	/* stack size = 7 */
 1668               	.L__stack_usage = 7
 1669               	/* epilogue start */
 523:../../common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 524:../../common/action.c **** }
 1670               		.loc 1 524 0
 1671 000e 0F90      		pop __tmp_reg__
 1672 0010 0F90      		pop __tmp_reg__
 1673 0012 0F90      		pop __tmp_reg__
 1674 0014 0F90      		pop __tmp_reg__
 1675 0016 0F90      		pop __tmp_reg__
 1676 0018 DF91      		pop r29
 1677 001a CF91      		pop r28
 1678 001c 0895      		ret
 1679               		.cfi_endproc
 1680               	.LFE111:
 1682               		.section	.text.debug_record,"ax",@progbits
 1683               	.global	debug_record
 1685               	debug_record:
 1686               	.LFB112:
 525:../../common/action.c **** 
 526:../../common/action.c **** void debug_record(keyrecord_t record)
 527:../../common/action.c **** {
 1687               		.loc 1 527 0
 1688               		.cfi_startproc
 1689 0000 CF93      		push r28
 1690               	.LCFI19:
 1691               		.cfi_def_cfa_offset 3
 1692               		.cfi_offset 28, -2
 1693 0002 DF93      		push r29
 1694               	.LCFI20:
 1695               		.cfi_def_cfa_offset 4
 1696               		.cfi_offset 29, -3
 1697 0004 00D0      		rcall .
 1698 0006 00D0      		rcall .
 1699 0008 00D0      		rcall .
 1700               	.LCFI21:
 1701               		.cfi_def_cfa_offset 10
 1702 000a CDB7      		in r28,__SP_L__
 1703 000c DEB7      		in r29,__SP_H__
 1704               	.LCFI22:
 1705               		.cfi_def_cfa_register 28
 1706               	/* prologue: function */
 1707               	/* frame size = 6 */
 1708               	/* stack size = 8 */
 1709               	.L__stack_usage = 8
 1710               	/* epilogue start */
 528:../../common/action.c ****     debug_event(record.event);
 529:../../common/action.c **** #ifndef NO_ACTION_TAPPING
 530:../../common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 531:../../common/action.c **** #endif
 532:../../common/action.c **** }
 1711               		.loc 1 532 0
 1712 000e 2696      		adiw r28,6
 1713 0010 0FB6      		in __tmp_reg__,__SREG__
 1714 0012 F894      		cli
 1715 0014 DEBF      		out __SP_H__,r29
 1716 0016 0FBE      		out __SREG__,__tmp_reg__
 1717 0018 CDBF      		out __SP_L__,r28
 1718 001a DF91      		pop r29
 1719 001c CF91      		pop r28
 1720 001e 0895      		ret
 1721               		.cfi_endproc
 1722               	.LFE112:
 1724               		.section	.text.debug_action,"ax",@progbits
 1725               	.global	debug_action
 1727               	debug_action:
 1728               	.LFB113:
 533:../../common/action.c **** 
 534:../../common/action.c **** void debug_action(action_t action)
 535:../../common/action.c **** {
 1729               		.loc 1 535 0
 1730               		.cfi_startproc
 1731               	.LVL182:
 1732               	/* prologue: function */
 1733               	/* frame size = 0 */
 1734               	/* stack size = 0 */
 1735               	.L__stack_usage = 0
 1736 0000 0895      		ret
 1737               		.cfi_endproc
 1738               	.LFE113:
 1740               		.comm	debug_config,1,1
 1741               		.comm	mk_wheel_time_to_max,1,1
 1742               		.comm	mk_wheel_max_speed,1,1
 1743               		.comm	mk_time_to_max,1,1
 1744               		.comm	mk_max_speed,1,1
 1745               		.comm	mk_interval,1,1
 1746               		.comm	mk_delay,1,1
 1747               		.text
 1748               	.Letext0:
 1749               		.file 3 "/usr/lib/avr/include/stdint.h"
 1750               		.file 4 "../../common/keycode.h"
 1751               		.file 5 "../../common/action_code.h"
 1752               		.file 6 "../../common/action_macro.h"
 1753               		.file 7 "../../common/action.h"
 1754               		.file 8 "../../common/debug_config.h"
 1755               		.file 9 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 1756               		.file 10 "../../common/mousekey.h"
 1757               		.file 11 "../../common/action_tapping.h"
 1758               		.file 12 "../../common/action_util.h"
 1759               		.file 13 "../../common/host.h"
 1760               		.file 14 "../../common/action_layer.h"
 1761               		.file 15 "../../common/command.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/cciVtlcJ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cciVtlcJ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cciVtlcJ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cciVtlcJ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cciVtlcJ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cciVtlcJ.s:13     .text.action_exec:0000000000000000 action_exec
     /tmp/cciVtlcJ.s:93     .text.register_code:0000000000000000 register_code
     /tmp/cciVtlcJ.s:346    .text.unregister_code:0000000000000000 unregister_code
     /tmp/cciVtlcJ.s:423    .text.register_mods:0000000000000000 register_mods
     /tmp/cciVtlcJ.s:449    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/cciVtlcJ.s:475    .text.process_action:0000000000000000 process_action
     /tmp/cciVtlcJ.s:1544   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/cciVtlcJ.s:1567   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/cciVtlcJ.s:1587   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/cciVtlcJ.s:1644   .text.debug_event:0000000000000000 debug_event
     /tmp/cciVtlcJ.s:1685   .text.debug_record:0000000000000000 debug_record
     /tmp/cciVtlcJ.s:1727   .text.debug_action:0000000000000000 debug_action
                            *COM*:0000000000000001 debug_config
                            *COM*:0000000000000001 mk_wheel_time_to_max
                            *COM*:0000000000000001 mk_wheel_max_speed
                            *COM*:0000000000000001 mk_time_to_max
                            *COM*:0000000000000001 mk_max_speed
                            *COM*:0000000000000001 mk_interval
                            *COM*:0000000000000001 mk_delay

UNDEFINED SYMBOLS
action_tapping_process
command_proc
add_key
add_mods
send_keyboard_report
host_system_send
host_consumer_send
del_key
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_invert
layer_on
layer_off
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
clear_mods
__do_clear_bss
