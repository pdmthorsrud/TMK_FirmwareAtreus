   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB100:
  15               		.file 1 "../../common/action_util.c"
   1:../../common/action_util.c **** /*
   2:../../common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../common/action_util.c **** 
   4:../../common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/action_util.c **** (at your option) any later version.
   8:../../common/action_util.c **** 
   9:../../common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/action_util.c **** GNU General Public License for more details.
  13:../../common/action_util.c **** 
  14:../../common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/action_util.c **** */
  17:../../common/action_util.c **** #include "host.h"
  18:../../common/action_util.c **** #include "report.h"
  19:../../common/action_util.c **** #include "debug.h"
  20:../../common/action_util.c **** #include "action_util.h"
  21:../../common/action_util.c **** #include "timer.h"
  22:../../common/action_util.c **** 
  23:../../common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../common/action_util.c **** #endif
  29:../../common/action_util.c **** 
  30:../../common/action_util.c **** static uint8_t real_mods = 0;
  31:../../common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../common/action_util.c **** 
  33:../../common/action_util.c **** 
  34:../../common/action_util.c **** // TODO: pointer variable is not needed
  35:../../common/action_util.c **** //report_keyboard_t keyboard_report = {};
  36:../../common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  37:../../common/action_util.c **** 
  38:../../common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  39:../../common/action_util.c **** static int8_t oneshot_mods = 0;
  40:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  41:../../common/action_util.c **** static int16_t oneshot_time = 0;
  42:../../common/action_util.c **** #endif
  43:../../common/action_util.c **** #endif
  44:../../common/action_util.c **** 
  45:../../common/action_util.c **** 
  46:../../common/action_util.c **** void send_keyboard_report(void) {
  47:../../common/action_util.c ****     keyboard_report->mods  = real_mods;
  48:../../common/action_util.c ****     keyboard_report->mods |= weak_mods;
  49:../../common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  50:../../common/action_util.c ****     if (oneshot_mods) {
  51:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  52:../../common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  53:../../common/action_util.c ****             dprintf("Oneshot: timeout\n");
  54:../../common/action_util.c ****             clear_oneshot_mods();
  55:../../common/action_util.c ****         }
  56:../../common/action_util.c **** #endif
  57:../../common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  58:../../common/action_util.c ****         if (has_anykey()) {
  59:../../common/action_util.c ****             clear_oneshot_mods();
  60:../../common/action_util.c ****         }
  61:../../common/action_util.c ****     }
  62:../../common/action_util.c **** #endif
  63:../../common/action_util.c ****     host_keyboard_send(keyboard_report);
  64:../../common/action_util.c **** }
  65:../../common/action_util.c **** 
  66:../../common/action_util.c **** /* key */
  67:../../common/action_util.c **** void add_key(uint8_t key)
  68:../../common/action_util.c **** {
  16               		.loc 1 68 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  69:../../common/action_util.c **** #ifdef NKRO_ENABLE
  70:../../common/action_util.c ****     if (keyboard_nkro) {
  23               		.loc 1 70 0
  24 0000 9091 0000 		lds r25,keyboard_nkro
  25 0004 9923      		tst r25
  26 0006 01F0      		breq .L2
  27               	.LVL1:
  28               	.LBB7:
  29               	.LBB8:
  71:../../common/action_util.c ****         add_key_bit(key);
  72:../../common/action_util.c ****         return;
  73:../../common/action_util.c ****     }
  74:../../common/action_util.c **** #endif
  75:../../common/action_util.c ****     add_key_byte(key);
  76:../../common/action_util.c **** }
  77:../../common/action_util.c **** 
  78:../../common/action_util.c **** void del_key(uint8_t key)
  79:../../common/action_util.c **** {
  80:../../common/action_util.c **** #ifdef NKRO_ENABLE
  81:../../common/action_util.c ****     if (keyboard_nkro) {
  82:../../common/action_util.c ****         del_key_bit(key);
  83:../../common/action_util.c ****         return;
  84:../../common/action_util.c ****     }
  85:../../common/action_util.c **** #endif
  86:../../common/action_util.c ****     del_key_byte(key);
  87:../../common/action_util.c **** }
  88:../../common/action_util.c **** 
  89:../../common/action_util.c **** void clear_keys(void)
  90:../../common/action_util.c **** {
  91:../../common/action_util.c ****     // not clear mods
  92:../../common/action_util.c ****     for (int8_t i = 1; i < REPORT_SIZE; i++) {
  93:../../common/action_util.c ****         keyboard_report->raw[i] = 0;
  94:../../common/action_util.c ****     }
  95:../../common/action_util.c **** }
  96:../../common/action_util.c **** 
  97:../../common/action_util.c **** 
  98:../../common/action_util.c **** /* modifier */
  99:../../common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 100:../../common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 101:../../common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 102:../../common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 103:../../common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 104:../../common/action_util.c **** 
 105:../../common/action_util.c **** /* weak modifier */
 106:../../common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 107:../../common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 108:../../common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 109:../../common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 110:../../common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 111:../../common/action_util.c **** 
 112:../../common/action_util.c **** /* Oneshot modifier */
 113:../../common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 114:../../common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 115:../../common/action_util.c **** {
 116:../../common/action_util.c ****     oneshot_mods = mods;
 117:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 118:../../common/action_util.c ****     oneshot_time = timer_read();
 119:../../common/action_util.c **** #endif
 120:../../common/action_util.c **** }
 121:../../common/action_util.c **** void clear_oneshot_mods(void)
 122:../../common/action_util.c **** {
 123:../../common/action_util.c ****     oneshot_mods = 0;
 124:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 125:../../common/action_util.c ****     oneshot_time = 0;
 126:../../common/action_util.c **** #endif
 127:../../common/action_util.c **** }
 128:../../common/action_util.c **** #endif
 129:../../common/action_util.c **** 
 130:../../common/action_util.c **** 
 131:../../common/action_util.c **** 
 132:../../common/action_util.c **** 
 133:../../common/action_util.c **** /*
 134:../../common/action_util.c ****  * inspect keyboard state
 135:../../common/action_util.c ****  */
 136:../../common/action_util.c **** uint8_t has_anykey(void)
 137:../../common/action_util.c **** {
 138:../../common/action_util.c ****     uint8_t cnt = 0;
 139:../../common/action_util.c ****     for (uint8_t i = 1; i < REPORT_SIZE; i++) {
 140:../../common/action_util.c ****         if (keyboard_report->raw[i])
 141:../../common/action_util.c ****             cnt++;
 142:../../common/action_util.c ****     }
 143:../../common/action_util.c ****     return cnt;
 144:../../common/action_util.c **** }
 145:../../common/action_util.c **** 
 146:../../common/action_util.c **** uint8_t has_anymod(void)
 147:../../common/action_util.c **** {
 148:../../common/action_util.c ****     return bitpop(real_mods);
 149:../../common/action_util.c **** }
 150:../../common/action_util.c **** 
 151:../../common/action_util.c **** uint8_t get_first_key(void)
 152:../../common/action_util.c **** {
 153:../../common/action_util.c **** #ifdef NKRO_ENABLE
 154:../../common/action_util.c ****     if (keyboard_nkro) {
 155:../../common/action_util.c ****         uint8_t i = 0;
 156:../../common/action_util.c ****         for (; i < REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 157:../../common/action_util.c ****             ;
 158:../../common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 159:../../common/action_util.c ****     }
 160:../../common/action_util.c **** #endif
 161:../../common/action_util.c ****     return keyboard_report->keys[0];
 162:../../common/action_util.c **** }
 163:../../common/action_util.c **** 
 164:../../common/action_util.c **** 
 165:../../common/action_util.c **** 
 166:../../common/action_util.c **** /* local functions */
 167:../../common/action_util.c **** static inline void add_key_byte(uint8_t code)
 168:../../common/action_util.c **** {
 169:../../common/action_util.c ****     int8_t i = 0;
 170:../../common/action_util.c ****     int8_t empty = -1;
 171:../../common/action_util.c ****     for (; i < REPORT_KEYS; i++) {
 172:../../common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 173:../../common/action_util.c ****             break;
 174:../../common/action_util.c ****         }
 175:../../common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 176:../../common/action_util.c ****             empty = i;
 177:../../common/action_util.c ****         }
 178:../../common/action_util.c ****     }
 179:../../common/action_util.c ****     if (i == REPORT_KEYS) {
 180:../../common/action_util.c ****         if (empty != -1) {
 181:../../common/action_util.c ****             keyboard_report->keys[empty] = code;
 182:../../common/action_util.c ****         }
 183:../../common/action_util.c ****     }
 184:../../common/action_util.c **** }
 185:../../common/action_util.c **** 
 186:../../common/action_util.c **** static inline void del_key_byte(uint8_t code)
 187:../../common/action_util.c **** {
 188:../../common/action_util.c ****     for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 189:../../common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 190:../../common/action_util.c ****             keyboard_report->keys[i] = 0;
 191:../../common/action_util.c ****         }
 192:../../common/action_util.c ****     }
 193:../../common/action_util.c **** }
 194:../../common/action_util.c **** 
 195:../../common/action_util.c **** #ifdef NKRO_ENABLE
 196:../../common/action_util.c **** static inline void add_key_bit(uint8_t code)
 197:../../common/action_util.c **** {
 198:../../common/action_util.c ****     if ((code>>3) < REPORT_BITS) {
  30               		.loc 1 198 0
  31 0008 982F      		mov r25,r24
  32 000a 9695      		lsr r25
  33 000c 9695      		lsr r25
  34 000e 9695      		lsr r25
  35 0010 9F30      		cpi r25,lo8(15)
  36 0012 00F4      		brsh .L3
 199:../../common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
  37               		.loc 1 199 0
  38 0014 E091 0000 		lds r30,keyboard_report
  39 0018 F091 0000 		lds r31,keyboard_report+1
  40 001c E90F      		add r30,r25
  41 001e F11D      		adc r31,__zero_reg__
  42 0020 8770      		andi r24,lo8(7)
  43               	.LVL2:
  44 0022 21E0      		ldi r18,lo8(1)
  45 0024 30E0      		ldi r19,0
  46 0026 A901      		movw r20,r18
  47 0028 00C0      		rjmp 2f
  48               		1:
  49 002a 440F      		lsl r20
  50 002c 551F      		rol r21
  51               		2:
  52 002e 8A95      		dec r24
  53 0030 02F4      		brpl 1b
  54 0032 CA01      		movw r24,r20
  55 0034 9181      		ldd r25,Z+1
  56 0036 892B      		or r24,r25
  57 0038 8183      		std Z+1,r24
  58 003a 0895      		ret
  59               	.LVL3:
  60               	.L3:
 200:../../common/action_util.c ****     } else {
 201:../../common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
  61               		.loc 1 201 0
  62 003c 9091 0000 		lds r25,debug_config
  63 0040 90FF      		sbrs r25,0
  64 0042 00C0      		rjmp .L1
  65 0044 1F92      		push __zero_reg__
  66               	.LCFI0:
  67               		.cfi_def_cfa_offset 3
  68 0046 8F93      		push r24
  69               	.LCFI1:
  70               		.cfi_def_cfa_offset 4
  71 0048 80E0      		ldi r24,lo8(__c.4518)
  72 004a 90E0      		ldi r25,hi8(__c.4518)
  73               	.LVL4:
  74 004c 9F93      		push r25
  75               	.LCFI2:
  76               		.cfi_def_cfa_offset 5
  77               	.LVL5:
  78 004e 8F93      		push r24
  79               	.LCFI3:
  80               		.cfi_def_cfa_offset 6
  81 0050 0E94 0000 		call __xprintf
  82               	.LVL6:
  83 0054 0F90      		pop __tmp_reg__
  84 0056 0F90      		pop __tmp_reg__
  85 0058 0F90      		pop __tmp_reg__
  86 005a 0F90      		pop __tmp_reg__
  87               	.LCFI4:
  88               		.cfi_def_cfa_offset 2
  89 005c 0895      		ret
  90               	.LVL7:
  91               	.L2:
  92               	.LBE8:
  93               	.LBE7:
  94               	.LBB9:
  95               	.LBB10:
 172:../../common/action_util.c ****             break;
  96               		.loc 1 172 0
  97 005e 2091 0000 		lds r18,keyboard_report
  98 0062 3091 0000 		lds r19,keyboard_report+1
  99 0066 F901      		movw r30,r18
 100 0068 3296      		adiw r30,2
 101 006a 9FEF      		ldi r25,lo8(-1)
 102 006c 40E0      		ldi r20,0
 103               	.L6:
 104               	.LVL8:
 105 006e 5191      		ld r21,Z+
 106 0070 5817      		cp r21,r24
 107 0072 01F0      		breq .L1
 175:../../common/action_util.c ****             empty = i;
 108               		.loc 1 175 0
 109 0074 9F3F      		cpi r25,lo8(-1)
 110 0076 01F4      		brne .L5
 111 0078 5111      		cpse r21,__zero_reg__
 112 007a 00C0      		rjmp .L5
 113 007c 942F      		mov r25,r20
 114               	.LVL9:
 115               	.L5:
 116 007e 4F5F      		subi r20,lo8(-(1))
 117               	.LVL10:
 171:../../common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 118               		.loc 1 171 0
 119 0080 4E30      		cpi r20,lo8(14)
 120 0082 01F4      		brne .L6
 180:../../common/action_util.c ****             keyboard_report->keys[empty] = code;
 121               		.loc 1 180 0
 122 0084 9F3F      		cpi r25,lo8(-1)
 123 0086 01F0      		breq .L1
 181:../../common/action_util.c ****         }
 124               		.loc 1 181 0
 125 0088 F901      		movw r30,r18
 126 008a E90F      		add r30,r25
 127 008c F11D      		adc r31,__zero_reg__
 128 008e 97FD      		sbrc r25,7
 129 0090 FA95      		dec r31
 130 0092 8283      		std Z+2,r24
 131 0094 0895      		ret
 132               	.LVL11:
 133               	.L1:
 134 0096 0895      		ret
 135               	.LBE10:
 136               	.LBE9:
 137               		.cfi_endproc
 138               	.LFE100:
 140               		.section	.text.del_key,"ax",@progbits
 141               	.global	del_key
 143               	del_key:
 144               	.LFB101:
  79:../../common/action_util.c **** #ifdef NKRO_ENABLE
 145               		.loc 1 79 0
 146               		.cfi_startproc
 147               	.LVL12:
 148               	/* prologue: function */
 149               	/* frame size = 0 */
 150               	/* stack size = 0 */
 151               	.L__stack_usage = 0
  81:../../common/action_util.c ****         del_key_bit(key);
 152               		.loc 1 81 0
 153 0000 9091 0000 		lds r25,keyboard_nkro
 154 0004 9923      		tst r25
 155 0006 01F0      		breq .L16
 156               	.LVL13:
 157               	.LBB17:
 158               	.LBB18:
 202:../../common/action_util.c ****     }
 203:../../common/action_util.c **** }
 204:../../common/action_util.c **** 
 205:../../common/action_util.c **** static inline void del_key_bit(uint8_t code)
 206:../../common/action_util.c **** {
 207:../../common/action_util.c ****     if ((code>>3) < REPORT_BITS) {
 159               		.loc 1 207 0
 160 0008 982F      		mov r25,r24
 161 000a 9695      		lsr r25
 162 000c 9695      		lsr r25
 163 000e 9695      		lsr r25
 164 0010 9F30      		cpi r25,lo8(15)
 165 0012 00F4      		brsh .L17
 208:../../common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 166               		.loc 1 208 0
 167 0014 E091 0000 		lds r30,keyboard_report
 168 0018 F091 0000 		lds r31,keyboard_report+1
 169 001c E90F      		add r30,r25
 170 001e F11D      		adc r31,__zero_reg__
 171 0020 8770      		andi r24,lo8(7)
 172               	.LVL14:
 173 0022 21E0      		ldi r18,lo8(1)
 174 0024 30E0      		ldi r19,0
 175 0026 A901      		movw r20,r18
 176 0028 00C0      		rjmp 2f
 177               		1:
 178 002a 440F      		lsl r20
 179 002c 551F      		rol r21
 180               		2:
 181 002e 8A95      		dec r24
 182 0030 02F4      		brpl 1b
 183 0032 CA01      		movw r24,r20
 184 0034 8095      		com r24
 185 0036 9181      		ldd r25,Z+1
 186 0038 8923      		and r24,r25
 187 003a 8183      		std Z+1,r24
 188 003c 0895      		ret
 189               	.LVL15:
 190               	.L17:
 209:../../common/action_util.c ****     } else {
 210:../../common/action_util.c ****         dprintf("del_key_bit: can't del: %02X\n", code);
 191               		.loc 1 210 0
 192 003e 9091 0000 		lds r25,debug_config
 193 0042 90FF      		sbrs r25,0
 194 0044 00C0      		rjmp .L15
 195 0046 1F92      		push __zero_reg__
 196               	.LCFI5:
 197               		.cfi_def_cfa_offset 3
 198 0048 8F93      		push r24
 199               	.LCFI6:
 200               		.cfi_def_cfa_offset 4
 201 004a 80E0      		ldi r24,lo8(__c.4523)
 202 004c 90E0      		ldi r25,hi8(__c.4523)
 203               	.LVL16:
 204 004e 9F93      		push r25
 205               	.LCFI7:
 206               		.cfi_def_cfa_offset 5
 207               	.LVL17:
 208 0050 8F93      		push r24
 209               	.LCFI8:
 210               		.cfi_def_cfa_offset 6
 211 0052 0E94 0000 		call __xprintf
 212               	.LVL18:
 213 0056 0F90      		pop __tmp_reg__
 214 0058 0F90      		pop __tmp_reg__
 215 005a 0F90      		pop __tmp_reg__
 216 005c 0F90      		pop __tmp_reg__
 217               	.LCFI9:
 218               		.cfi_def_cfa_offset 2
 219 005e 0895      		ret
 220               	.LVL19:
 221               	.L16:
 222               	.LBE18:
 223               	.LBE17:
 224               	.LBB19:
 225               	.LBB20:
 189:../../common/action_util.c ****             keyboard_report->keys[i] = 0;
 226               		.loc 1 189 0
 227 0060 2091 0000 		lds r18,keyboard_report
 228 0064 3091 0000 		lds r19,keyboard_report+1
 229 0068 F901      		movw r30,r18
 230 006a 3296      		adiw r30,2
 231 006c 205F      		subi r18,-16
 232 006e 3F4F      		sbci r19,-1
 233               	.L21:
 234               	.LVL20:
 235 0070 9081      		ld r25,Z
 236 0072 9813      		cpse r25,r24
 237 0074 00C0      		rjmp .L20
 190:../../common/action_util.c ****         }
 238               		.loc 1 190 0
 239 0076 1082      		st Z,__zero_reg__
 240               	.L20:
 241               	.LVL21:
 242 0078 3196      		adiw r30,1
 243               	.LVL22:
 188:../../common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 244               		.loc 1 188 0
 245 007a E217      		cp r30,r18
 246 007c F307      		cpc r31,r19
 247 007e 01F4      		brne .L21
 248               	.LVL23:
 249               	.L15:
 250 0080 0895      		ret
 251               	.LBE20:
 252               	.LBE19:
 253               		.cfi_endproc
 254               	.LFE101:
 256               		.section	.text.clear_keys,"ax",@progbits
 257               	.global	clear_keys
 259               	clear_keys:
 260               	.LFB102:
  90:../../common/action_util.c ****     // not clear mods
 261               		.loc 1 90 0
 262               		.cfi_startproc
 263               	/* prologue: function */
 264               	/* frame size = 0 */
 265               	/* stack size = 0 */
 266               	.L__stack_usage = 0
 267               	.LVL24:
  90:../../common/action_util.c ****     // not clear mods
 268               		.loc 1 90 0
 269 0000 81E0      		ldi r24,lo8(1)
 270 0002 90E0      		ldi r25,0
 271               	.LVL25:
 272               	.L25:
 273               	.LBB21:
  93:../../common/action_util.c ****     }
 274               		.loc 1 93 0 discriminator 3
 275 0004 E091 0000 		lds r30,keyboard_report
 276 0008 F091 0000 		lds r31,keyboard_report+1
 277 000c E80F      		add r30,r24
 278 000e F91F      		adc r31,r25
 279 0010 1082      		st Z,__zero_reg__
 280               	.LVL26:
 281 0012 0196      		adiw r24,1
 282               	.LVL27:
  92:../../common/action_util.c ****         keyboard_report->raw[i] = 0;
 283               		.loc 1 92 0 discriminator 3
 284 0014 8031      		cpi r24,16
 285 0016 9105      		cpc r25,__zero_reg__
 286 0018 01F4      		brne .L25
 287               	/* epilogue start */
 288               	.LBE21:
  95:../../common/action_util.c **** 
 289               		.loc 1 95 0
 290 001a 0895      		ret
 291               		.cfi_endproc
 292               	.LFE102:
 294               		.section	.text.get_mods,"ax",@progbits
 295               	.global	get_mods
 297               	get_mods:
 298               	.LFB103:
  99:../../common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 299               		.loc 1 99 0
 300               		.cfi_startproc
 301               	/* prologue: function */
 302               	/* frame size = 0 */
 303               	/* stack size = 0 */
 304               	.L__stack_usage = 0
  99:../../common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 305               		.loc 1 99 0
 306 0000 8091 0000 		lds r24,real_mods
 307 0004 0895      		ret
 308               		.cfi_endproc
 309               	.LFE103:
 311               		.section	.text.add_mods,"ax",@progbits
 312               	.global	add_mods
 314               	add_mods:
 315               	.LFB104:
 100:../../common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 316               		.loc 1 100 0
 317               		.cfi_startproc
 318               	.LVL28:
 319               	/* prologue: function */
 320               	/* frame size = 0 */
 321               	/* stack size = 0 */
 322               	.L__stack_usage = 0
 100:../../common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 323               		.loc 1 100 0
 324 0000 9091 0000 		lds r25,real_mods
 325 0004 892B      		or r24,r25
 326               	.LVL29:
 327 0006 8093 0000 		sts real_mods,r24
 328 000a 0895      		ret
 329               		.cfi_endproc
 330               	.LFE104:
 332               		.section	.text.del_mods,"ax",@progbits
 333               	.global	del_mods
 335               	del_mods:
 336               	.LFB105:
 101:../../common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 337               		.loc 1 101 0
 338               		.cfi_startproc
 339               	.LVL30:
 340               	/* prologue: function */
 341               	/* frame size = 0 */
 342               	/* stack size = 0 */
 343               	.L__stack_usage = 0
 101:../../common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 344               		.loc 1 101 0
 345 0000 8095      		com r24
 346               	.LVL31:
 347 0002 9091 0000 		lds r25,real_mods
 348 0006 8923      		and r24,r25
 349               	.LVL32:
 350 0008 8093 0000 		sts real_mods,r24
 351 000c 0895      		ret
 352               		.cfi_endproc
 353               	.LFE105:
 355               		.section	.text.set_mods,"ax",@progbits
 356               	.global	set_mods
 358               	set_mods:
 359               	.LFB106:
 102:../../common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 360               		.loc 1 102 0
 361               		.cfi_startproc
 362               	.LVL33:
 363               	/* prologue: function */
 364               	/* frame size = 0 */
 365               	/* stack size = 0 */
 366               	.L__stack_usage = 0
 102:../../common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 367               		.loc 1 102 0
 368 0000 8093 0000 		sts real_mods,r24
 369 0004 0895      		ret
 370               		.cfi_endproc
 371               	.LFE106:
 373               		.section	.text.clear_mods,"ax",@progbits
 374               	.global	clear_mods
 376               	clear_mods:
 377               	.LFB107:
 103:../../common/action_util.c **** 
 378               		.loc 1 103 0
 379               		.cfi_startproc
 380               	/* prologue: function */
 381               	/* frame size = 0 */
 382               	/* stack size = 0 */
 383               	.L__stack_usage = 0
 103:../../common/action_util.c **** 
 384               		.loc 1 103 0
 385 0000 1092 0000 		sts real_mods,__zero_reg__
 386 0004 0895      		ret
 387               		.cfi_endproc
 388               	.LFE107:
 390               		.section	.text.get_weak_mods,"ax",@progbits
 391               	.global	get_weak_mods
 393               	get_weak_mods:
 394               	.LFB108:
 106:../../common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 395               		.loc 1 106 0
 396               		.cfi_startproc
 397               	/* prologue: function */
 398               	/* frame size = 0 */
 399               	/* stack size = 0 */
 400               	.L__stack_usage = 0
 106:../../common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 401               		.loc 1 106 0
 402 0000 8091 0000 		lds r24,weak_mods
 403 0004 0895      		ret
 404               		.cfi_endproc
 405               	.LFE108:
 407               		.section	.text.add_weak_mods,"ax",@progbits
 408               	.global	add_weak_mods
 410               	add_weak_mods:
 411               	.LFB109:
 107:../../common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 412               		.loc 1 107 0
 413               		.cfi_startproc
 414               	.LVL34:
 415               	/* prologue: function */
 416               	/* frame size = 0 */
 417               	/* stack size = 0 */
 418               	.L__stack_usage = 0
 107:../../common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 419               		.loc 1 107 0
 420 0000 9091 0000 		lds r25,weak_mods
 421 0004 892B      		or r24,r25
 422               	.LVL35:
 423 0006 8093 0000 		sts weak_mods,r24
 424 000a 0895      		ret
 425               		.cfi_endproc
 426               	.LFE109:
 428               		.section	.text.del_weak_mods,"ax",@progbits
 429               	.global	del_weak_mods
 431               	del_weak_mods:
 432               	.LFB110:
 108:../../common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 433               		.loc 1 108 0
 434               		.cfi_startproc
 435               	.LVL36:
 436               	/* prologue: function */
 437               	/* frame size = 0 */
 438               	/* stack size = 0 */
 439               	.L__stack_usage = 0
 108:../../common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 440               		.loc 1 108 0
 441 0000 8095      		com r24
 442               	.LVL37:
 443 0002 9091 0000 		lds r25,weak_mods
 444 0006 8923      		and r24,r25
 445               	.LVL38:
 446 0008 8093 0000 		sts weak_mods,r24
 447 000c 0895      		ret
 448               		.cfi_endproc
 449               	.LFE110:
 451               		.section	.text.set_weak_mods,"ax",@progbits
 452               	.global	set_weak_mods
 454               	set_weak_mods:
 455               	.LFB111:
 109:../../common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 456               		.loc 1 109 0
 457               		.cfi_startproc
 458               	.LVL39:
 459               	/* prologue: function */
 460               	/* frame size = 0 */
 461               	/* stack size = 0 */
 462               	.L__stack_usage = 0
 109:../../common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 463               		.loc 1 109 0
 464 0000 8093 0000 		sts weak_mods,r24
 465 0004 0895      		ret
 466               		.cfi_endproc
 467               	.LFE111:
 469               		.section	.text.clear_weak_mods,"ax",@progbits
 470               	.global	clear_weak_mods
 472               	clear_weak_mods:
 473               	.LFB112:
 110:../../common/action_util.c **** 
 474               		.loc 1 110 0
 475               		.cfi_startproc
 476               	/* prologue: function */
 477               	/* frame size = 0 */
 478               	/* stack size = 0 */
 479               	.L__stack_usage = 0
 110:../../common/action_util.c **** 
 480               		.loc 1 110 0
 481 0000 1092 0000 		sts weak_mods,__zero_reg__
 482 0004 0895      		ret
 483               		.cfi_endproc
 484               	.LFE112:
 486               		.section	.text.set_oneshot_mods,"ax",@progbits
 487               	.global	set_oneshot_mods
 489               	set_oneshot_mods:
 490               	.LFB113:
 115:../../common/action_util.c ****     oneshot_mods = mods;
 491               		.loc 1 115 0
 492               		.cfi_startproc
 493               	.LVL40:
 494               	/* prologue: function */
 495               	/* frame size = 0 */
 496               	/* stack size = 0 */
 497               	.L__stack_usage = 0
 116:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 498               		.loc 1 116 0
 499 0000 8093 0000 		sts oneshot_mods,r24
 500 0004 0895      		ret
 501               		.cfi_endproc
 502               	.LFE113:
 504               		.section	.text.clear_oneshot_mods,"ax",@progbits
 505               	.global	clear_oneshot_mods
 507               	clear_oneshot_mods:
 508               	.LFB114:
 122:../../common/action_util.c ****     oneshot_mods = 0;
 509               		.loc 1 122 0
 510               		.cfi_startproc
 511               	/* prologue: function */
 512               	/* frame size = 0 */
 513               	/* stack size = 0 */
 514               	.L__stack_usage = 0
 123:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 515               		.loc 1 123 0
 516 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 517 0004 0895      		ret
 518               		.cfi_endproc
 519               	.LFE114:
 521               		.section	.text.has_anykey,"ax",@progbits
 522               	.global	has_anykey
 524               	has_anykey:
 525               	.LFB115:
 137:../../common/action_util.c ****     uint8_t cnt = 0;
 526               		.loc 1 137 0
 527               		.cfi_startproc
 528               	/* prologue: function */
 529               	/* frame size = 0 */
 530               	/* stack size = 0 */
 531               	.L__stack_usage = 0
 532               	.LVL41:
 533               	.LBB22:
 140:../../common/action_util.c ****             cnt++;
 534               		.loc 1 140 0
 535 0000 8091 0000 		lds r24,keyboard_report
 536 0004 9091 0000 		lds r25,keyboard_report+1
 537 0008 FC01      		movw r30,r24
 538 000a 3196      		adiw r30,1
 539 000c 9C01      		movw r18,r24
 540 000e 205F      		subi r18,-16
 541 0010 3F4F      		sbci r19,-1
 542               	.LBE22:
 138:../../common/action_util.c ****     for (uint8_t i = 1; i < REPORT_SIZE; i++) {
 543               		.loc 1 138 0
 544 0012 80E0      		ldi r24,0
 545               	.LVL42:
 546               	.L41:
 547               	.LBB23:
 140:../../common/action_util.c ****             cnt++;
 548               		.loc 1 140 0
 549 0014 9191      		ld r25,Z+
 550               	.LVL43:
 551 0016 9111      		cpse r25,__zero_reg__
 141:../../common/action_util.c ****     }
 552               		.loc 1 141 0
 553 0018 8F5F      		subi r24,lo8(-(1))
 554               	.LVL44:
 555               	.L40:
 139:../../common/action_util.c ****         if (keyboard_report->raw[i])
 556               		.loc 1 139 0 discriminator 2
 557 001a E217      		cp r30,r18
 558 001c F307      		cpc r31,r19
 559 001e 01F4      		brne .L41
 560               	/* epilogue start */
 561               	.LBE23:
 144:../../common/action_util.c **** 
 562               		.loc 1 144 0
 563 0020 0895      		ret
 564               		.cfi_endproc
 565               	.LFE115:
 567               		.section	.text.send_keyboard_report,"ax",@progbits
 568               	.global	send_keyboard_report
 570               	send_keyboard_report:
 571               	.LFB99:
  46:../../common/action_util.c ****     keyboard_report->mods  = real_mods;
 572               		.loc 1 46 0
 573               		.cfi_startproc
 574               	/* prologue: function */
 575               	/* frame size = 0 */
 576               	/* stack size = 0 */
 577               	.L__stack_usage = 0
  47:../../common/action_util.c ****     keyboard_report->mods |= weak_mods;
 578               		.loc 1 47 0
 579 0000 E091 0000 		lds r30,keyboard_report
 580 0004 F091 0000 		lds r31,keyboard_report+1
 581 0008 8091 0000 		lds r24,real_mods
 582 000c 8083      		st Z,r24
  48:../../common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 583               		.loc 1 48 0
 584 000e E091 0000 		lds r30,keyboard_report
 585 0012 F091 0000 		lds r31,keyboard_report+1
 586 0016 9081      		ld r25,Z
 587 0018 8091 0000 		lds r24,weak_mods
 588 001c 892B      		or r24,r25
 589 001e 8083      		st Z,r24
  50:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 590               		.loc 1 50 0
 591 0020 8091 0000 		lds r24,oneshot_mods
 592 0024 8823      		tst r24
 593 0026 01F0      		breq .L48
  57:../../common/action_util.c ****         if (has_anykey()) {
 594               		.loc 1 57 0
 595 0028 E091 0000 		lds r30,keyboard_report
 596 002c F091 0000 		lds r31,keyboard_report+1
 597 0030 9081      		ld r25,Z
 598 0032 892B      		or r24,r25
 599 0034 8083      		st Z,r24
  58:../../common/action_util.c ****             clear_oneshot_mods();
 600               		.loc 1 58 0
 601 0036 0E94 0000 		call has_anykey
 602               	.LVL45:
 603 003a 8111      		cpse r24,__zero_reg__
 604               	.LBB26:
 605               	.LBB27:
 123:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 606               		.loc 1 123 0
 607 003c 1092 0000 		sts oneshot_mods,__zero_reg__
 608               	.L48:
 609               	.LBE27:
 610               	.LBE26:
  63:../../common/action_util.c **** }
 611               		.loc 1 63 0
 612 0040 8091 0000 		lds r24,keyboard_report
 613 0044 9091 0000 		lds r25,keyboard_report+1
 614 0048 0C94 0000 		jmp host_keyboard_send
 615               	.LVL46:
 616               		.cfi_endproc
 617               	.LFE99:
 619               		.section	.text.has_anymod,"ax",@progbits
 620               	.global	has_anymod
 622               	has_anymod:
 623               	.LFB116:
 147:../../common/action_util.c ****     return bitpop(real_mods);
 624               		.loc 1 147 0
 625               		.cfi_startproc
 626               	/* prologue: function */
 627               	/* frame size = 0 */
 628               	/* stack size = 0 */
 629               	.L__stack_usage = 0
 148:../../common/action_util.c **** }
 630               		.loc 1 148 0
 631 0000 8091 0000 		lds r24,real_mods
 632 0004 0C94 0000 		jmp bitpop
 633               	.LVL47:
 634               		.cfi_endproc
 635               	.LFE116:
 637               		.section	.text.get_first_key,"ax",@progbits
 638               	.global	get_first_key
 640               	get_first_key:
 641               	.LFB117:
 152:../../common/action_util.c **** #ifdef NKRO_ENABLE
 642               		.loc 1 152 0
 643               		.cfi_startproc
 644 0000 CF93      		push r28
 645               	.LCFI10:
 646               		.cfi_def_cfa_offset 3
 647               		.cfi_offset 28, -2
 648 0002 DF93      		push r29
 649               	.LCFI11:
 650               		.cfi_def_cfa_offset 4
 651               		.cfi_offset 29, -3
 652               	/* prologue: function */
 653               	/* frame size = 0 */
 654               	/* stack size = 2 */
 655               	.L__stack_usage = 2
 154:../../common/action_util.c ****         uint8_t i = 0;
 656               		.loc 1 154 0
 657 0004 8091 0000 		lds r24,keyboard_nkro
 658 0008 E091 0000 		lds r30,keyboard_report
 659 000c F091 0000 		lds r31,keyboard_report+1
 660 0010 8823      		tst r24
 661 0012 01F0      		breq .L55
 662 0014 DF01      		movw r26,r30
 663 0016 1196      		adiw r26,1
 664               	.LBB28:
 156:../../common/action_util.c ****             ;
 665               		.loc 1 156 0
 666 0018 C0E0      		ldi r28,0
 667               	.L56:
 668               	.LVL48:
 156:../../common/action_util.c ****             ;
 669               		.loc 1 156 0 is_stmt 0 discriminator 2
 670 001a 8D91      		ld r24,X+
 671 001c 8111      		cpse r24,__zero_reg__
 672 001e 00C0      		rjmp .L57
 156:../../common/action_util.c ****             ;
 673               		.loc 1 156 0 discriminator 3
 674 0020 CF5F      		subi r28,lo8(-(1))
 675               	.LVL49:
 676 0022 CF30      		cpi r28,lo8(15)
 677 0024 01F4      		brne .L56
 678               	.L57:
 158:../../common/action_util.c ****     }
 679               		.loc 1 158 0 is_stmt 1
 680 0026 D0E0      		ldi r29,0
 681 0028 EC0F      		add r30,r28
 682 002a FD1F      		adc r31,r29
 683 002c 8181      		ldd r24,Z+1
 684 002e 0E94 0000 		call biton
 685               	.LVL50:
 686 0032 93E0      		ldi r25,3
 687               		1:
 688 0034 CC0F      		lsl r28
 689 0036 DD1F      		rol r29
 690 0038 9A95      		dec r25
 691 003a 01F4      		brne 1b
 692               	.LVL51:
 693 003c 8C2B      		or r24,r28
 694 003e 00C0      		rjmp .L59
 695               	.L55:
 696               	.LBE28:
 161:../../common/action_util.c **** }
 697               		.loc 1 161 0
 698 0040 8281      		ldd r24,Z+2
 699               	.L59:
 700               	/* epilogue start */
 162:../../common/action_util.c **** 
 701               		.loc 1 162 0
 702 0042 DF91      		pop r29
 703 0044 CF91      		pop r28
 704 0046 0895      		ret
 705               		.cfi_endproc
 706               	.LFE117:
 708               		.section	.progmem.data,"a",@progbits
 711               	__c.4523:
 712 0000 6465 6C5F 		.string	"del_key_bit: can't del: %02X\n"
 712      6B65 795F 
 712      6269 743A 
 712      2063 616E 
 712      2774 2064 
 715               	__c.4518:
 716 001e 6164 645F 		.string	"add_key_bit: can't add: %02X\n"
 716      6B65 795F 
 716      6269 743A 
 716      2063 616E 
 716      2774 2061 
 717               		.local	oneshot_mods
 718               		.comm	oneshot_mods,1,1
 719               	.global	keyboard_report
 720               		.data
 723               	keyboard_report:
 724 0000 0000      		.word	__compound_literal.0
 725               		.local	__compound_literal.0
 726               		.comm	__compound_literal.0,16,1
 727               		.local	weak_mods
 728               		.comm	weak_mods,1,1
 729               		.local	real_mods
 730               		.comm	real_mods,1,1
 731               		.comm	debug_config,1,1
 732               		.text
 733               	.Letext0:
 734               		.file 2 "/usr/lib/avr/include/stdint.h"
 735               		.file 3 "../../common/report.h"
 736               		.file 4 "../../common/debug_config.h"
 737               		.file 5 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 738               		.file 6 "../../common/host.h"
 739               		.file 7 "../../common/xprintf.h"
 740               		.file 8 "../../common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/ccwMwRj4.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccwMwRj4.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccwMwRj4.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccwMwRj4.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccwMwRj4.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccwMwRj4.s:13     .text.add_key:0000000000000000 add_key
     /tmp/ccwMwRj4.s:723    .data:0000000000000000 keyboard_report
                            *COM*:0000000000000001 debug_config
     /tmp/ccwMwRj4.s:715    .progmem.data:000000000000001e __c.4518
     /tmp/ccwMwRj4.s:143    .text.del_key:0000000000000000 del_key
     /tmp/ccwMwRj4.s:711    .progmem.data:0000000000000000 __c.4523
     /tmp/ccwMwRj4.s:259    .text.clear_keys:0000000000000000 clear_keys
     /tmp/ccwMwRj4.s:297    .text.get_mods:0000000000000000 get_mods
     /tmp/ccwMwRj4.s:728    .bss:0000000000000012 real_mods
     /tmp/ccwMwRj4.s:314    .text.add_mods:0000000000000000 add_mods
     /tmp/ccwMwRj4.s:335    .text.del_mods:0000000000000000 del_mods
     /tmp/ccwMwRj4.s:358    .text.set_mods:0000000000000000 set_mods
     /tmp/ccwMwRj4.s:376    .text.clear_mods:0000000000000000 clear_mods
     /tmp/ccwMwRj4.s:393    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/ccwMwRj4.s:726    .bss:0000000000000011 weak_mods
     /tmp/ccwMwRj4.s:410    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/ccwMwRj4.s:431    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/ccwMwRj4.s:454    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/ccwMwRj4.s:472    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/ccwMwRj4.s:489    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
                             .bss:0000000000000000 oneshot_mods
     /tmp/ccwMwRj4.s:507    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/ccwMwRj4.s:524    .text.has_anykey:0000000000000000 has_anykey
     /tmp/ccwMwRj4.s:570    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/ccwMwRj4.s:622    .text.has_anymod:0000000000000000 has_anymod
     /tmp/ccwMwRj4.s:640    .text.get_first_key:0000000000000000 get_first_key
     /tmp/ccwMwRj4.s:718    .bss:0000000000000001 __compound_literal.0

UNDEFINED SYMBOLS
keyboard_nkro
__xprintf
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss
