
atreus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000039d0  00003a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  00800126  00800126  00003a8a  2**0
                  ALLOC
  3 .noinit       00000004  008001c3  008001c3  00003a8a  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00003a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000066  00000000  00000000  00004344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000043aa  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000043bc  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 000007a0  00000000  00000000  000043fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000da6e  00000000  00000000  00004b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000364a  00000000  00000000  0001260a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004181  00000000  00000000  00015c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001498  00000000  00000000  00019dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003b14  00000000  00000000  0001b270  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00006648  00000000  00000000  0001ed84  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b8  00000000  00000000  000253cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
       0:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__ctors_end>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
       4:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
       8:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
       c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
      10:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      14:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      18:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
      1c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      20:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
      24:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
		  USB_Device_ProcessControlRequest();
      28:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__vector_10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      2c:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__vector_11>
      30:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
      34:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      38:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      3c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      40:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      44:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      48:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      4c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      50:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      54:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__vector_21>
      58:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      5c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      60:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      64:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      68:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      6c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      70:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      74:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      78:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      7c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      80:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      84:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      88:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      8c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      90:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      94:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      98:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      9c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      a0:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      a4:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      a8:	0c 94 af 04 	jmp	0x95e	; 0x95e <__bad_interrupt>
      ac:	59 0d       	add	r21, r9
      ae:	7b 0d       	add	r23, r11
      b0:	79 0e       	add	r7, r25
      b2:	7b 0d       	add	r23, r11
      b4:	79 0e       	add	r7, r25
      b6:	c0 0d       	add	r28, r0
      b8:	e4 0d       	add	r30, r4
      ba:	79 0e       	add	r7, r25
      bc:	39 0e       	add	r3, r25
      be:	4d 0e       	add	r4, r29
      c0:	3f 11       	cpse	r19, r15
      c2:	3f 11       	cpse	r19, r15
      c4:	6c 11       	cpse	r22, r12
      c6:	6c 11       	cpse	r22, r12
      c8:	92 13       	cpse	r25, r18
      ca:	92 13       	cpse	r25, r18
      cc:	92 13       	cpse	r25, r18
      ce:	92 13       	cpse	r25, r18
      d0:	d2 11       	cpse	r29, r2
      d2:	92 13       	cpse	r25, r18
      d4:	cb 12       	cpse	r12, r27
      d6:	cb 12       	cpse	r12, r27
      d8:	68 13       	cpse	r22, r24
      da:	92 13       	cpse	r25, r18
      dc:	92 13       	cpse	r25, r18
      de:	7e 13       	cpse	r23, r30

000000e0 <__trampolines_end>:
      e0:	f1 a1       	ldd	r31, Z+33	; 0x21
      e2:	04 85       	ldd	r16, Z+12	; 0x0c
      e4:	1b 81       	ldd	r17, Y+3	; 0x03
      e6:	00 f0       	brcs	.+0      	; 0xe8 <keymaps>

000000e8 <keymaps>:
      e8:	14 00 1a 00 08 00 15 00 17 00 00 00 1c 00 18 00     ................
      f8:	0c 00 12 00 13 00 04 00 16 00 07 00 09 00 0a 00     ................
     108:	00 00 0b 00 0d 00 0e 00 0f 00 33 00 1d 00 1b 00     ..........3.....
     118:	06 00 19 00 05 00 e0 00 11 00 10 00 36 00 37 00     ............6.7.
     128:	38 00 29 00 2b 00 e3 00 e1 00 2c 00 e2 00 2a 00     8.).+.....,...*.
     138:	c0 00 2d 00 34 00 28 00 1e 02 1f 02 52 00 2f 02     ..-.4.(.....R./.
     148:	30 02 00 00 4b 00 24 00 25 00 26 00 25 02 20 02     0...K.$.%.&.%. .
     158:	50 00 51 00 4f 00 21 02 00 00 4e 00 21 00 22 00     P.Q.O.!...N.!.".
     168:	23 00 2e 02 2f 00 30 00 26 02 27 02 24 02 e0 00     #.../.0.&.'.$...
     178:	35 00 1e 00 1f 00 20 00 31 00 c1 00 49 02 e3 00     5..... .1...I...
     188:	e1 00 2a 00 e2 00 2c 00 c0 00 37 00 27 00 2e 00     ..*...,...7.'...
     198:	49 00 4a 00 52 00 4d 00 4b 00 00 00 52 00 40 00     I.J.R.M.K...R.@.
     1a8:	41 00 42 00 43 00 4c 00 50 00 51 00 4f 00 4e 00     A.B.C.L.P.Q.O.N.
     1b8:	00 00 51 00 3d 00 3e 00 3f 00 44 00 00 00 80 00     ..Q.=.>.?.D.....
     1c8:	39 00 00 00 c3 00 e0 00 00 00 3a 00 3b 00 3c 00     9.........:.;.<.
     1d8:	45 00 00 00 81 00 e3 00 e1 00 2a 00 e2 00 2c 00     E.........*...,.
     1e8:	c2 00 46 00 47 00 48 00                             ..F.G.H.

000001f0 <__c.4574>:
     1f0:	6e 6f 74 20 73 75 70 70 6f 72 74 65 64 2e 0a 00     not supported...

00000200 <__c.4571>:
     200:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
     210:	61 64 65 72 2e 2e 2e 20 00                          ader... .

00000219 <__c.1942>:
     219:	0a 00                                               ..

0000021b <__c.1940>:
     21b:	25 30 31 36 62 00                                   %016b.

00000221 <__c.1938>:
     221:	3a 20 00                                            : .

00000224 <__c.1936>:
     224:	25 30 32 58 00                                      %02X.

00000229 <__c.1933>:
     229:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     239:	42 43 44 45 46 0a 00                                BCDEF..

00000240 <__c.1911>:
     240:	0a 00                                               ..

00000242 <__c.1909>:
     242:	25 30 32 58 00                                      %02X.

00000247 <__c.1907>:
     247:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000251 <__c.4709>:
     251:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     261:	00                                                  .

00000262 <__c.4707>:
     262:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     272:	00                                                  .

00000273 <ProductString>:
     273:	0e 03 41 00 74 00 72 00 65 00 75 00 73 00 00 00     ..A.t.r.e.u.s...

00000283 <ManufacturerString>:
     283:	18 03 74 00 65 00 63 00 68 00 6e 00 6f 00 6d 00     ..t.e.c.h.n.o.m.
     293:	61 00 6e 00 63 00 79 00 00 00                       a.n.c.y...

0000029d <LanguageString>:
     29d:	04 03 09 04                                         ....

000002a1 <ConfigurationDescriptor>:
     2a1:	09 02 5b 00 03 01 00 a0 32 09 04 00 00 01 03 01     ..[.....2.......
     2b1:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     2c1:	00 01 09 04 01 00 02 03 00 00 00 09 21 11 01 00     ............!...
     2d1:	01 22 20 00 07 05 82 03 20 00 01 07 05 03 03 20     ." ..... ...... 
     2e1:	00 01 09 04 02 00 01 03 00 00 00 09 21 11 01 00     ............!...
     2f1:	01 22 39 00 07 05 84 03 10 00 01                    ."9........

000002fc <DeviceDescriptor>:
     2fc:	12 01 10 01 00 00 00 08 c0 16 7c 04 24 00 01 02     ..........|.$...
     30c:	00 01                                               ..

0000030e <NKROReport>:
     30e:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     31e:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     32e:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     33e:	25 01 95 78 75 01 81 02 c0                          %..xu....

00000347 <ConsoleReport>:
     347:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     357:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

00000367 <KeyboardReport>:
     367:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     377:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     387:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     397:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000003a6 <__c.4383>:
     3a6:	0a 00                                               ..

000003a8 <__c.4378>:
     3a8:	25 30 32 58 20 00                                   %02X .

000003ae <__c.4375>:
     3ae:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     3be:	20 00                                                .

000003c0 <__c.4662>:
     3c0:	0a 00                                               ..

000003c2 <__c.4660>:
     3c2:	25 30 32 58 00                                      %02X.

000003c7 <__c.4658>:
     3c7:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     3d7:	3a 20 00                                            : .

000003da <__c.4523>:
     3da:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     3ea:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000003f8 <__c.4518>:
     3f8:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     408:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000416 <__c.4852>:
     416:	3f 00                                               ?.

00000418 <__c.4849>:
     418:	0a 51 75 69 74 20 43 6f 6e 73 6f 6c 65 20 4d 6f     .Quit Console Mo
     428:	64 65 0a 00                                         de..

0000042c <__c.4854>:
     42c:	43 3e 20 00                                         C> .

00000430 <__c.4880>:
     430:	0a 00                                               ..

00000432 <__c.4878>:
     432:	25 75 00                                            %u.

00000435 <__c.4876>:
     435:	20 74 6f 20 00                                       to .

0000043a <__c.4874>:
     43a:	25 75 00                                            %u.

0000043d <__c.4872>:
     43d:	73 77 69 74 63 68 5f 64 65 66 61 75 6c 74 5f 6c     switch_default_l
     44d:	61 79 65 72 3a 20 00                                ayer: .

00000454 <__c.4839>:
     454:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

00000461 <__c.4837>:
     461:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6e 73 6f 6c 65 20     ..----- Console 
     471:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

0000047d <__c.4756>:
     47d:	50 61 75 73 3a 09 6a 75 6d 70 20 74 6f 20 62 6f     Paus:.jump to bo
     48d:	6f 74 6c 6f 61 64 65 72 0a 00                       otloader..

00000497 <__c.4754>:
     497:	43 61 70 73 3a 09 4c 6f 63 6b 20 4b 65 79 62 6f     Caps:.Lock Keybo
     4a7:	61 72 64 28 43 68 69 6c 64 20 50 72 6f 6f 66 29     ard(Child Proof)
     4b7:	0a 00                                               ..

000004b9 <__c.4752>:
     4b9:	50 53 63 72 3a 09 70 6f 77 65 72 20 64 6f 77 6e     PScr:.power down
     4c9:	2f 72 65 6d 6f 74 65 20 77 61 6b 65 2d 75 70 0a     /remote wake-up.
     4d9:	00                                                  .

000004da <__c.4750>:
     4da:	34 2f 46 34 3a 09 73 77 69 74 63 68 20 74 6f 20     4/F4:.switch to 
     4ea:	4c 61 79 65 72 34 20 0a 00                          Layer4 ..

000004f3 <__c.4748>:
     4f3:	33 2f 46 33 3a 09 73 77 69 74 63 68 20 74 6f 20     3/F3:.switch to 
     503:	4c 61 79 65 72 33 20 0a 00                          Layer3 ..

0000050c <__c.4746>:
     50c:	32 2f 46 32 3a 09 73 77 69 74 63 68 20 74 6f 20     2/F2:.switch to 
     51c:	4c 61 79 65 72 32 20 0a 00                          Layer2 ..

00000525 <__c.4744>:
     525:	31 2f 46 31 3a 09 73 77 69 74 63 68 20 74 6f 20     1/F1:.switch to 
     535:	4c 61 79 65 72 31 20 0a 00                          Layer1 ..

0000053e <__c.4742>:
     53e:	30 2f 46 31 30 3a 09 73 77 69 74 63 68 20 74 6f     0/F10:.switch to
     54e:	20 4c 61 79 65 72 30 20 0a 00                        Layer0 ..

00000558 <__c.4740>:
     558:	6e 3a 09 74 6f 67 67 6c 65 20 4e 4b 52 4f 0a 00     n:.toggle NKRO..

00000568 <__c.4738>:
     568:	65 3a 09 70 72 69 6e 74 20 65 65 70 72 6f 6d 20     e:.print eeprom 
     578:	63 6f 6e 66 69 67 0a 00                             config..

00000580 <__c.4736>:
     580:	73 3a 09 70 72 69 6e 74 20 73 74 61 74 75 73 0a     s:.print status.
     590:	00                                                  .

00000591 <__c.4734>:
     591:	74 3a 09 70 72 69 6e 74 20 74 69 6d 65 72 20 63     t:.print timer c
     5a1:	6f 75 6e 74 0a 00                                   ount..

000005a7 <__c.4732>:
     5a7:	76 3a 09 70 72 69 6e 74 20 64 65 76 69 63 65 20     v:.print device 
     5b7:	76 65 72 73 69 6f 6e 20 26 20 69 6e 66 6f 0a 00     version & info..

000005c7 <__c.4730>:
     5c7:	6d 3a 09 74 6f 67 67 6c 65 20 6d 6f 75 73 65 20     m:.toggle mouse 
     5d7:	64 65 62 75 67 0a 00                                debug..

000005de <__c.4728>:
     5de:	6b 3a 09 74 6f 67 67 6c 65 20 6b 65 79 62 6f 61     k:.toggle keyboa
     5ee:	72 64 20 64 65 62 75 67 0a 00                       rd debug..

000005f8 <__c.4726>:
     5f8:	78 3a 09 74 6f 67 67 6c 65 20 6d 61 74 72 69 78     x:.toggle matrix
     608:	20 64 65 62 75 67 0a 00                              debug..

00000610 <__c.4724>:
     610:	64 3a 09 74 6f 67 67 6c 65 20 64 65 62 75 67 20     d:.toggle debug 
     620:	65 6e 61 62 6c 65 0a 00                             enable..

00000628 <__c.4722>:
     628:	63 3a 09 65 6e 74 65 72 20 63 6f 6e 73 6f 6c 65     c:.enter console
     638:	20 6d 6f 64 65 0a 00                                 mode..

0000063f <__c.4720>:
     63f:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6d 6d 61 6e 64 20     ..----- Command 
     64f:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

0000065b <__c.4832>:
     65b:	3f 00                                               ?.

0000065d <__c.4824>:
     65d:	4e 4b 52 4f 3a 20 64 69 73 61 62 6c 65 64 0a 00     NKRO: disabled..

0000066d <__c.4822>:
     66d:	4e 4b 52 4f 3a 20 65 6e 61 62 6c 65 64 0a 00        NKRO: enabled..

0000067c <__c.4819>:
     67c:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     68c:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000696 <__c.4817>:
     696:	0a 0a 2d 2d 2d 2d 2d 20 53 74 61 74 75 73 20 2d     ..----- Status -
     6a6:	2d 2d 2d 2d 0a 00                                   ----..

000006ac <__c.4814>:
     6ac:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     6bc:	6c 58 0a 00                                         lX..

000006c0 <__c.4811>:
     6c0:	47 43 43 3a 20 34 2e 39 2e 32 20 41 56 52 2d 4c     GCC: 4.9.2 AVR-L
     6d0:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     6e0:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

000006ee <__c.4809>:
     6ee:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 43 4f     OPTIONS: LUFA CO
     6fe:	4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44 20 4e 4b     NSOLE COMMAND NK
     70e:	52 4f 20 34 30 39 36 0a 00                          RO 4096..

00000717 <__c.4807>:
     717:	42 55 49 4c 44 3a 20 61 38 30 33 39 33 33 2d 64     BUILD: a803933-d
     727:	69 72 74 79 20 28 32 31 3a 32 34 3a 33 34 20 41     irty (21:24:34 A
     737:	75 67 20 31 31 20 32 30 31 36 29 0a 00              ug 11 2016)..

00000744 <__c.4805>:
     744:	56 49 44 3a 20 30 78 31 36 43 30 28 74 65 63 68     VID: 0x16C0(tech
     754:	6e 6f 6d 61 6e 63 79 29 20 50 49 44 3a 20 30 78     nomancy) PID: 0x
     764:	30 34 37 43 28 41 74 72 65 75 73 29 20 56 45 52     047C(Atreus) VER
     774:	3a 20 33 36 0a 00                                   : 36..

0000077a <__c.4803>:
     77a:	44 45 53 43 3a 20 54 4d 4b 20 6b 65 79 62 6f 61     DESC: TMK keyboa
     78a:	72 64 20 66 69 72 6d 77 61 72 65 20 66 6f 72 20     rd firmware for 
     79a:	41 74 72 65 75 73 0a 00                             Atreus..

000007a2 <__c.4801>:
     7a2:	0a 0a 2d 2d 2d 2d 2d 20 56 65 72 73 69 6f 6e 20     ..----- Version 
     7b2:	2d 2d 2d 2d 2d 0a 00                                -----..

000007b9 <__c.4798>:
     7b9:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 64 69     .DEBUG: mouse di
     7c9:	73 61 62 6c 65 64 2e 0a 00                          sabled...

000007d2 <__c.4796>:
     7d2:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 65 6e     .DEBUG: mouse en
     7e2:	61 62 6c 65 64 2e 0a 00                             abled...

000007ea <__c.4793>:
     7ea:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     7fa:	20 64 69 73 61 62 6c 65 64 2e 0a 00                  disabled...

00000806 <__c.4791>:
     806:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     816:	20 65 6e 61 62 6c 65 64 2e 0a 00                     enabled...

00000821 <__c.4788>:
     821:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 64     .DEBUG: matrix d
     831:	69 73 61 62 6c 65 64 2e 0a 00                       isabled...

0000083b <__c.4786>:
     83b:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 65     .DEBUG: matrix e
     84b:	6e 61 62 6c 65 64 2e 0a 00                          nabled...

00000854 <__c.4783>:
     854:	0a 44 45 42 55 47 3a 20 65 6e 61 62 6c 65 64 2e     .DEBUG: enabled.
     864:	0a 00                                               ..

00000866 <__c.4781>:
     866:	0a 44 45 42 55 47 3a 20 64 69 73 61 62 6c 65 64     .DEBUG: disabled
     876:	2e 0a 00                                            ...

00000879 <__c.4778>:
     879:	6e 6f 74 20 73 75 70 70 6f 72 74 65 64 2e 0a 00     not supported...

00000889 <__c.4776>:
     889:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
     899:	61 64 65 72 2e 2e 2e 20 00                          ader... .

000008a2 <__c.4773>:
     8a2:	43 3e 20 00                                         C> .

000008a6 <__c.4771>:
     8a6:	0a 45 6e 74 65 72 20 43 6f 6e 73 6f 6c 65 20 4d     .Enter Console M
     8b6:	6f 64 65 0a 00                                      ode..

000008bb <__c.4765>:
     8bb:	55 6e 6c 6f 63 6b 65 64 2e 0a 00                    Unlocked...

000008c6 <__c.4763>:
     8c6:	4c 6f 63 6b 65 64 2e 0a 00 00                       Locked....

000008d0 <__ctors_end>:
     8d0:	11 24       	eor	r1, r1
     8d2:	1f be       	out	0x3f, r1	; 63
     8d4:	cf ef       	ldi	r28, 0xFF	; 255
     8d6:	da e0       	ldi	r29, 0x0A	; 10
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	cd bf       	out	0x3d, r28	; 61

000008dc <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     8dc:	04 b6       	in	r0, 0x34	; 52
     8de:	03 fe       	sbrs	r0, 3
     8e0:	27 c0       	rjmp	.+78     	; 0x930 <__do_copy_data>
     8e2:	80 91 c3 01 	lds	r24, 0x01C3
     8e6:	90 91 c4 01 	lds	r25, 0x01C4
     8ea:	a0 91 c5 01 	lds	r26, 0x01C5
     8ee:	b0 91 c6 01 	lds	r27, 0x01C6
     8f2:	87 30       	cpi	r24, 0x07	; 7
     8f4:	90 4b       	sbci	r25, 0xB0	; 176
     8f6:	a7 40       	sbci	r26, 0x07	; 7
     8f8:	b0 4b       	sbci	r27, 0xB0	; 176
     8fa:	d1 f4       	brne	.+52     	; 0x930 <__do_copy_data>
        reset_key = 0;
     8fc:	10 92 c3 01 	sts	0x01C3, r1
     900:	10 92 c4 01 	sts	0x01C4, r1
     904:	10 92 c5 01 	sts	0x01C5, r1
     908:	10 92 c6 01 	sts	0x01C6, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     90c:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     90e:	84 b7       	in	r24, 0x34	; 52
     910:	87 7f       	andi	r24, 0xF7	; 247
     912:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	a8 95       	wdr
     91a:	80 91 60 00 	lds	r24, 0x0060
     91e:	88 61       	ori	r24, 0x18	; 24
     920:	80 93 60 00 	sts	0x0060, r24
     924:	10 92 60 00 	sts	0x0060, r1
     928:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     92a:	e0 e0       	ldi	r30, 0x00	; 0
     92c:	f8 e3       	ldi	r31, 0x38	; 56
     92e:	09 95       	icall

00000930 <__do_copy_data>:
     930:	11 e0       	ldi	r17, 0x01	; 1
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b1 e0       	ldi	r27, 0x01	; 1
     936:	e0 ed       	ldi	r30, 0xD0	; 208
     938:	f9 e3       	ldi	r31, 0x39	; 57
     93a:	02 c0       	rjmp	.+4      	; 0x940 <__do_copy_data+0x10>
     93c:	05 90       	lpm	r0, Z+
     93e:	0d 92       	st	X+, r0
     940:	a6 32       	cpi	r26, 0x26	; 38
     942:	b1 07       	cpc	r27, r17
     944:	d9 f7       	brne	.-10     	; 0x93c <__do_copy_data+0xc>

00000946 <__do_clear_bss>:
     946:	21 e0       	ldi	r18, 0x01	; 1
     948:	a6 e2       	ldi	r26, 0x26	; 38
     94a:	b1 e0       	ldi	r27, 0x01	; 1
     94c:	01 c0       	rjmp	.+2      	; 0x950 <.do_clear_bss_start>

0000094e <.do_clear_bss_loop>:
     94e:	1d 92       	st	X+, r1

00000950 <.do_clear_bss_start>:
     950:	a3 3c       	cpi	r26, 0xC3	; 195
     952:	b2 07       	cpc	r27, r18
     954:	e1 f7       	brne	.-8      	; 0x94e <.do_clear_bss_loop>
     956:	0e 94 07 09 	call	0x120e	; 0x120e <main>
     95a:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <_exit>

0000095e <__bad_interrupt>:
     95e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000962 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     962:	ff 93       	push	r31
	push	ZL
     964:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     966:	e0 91 b0 01 	lds	r30, 0x01B0
	lds	ZH, xfunc_out+1	;/
     96a:	f0 91 b1 01 	lds	r31, 0x01B1
	sbiw	ZL, 0		;Skip if null
     96e:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     970:	09 f0       	breq	.+2      	; 0x974 <xputc+0x12>
	icall
     972:	09 95       	icall
2:	pop	ZL
     974:	ef 91       	pop	r30
	pop	ZH
     976:	ff 91       	pop	r31
	ret
     978:	08 95       	ret

0000097a <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     97a:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     97c:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     97e:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     980:	11 f0       	breq	.+4      	; 0x986 <xputs+0xc>
	rcall	xputc
     982:	ef df       	rcall	.-34     	; 0x962 <xputc>
	rjmp	1b
     984:	fb cf       	rjmp	.-10     	; 0x97c <xputs+0x2>
2:	ret
     986:	08 95       	ret

00000988 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     988:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     98a:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     98c:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     98e:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     990:	0c c0       	rjmp	.+24     	; 0x9aa <xitoa+0x22>
	neg	r20		;
     992:	41 95       	neg	r20
	sbrs	r25, 7		;
     994:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     996:	09 c0       	rjmp	.+18     	; 0x9aa <xitoa+0x22>
	ldi	r30, '-'	;
     998:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     99a:	60 95       	com	r22
	com	r23		;
     99c:	70 95       	com	r23
	com	r24		;
     99e:	80 95       	com	r24
	com	r25		;
     9a0:	90 95       	com	r25
	adc	r22, r1		;
     9a2:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     9a4:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     9a6:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     9a8:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     9aa:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <xitoa+0x2a>
	neg	r18		;
     9ae:	21 95       	neg	r18
	ldi	r19, '0'	;/
     9b0:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     9b2:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     9b4:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     9b6:	66 0f       	add	r22, r22
	rol	r23		;
     9b8:	77 1f       	adc	r23, r23
	rol	r24		;
     9ba:	88 1f       	adc	r24, r24
	rol	r25		;
     9bc:	99 1f       	adc	r25, r25
	rol	r26		;
     9be:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     9c0:	a4 17       	cp	r26, r20
	brcs	3f		;
     9c2:	10 f0       	brcs	.+4      	; 0x9c8 <xitoa+0x40>
	sub	r26, r20	;
     9c4:	a4 1b       	sub	r26, r20
	inc	r22		;
     9c6:	63 95       	inc	r22
3:	dec	r21		;
     9c8:	5a 95       	dec	r21
	brne	2b		;/
     9ca:	a9 f7       	brne	.-22     	; 0x9b6 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     9cc:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     9ce:	08 f0       	brcs	.+2      	; 0x9d2 <xitoa+0x4a>
	subi	r26, -7		;
     9d0:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     9d2:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     9d4:	af 93       	push	r26
	inc	r31		;/
     9d6:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     9d8:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     9da:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     9dc:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     9de:	91 05       	cpc	r25, r1
	brne	1b		;/
     9e0:	41 f7       	brne	.-48     	; 0x9b2 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     9e2:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     9e4:	11 f4       	brne	.+4      	; 0x9ea <xitoa+0x62>
	push	r30		;
     9e6:	ef 93       	push	r30
	inc	r31		;/
     9e8:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     9ea:	f2 17       	cp	r31, r18
	brcc	6f		;
     9ec:	18 f4       	brcc	.+6      	; 0x9f4 <xitoa+0x6c>
	push	r19		;
     9ee:	3f 93       	push	r19
	inc	r31		;
     9f0:	f3 95       	inc	r31
	rjmp	5b		;/
     9f2:	fb cf       	rjmp	.-10     	; 0x9ea <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     9f4:	8f 91       	pop	r24
	rcall	xputc		;
     9f6:	b5 df       	rcall	.-150    	; 0x962 <xputc>
	dec	r31		;
     9f8:	fa 95       	dec	r31
	brne	6b		;/
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <xitoa+0x6c>

	ret
     9fc:	08 95       	ret

000009fe <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     9fe:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     a00:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     a02:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     a04:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     a06:	21 f0       	breq	.+8      	; 0xa10 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     a08:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     a0a:	19 f0       	breq	.+6      	; 0xa12 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     a0c:	aa df       	rcall	.-172    	; 0x962 <xputc>
	rjmp	0b		;/
     a0e:	f9 cf       	rjmp	.-14     	; 0xa02 <xvprintf+0x4>
90:	ret
     a10:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     a12:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     a14:	e8 94       	clt
	_LPMI	r21		;Get flags
     a16:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     a18:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     a1a:	c1 f3       	breq	.-16     	; 0xa0c <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     a1c:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     a1e:	11 f4       	brne	.+4      	; 0xa24 <xvprintf+0x26>
	set			;/
     a20:	68 94       	set
22:	_LPMI	r21		;Get width
     a22:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     a24:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     a26:	48 f4       	brcc	.+18     	; 0xa3a <xvprintf+0x3c>
	subi	r21, '0'	;
     a28:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     a2a:	90 f3       	brcs	.-28     	; 0xa10 <xvprintf+0x12>
	lsl	r18		;
     a2c:	22 0f       	add	r18, r18
	mov	r0, r18		;
     a2e:	02 2e       	mov	r0, r18
	lsl	r18		;
     a30:	22 0f       	add	r18, r18
	lsl	r18		;
     a32:	22 0f       	add	r18, r18
	add	r18, r0		;
     a34:	20 0d       	add	r18, r0
	add	r18, r21	;
     a36:	25 0f       	add	r18, r21
	rjmp	22b		;/
     a38:	f4 cf       	rjmp	.-24     	; 0xa22 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     a3a:	0e f4       	brtc	.+2      	; 0xa3e <xvprintf+0x40>
	neg	r18		;
     a3c:	21 95       	neg	r18
25:	ld	r24, Y+		;
     a3e:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     a40:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     a42:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     a44:	19 f3       	breq	.-58     	; 0xa0c <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     a46:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     a48:	29 f1       	breq	.+74     	; 0xa94 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     a4a:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     a4c:	59 f1       	breq	.+86     	; 0xaa4 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     a4e:	bc 01       	movw	r22, r24
	clr	r24		;
     a50:	88 27       	eor	r24, r24
	clr	r25		;
     a52:	99 27       	eor	r25, r25
	clt			;/
     a54:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     a56:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     a58:	21 f4       	brne	.+8      	; 0xa62 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     a5a:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     a5c:	99 91       	ld	r25, Y+
	set			;
     a5e:	68 94       	set
	_LPMI	r21		;/
     a60:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     a62:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     a64:	39 f4       	brne	.+14     	; 0xa74 <xvprintf+0x76>
	ldi	r20, -10	;
     a66:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     a68:	7e f0       	brts	.+30     	; 0xa88 <xvprintf+0x8a>
	sbrs	r23, 7		;
     a6a:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     a6c:	0d c0       	rjmp	.+26     	; 0xa88 <xvprintf+0x8a>
	ldi	r24, -1		;
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     a70:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     a72:	0a c0       	rjmp	.+20     	; 0xa88 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     a74:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     a76:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     a78:	39 f0       	breq	.+14     	; 0xa88 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     a7a:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     a7c:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     a7e:	21 f0       	breq	.+8      	; 0xa88 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     a80:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     a82:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     a84:	09 f0       	breq	.+2      	; 0xa88 <xvprintf+0x8a>
	ret			;abort
     a86:	08 95       	ret
40:	push	ZH		;Output the value
     a88:	ff 93       	push	r31
	push	ZL		;
     a8a:	ef 93       	push	r30
	rcall	xitoa		;
     a8c:	7d df       	rcall	.-262    	; 0x988 <xitoa>
42:	pop	ZL		;
     a8e:	ef 91       	pop	r30
	pop	ZH		;
     a90:	ff 91       	pop	r31
	rjmp	0b		;/
     a92:	b7 cf       	rjmp	.-146    	; 0xa02 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     a94:	ff 93       	push	r31
	push	ZL
     a96:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     a98:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     a9a:	81 91       	ld	r24, Z+
	cpi	r24, 0
     a9c:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     a9e:	b9 f3       	breq	.-18     	; 0xa8e <xvprintf+0x90>
	rcall	xputc
     aa0:	60 df       	rcall	.-320    	; 0x962 <xputc>
	rjmp	51b
     aa2:	fb cf       	rjmp	.-10     	; 0xa9a <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     aa4:	ff 93       	push	r31
	push	ZL
     aa6:	ef 93       	push	r30
	rcall	xputs
     aa8:	68 df       	rcall	.-304    	; 0x97a <xputs>
	rjmp	42b
     aaa:	f1 cf       	rjmp	.-30     	; 0xa8e <xvprintf+0x90>

00000aac <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     aac:	df 93       	push	r29
	push	YL
     aae:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     ab0:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     ab2:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     ab4:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     ab6:	a3 df       	rcall	.-186    	; 0x9fe <xvprintf>
	pop	YL
     ab8:	cf 91       	pop	r28
	pop	YH
     aba:	df 91       	pop	r29
	ret
     abc:	08 95       	ret

00000abe <action_function>:
  [3] = ACTION_FUNCTION(BOOTLOADER)
};

void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
  if (id == BOOTLOADER) {
     abe:	61 11       	cpse	r22, r1
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <action_function+0x8>
    bootloader();
     ac2:	0c 94 7f 05 	jmp	0xafe	; 0xafe <bootloader>
     ac6:	08 95       	ret

00000ac8 <actionmap_key_to_action>:
#include "keymap_common.h"

/* translates key to keycode */
uint16_t actionmap_key_to_action(uint8_t layer, key_t key)
{
    return pgm_read_word(&keymaps[(layer)][(key.row)][(key.col)]);
     ac8:	9b e0       	ldi	r25, 0x0B	; 11
     aca:	79 9f       	mul	r23, r25
     acc:	f0 01       	movw	r30, r0
     ace:	11 24       	eor	r1, r1
     ad0:	9c e2       	ldi	r25, 0x2C	; 44
     ad2:	89 9f       	mul	r24, r25
     ad4:	e0 0d       	add	r30, r0
     ad6:	f1 1d       	adc	r31, r1
     ad8:	11 24       	eor	r1, r1
     ada:	e6 0f       	add	r30, r22
     adc:	f1 1d       	adc	r31, r1
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	e8 51       	subi	r30, 0x18	; 24
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
}
     ae6:	85 91       	lpm	r24, Z+
     ae8:	94 91       	lpm	r25, Z
     aea:	08 95       	ret

00000aec <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     aec:	e8 2f       	mov	r30, r24
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	ee 0f       	add	r30, r30
     af2:	ff 1f       	adc	r31, r31
     af4:	e0 5a       	subi	r30, 0xA0	; 160
     af6:	f0 40       	sbci	r31, 0x00	; 0
}
     af8:	85 91       	lpm	r24, Z+
     afa:	94 91       	lpm	r25, Z
     afc:	08 95       	ret

00000afe <bootloader>:

void bootloader() {
  clear_keyboard();
     afe:	0e 94 a7 13 	call	0x274e	; 0x274e <clear_keyboard>
  print("\n\nJump to bootloader... ");
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	92 e0       	ldi	r25, 0x02	; 2
     b06:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b0a:	2f ef       	ldi	r18, 0xFF	; 255
     b0c:	84 e3       	ldi	r24, 0x34	; 52
     b0e:	9c e0       	ldi	r25, 0x0C	; 12
     b10:	21 50       	subi	r18, 0x01	; 1
     b12:	80 40       	sbci	r24, 0x00	; 0
     b14:	90 40       	sbci	r25, 0x00	; 0
     b16:	e1 f7       	brne	.-8      	; 0xb10 <__stack+0x11>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <__stack+0x1b>
     b1a:	00 00       	nop
  TIMSK0 = 0; TIMSK1 = 0; TIMSK3 = 0; TIMSK4 = 0; UCSR1B = 0; TWCR = 0;
  DDRB = 0; DDRC = 0; DDRD = 0; DDRE = 0; DDRF = 0; TWCR = 0;
  PORTB = 0; PORTC = 0; PORTD = 0; PORTE = 0; PORTF = 0;
  asm volatile("jmp 0x7E00");
#else
  *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
     b1c:	87 e7       	ldi	r24, 0x77	; 119
     b1e:	97 e7       	ldi	r25, 0x77	; 119
     b20:	90 93 01 08 	sts	0x0801, r25
     b24:	80 93 00 08 	sts	0x0800, r24
  bootloader_jump();
     b28:	0e 94 1d 1a 	call	0x343a	; 0x343a <bootloader_jump>
  print("not supported.\n");
     b2c:	80 ef       	ldi	r24, 0xF0	; 240
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	0c 94 bd 04 	jmp	0x97a	; 0x97a <xputs>

00000b34 <unselect_rows>:
 * pin: D0  D1  D2  D3    (teensy2)
 */
static void unselect_rows(void)
{
  // Hi-Z(DDR:0, PORT:0) to unselect
  DDRD  &= ~0b00001111;
     b34:	8a b1       	in	r24, 0x0a	; 10
     b36:	80 7f       	andi	r24, 0xF0	; 240
     b38:	8a b9       	out	0x0a, r24	; 10
  PORTD &= ~0b00001111;
     b3a:	8b b1       	in	r24, 0x0b	; 11
     b3c:	80 7f       	andi	r24, 0xF0	; 240
     b3e:	8b b9       	out	0x0b, r24	; 11
     b40:	08 95       	ret

00000b42 <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     b42:	0e 94 9a 05 	call	0xb34	; 0xb34 <unselect_rows>
 * pin: B7  D6  F7  F6  B6  D4  E6  B4  B5  C6  D7
 */
static void  init_cols(void)
{
  // Input with pull-up(DDR:0, PORT:1)
  DDRF  &= ~(1<<1 | 1<<4 | 1<<5 | 1<<6);
     b46:	80 b3       	in	r24, 0x10	; 16
     b48:	8d 78       	andi	r24, 0x8D	; 141
     b4a:	80 bb       	out	0x10, r24	; 16
  PORTF |=  (1<<1 | 1<<4 | 1<<5 | 1<<6);
     b4c:	81 b3       	in	r24, 0x11	; 17
     b4e:	82 67       	ori	r24, 0x72	; 114
     b50:	81 bb       	out	0x11, r24	; 17
  DDRB  &= ~(1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
     b52:	84 b1       	in	r24, 0x04	; 4
     b54:	81 70       	andi	r24, 0x01	; 1
     b56:	84 b9       	out	0x04, r24	; 4
  PORTB |=  (1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
     b58:	85 b1       	in	r24, 0x05	; 5
     b5a:	8e 6f       	ori	r24, 0xFE	; 254
     b5c:	85 b9       	out	0x05, r24	; 5
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     b5e:	ae e2       	ldi	r26, 0x2E	; 46
     b60:	b1 e0       	ldi	r27, 0x01	; 1
     b62:	11 96       	adiw	r26, 0x01	; 1
     b64:	1c 92       	st	X, r1
     b66:	1e 92       	st	-X, r1
        matrix_debouncing[i] = 0;
     b68:	e6 e2       	ldi	r30, 0x26	; 38
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	11 82       	std	Z+1, r1	; 0x01
     b6e:	10 82       	st	Z, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     b70:	13 96       	adiw	r26, 0x03	; 3
     b72:	1c 92       	st	X, r1
     b74:	1e 92       	st	-X, r1
     b76:	12 97       	sbiw	r26, 0x02	; 2
        matrix_debouncing[i] = 0;
     b78:	13 82       	std	Z+3, r1	; 0x03
     b7a:	12 82       	std	Z+2, r1	; 0x02
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     b7c:	15 96       	adiw	r26, 0x05	; 5
     b7e:	1c 92       	st	X, r1
     b80:	1e 92       	st	-X, r1
     b82:	14 97       	sbiw	r26, 0x04	; 4
        matrix_debouncing[i] = 0;
     b84:	15 82       	std	Z+5, r1	; 0x05
     b86:	14 82       	std	Z+4, r1	; 0x04
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     b88:	17 96       	adiw	r26, 0x07	; 7
     b8a:	1c 92       	st	X, r1
     b8c:	1e 92       	st	-X, r1
     b8e:	16 97       	sbiw	r26, 0x06	; 6
        matrix_debouncing[i] = 0;
     b90:	17 82       	std	Z+7, r1	; 0x07
     b92:	16 82       	std	Z+6, r1	; 0x06
     b94:	08 95       	ret

00000b96 <matrix_scan>:
    }
}

uint8_t matrix_scan(void)
{
     b96:	bf 92       	push	r11
     b98:	cf 92       	push	r12
     b9a:	df 92       	push	r13
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	c6 e2       	ldi	r28, 0x26	; 38
     baa:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     bac:	d1 2c       	mov	r13, r1
           (PINB&(1<<3) ? 0 : (1<<7)) |
           (PINB&(1<<2) ? 0 : (1<<8)) |
           (PINB&(1<<1) ? 0 : (1<<9)) |
           (PINF&(1<<1) ? 0 : (1<<10)) ;
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     bae:	cc 24       	eor	r12, r12
     bb0:	c3 94       	inc	r12
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
     bb2:	45 e0       	ldi	r20, 0x05	; 5
     bb4:	b4 2e       	mov	r11, r20
        _delay_us(50);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     bb6:	52 e4       	ldi	r21, 0x42	; 66
     bb8:	e5 2e       	mov	r14, r21
     bba:	52 e0       	ldi	r21, 0x02	; 2
     bbc:	f5 2e       	mov	r15, r21
#endif

static void select_row(uint8_t row)
{
  // Output low(DDR:1, PORT:0) to select
  switch (row) {
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	d8 16       	cp	r13, r24
     bc2:	61 f0       	breq	.+24     	; 0xbdc <matrix_scan+0x46>
     bc4:	93 e0       	ldi	r25, 0x03	; 3
     bc6:	d9 16       	cp	r13, r25
     bc8:	61 f0       	breq	.+24     	; 0xbe2 <matrix_scan+0x4c>
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	d8 16       	cp	r13, r24
     bce:	19 f0       	breq	.+6      	; 0xbd6 <matrix_scan+0x40>
      case 0:
          DDRD  |= (1<<0);
     bd0:	50 9a       	sbi	0x0a, 0	; 10
          PORTD &= ~(1<<0);
     bd2:	58 98       	cbi	0x0b, 0	; 11
     bd4:	08 c0       	rjmp	.+16     	; 0xbe6 <matrix_scan+0x50>
          break;
      case 1:
          DDRD  |= (1<<1);
     bd6:	51 9a       	sbi	0x0a, 1	; 10
          PORTD &= ~(1<<1);
     bd8:	59 98       	cbi	0x0b, 1	; 11
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <matrix_scan+0x50>
          break;
      case 2:
          DDRD  |= (1<<2);
     bdc:	52 9a       	sbi	0x0a, 2	; 10
          PORTD &= ~(1<<2);
     bde:	5a 98       	cbi	0x0b, 2	; 11
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <matrix_scan+0x50>
          break;
      case 3:
          DDRD  |= (1<<3);
     be2:	53 9a       	sbi	0x0a, 3	; 10
          PORTD &= ~(1<<3);
     be4:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     be6:	87 ec       	ldi	r24, 0xC7	; 199
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <matrix_scan+0x54>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <matrix_scan+0x5a>
     bf0:	00 00       	nop
           (PINB&(1<<3) ? 0 : (1<<7)) |
           (PINB&(1<<2) ? 0 : (1<<8)) |
           (PINB&(1<<1) ? 0 : (1<<9)) |
           (PINF&(1<<1) ? 0 : (1<<10)) ;
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     bf2:	8f b1       	in	r24, 0x0f	; 15
     bf4:	82 95       	swap	r24
     bf6:	86 95       	lsr	r24
     bf8:	86 95       	lsr	r24
     bfa:	83 70       	andi	r24, 0x03	; 3
     bfc:	8c 25       	eor	r24, r12
     bfe:	08 2f       	mov	r16, r24
     c00:	01 70       	andi	r16, 0x01	; 1
     c02:	10 e0       	ldi	r17, 0x00	; 0
           (PINF&(1<<5) ? 0 : (1<<1)) |
     c04:	7d 99       	sbic	0x0f, 5	; 15
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <matrix_scan+0x78>
     c08:	22 e0       	ldi	r18, 0x02	; 2
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <matrix_scan+0x7c>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
           (PINB&(1<<3) ? 0 : (1<<7)) |
           (PINB&(1<<2) ? 0 : (1<<8)) |
           (PINB&(1<<1) ? 0 : (1<<9)) |
           (PINF&(1<<1) ? 0 : (1<<10)) ;
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     c12:	c9 01       	movw	r24, r18
     c14:	80 2b       	or	r24, r16
     c16:	91 2b       	or	r25, r17
           (PINF&(1<<5) ? 0 : (1<<1)) |
           (PINF&(1<<4) ? 0 : (1<<2)) |
     c18:	7c 99       	sbic	0x0f, 4	; 15
     c1a:	03 c0       	rjmp	.+6      	; 0xc22 <matrix_scan+0x8c>
     c1c:	24 e0       	ldi	r18, 0x04	; 4
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <matrix_scan+0x90>
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
           (PINB&(1<<2) ? 0 : (1<<8)) |
           (PINB&(1<<1) ? 0 : (1<<9)) |
           (PINF&(1<<1) ? 0 : (1<<10)) ;
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<5) ? 0 : (1<<1)) |
     c26:	ac 01       	movw	r20, r24
     c28:	42 2b       	or	r20, r18
     c2a:	53 2b       	or	r21, r19
           (PINF&(1<<4) ? 0 : (1<<2)) |
           (PINB&(1<<7) ? 0 : (1<<3)) |
     c2c:	23 b1       	in	r18, 0x03	; 3
     c2e:	02 2e       	mov	r0, r18
     c30:	00 0c       	add	r0, r0
     c32:	33 0b       	sbc	r19, r19
     c34:	20 95       	com	r18
     c36:	30 95       	com	r19
     c38:	c9 01       	movw	r24, r18
     c3a:	88 27       	eor	r24, r24
     c3c:	99 0f       	add	r25, r25
     c3e:	88 1f       	adc	r24, r24
     c40:	99 27       	eor	r25, r25
     c42:	33 e0       	ldi	r19, 0x03	; 3
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	3a 95       	dec	r19
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <matrix_scan+0xae>
           (PINB&(1<<1) ? 0 : (1<<9)) |
           (PINF&(1<<1) ? 0 : (1<<10)) ;
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<5) ? 0 : (1<<1)) |
           (PINF&(1<<4) ? 0 : (1<<2)) |
     c4c:	84 2b       	or	r24, r20
     c4e:	95 2b       	or	r25, r21
           (PINB&(1<<7) ? 0 : (1<<3)) |
           (PINB&(1<<6) ? 0 : (1<<4)) |
     c50:	1e 99       	sbic	0x03, 6	; 3
     c52:	03 c0       	rjmp	.+6      	; 0xc5a <matrix_scan+0xc4>
     c54:	40 e1       	ldi	r20, 0x10	; 16
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <matrix_scan+0xc8>
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	50 e0       	ldi	r21, 0x00	; 0
           (PINF&(1<<1) ? 0 : (1<<10)) ;
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<5) ? 0 : (1<<1)) |
           (PINF&(1<<4) ? 0 : (1<<2)) |
           (PINB&(1<<7) ? 0 : (1<<3)) |
     c5e:	84 2b       	or	r24, r20
     c60:	95 2b       	or	r25, r21
           (PINB&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<5) ? 0 : (1<<5)) |
     c62:	1d 99       	sbic	0x03, 5	; 3
     c64:	03 c0       	rjmp	.+6      	; 0xc6c <matrix_scan+0xd6>
     c66:	40 e2       	ldi	r20, 0x20	; 32
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <matrix_scan+0xda>
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	50 e0       	ldi	r21, 0x00	; 0
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<5) ? 0 : (1<<1)) |
           (PINF&(1<<4) ? 0 : (1<<2)) |
           (PINB&(1<<7) ? 0 : (1<<3)) |
           (PINB&(1<<6) ? 0 : (1<<4)) |
     c70:	84 2b       	or	r24, r20
     c72:	95 2b       	or	r25, r21
           (PINB&(1<<5) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
     c74:	1c 99       	sbic	0x03, 4	; 3
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <matrix_scan+0xe8>
     c78:	20 e4       	ldi	r18, 0x40	; 64
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <matrix_scan+0xec>
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<5) ? 0 : (1<<1)) |
           (PINF&(1<<4) ? 0 : (1<<2)) |
           (PINB&(1<<7) ? 0 : (1<<3)) |
           (PINB&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<5) ? 0 : (1<<5)) |
     c82:	82 2b       	or	r24, r18
     c84:	93 2b       	or	r25, r19
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<3) ? 0 : (1<<7)) |
     c86:	1b 99       	sbic	0x03, 3	; 3
     c88:	03 c0       	rjmp	.+6      	; 0xc90 <matrix_scan+0xfa>
     c8a:	60 e8       	ldi	r22, 0x80	; 128
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <matrix_scan+0xfe>
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	70 e0       	ldi	r23, 0x00	; 0
           (PINF&(1<<5) ? 0 : (1<<1)) |
           (PINF&(1<<4) ? 0 : (1<<2)) |
           (PINB&(1<<7) ? 0 : (1<<3)) |
           (PINB&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<5) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
     c94:	86 2b       	or	r24, r22
     c96:	97 2b       	or	r25, r23
           (PINB&(1<<3) ? 0 : (1<<7)) |
           (PINB&(1<<2) ? 0 : (1<<8)) |
     c98:	1a 99       	sbic	0x03, 2	; 3
     c9a:	03 c0       	rjmp	.+6      	; 0xca2 <matrix_scan+0x10c>
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	51 e0       	ldi	r21, 0x01	; 1
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <matrix_scan+0x110>
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	50 e0       	ldi	r21, 0x00	; 0
           (PINF&(1<<4) ? 0 : (1<<2)) |
           (PINB&(1<<7) ? 0 : (1<<3)) |
           (PINB&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<5) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<3) ? 0 : (1<<7)) |
     ca6:	84 2b       	or	r24, r20
     ca8:	95 2b       	or	r25, r21
           (PINB&(1<<2) ? 0 : (1<<8)) |
           (PINB&(1<<1) ? 0 : (1<<9)) |
     caa:	19 99       	sbic	0x03, 1	; 3
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <matrix_scan+0x11e>
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	32 e0       	ldi	r19, 0x02	; 2
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <matrix_scan+0x122>
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
           (PINB&(1<<7) ? 0 : (1<<3)) |
           (PINB&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<5) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<3) ? 0 : (1<<7)) |
           (PINB&(1<<2) ? 0 : (1<<8)) |
     cb8:	82 2b       	or	r24, r18
     cba:	93 2b       	or	r25, r19
           (PINB&(1<<1) ? 0 : (1<<9)) |
           (PINF&(1<<1) ? 0 : (1<<10)) ;
     cbc:	79 99       	sbic	0x0f, 1	; 15
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <matrix_scan+0x130>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	34 e0       	ldi	r19, 0x04	; 4
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <matrix_scan+0x134>
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
           (PINB&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<5) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<3) ? 0 : (1<<7)) |
           (PINB&(1<<2) ? 0 : (1<<8)) |
           (PINB&(1<<1) ? 0 : (1<<9)) |
     cca:	82 2b       	or	r24, r18
     ccc:	93 2b       	or	r25, r19
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(50);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
     cce:	28 81       	ld	r18, Y
     cd0:	39 81       	ldd	r19, Y+1	; 0x01
     cd2:	28 17       	cp	r18, r24
     cd4:	39 07       	cpc	r19, r25
     cd6:	41 f1       	breq	.+80     	; 0xd28 <matrix_scan+0x192>
            matrix_debouncing[i] = cols;
     cd8:	99 83       	std	Y+1, r25	; 0x01
     cda:	88 83       	st	Y, r24
            if (debouncing) {
     cdc:	80 91 08 01 	lds	r24, 0x0108
     ce0:	88 23       	and	r24, r24
     ce2:	01 f1       	breq	.+64     	; 0xd24 <matrix_scan+0x18e>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     ce4:	80 91 b5 01 	lds	r24, 0x01B5
     ce8:	80 ff       	sbrs	r24, 0
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <matrix_scan+0x15e>
     cec:	87 e4       	ldi	r24, 0x47	; 71
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
     cf4:	80 91 b5 01 	lds	r24, 0x01B5
     cf8:	80 ff       	sbrs	r24, 0
     cfa:	0c c0       	rjmp	.+24     	; 0xd14 <matrix_scan+0x17e>
     cfc:	80 91 08 01 	lds	r24, 0x0108
     d00:	1f 92       	push	r1
     d02:	8f 93       	push	r24
     d04:	ff 92       	push	r15
     d06:	ef 92       	push	r14
     d08:	0e 94 56 05 	call	0xaac	; 0xaac <__xprintf>
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	80 91 b5 01 	lds	r24, 0x01B5
     d18:	80 ff       	sbrs	r24, 0
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <matrix_scan+0x18e>
     d1c:	80 e4       	ldi	r24, 0x40	; 64
     d1e:	92 e0       	ldi	r25, 0x02	; 2
     d20:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
            }
            debouncing = DEBOUNCE;
     d24:	b0 92 08 01 	sts	0x0108, r11
        }
        unselect_rows();
     d28:	0e 94 9a 05 	call	0xb34	; 0xb34 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     d2c:	d3 94       	inc	r13
     d2e:	22 96       	adiw	r28, 0x02	; 2
     d30:	94 e0       	ldi	r25, 0x04	; 4
     d32:	d9 12       	cpse	r13, r25
     d34:	44 cf       	rjmp	.-376    	; 0xbbe <matrix_scan+0x28>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
     d36:	80 91 08 01 	lds	r24, 0x0108
     d3a:	88 23       	and	r24, r24
     d3c:	61 f1       	breq	.+88     	; 0xd96 <matrix_scan+0x200>
        if (--debouncing) {
     d3e:	81 50       	subi	r24, 0x01	; 1
     d40:	80 93 08 01 	sts	0x0108, r24
     d44:	88 23       	and	r24, r24
     d46:	39 f0       	breq	.+14     	; 0xd56 <matrix_scan+0x1c0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d48:	8f e9       	ldi	r24, 0x9F	; 159
     d4a:	9f e0       	ldi	r25, 0x0F	; 15
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <matrix_scan+0x1b6>
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <matrix_scan+0x1bc>
     d52:	00 00       	nop
     d54:	20 c0       	rjmp	.+64     	; 0xd96 <matrix_scan+0x200>
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
     d56:	80 91 26 01 	lds	r24, 0x0126
     d5a:	90 91 27 01 	lds	r25, 0x0127
     d5e:	90 93 2f 01 	sts	0x012F, r25
     d62:	80 93 2e 01 	sts	0x012E, r24
     d66:	80 91 28 01 	lds	r24, 0x0128
     d6a:	90 91 29 01 	lds	r25, 0x0129
     d6e:	90 93 31 01 	sts	0x0131, r25
     d72:	80 93 30 01 	sts	0x0130, r24
     d76:	80 91 2a 01 	lds	r24, 0x012A
     d7a:	90 91 2b 01 	lds	r25, 0x012B
     d7e:	90 93 33 01 	sts	0x0133, r25
     d82:	80 93 32 01 	sts	0x0132, r24
     d86:	80 91 2c 01 	lds	r24, 0x012C
     d8a:	90 91 2d 01 	lds	r25, 0x012D
     d8e:	90 93 35 01 	sts	0x0135, r25
     d92:	80 93 34 01 	sts	0x0134, r24
            }
        }
    }

    return 1;
}
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	cf 90       	pop	r12
     da8:	bf 90       	pop	r11
     daa:	08 95       	ret

00000dac <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     dac:	e8 2f       	mov	r30, r24
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	e2 5d       	subi	r30, 0xD2	; 210
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
}
     db8:	80 81       	ld	r24, Z
     dba:	91 81       	ldd	r25, Z+1	; 0x01
     dbc:	08 95       	ret

00000dbe <matrix_print>:

void matrix_print(void)
{
     dbe:	cf 92       	push	r12
     dc0:	df 92       	push	r13
     dc2:	ef 92       	push	r14
     dc4:	ff 92       	push	r15
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
     dce:	89 e2       	ldi	r24, 0x29	; 41
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
     dd6:	8e e2       	ldi	r24, 0x2E	; 46
     dd8:	e8 2e       	mov	r14, r24
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	f8 2e       	mov	r15, r24
     dde:	c0 e0       	ldi	r28, 0x00	; 0
     de0:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
     de2:	94 e2       	ldi	r25, 0x24	; 36
     de4:	c9 2e       	mov	r12, r25
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	d9 2e       	mov	r13, r25
        pbin_reverse16(matrix_get_row(row));
     dea:	0b e1       	ldi	r16, 0x1B	; 27
     dec:	12 e0       	ldi	r17, 0x02	; 2

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	df 92       	push	r13
     df4:	cf 92       	push	r12
     df6:	0e 94 56 05 	call	0xaac	; 0xaac <__xprintf>
     dfa:	81 e2       	ldi	r24, 0x21	; 33
     dfc:	92 e0       	ldi	r25, 0x02	; 2
     dfe:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
        pbin_reverse16(matrix_get_row(row));
     e02:	f7 01       	movw	r30, r14
     e04:	81 91       	ld	r24, Z+
     e06:	91 91       	ld	r25, Z+
     e08:	7f 01       	movw	r14, r30
     e0a:	0e 94 b9 1a 	call	0x3572	; 0x3572 <bitrev16>
     e0e:	9f 93       	push	r25
     e10:	8f 93       	push	r24
     e12:	1f 93       	push	r17
     e14:	0f 93       	push	r16
     e16:	0e 94 56 05 	call	0xaac	; 0xaac <__xprintf>
        print("\n");
     e1a:	89 e1       	ldi	r24, 0x19	; 25
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
     e22:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
     e24:	8d b7       	in	r24, 0x3d	; 61
     e26:	9e b7       	in	r25, 0x3e	; 62
     e28:	08 96       	adiw	r24, 0x08	; 8
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	9e bf       	out	0x3e, r25	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	8d bf       	out	0x3d, r24	; 61
     e34:	c4 30       	cpi	r28, 0x04	; 4
     e36:	d1 05       	cpc	r29, r1
     e38:	d1 f6       	brne	.-76     	; 0xdee <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	cf 90       	pop	r12
     e4a:	08 95       	ret

00000e4c <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
     e4c:	81 ff       	sbrs	r24, 1
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <led_set+0x8>
        // output low
        DDRD |= (1<<4);
     e50:	54 9a       	sbi	0x0a, 4	; 10
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <led_set+0xa>
        PORTD &= ~(1<<4);
    } else {
        // Hi-Z
        DDRD &= ~(1<<4);
     e54:	54 98       	cbi	0x0a, 4	; 10
        PORTD &= ~(1<<4);
     e56:	5c 98       	cbi	0x0b, 4	; 11
     e58:	08 95       	ret

00000e5a <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     e5a:	80 91 47 01 	lds	r24, 0x0147
     e5e:	08 95       	ret

00000e60 <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
     e60:	08 95       	ret

00000e62 <sendchar>:
{
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     e62:	90 91 ba 01 	lds	r25, 0x01BA
     e66:	94 30       	cpi	r25, 0x04	; 4
     e68:	09 f0       	breq	.+2      	; 0xe6c <sendchar+0xa>
     e6a:	59 c0       	rjmp	.+178    	; 0xf1e <sendchar+0xbc>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e6c:	90 91 e9 00 	lds	r25, 0x00E9
     e70:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e72:	30 91 ec 00 	lds	r19, 0x00EC
     e76:	23 2f       	mov	r18, r19
     e78:	21 70       	andi	r18, 0x01	; 1
     e7a:	30 fd       	sbrc	r19, 0
     e7c:	20 e8       	ldi	r18, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e7e:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e80:	22 e0       	ldi	r18, 0x02	; 2
     e82:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e86:	20 91 eb 00 	lds	r18, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     e8a:	20 ff       	sbrs	r18, 0
     e8c:	29 c0       	rjmp	.+82     	; 0xee0 <sendchar+0x7e>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     e8e:	20 91 ee 00 	lds	r18, 0x00EE
     e92:	27 ff       	sbrs	r18, 7
     e94:	25 c0       	rjmp	.+74     	; 0xee0 <sendchar+0x7e>
        Endpoint_SelectEndpoint(ep);
        return -1;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
     e96:	20 91 36 01 	lds	r18, 0x0136
     e9a:	22 23       	and	r18, r18
     e9c:	21 f0       	breq	.+8      	; 0xea6 <sendchar+0x44>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e9e:	20 91 e8 00 	lds	r18, 0x00E8
     ea2:	25 ff       	sbrs	r18, 5
     ea4:	1d c0       	rjmp	.+58     	; 0xee0 <sendchar+0x7e>
        Endpoint_SelectEndpoint(ep);
        return - 1;
    }

    timeouted = false;
     ea6:	10 92 36 01 	sts	0x0136, r1
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     eaa:	40 91 e4 00 	lds	r20, 0x00E4
     eae:	50 91 e5 00 	lds	r21, 0x00E5

    uint8_t timeout = SEND_TIMEOUT;
    uint16_t prevFN = USB_Device_GetFrameNumber();
    while (!Endpoint_IsReadWriteAllowed()) {
     eb2:	26 e0       	ldi	r18, 0x06	; 6
     eb4:	07 c0       	rjmp	.+14     	; 0xec4 <sendchar+0x62>
     eb6:	60 91 e4 00 	lds	r22, 0x00E4
     eba:	70 91 e5 00 	lds	r23, 0x00E5
        }
        if (Endpoint_IsStalled()) {
            Endpoint_SelectEndpoint(ep);
            return -1;
        }
        if (prevFN != USB_Device_GetFrameNumber()) {
     ebe:	46 17       	cp	r20, r22
     ec0:	57 07       	cpc	r21, r23
     ec2:	91 f4       	brne	.+36     	; 0xee8 <sendchar+0x86>
     ec4:	30 91 e8 00 	lds	r19, 0x00E8

    timeouted = false;

    uint8_t timeout = SEND_TIMEOUT;
    uint16_t prevFN = USB_Device_GetFrameNumber();
    while (!Endpoint_IsReadWriteAllowed()) {
     ec8:	35 fd       	sbrc	r19, 5
     eca:	19 c0       	rjmp	.+50     	; 0xefe <sendchar+0x9c>
        switch (USB_DeviceState) {
     ecc:	30 91 ba 01 	lds	r19, 0x01BA
     ed0:	33 23       	and	r19, r19
     ed2:	29 f1       	breq	.+74     	; 0xf1e <sendchar+0xbc>
     ed4:	35 30       	cpi	r19, 0x05	; 5
     ed6:	19 f1       	breq	.+70     	; 0xf1e <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ed8:	30 91 eb 00 	lds	r19, 0x00EB
        case DEVICE_STATE_Unattached:
        case DEVICE_STATE_Suspended:
            return -1;
        }
        if (Endpoint_IsStalled()) {
     edc:	35 ff       	sbrs	r19, 5
     ede:	eb cf       	rjmp	.-42     	; 0xeb6 <sendchar+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ee0:	9f 70       	andi	r25, 0x0F	; 15
     ee2:	90 93 e9 00 	sts	0x00E9, r25
     ee6:	1b c0       	rjmp	.+54     	; 0xf1e <sendchar+0xbc>
     ee8:	21 50       	subi	r18, 0x01	; 1
            Endpoint_SelectEndpoint(ep);
            return -1;
        }
        if (prevFN != USB_Device_GetFrameNumber()) {
            if (!(timeout--)) {
     eea:	21 f4       	brne	.+8      	; 0xef4 <sendchar+0x92>
                timeouted = true;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	80 93 36 01 	sts	0x0136, r24
     ef2:	f6 cf       	rjmp	.-20     	; 0xee0 <sendchar+0x7e>
     ef4:	40 91 e4 00 	lds	r20, 0x00E4
     ef8:	50 91 e5 00 	lds	r21, 0x00E5
     efc:	e3 cf       	rjmp	.-58     	; 0xec4 <sendchar+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     efe:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f02:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed())
     f06:	85 fd       	sbrc	r24, 5
     f08:	05 c0       	rjmp	.+10     	; 0xf14 <sendchar+0xb2>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f0a:	80 91 e8 00 	lds	r24, 0x00E8
     f0e:	8e 77       	andi	r24, 0x7E	; 126
     f10:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f14:	9f 70       	andi	r25, 0x0F	; 15
     f16:	90 93 e9 00 	sts	0x00E9, r25
        Endpoint_ClearIN();

    Endpoint_SelectEndpoint(ep);
    return 0;
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	08 95       	ret
    uint16_t prevFN = USB_Device_GetFrameNumber();
    while (!Endpoint_IsReadWriteAllowed()) {
        switch (USB_DeviceState) {
        case DEVICE_STATE_Unattached:
        case DEVICE_STATE_Suspended:
            return -1;
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
    if (!Endpoint_IsReadWriteAllowed())
        Endpoint_ClearIN();

    Endpoint_SelectEndpoint(ep);
    return 0;
}
     f20:	08 95       	ret

00000f22 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	00 d0       	rcall	.+0      	; 0xf28 <send_consumer+0x6>
     f28:	1f 92       	push	r1
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 0;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     f2e:	20 91 ba 01 	lds	r18, 0x01BA
     f32:	24 30       	cpi	r18, 0x04	; 4
     f34:	d9 f4       	brne	.+54     	; 0xf6c <send_consumer+0x4a>
        return;

    report_extra_t r = {
     f36:	23 e0       	ldi	r18, 0x03	; 3
     f38:	29 83       	std	Y+1, r18	; 0x01
     f3a:	9b 83       	std	Y+3, r25	; 0x03
     f3c:	8a 83       	std	Y+2, r24	; 0x02
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	80 93 e9 00 	sts	0x00E9, r24
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    uint8_t timeout = 0;
     f44:	80 e0       	ldi	r24, 0x00	; 0
    report_extra_t r = {
        .report_id = REPORT_ID_CONSUMER,
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
    while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
     f46:	81 50       	subi	r24, 0x01	; 1
     f48:	21 f0       	breq	.+8      	; 0xf52 <send_consumer+0x30>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f4a:	90 91 e8 00 	lds	r25, 0x00E8
     f4e:	95 ff       	sbrs	r25, 5
     f50:	fa cf       	rjmp	.-12     	; 0xf46 <send_consumer+0x24>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	63 e0       	ldi	r22, 0x03	; 3
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	ce 01       	movw	r24, r28
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	0e 94 09 0c 	call	0x1812	; 0x1812 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f62:	80 91 e8 00 	lds	r24, 0x00E8
     f66:	8e 77       	andi	r24, 0x7E	; 126
     f68:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <send_system+0x6>
     f7e:	1f 92       	push	r1
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 0;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     f84:	20 91 ba 01 	lds	r18, 0x01BA
     f88:	24 30       	cpi	r18, 0x04	; 4
     f8a:	d9 f4       	brne	.+54     	; 0xfc2 <send_system+0x4a>
        return;

    report_extra_t r = {
     f8c:	22 e0       	ldi	r18, 0x02	; 2
     f8e:	29 83       	std	Y+1, r18	; 0x01
     f90:	9b 83       	std	Y+3, r25	; 0x03
     f92:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	80 93 e9 00 	sts	0x00E9, r24
#endif
}

static void send_system(uint16_t data)
{
    uint8_t timeout = 0;
     f9a:	80 e0       	ldi	r24, 0x00	; 0
    report_extra_t r = {
        .report_id = REPORT_ID_SYSTEM,
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
    while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
     f9c:	81 50       	subi	r24, 0x01	; 1
     f9e:	21 f0       	breq	.+8      	; 0xfa8 <send_system+0x30>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fa0:	90 91 e8 00 	lds	r25, 0x00E8
     fa4:	95 ff       	sbrs	r25, 5
     fa6:	fa cf       	rjmp	.-12     	; 0xf9c <send_system+0x24>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	63 e0       	ldi	r22, 0x03	; 3
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	ce 01       	movw	r24, r28
     fb2:	01 96       	adiw	r24, 0x01	; 1
     fb4:	0e 94 09 0c 	call	0x1812	; 0x1812 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fb8:	80 91 e8 00 	lds	r24, 0x00E8
     fbc:	8e 77       	andi	r24, 0x7E	; 126
     fbe:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
    uint8_t timeout = 0;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     fd2:	20 91 ba 01 	lds	r18, 0x01BA
     fd6:	24 30       	cpi	r18, 0x04	; 4
     fd8:	51 f5       	brne	.+84     	; 0x102e <send_keyboard+0x60>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
     fda:	30 91 49 01 	lds	r19, 0x0149
     fde:	31 11       	cpse	r19, r1
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <send_keyboard+0x16>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fe2:	21 e0       	ldi	r18, 0x01	; 1
     fe4:	20 93 e9 00 	sts	0x00E9, r18
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
     fe8:	20 e0       	ldi	r18, 0x00	; 0
    {
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
    }

    /* Check if Keyboard Endpoint Ready for Read/Write */
    while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
     fea:	21 50       	subi	r18, 0x01	; 1
     fec:	21 f0       	breq	.+8      	; 0xff6 <send_keyboard+0x28>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fee:	30 91 e8 00 	lds	r19, 0x00E8
     ff2:	35 ff       	sbrs	r19, 5
     ff4:	fa cf       	rjmp	.-12     	; 0xfea <send_keyboard+0x1c>
     ff6:	ec 01       	movw	r28, r24

    /* Write Keyboard Report Data */
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
     ff8:	80 91 49 01 	lds	r24, 0x0149
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    /* Check if Keyboard Endpoint Ready for Read/Write */
    while (--timeout && !Endpoint_IsReadWriteAllowed()) ;

    /* Write Keyboard Report Data */
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    1000:	88 23       	and	r24, r24
    1002:	19 f0       	breq	.+6      	; 0x100a <send_keyboard+0x3c>
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1004:	60 e1       	ldi	r22, 0x10	; 16
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	02 c0       	rjmp	.+4      	; 0x100e <send_keyboard+0x40>
    }
    else
#endif
    {
        /* boot mode */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    100a:	68 e0       	ldi	r22, 0x08	; 8
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	ce 01       	movw	r24, r28
    1010:	0e 94 09 0c 	call	0x1812	; 0x1812 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1014:	80 91 e8 00 	lds	r24, 0x00E8
    1018:	8e 77       	andi	r24, 0x7E	; 126
    101a:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    101e:	80 e1       	ldi	r24, 0x10	; 16
    1020:	fe 01       	movw	r30, r28
    1022:	a7 e3       	ldi	r26, 0x37	; 55
    1024:	b1 e0       	ldi	r27, 0x01	; 1
    1026:	01 90       	ld	r0, Z+
    1028:	0d 92       	st	X+, r0
    102a:	8a 95       	dec	r24
    102c:	e1 f7       	brne	.-8      	; 0x1026 <send_keyboard+0x58>
}
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <EVENT_USB_Device_Connect>:
 * 1) EVENT_USB_Device_Suspend
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    1034:	08 95       	ret

00001036 <EVENT_USB_Device_Disconnect>:
}

void EVENT_USB_Device_Disconnect(void)
{
    1036:	08 95       	ret

00001038 <EVENT_USB_Device_Reset>:
}

void EVENT_USB_Device_Reset(void)
{
    1038:	08 95       	ret

0000103a <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    103a:	08 95       	ret

0000103c <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    suspend_wakeup_init();
    103c:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <suspend_wakeup_init>

00001040 <EVENT_USB_Device_StartOfFrame>:
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1040:	80 91 ba 01 	lds	r24, 0x01BA
    1044:	84 30       	cpi	r24, 0x04	; 4
    1046:	41 f5       	brne	.+80     	; 0x1098 <EVENT_USB_Device_StartOfFrame+0x58>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1048:	80 91 e9 00 	lds	r24, 0x00E9
    104c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    104e:	20 91 ec 00 	lds	r18, 0x00EC
    1052:	92 2f       	mov	r25, r18
    1054:	91 70       	andi	r25, 0x01	; 1
    1056:	20 fd       	sbrc	r18, 0
    1058:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    105a:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1062:	90 91 eb 00 	lds	r25, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1066:	90 ff       	sbrs	r25, 0
    1068:	14 c0       	rjmp	.+40     	; 0x1092 <EVENT_USB_Device_StartOfFrame+0x52>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    106a:	90 91 ee 00 	lds	r25, 0x00EE
    106e:	97 ff       	sbrs	r25, 7
    1070:	10 c0       	rjmp	.+32     	; 0x1092 <EVENT_USB_Device_StartOfFrame+0x52>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1072:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1076:	95 ff       	sbrs	r25, 5
    1078:	03 c0       	rjmp	.+6      	; 0x1080 <EVENT_USB_Device_StartOfFrame+0x40>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    107a:	10 92 f1 00 	sts	0x00F1, r1
    107e:	f9 cf       	rjmp	.-14     	; 0x1072 <EVENT_USB_Device_StartOfFrame+0x32>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1080:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1084:	90 ff       	sbrs	r25, 0
    1086:	05 c0       	rjmp	.+10     	; 0x1092 <EVENT_USB_Device_StartOfFrame+0x52>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1088:	90 91 e8 00 	lds	r25, 0x00E8
    108c:	9e 77       	andi	r25, 0x7E	; 126
    108e:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1092:	8f 70       	andi	r24, 0x0F	; 15
    1094:	80 93 e9 00 	sts	0x00E9, r24
    1098:	08 95       	ret

0000109a <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    109a:	42 e0       	ldi	r20, 0x02	; 2
    109c:	61 ec       	ldi	r22, 0xC1	; 193
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	0e 94 c0 09 	call	0x1380	; 0x1380 <Endpoint_ConfigureEndpoint_Prv>
    10a4:	46 e2       	ldi	r20, 0x26	; 38
    10a6:	61 ec       	ldi	r22, 0xC1	; 193
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	0e 94 c0 09 	call	0x1380	; 0x1380 <Endpoint_ConfigureEndpoint_Prv>
    10ae:	42 e2       	ldi	r20, 0x22	; 34
    10b0:	60 ec       	ldi	r22, 0xC0	; 192
    10b2:	83 e0       	ldi	r24, 0x03	; 3
    10b4:	0e 94 c0 09 	call	0x1380	; 0x1380 <Endpoint_ConfigureEndpoint_Prv>
    10b8:	42 e1       	ldi	r20, 0x12	; 18
    10ba:	61 ec       	ldi	r22, 0xC1	; 193
    10bc:	84 e0       	ldi	r24, 0x04	; 4
    10be:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <Endpoint_ConfigureEndpoint_Prv>

000010c2 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    10c2:	80 91 bc 01 	lds	r24, 0x01BC
    10c6:	83 30       	cpi	r24, 0x03	; 3
    10c8:	09 f4       	brne	.+2      	; 0x10cc <EVENT_USB_Device_ControlRequest+0xa>
    10ca:	53 c0       	rjmp	.+166    	; 0x1172 <EVENT_USB_Device_ControlRequest+0xb0>
    10cc:	30 f4       	brcc	.+12     	; 0x10da <EVENT_USB_Device_ControlRequest+0x18>
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	71 f0       	breq	.+28     	; 0x10ee <EVENT_USB_Device_ControlRequest+0x2c>
    10d2:	82 30       	cpi	r24, 0x02	; 2
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <EVENT_USB_Device_ControlRequest+0x16>
    10d6:	82 c0       	rjmp	.+260    	; 0x11dc <EVENT_USB_Device_ControlRequest+0x11a>
    10d8:	08 95       	ret
    10da:	8a 30       	cpi	r24, 0x0A	; 10
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <EVENT_USB_Device_ControlRequest+0x1e>
    10de:	6e c0       	rjmp	.+220    	; 0x11bc <EVENT_USB_Device_ControlRequest+0xfa>
    10e0:	8b 30       	cpi	r24, 0x0B	; 11
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <EVENT_USB_Device_ControlRequest+0x24>
    10e4:	57 c0       	rjmp	.+174    	; 0x1194 <EVENT_USB_Device_ControlRequest+0xd2>
    10e6:	89 30       	cpi	r24, 0x09	; 9
    10e8:	09 f0       	breq	.+2      	; 0x10ec <EVENT_USB_Device_ControlRequest+0x2a>
    10ea:	90 c0       	rjmp	.+288    	; 0x120c <EVENT_USB_Device_ControlRequest+0x14a>
    10ec:	20 c0       	rjmp	.+64     	; 0x112e <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    10ee:	80 91 bb 01 	lds	r24, 0x01BB
    10f2:	81 3a       	cpi	r24, 0xA1	; 161
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <EVENT_USB_Device_ControlRequest+0x36>
    10f6:	8a c0       	rjmp	.+276    	; 0x120c <EVENT_USB_Device_ControlRequest+0x14a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10f8:	80 91 e8 00 	lds	r24, 0x00E8
    10fc:	87 7f       	andi	r24, 0xF7	; 247
    10fe:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1102:	80 91 bf 01 	lds	r24, 0x01BF
    1106:	90 91 c0 01 	lds	r25, 0x01C0
    110a:	89 2b       	or	r24, r25
    110c:	21 f4       	brne	.+8      	; 0x1116 <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    110e:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1110:	87 e3       	ldi	r24, 0x37	; 55
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	03 c0       	rjmp	.+6      	; 0x111c <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1116:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1122:	80 91 e8 00 	lds	r24, 0x00E8
    1126:	8b 77       	andi	r24, 0x7B	; 123
    1128:	80 93 e8 00 	sts	0x00E8, r24
    112c:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    112e:	80 91 bb 01 	lds	r24, 0x01BB
    1132:	81 32       	cpi	r24, 0x21	; 33
    1134:	09 f0       	breq	.+2      	; 0x1138 <EVENT_USB_Device_ControlRequest+0x76>
    1136:	6a c0       	rjmp	.+212    	; 0x120c <EVENT_USB_Device_ControlRequest+0x14a>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1138:	80 91 bf 01 	lds	r24, 0x01BF
    113c:	90 91 c0 01 	lds	r25, 0x01C0
    1140:	89 2b       	or	r24, r25
    1142:	09 f0       	breq	.+2      	; 0x1146 <EVENT_USB_Device_ControlRequest+0x84>
    1144:	63 c0       	rjmp	.+198    	; 0x120c <EVENT_USB_Device_ControlRequest+0x14a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1146:	80 91 e8 00 	lds	r24, 0x00E8
    114a:	87 7f       	andi	r24, 0xF7	; 247
    114c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1150:	80 91 e8 00 	lds	r24, 0x00E8
                case KEYBOARD_INTERFACE:
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1154:	82 fd       	sbrc	r24, 2
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <EVENT_USB_Device_ControlRequest+0xa0>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1158:	80 91 ba 01 	lds	r24, 0x01BA
    115c:	81 11       	cpse	r24, r1
    115e:	f8 cf       	rjmp	.-16     	; 0x1150 <EVENT_USB_Device_ControlRequest+0x8e>
    1160:	55 c0       	rjmp	.+170    	; 0x120c <EVENT_USB_Device_ControlRequest+0x14a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1162:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1166:	80 93 47 01 	sts	0x0147, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    116a:	80 91 e8 00 	lds	r24, 0x00E8
    116e:	8b 77       	andi	r24, 0x7B	; 123
    1170:	49 c0       	rjmp	.+146    	; 0x1204 <EVENT_USB_Device_ControlRequest+0x142>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1172:	80 91 bb 01 	lds	r24, 0x01BB
    1176:	81 3a       	cpi	r24, 0xA1	; 161
    1178:	09 f0       	breq	.+2      	; 0x117c <EVENT_USB_Device_ControlRequest+0xba>
    117a:	48 c0       	rjmp	.+144    	; 0x120c <EVENT_USB_Device_ControlRequest+0x14a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    117c:	80 91 e8 00 	lds	r24, 0x00E8
    1180:	87 7f       	andi	r24, 0xF7	; 247
    1182:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1186:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    118a:	80 ff       	sbrs	r24, 0
    118c:	fc cf       	rjmp	.-8      	; 0x1186 <EVENT_USB_Device_ControlRequest+0xc4>
                Endpoint_Write_8(protocol_report);
    118e:	80 91 13 01 	lds	r24, 0x0113
    1192:	33 c0       	rjmp	.+102    	; 0x11fa <EVENT_USB_Device_ControlRequest+0x138>
                Endpoint_ClearStatusStage();
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1194:	80 91 bb 01 	lds	r24, 0x01BB
    1198:	81 32       	cpi	r24, 0x21	; 33
    119a:	c1 f5       	brne	.+112    	; 0x120c <EVENT_USB_Device_ControlRequest+0x14a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    119c:	80 91 e8 00 	lds	r24, 0x00E8
    11a0:	87 7f       	andi	r24, 0xF7	; 247
    11a2:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    11a6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Endpoint_ClearStatusStage>

                protocol_report = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    11aa:	90 91 bd 01 	lds	r25, 0x01BD
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	91 11       	cpse	r25, r1
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <EVENT_USB_Device_ControlRequest+0xf4>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	80 93 13 01 	sts	0x0113, r24
    11ba:	08 95       	ret
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    11bc:	80 91 bb 01 	lds	r24, 0x01BB
    11c0:	81 32       	cpi	r24, 0x21	; 33
    11c2:	21 f5       	brne	.+72     	; 0x120c <EVENT_USB_Device_ControlRequest+0x14a>
    11c4:	80 91 e8 00 	lds	r24, 0x00E8
    11c8:	87 7f       	andi	r24, 0xF7	; 247
    11ca:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    11ce:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Endpoint_ClearStatusStage>

                idle_duration = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    11d2:	80 91 be 01 	lds	r24, 0x01BE
    11d6:	80 93 48 01 	sts	0x0148, r24
    11da:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11dc:	80 91 bb 01 	lds	r24, 0x01BB
    11e0:	81 3a       	cpi	r24, 0xA1	; 161
    11e2:	a1 f4       	brne	.+40     	; 0x120c <EVENT_USB_Device_ControlRequest+0x14a>
    11e4:	80 91 e8 00 	lds	r24, 0x00E8
    11e8:	87 7f       	andi	r24, 0xF7	; 247
    11ea:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11ee:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    11f2:	80 ff       	sbrs	r24, 0
    11f4:	fc cf       	rjmp	.-8      	; 0x11ee <EVENT_USB_Device_ControlRequest+0x12c>
                Endpoint_Write_8(idle_duration);
    11f6:	80 91 48 01 	lds	r24, 0x0148
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11fa:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11fe:	80 91 e8 00 	lds	r24, 0x00E8
    1202:	8e 77       	andi	r24, 0x7E	; 126
    1204:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1208:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <Endpoint_ClearStatusStage>
    120c:	08 95       	ret

0000120e <main>:
 * main
 ******************************************************************************/
static void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    120e:	84 b7       	in	r24, 0x34	; 52
    1210:	87 7f       	andi	r24, 0xF7	; 247
    1212:	84 bf       	out	0x34, r24	; 52
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	a8 95       	wdr
    121a:	80 91 60 00 	lds	r24, 0x0060
    121e:	88 61       	ori	r24, 0x18	; 24
    1220:	80 93 60 00 	sts	0x0060, r24
    1224:	10 92 60 00 	sts	0x0060, r1
    1228:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	80 e8       	ldi	r24, 0x80	; 128
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	80 93 61 00 	sts	0x0061, r24
    1236:	90 93 61 00 	sts	0x0061, r25
    123a:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    123c:	0e 94 46 0a 	call	0x148c	; 0x148c <USB_Disable>

    USB_Init();
    1240:	0e 94 cd 0a 	call	0x159a	; 0x159a <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1244:	80 91 e2 00 	lds	r24, 0x00E2
    1248:	84 60       	ori	r24, 0x04	; 4
    124a:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    124e:	81 e3       	ldi	r24, 0x31	; 49
    1250:	97 e0       	ldi	r25, 0x07	; 7
    1252:	0e 94 18 1a 	call	0x3430	; 0x3430 <print_set_sendchar>

int main(void)  __attribute__ ((weak));
int main(void)
{
    SetupHardware();
    sei();
    1256:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1258:	80 91 ba 01 	lds	r24, 0x01BA
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	e1 f7       	brne	.-8      	; 0x1258 <main+0x4a>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1260:	82 e6       	ldi	r24, 0x62	; 98
    1262:	92 e0       	ldi	r25, 0x02	; 2
    1264:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>

    /* init modules */
    keyboard_init();
    1268:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <keyboard_init>
    host_set_driver(&lufa_driver);
    126c:	89 e0       	ldi	r24, 0x09	; 9
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    1274:	81 e5       	ldi	r24, 0x51	; 81
    1276:	92 e0       	ldi	r25, 0x02	; 2
    1278:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    127c:	80 91 ba 01 	lds	r24, 0x01BA
    1280:	85 30       	cpi	r24, 0x05	; 5
    1282:	69 f4       	brne	.+26     	; 0x129e <main+0x90>
            suspend_power_down();
    1284:	0e 94 3f 1a 	call	0x347e	; 0x347e <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1288:	80 91 b8 01 	lds	r24, 0x01B8
    128c:	88 23       	and	r24, r24
    128e:	b1 f3       	breq	.-20     	; 0x127c <main+0x6e>
    1290:	0e 94 40 1a 	call	0x3480	; 0x3480 <suspend_wakeup_condition>
    1294:	88 23       	and	r24, r24
    1296:	91 f3       	breq	.-28     	; 0x127c <main+0x6e>
                    USB_Device_SendRemoteWakeup();
    1298:	0e 94 aa 09 	call	0x1354	; 0x1354 <USB_Device_SendRemoteWakeup>
    129c:	ef cf       	rjmp	.-34     	; 0x127c <main+0x6e>
            }
        }

        keyboard_task();
    129e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    12a2:	ec cf       	rjmp	.-40     	; 0x127c <main+0x6e>

000012a4 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    12a4:	29 2f       	mov	r18, r25
    12a6:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    12a8:	23 30       	cpi	r18, 0x03	; 3
    12aa:	31 05       	cpc	r19, r1
    12ac:	c9 f0       	breq	.+50     	; 0x12e0 <CALLBACK_USB_GetDescriptor+0x3c>
    12ae:	64 f4       	brge	.+24     	; 0x12c8 <CALLBACK_USB_GetDescriptor+0x24>
    12b0:	21 30       	cpi	r18, 0x01	; 1
    12b2:	31 05       	cpc	r19, r1
    12b4:	81 f0       	breq	.+32     	; 0x12d6 <CALLBACK_USB_GetDescriptor+0x32>
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	09 f0       	breq	.+2      	; 0x12be <CALLBACK_USB_GetDescriptor+0x1a>
    12bc:	43 c0       	rjmp	.+134    	; 0x1344 <CALLBACK_USB_GetDescriptor+0xa0>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    12be:	8b e5       	ldi	r24, 0x5B	; 91
    12c0:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    12c2:	21 ea       	ldi	r18, 0xA1	; 161
    12c4:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    12c6:	42 c0       	rjmp	.+132    	; 0x134c <CALLBACK_USB_GetDescriptor+0xa8>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    12c8:	21 32       	cpi	r18, 0x21	; 33
    12ca:	31 05       	cpc	r19, r1
    12cc:	f1 f0       	breq	.+60     	; 0x130a <CALLBACK_USB_GetDescriptor+0x66>
    12ce:	22 32       	cpi	r18, 0x22	; 34
    12d0:	31 05       	cpc	r19, r1
    12d2:	41 f1       	breq	.+80     	; 0x1324 <CALLBACK_USB_GetDescriptor+0x80>
    12d4:	37 c0       	rjmp	.+110    	; 0x1344 <CALLBACK_USB_GetDescriptor+0xa0>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    12d6:	82 e1       	ldi	r24, 0x12	; 18
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    12da:	2c ef       	ldi	r18, 0xFC	; 252
    12dc:	32 e0       	ldi	r19, 0x02	; 2
    12de:	36 c0       	rjmp	.+108    	; 0x134c <CALLBACK_USB_GetDescriptor+0xa8>
    12e0:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	91 05       	cpc	r25, r1
    12e6:	41 f0       	breq	.+16     	; 0x12f8 <CALLBACK_USB_GetDescriptor+0x54>
    12e8:	82 30       	cpi	r24, 0x02	; 2
    12ea:	91 05       	cpc	r25, r1
    12ec:	41 f0       	breq	.+16     	; 0x12fe <CALLBACK_USB_GetDescriptor+0x5a>
    12ee:	89 2b       	or	r24, r25
    12f0:	49 f5       	brne	.+82     	; 0x1344 <CALLBACK_USB_GetDescriptor+0xa0>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    12f2:	ed e9       	ldi	r30, 0x9D	; 157
    12f4:	f2 e0       	ldi	r31, 0x02	; 2
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    12f8:	e3 e8       	ldi	r30, 0x83	; 131
    12fa:	f2 e0       	ldi	r31, 0x02	; 2
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    12fe:	e3 e7       	ldi	r30, 0x73	; 115
    1300:	f2 e0       	ldi	r31, 0x02	; 2
    1302:	84 91       	lpm	r24, Z
    1304:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1306:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    1308:	21 c0       	rjmp	.+66     	; 0x134c <CALLBACK_USB_GetDescriptor+0xa8>
    130a:	63 30       	cpi	r22, 0x03	; 3
    130c:	d8 f4       	brcc	.+54     	; 0x1344 <CALLBACK_USB_GetDescriptor+0xa0>
    130e:	e6 2f       	mov	r30, r22
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	ee 0f       	add	r30, r30
    1314:	ff 1f       	adc	r31, r31
    1316:	e0 5e       	subi	r30, 0xE0	; 224
    1318:	fe 4f       	sbci	r31, 0xFE	; 254
    131a:	20 81       	ld	r18, Z
    131c:	31 81       	ldd	r19, Z+1	; 0x01
    131e:	89 e0       	ldi	r24, 0x09	; 9
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	14 c0       	rjmp	.+40     	; 0x134c <CALLBACK_USB_GetDescriptor+0xa8>
    1324:	63 30       	cpi	r22, 0x03	; 3
    1326:	70 f4       	brcc	.+28     	; 0x1344 <CALLBACK_USB_GetDescriptor+0xa0>
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	fb 01       	movw	r30, r22
    132c:	ee 0f       	add	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	e6 5e       	subi	r30, 0xE6	; 230
    1332:	fe 4f       	sbci	r31, 0xFE	; 254
    1334:	20 81       	ld	r18, Z
    1336:	31 81       	ldd	r19, Z+1	; 0x01
    1338:	fb 01       	movw	r30, r22
    133a:	e9 5e       	subi	r30, 0xE9	; 233
    133c:	fe 4f       	sbci	r31, 0xFE	; 254
    133e:	80 81       	ld	r24, Z
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	04 c0       	rjmp	.+8      	; 0x134c <CALLBACK_USB_GetDescriptor+0xa8>
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    134c:	fa 01       	movw	r30, r20
    134e:	31 83       	std	Z+1, r19	; 0x01
    1350:	20 83       	st	Z, r18
    return Size;
}
    1352:	08 95       	ret

00001354 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1354:	80 e1       	ldi	r24, 0x10	; 16
    1356:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1358:	82 e1       	ldi	r24, 0x12	; 18
    135a:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    135c:	09 b4       	in	r0, 0x29	; 41
    135e:	00 fe       	sbrs	r0, 0
    1360:	fd cf       	rjmp	.-6      	; 0x135c <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1362:	80 91 d8 00 	lds	r24, 0x00D8
    1366:	8f 7d       	andi	r24, 0xDF	; 223
    1368:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    136c:	80 91 e0 00 	lds	r24, 0x00E0
    1370:	82 60       	ori	r24, 0x02	; 2
    1372:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1376:	80 91 e0 00 	lds	r24, 0x00E0
    137a:	81 fd       	sbrc	r24, 1
    137c:	fc cf       	rjmp	.-8      	; 0x1376 <USB_Device_SendRemoteWakeup+0x22>
}
    137e:	08 95       	ret

00001380 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1380:	98 2f       	mov	r25, r24
    1382:	97 30       	cpi	r25, 0x07	; 7
    1384:	58 f5       	brcc	.+86     	; 0x13dc <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1386:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    138a:	98 17       	cp	r25, r24
    138c:	39 f0       	breq	.+14     	; 0x139c <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    138e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1392:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1396:	50 91 f0 00 	lds	r21, 0x00F0
    139a:	03 c0       	rjmp	.+6      	; 0x13a2 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    139c:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    139e:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    13a0:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    13a2:	21 ff       	sbrs	r18, 1
    13a4:	19 c0       	rjmp	.+50     	; 0x13d8 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    13a6:	30 91 eb 00 	lds	r19, 0x00EB
    13aa:	3e 7f       	andi	r19, 0xFE	; 254
    13ac:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    13b0:	30 91 ed 00 	lds	r19, 0x00ED
    13b4:	3d 7f       	andi	r19, 0xFD	; 253
    13b6:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    13ba:	30 91 eb 00 	lds	r19, 0x00EB
    13be:	31 60       	ori	r19, 0x01	; 1
    13c0:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    13c4:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    13c8:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    13cc:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    13d0:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    13d4:	27 ff       	sbrs	r18, 7
    13d6:	07 c0       	rjmp	.+14     	; 0x13e6 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    13d8:	9f 5f       	subi	r25, 0xFF	; 255
    13da:	d3 cf       	rjmp	.-90     	; 0x1382 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13dc:	8f 70       	andi	r24, 0x0F	; 15
    13de:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    13e6:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    13e8:	08 95       	ret

000013ea <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    13ea:	80 91 bb 01 	lds	r24, 0x01BB
    13ee:	87 ff       	sbrs	r24, 7
    13f0:	11 c0       	rjmp	.+34     	; 0x1414 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13f2:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    13f6:	82 fd       	sbrc	r24, 2
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    13fa:	80 91 ba 01 	lds	r24, 0x01BA
    13fe:	81 11       	cpse	r24, r1
    1400:	f8 cf       	rjmp	.-16     	; 0x13f2 <Endpoint_ClearStatusStage+0x8>
    1402:	11 c0       	rjmp	.+34     	; 0x1426 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1404:	80 91 e8 00 	lds	r24, 0x00E8
    1408:	8b 77       	andi	r24, 0x7B	; 123
    140a:	0b c0       	rjmp	.+22     	; 0x1422 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    140c:	80 91 ba 01 	lds	r24, 0x01BA
    1410:	88 23       	and	r24, r24
    1412:	49 f0       	breq	.+18     	; 0x1426 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1414:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1418:	80 ff       	sbrs	r24, 0
    141a:	f8 cf       	rjmp	.-16     	; 0x140c <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    141c:	80 91 e8 00 	lds	r24, 0x00E8
    1420:	8e 77       	andi	r24, 0x7E	; 126
    1422:	80 93 e8 00 	sts	0x00E8, r24
    1426:	08 95       	ret

00001428 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1428:	20 91 e4 00 	lds	r18, 0x00E4
    142c:	30 91 e5 00 	lds	r19, 0x00E5
    1430:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1432:	40 91 ec 00 	lds	r20, 0x00EC
    1436:	84 2f       	mov	r24, r20
    1438:	81 70       	andi	r24, 0x01	; 1
    143a:	40 ff       	sbrs	r20, 0
    143c:	22 c0       	rjmp	.+68     	; 0x1482 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    143e:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1442:	80 fd       	sbrc	r24, 0
    1444:	1c c0       	rjmp	.+56     	; 0x147e <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1446:	80 91 ba 01 	lds	r24, 0x01BA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    144a:	88 23       	and	r24, r24
    144c:	91 f0       	breq	.+36     	; 0x1472 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    144e:	85 30       	cpi	r24, 0x05	; 5
    1450:	91 f0       	breq	.+36     	; 0x1476 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1452:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1456:	85 fd       	sbrc	r24, 5
    1458:	10 c0       	rjmp	.+32     	; 0x147a <Endpoint_WaitUntilReady+0x52>
    145a:	40 91 e4 00 	lds	r20, 0x00E4
    145e:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1462:	42 17       	cp	r20, r18
    1464:	53 07       	cpc	r21, r19
    1466:	29 f3       	breq	.-54     	; 0x1432 <Endpoint_WaitUntilReady+0xa>
    1468:	9a 01       	movw	r18, r20
    146a:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    146c:	11 f7       	brne	.-60     	; 0x1432 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    146e:	84 e0       	ldi	r24, 0x04	; 4
    1470:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1476:	83 e0       	ldi	r24, 0x03	; 3
    1478:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1482:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1486:	42 ff       	sbrs	r20, 2
    1488:	de cf       	rjmp	.-68     	; 0x1446 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    148a:	08 95       	ret

0000148c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    148c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1490:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1494:	e0 ee       	ldi	r30, 0xE0	; 224
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	81 60       	ori	r24, 0x01	; 1
    149c:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    149e:	e8 ed       	ldi	r30, 0xD8	; 216
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	8f 77       	andi	r24, 0x7F	; 127
    14a6:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    14a8:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    14aa:	a7 ed       	ldi	r26, 0xD7	; 215
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	8c 91       	ld	r24, X
    14b0:	8e 7f       	andi	r24, 0xFE	; 254
    14b2:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    14b4:	80 81       	ld	r24, Z
    14b6:	8f 7e       	andi	r24, 0xEF	; 239
    14b8:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    14ba:	10 92 b9 01 	sts	0x01B9, r1
    14be:	08 95       	ret

000014c0 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <USB_ResetInterface+0x6>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    14ca:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    14ce:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    14d2:	80 91 d8 00 	lds	r24, 0x00D8
    14d6:	8f 77       	andi	r24, 0x7F	; 127
    14d8:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    14dc:	80 91 d8 00 	lds	r24, 0x00D8
    14e0:	80 68       	ori	r24, 0x80	; 128
    14e2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    14e6:	80 91 d8 00 	lds	r24, 0x00D8
    14ea:	8f 7d       	andi	r24, 0xDF	; 223
    14ec:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    14f0:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    14f2:	10 92 ba 01 	sts	0x01BA, r1
	USB_Device_ConfigurationNumber  = 0;
    14f6:	10 92 b6 01 	sts	0x01B6, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    14fa:	10 92 b8 01 	sts	0x01B8, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    14fe:	10 92 b7 01 	sts	0x01B7, r1
		  USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
		else
		  USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
	}
	#else
	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr) != NO_DESCRIPTOR)
    1502:	ae 01       	movw	r20, r28
    1504:	4f 5f       	subi	r20, 0xFF	; 255
    1506:	5f 4f       	sbci	r21, 0xFF	; 255
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <CALLBACK_USB_GetDescriptor>
    1512:	89 2b       	or	r24, r25
    1514:	31 f0       	breq	.+12     	; 0x1522 <USB_ResetInterface+0x62>
		#if defined(USE_RAM_DESCRIPTORS)
		USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
		#elif defined(USE_EEPROM_DESCRIPTORS)
		USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
		#else
		USB_Device_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
    1516:	e9 81       	ldd	r30, Y+1	; 0x01
    1518:	fa 81       	ldd	r31, Y+2	; 0x02
    151a:	37 96       	adiw	r30, 0x07	; 7
    151c:	e4 91       	lpm	r30, Z
    151e:	e0 93 14 01 	sts	0x0114, r30
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1522:	80 91 e0 00 	lds	r24, 0x00E0
    1526:	8b 7f       	andi	r24, 0xFB	; 251
    1528:	80 93 e0 00 	sts	0x00E0, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    152c:	80 91 d8 00 	lds	r24, 0x00D8
    1530:	81 60       	ori	r24, 0x01	; 1
    1532:	80 93 d8 00 	sts	0x00D8, r24
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUSTI);
	#endif

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    1536:	80 91 14 01 	lds	r24, 0x0114
    153a:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    153c:	28 e0       	ldi	r18, 0x08	; 8
    153e:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1540:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1542:	28 17       	cp	r18, r24
    1544:	39 07       	cpc	r19, r25
    1546:	20 f4       	brcc	.+8      	; 0x1550 <USB_ResetInterface+0x90>
				{
					MaskVal++;
    1548:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    154a:	22 0f       	add	r18, r18
    154c:	33 1f       	adc	r19, r19
    154e:	f9 cf       	rjmp	.-14     	; 0x1542 <USB_ResetInterface+0x82>
				}

				return (MaskVal << EPSIZE0);
    1550:	42 95       	swap	r20
    1552:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1554:	42 60       	ori	r20, 0x02	; 2
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	0e 94 c0 09 	call	0x1380	; 0x1380 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    155e:	80 91 e1 00 	lds	r24, 0x00E1
    1562:	8e 7f       	andi	r24, 0xFE	; 254
    1564:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1568:	80 91 e2 00 	lds	r24, 0x00E2
    156c:	81 60       	ori	r24, 0x01	; 1
    156e:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1572:	80 91 e2 00 	lds	r24, 0x00E2
    1576:	88 60       	ori	r24, 0x08	; 8
    1578:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    157c:	80 91 e0 00 	lds	r24, 0x00E0
    1580:	8e 7f       	andi	r24, 0xFE	; 254
    1582:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1586:	80 91 d8 00 	lds	r24, 0x00D8
    158a:	80 61       	ori	r24, 0x10	; 16
    158c:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    159a:	e7 ed       	ldi	r30, 0xD7	; 215
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	81 60       	ori	r24, 0x01	; 1
    15a2:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    15a4:	84 e0       	ldi	r24, 0x04	; 4
    15a6:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	80 93 b9 01 	sts	0x01B9, r24

	USB_ResetInterface();
    15ae:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <USB_ResetInterface>

000015b2 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    15b2:	e8 ed       	ldi	r30, 0xD8	; 216
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8e 7f       	andi	r24, 0xFE	; 254
    15ba:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    15bc:	10 92 e2 00 	sts	0x00E2, r1
    15c0:	08 95       	ret

000015c2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    15c2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    15c6:	10 92 e1 00 	sts	0x00E1, r1
    15ca:	08 95       	ret

000015cc <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    15cc:	1f 92       	push	r1
    15ce:	0f 92       	push	r0
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	0f 92       	push	r0
    15d4:	11 24       	eor	r1, r1
    15d6:	2f 93       	push	r18
    15d8:	3f 93       	push	r19
    15da:	4f 93       	push	r20
    15dc:	5f 93       	push	r21
    15de:	6f 93       	push	r22
    15e0:	7f 93       	push	r23
    15e2:	8f 93       	push	r24
    15e4:	9f 93       	push	r25
    15e6:	af 93       	push	r26
    15e8:	bf 93       	push	r27
    15ea:	ef 93       	push	r30
    15ec:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    15ee:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    15f2:	82 ff       	sbrs	r24, 2
    15f4:	0b c0       	rjmp	.+22     	; 0x160c <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    15f6:	80 91 e2 00 	lds	r24, 0x00E2
    15fa:	82 ff       	sbrs	r24, 2
    15fc:	07 c0       	rjmp	.+14     	; 0x160c <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    15fe:	80 91 e1 00 	lds	r24, 0x00E1
    1602:	8b 7f       	andi	r24, 0xFB	; 251
    1604:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1608:	0e 94 20 08 	call	0x1040	; 0x1040 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    160c:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1610:	80 ff       	sbrs	r24, 0
    1612:	1f c0       	rjmp	.+62     	; 0x1652 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1614:	80 91 d8 00 	lds	r24, 0x00D8
    1618:	80 ff       	sbrs	r24, 0
    161a:	1b c0       	rjmp	.+54     	; 0x1652 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    161c:	80 91 da 00 	lds	r24, 0x00DA
    1620:	8e 7f       	andi	r24, 0xFE	; 254
    1622:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1626:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    162a:	80 ff       	sbrs	r24, 0
    162c:	0d c0       	rjmp	.+26     	; 0x1648 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    162e:	80 e1       	ldi	r24, 0x10	; 16
    1630:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1632:	82 e1       	ldi	r24, 0x12	; 18
    1634:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1636:	09 b4       	in	r0, 0x29	; 41
    1638:	00 fe       	sbrs	r0, 0
    163a:	fd cf       	rjmp	.-6      	; 0x1636 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 ba 01 	sts	0x01BA, r24
			EVENT_USB_Device_Connect();
    1642:	0e 94 1a 08 	call	0x1034	; 0x1034 <EVENT_USB_Device_Connect>
    1646:	05 c0       	rjmp	.+10     	; 0x1652 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1648:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    164a:	10 92 ba 01 	sts	0x01BA, r1
			EVENT_USB_Device_Disconnect();
    164e:	0e 94 1b 08 	call	0x1036	; 0x1036 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1652:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1656:	80 ff       	sbrs	r24, 0
    1658:	19 c0       	rjmp	.+50     	; 0x168c <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    165a:	80 91 e2 00 	lds	r24, 0x00E2
    165e:	80 ff       	sbrs	r24, 0
    1660:	15 c0       	rjmp	.+42     	; 0x168c <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1662:	80 91 e2 00 	lds	r24, 0x00E2
    1666:	8e 7f       	andi	r24, 0xFE	; 254
    1668:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    166c:	80 91 e2 00 	lds	r24, 0x00E2
    1670:	80 61       	ori	r24, 0x10	; 16
    1672:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1676:	80 91 d8 00 	lds	r24, 0x00D8
    167a:	80 62       	ori	r24, 0x20	; 32
    167c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1680:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1682:	85 e0       	ldi	r24, 0x05	; 5
    1684:	80 93 ba 01 	sts	0x01BA, r24
		EVENT_USB_Device_Suspend();
    1688:	0e 94 1d 08 	call	0x103a	; 0x103a <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    168c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1690:	84 ff       	sbrs	r24, 4
    1692:	2e c0       	rjmp	.+92     	; 0x16f0 <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1694:	80 91 e2 00 	lds	r24, 0x00E2
    1698:	84 ff       	sbrs	r24, 4
    169a:	2a c0       	rjmp	.+84     	; 0x16f0 <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    169c:	80 e1       	ldi	r24, 0x10	; 16
    169e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    16a0:	82 e1       	ldi	r24, 0x12	; 18
    16a2:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    16a4:	09 b4       	in	r0, 0x29	; 41
    16a6:	00 fe       	sbrs	r0, 0
    16a8:	fd cf       	rjmp	.-6      	; 0x16a4 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    16aa:	80 91 d8 00 	lds	r24, 0x00D8
    16ae:	8f 7d       	andi	r24, 0xDF	; 223
    16b0:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    16b4:	80 91 e1 00 	lds	r24, 0x00E1
    16b8:	8f 7e       	andi	r24, 0xEF	; 239
    16ba:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    16be:	80 91 e2 00 	lds	r24, 0x00E2
    16c2:	8f 7e       	andi	r24, 0xEF	; 239
    16c4:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    16c8:	80 91 e2 00 	lds	r24, 0x00E2
    16cc:	81 60       	ori	r24, 0x01	; 1
    16ce:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    16d2:	80 91 b6 01 	lds	r24, 0x01B6
    16d6:	81 11       	cpse	r24, r1
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    16da:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    16de:	87 fd       	sbrc	r24, 7
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <__vector_10+0x11a>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <__vector_10+0x11c>
    16e6:	84 e0       	ldi	r24, 0x04	; 4
    16e8:	80 93 ba 01 	sts	0x01BA, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    16ec:	0e 94 1e 08 	call	0x103c	; 0x103c <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    16f0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    16f4:	83 ff       	sbrs	r24, 3
    16f6:	38 c0       	rjmp	.+112    	; 0x1768 <__vector_10+0x19c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    16f8:	80 91 e2 00 	lds	r24, 0x00E2
    16fc:	83 ff       	sbrs	r24, 3
    16fe:	34 c0       	rjmp	.+104    	; 0x1768 <__vector_10+0x19c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1700:	80 91 e1 00 	lds	r24, 0x00E1
    1704:	87 7f       	andi	r24, 0xF7	; 247
    1706:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	80 93 ba 01 	sts	0x01BA, r24
		USB_Device_ConfigurationNumber = 0;
    1710:	10 92 b6 01 	sts	0x01B6, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1714:	80 91 e1 00 	lds	r24, 0x00E1
    1718:	8e 7f       	andi	r24, 0xFE	; 254
    171a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    171e:	80 91 e2 00 	lds	r24, 0x00E2
    1722:	8e 7f       	andi	r24, 0xFE	; 254
    1724:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1728:	80 91 e2 00 	lds	r24, 0x00E2
    172c:	80 61       	ori	r24, 0x10	; 16
    172e:	80 93 e2 00 	sts	0x00E2, r24

		USB_INT_Clear(USB_INT_SUSPI);
		USB_INT_Disable(USB_INT_SUSPI);
		USB_INT_Enable(USB_INT_WAKEUPI);

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    1732:	80 91 14 01 	lds	r24, 0x0114
    1736:	90 e0       	ldi	r25, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1738:	28 e0       	ldi	r18, 0x08	; 8
    173a:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    173c:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    173e:	28 17       	cp	r18, r24
    1740:	39 07       	cpc	r19, r25
    1742:	20 f4       	brcc	.+8      	; 0x174c <__vector_10+0x180>
				{
					MaskVal++;
    1744:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1746:	22 0f       	add	r18, r18
    1748:	33 1f       	adc	r19, r19
    174a:	f9 cf       	rjmp	.-14     	; 0x173e <__vector_10+0x172>
				}

				return (MaskVal << EPSIZE0);
    174c:	42 95       	swap	r20
    174e:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1750:	42 60       	ori	r20, 0x02	; 2
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	0e 94 c0 09 	call	0x1380	; 0x1380 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    175a:	80 91 f0 00 	lds	r24, 0x00F0
    175e:	88 60       	ori	r24, 0x08	; 8
    1760:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1764:	0e 94 1c 08 	call	0x1038	; 0x1038 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1768:	ff 91       	pop	r31
    176a:	ef 91       	pop	r30
    176c:	bf 91       	pop	r27
    176e:	af 91       	pop	r26
    1770:	9f 91       	pop	r25
    1772:	8f 91       	pop	r24
    1774:	7f 91       	pop	r23
    1776:	6f 91       	pop	r22
    1778:	5f 91       	pop	r21
    177a:	4f 91       	pop	r20
    177c:	3f 91       	pop	r19
    177e:	2f 91       	pop	r18
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	0f 90       	pop	r0
    1786:	1f 90       	pop	r1
    1788:	18 95       	reti

0000178a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    178a:	1f 92       	push	r1
    178c:	0f 92       	push	r0
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	0f 92       	push	r0
    1792:	11 24       	eor	r1, r1
    1794:	2f 93       	push	r18
    1796:	3f 93       	push	r19
    1798:	4f 93       	push	r20
    179a:	5f 93       	push	r21
    179c:	6f 93       	push	r22
    179e:	7f 93       	push	r23
    17a0:	8f 93       	push	r24
    17a2:	9f 93       	push	r25
    17a4:	af 93       	push	r26
    17a6:	bf 93       	push	r27
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	ef 93       	push	r30
    17ae:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    17b0:	c0 91 e9 00 	lds	r28, 0x00E9
    17b4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    17b6:	80 91 ec 00 	lds	r24, 0x00EC
    17ba:	d8 2f       	mov	r29, r24
    17bc:	d1 70       	andi	r29, 0x01	; 1
    17be:	80 fd       	sbrc	r24, 0
    17c0:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17c2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    17c6:	80 91 f0 00 	lds	r24, 0x00F0
    17ca:	87 7f       	andi	r24, 0xF7	; 247
    17cc:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    17d0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    17d2:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <USB_Device_ProcessControlRequest>
    17d6:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    17da:	80 91 f0 00 	lds	r24, 0x00F0
    17de:	88 60       	ori	r24, 0x08	; 8
    17e0:	80 93 f0 00 	sts	0x00F0, r24
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    17e4:	cd 2b       	or	r28, r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17e6:	cf 70       	andi	r28, 0x0F	; 15
    17e8:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    17ec:	ff 91       	pop	r31
    17ee:	ef 91       	pop	r30
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	bf 91       	pop	r27
    17f6:	af 91       	pop	r26
    17f8:	9f 91       	pop	r25
    17fa:	8f 91       	pop	r24
    17fc:	7f 91       	pop	r23
    17fe:	6f 91       	pop	r22
    1800:	5f 91       	pop	r21
    1802:	4f 91       	pop	r20
    1804:	3f 91       	pop	r19
    1806:	2f 91       	pop	r18
    1808:	0f 90       	pop	r0
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	0f 90       	pop	r0
    180e:	1f 90       	pop	r1
    1810:	18 95       	reti

00001812 <Endpoint_Write_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1812:	cf 92       	push	r12
    1814:	df 92       	push	r13
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	ec 01       	movw	r28, r24
    1824:	8b 01       	movw	r16, r22
    1826:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1828:	0e 94 14 0a 	call	0x1428	; 0x1428 <Endpoint_WaitUntilReady>
    182c:	81 11       	cpse	r24, r1
    182e:	33 c0       	rjmp	.+102    	; 0x1896 <Endpoint_Write_Stream_LE+0x84>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1830:	c1 14       	cp	r12, r1
    1832:	d1 04       	cpc	r13, r1
    1834:	39 f0       	breq	.+14     	; 0x1844 <Endpoint_Write_Stream_LE+0x32>
	{
		Length -= *BytesProcessed;
    1836:	f6 01       	movw	r30, r12
    1838:	80 81       	ld	r24, Z
    183a:	91 81       	ldd	r25, Z+1	; 0x01
    183c:	08 1b       	sub	r16, r24
    183e:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1840:	c8 0f       	add	r28, r24
    1842:	d9 1f       	adc	r29, r25
// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1844:	e1 2c       	mov	r14, r1
    1846:	f1 2c       	mov	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1848:	01 15       	cp	r16, r1
    184a:	11 05       	cpc	r17, r1
    184c:	19 f1       	breq	.+70     	; 0x1894 <Endpoint_Write_Stream_LE+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    184e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1852:	85 fd       	sbrc	r24, 5
    1854:	16 c0       	rjmp	.+44     	; 0x1882 <Endpoint_Write_Stream_LE+0x70>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1856:	80 91 e8 00 	lds	r24, 0x00E8
    185a:	8e 77       	andi	r24, 0x7E	; 126
    185c:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1860:	c1 14       	cp	r12, r1
    1862:	d1 04       	cpc	r13, r1
    1864:	49 f0       	breq	.+18     	; 0x1878 <Endpoint_Write_Stream_LE+0x66>
			{
				*BytesProcessed += BytesInTransfer;
    1866:	f6 01       	movw	r30, r12
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	e8 0e       	add	r14, r24
    186e:	f9 1e       	adc	r15, r25
    1870:	f1 82       	std	Z+1, r15	; 0x01
    1872:	e0 82       	st	Z, r14
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1874:	85 e0       	ldi	r24, 0x05	; 5
    1876:	0f c0       	rjmp	.+30     	; 0x1896 <Endpoint_Write_Stream_LE+0x84>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1878:	0e 94 14 0a 	call	0x1428	; 0x1428 <Endpoint_WaitUntilReady>
    187c:	88 23       	and	r24, r24
    187e:	21 f3       	breq	.-56     	; 0x1848 <Endpoint_Write_Stream_LE+0x36>
    1880:	0a c0       	rjmp	.+20     	; 0x1896 <Endpoint_Write_Stream_LE+0x84>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1882:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1884:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1888:	01 50       	subi	r16, 0x01	; 1
    188a:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    188c:	ff ef       	ldi	r31, 0xFF	; 255
    188e:	ef 1a       	sub	r14, r31
    1890:	ff 0a       	sbc	r15, r31
    1892:	da cf       	rjmp	.-76     	; 0x1848 <Endpoint_Write_Stream_LE+0x36>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1894:	80 e0       	ldi	r24, 0x00	; 0
}
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	08 95       	ret

000018a8 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18ac:	20 91 c1 01 	lds	r18, 0x01C1
    18b0:	30 91 c2 01 	lds	r19, 0x01C2
    18b4:	26 17       	cp	r18, r22
    18b6:	37 07       	cpc	r19, r23
    18b8:	48 f0       	brcs	.+18     	; 0x18cc <Endpoint_Write_Control_Stream_LE+0x24>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18ba:	61 15       	cp	r22, r1
    18bc:	71 05       	cpc	r23, r1
    18be:	39 f4       	brne	.+14     	; 0x18ce <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18c0:	20 91 e8 00 	lds	r18, 0x00E8
    18c4:	2e 77       	andi	r18, 0x7E	; 126
    18c6:	20 93 e8 00 	sts	0x00E8, r18
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <Endpoint_Write_Control_Stream_LE+0x26>
    18cc:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18ce:	40 e0       	ldi	r20, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18d0:	61 15       	cp	r22, r1
    18d2:	71 05       	cpc	r23, r1
    18d4:	f1 f1       	breq	.+124    	; 0x1952 <Endpoint_Write_Control_Stream_LE+0xaa>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18d6:	20 91 ba 01 	lds	r18, 0x01BA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18da:	22 23       	and	r18, r18
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <Endpoint_Write_Control_Stream_LE+0x38>
    18de:	4a c0       	rjmp	.+148    	; 0x1974 <Endpoint_Write_Control_Stream_LE+0xcc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18e0:	25 30       	cpi	r18, 0x05	; 5
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <Endpoint_Write_Control_Stream_LE+0x3e>
    18e4:	49 c0       	rjmp	.+146    	; 0x1978 <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18e6:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18ea:	23 fd       	sbrc	r18, 3
    18ec:	41 c0       	rjmp	.+130    	; 0x1970 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18ee:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18f2:	22 fd       	sbrc	r18, 2
    18f4:	37 c0       	rjmp	.+110    	; 0x1964 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18f6:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    18fa:	20 ff       	sbrs	r18, 0
    18fc:	e9 cf       	rjmp	.-46     	; 0x18d0 <Endpoint_Write_Control_Stream_LE+0x28>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    18fe:	40 91 f3 00 	lds	r20, 0x00F3
    1902:	20 91 f2 00 	lds	r18, 0x00F2
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	34 2b       	or	r19, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    190a:	fc 01       	movw	r30, r24
    190c:	28 1b       	sub	r18, r24
    190e:	39 0b       	sbc	r19, r25
    1910:	d9 01       	movw	r26, r18
    1912:	ae 0f       	add	r26, r30
    1914:	bf 1f       	adc	r27, r31
    1916:	cf 01       	movw	r24, r30
    1918:	40 91 14 01 	lds	r20, 0x0114
    191c:	61 15       	cp	r22, r1
    191e:	71 05       	cpc	r23, r1
    1920:	59 f0       	breq	.+22     	; 0x1938 <Endpoint_Write_Control_Stream_LE+0x90>
    1922:	c4 2f       	mov	r28, r20
    1924:	d0 e0       	ldi	r29, 0x00	; 0
    1926:	ac 17       	cp	r26, r28
    1928:	bd 07       	cpc	r27, r29
    192a:	30 f4       	brcc	.+12     	; 0x1938 <Endpoint_Write_Control_Stream_LE+0x90>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    192c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    192e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1932:	61 50       	subi	r22, 0x01	; 1
    1934:	71 09       	sbc	r23, r1
    1936:	ec cf       	rjmp	.-40     	; 0x1910 <Endpoint_Write_Control_Stream_LE+0x68>
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1938:	24 2f       	mov	r18, r20
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	a2 17       	cp	r26, r18
    1940:	b3 07       	cpc	r27, r19
    1942:	09 f0       	breq	.+2      	; 0x1946 <Endpoint_Write_Control_Stream_LE+0x9e>
    1944:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1946:	20 91 e8 00 	lds	r18, 0x00E8
    194a:	2e 77       	andi	r18, 0x7E	; 126
    194c:	20 93 e8 00 	sts	0x00E8, r18
    1950:	bf cf       	rjmp	.-130    	; 0x18d0 <Endpoint_Write_Control_Stream_LE+0x28>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1952:	41 11       	cpse	r20, r1
    1954:	c0 cf       	rjmp	.-128    	; 0x18d6 <Endpoint_Write_Control_Stream_LE+0x2e>
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <Endpoint_Write_Control_Stream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1958:	80 91 ba 01 	lds	r24, 0x01BA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    195c:	88 23       	and	r24, r24
    195e:	51 f0       	breq	.+20     	; 0x1974 <Endpoint_Write_Control_Stream_LE+0xcc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1960:	85 30       	cpi	r24, 0x05	; 5
    1962:	51 f0       	breq	.+20     	; 0x1978 <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1964:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1968:	82 ff       	sbrs	r24, 2
    196a:	f6 cf       	rjmp	.-20     	; 0x1958 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	05 c0       	rjmp	.+10     	; 0x197a <Endpoint_Write_Control_Stream_LE+0xd2>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	03 c0       	rjmp	.+6      	; 0x197a <Endpoint_Write_Control_Stream_LE+0xd2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	01 c0       	rjmp	.+2      	; 0x197a <Endpoint_Write_Control_Stream_LE+0xd2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1978:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	08 95       	ret

00001980 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1980:	20 91 c1 01 	lds	r18, 0x01C1
    1984:	30 91 c2 01 	lds	r19, 0x01C2
    1988:	26 17       	cp	r18, r22
    198a:	37 07       	cpc	r19, r23
    198c:	48 f0       	brcs	.+18     	; 0x19a0 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    198e:	61 15       	cp	r22, r1
    1990:	71 05       	cpc	r23, r1
    1992:	39 f4       	brne	.+14     	; 0x19a2 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1994:	20 91 e8 00 	lds	r18, 0x00E8
    1998:	2e 77       	andi	r18, 0x7E	; 126
    199a:	20 93 e8 00 	sts	0x00E8, r18
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <Endpoint_Write_Control_PStream_LE+0x22>
    19a0:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19a2:	38 2f       	mov	r19, r24
    19a4:	49 2f       	mov	r20, r25
    19a6:	20 e0       	ldi	r18, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19a8:	61 15       	cp	r22, r1
    19aa:	71 05       	cpc	r23, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <Endpoint_Write_Control_PStream_LE+0x30>
    19ae:	42 c0       	rjmp	.+132    	; 0x1a34 <Endpoint_Write_Control_PStream_LE+0xb4>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19b0:	80 91 ba 01 	lds	r24, 0x01BA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19b4:	88 23       	and	r24, r24
    19b6:	09 f4       	brne	.+2      	; 0x19ba <Endpoint_Write_Control_PStream_LE+0x3a>
    19b8:	4e c0       	rjmp	.+156    	; 0x1a56 <Endpoint_Write_Control_PStream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19ba:	85 30       	cpi	r24, 0x05	; 5
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <Endpoint_Write_Control_PStream_LE+0x40>
    19be:	4d c0       	rjmp	.+154    	; 0x1a5a <Endpoint_Write_Control_PStream_LE+0xda>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19c0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19c4:	83 fd       	sbrc	r24, 3
    19c6:	45 c0       	rjmp	.+138    	; 0x1a52 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19c8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    19cc:	82 fd       	sbrc	r24, 2
    19ce:	3b c0       	rjmp	.+118    	; 0x1a46 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19d0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    19d4:	80 ff       	sbrs	r24, 0
    19d6:	e8 cf       	rjmp	.-48     	; 0x19a8 <Endpoint_Write_Control_PStream_LE+0x28>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    19d8:	50 91 f3 00 	lds	r21, 0x00F3
    19dc:	20 91 f2 00 	lds	r18, 0x00F2
    19e0:	82 2f       	mov	r24, r18
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	95 2b       	or	r25, r21
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19e6:	e3 2f       	mov	r30, r19
    19e8:	f4 2f       	mov	r31, r20
    19ea:	8e 1b       	sub	r24, r30
    19ec:	9f 0b       	sbc	r25, r31
    19ee:	af 01       	movw	r20, r30
    19f0:	48 0f       	add	r20, r24
    19f2:	59 1f       	adc	r21, r25
    19f4:	20 91 14 01 	lds	r18, 0x0114
    19f8:	61 15       	cp	r22, r1
    19fa:	71 05       	cpc	r23, r1
    19fc:	61 f0       	breq	.+24     	; 0x1a16 <Endpoint_Write_Control_PStream_LE+0x96>
    19fe:	a2 2f       	mov	r26, r18
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	4a 17       	cp	r20, r26
    1a04:	5b 07       	cpc	r21, r27
    1a06:	38 f4       	brcc	.+14     	; 0x1a16 <Endpoint_Write_Control_PStream_LE+0x96>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a08:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a0a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a0e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a10:	61 50       	subi	r22, 0x01	; 1
    1a12:	71 09       	sbc	r23, r1
    1a14:	ec cf       	rjmp	.-40     	; 0x19ee <Endpoint_Write_Control_PStream_LE+0x6e>
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a16:	82 2f       	mov	r24, r18
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	21 e0       	ldi	r18, 0x01	; 1
    1a1c:	48 17       	cp	r20, r24
    1a1e:	59 07       	cpc	r21, r25
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <Endpoint_Write_Control_PStream_LE+0xa4>
    1a22:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a24:	80 91 e8 00 	lds	r24, 0x00E8
    1a28:	8e 77       	andi	r24, 0x7E	; 126
    1a2a:	80 93 e8 00 	sts	0x00E8, r24
    1a2e:	3e 2f       	mov	r19, r30
    1a30:	4f 2f       	mov	r20, r31
    1a32:	ba cf       	rjmp	.-140    	; 0x19a8 <Endpoint_Write_Control_PStream_LE+0x28>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a34:	21 11       	cpse	r18, r1
    1a36:	bc cf       	rjmp	.-136    	; 0x19b0 <Endpoint_Write_Control_PStream_LE+0x30>
    1a38:	06 c0       	rjmp	.+12     	; 0x1a46 <Endpoint_Write_Control_PStream_LE+0xc6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a3a:	80 91 ba 01 	lds	r24, 0x01BA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a3e:	88 23       	and	r24, r24
    1a40:	51 f0       	breq	.+20     	; 0x1a56 <Endpoint_Write_Control_PStream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a42:	85 30       	cpi	r24, 0x05	; 5
    1a44:	51 f0       	breq	.+20     	; 0x1a5a <Endpoint_Write_Control_PStream_LE+0xda>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a46:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1a4a:	82 ff       	sbrs	r24, 2
    1a4c:	f6 cf       	rjmp	.-20     	; 0x1a3a <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a5a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a5c:	08 95       	ret

00001a5e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	aa 97       	sbiw	r28, 0x2a	; 42
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	eb eb       	ldi	r30, 0xBB	; 187
    1a78:	f1 e0       	ldi	r31, 0x01	; 1
    1a7a:	88 e0       	ldi	r24, 0x08	; 8
    1a7c:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1a7e:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1a82:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1a84:	8e 13       	cpse	r24, r30
    1a86:	fb cf       	rjmp	.-10     	; 0x1a7e <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1a88:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a8c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1a90:	83 ff       	sbrs	r24, 3
    1a92:	2f c1       	rjmp	.+606    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1a94:	80 91 bb 01 	lds	r24, 0x01BB

		switch (USB_ControlRequest.bRequest)
    1a98:	90 91 bc 01 	lds	r25, 0x01BC
    1a9c:	49 2f       	mov	r20, r25
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	4a 30       	cpi	r20, 0x0A	; 10
    1aa2:	51 05       	cpc	r21, r1
    1aa4:	08 f0       	brcs	.+2      	; 0x1aa8 <USB_Device_ProcessControlRequest+0x4a>
    1aa6:	25 c1       	rjmp	.+586    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
    1aa8:	fa 01       	movw	r30, r20
    1aaa:	ea 5a       	subi	r30, 0xAA	; 170
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ab2:	80 38       	cpi	r24, 0x80	; 128
    1ab4:	81 f0       	breq	.+32     	; 0x1ad6 <USB_Device_ProcessControlRequest+0x78>
    1ab6:	82 38       	cpi	r24, 0x82	; 130
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <USB_Device_ProcessControlRequest+0x5e>
    1aba:	1b c1       	rjmp	.+566    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1abc:	80 91 bf 01 	lds	r24, 0x01BF
    1ac0:	8f 70       	andi	r24, 0x0F	; 15
    1ac2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ac6:	80 91 eb 00 	lds	r24, 0x00EB
    1aca:	85 fb       	bst	r24, 5
    1acc:	88 27       	eor	r24, r24
    1ace:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ad0:	10 92 e9 00 	sts	0x00E9, r1
    1ad4:	06 c0       	rjmp	.+12     	; 0x1ae2 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1ad6:	80 91 b7 01 	lds	r24, 0x01B7
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1ada:	90 91 b8 01 	lds	r25, 0x01B8
    1ade:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1ae0:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ae2:	90 91 e8 00 	lds	r25, 0x00E8
    1ae6:	97 7f       	andi	r25, 0xF7	; 247
    1ae8:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1aec:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1af0:	10 92 f1 00 	sts	0x00F1, r1
    1af4:	ca c0       	rjmp	.+404    	; 0x1c8a <USB_Device_ProcessControlRequest+0x22c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1af6:	28 2f       	mov	r18, r24
    1af8:	2d 7f       	andi	r18, 0xFD	; 253
    1afa:	09 f0       	breq	.+2      	; 0x1afe <USB_Device_ProcessControlRequest+0xa0>
    1afc:	fa c0       	rjmp	.+500    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1afe:	88 23       	and	r24, r24
    1b00:	19 f0       	breq	.+6      	; 0x1b08 <USB_Device_ProcessControlRequest+0xaa>
    1b02:	82 30       	cpi	r24, 0x02	; 2
    1b04:	61 f0       	breq	.+24     	; 0x1b1e <USB_Device_ProcessControlRequest+0xc0>
    1b06:	f5 c0       	rjmp	.+490    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1b08:	80 91 bd 01 	lds	r24, 0x01BD
    1b0c:	81 30       	cpi	r24, 0x01	; 1
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <USB_Device_ProcessControlRequest+0xb4>
    1b10:	f0 c0       	rjmp	.+480    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1b12:	93 30       	cpi	r25, 0x03	; 3
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <USB_Device_ProcessControlRequest+0xba>
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	80 93 b8 01 	sts	0x01B8, r24
    1b1c:	2b c0       	rjmp	.+86     	; 0x1b74 <USB_Device_ProcessControlRequest+0x116>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1b1e:	80 91 bd 01 	lds	r24, 0x01BD
    1b22:	81 11       	cpse	r24, r1
    1b24:	27 c0       	rjmp	.+78     	; 0x1b74 <USB_Device_ProcessControlRequest+0x116>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1b26:	80 91 bf 01 	lds	r24, 0x01BF
    1b2a:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <USB_Device_ProcessControlRequest+0xd2>
    1b2e:	e1 c0       	rjmp	.+450    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b30:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1b34:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1b38:	20 ff       	sbrs	r18, 0
    1b3a:	1c c0       	rjmp	.+56     	; 0x1b74 <USB_Device_ProcessControlRequest+0x116>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1b3c:	93 30       	cpi	r25, 0x03	; 3
    1b3e:	21 f4       	brne	.+8      	; 0x1b48 <USB_Device_ProcessControlRequest+0xea>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b40:	80 91 eb 00 	lds	r24, 0x00EB
    1b44:	80 62       	ori	r24, 0x20	; 32
    1b46:	14 c0       	rjmp	.+40     	; 0x1b70 <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1b48:	90 91 eb 00 	lds	r25, 0x00EB
    1b4c:	90 61       	ori	r25, 0x10	; 16
    1b4e:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1b52:	21 e0       	ldi	r18, 0x01	; 1
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	a9 01       	movw	r20, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <USB_Device_ProcessControlRequest+0x100>
    1b5a:	44 0f       	add	r20, r20
    1b5c:	55 1f       	adc	r21, r21
    1b5e:	8a 95       	dec	r24
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <USB_Device_ProcessControlRequest+0xfc>
    1b62:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    1b66:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1b6a:	80 91 eb 00 	lds	r24, 0x00EB
    1b6e:	88 60       	ori	r24, 0x08	; 8
    1b70:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b74:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b78:	80 91 e8 00 	lds	r24, 0x00E8
    1b7c:	87 7f       	andi	r24, 0xF7	; 247
    1b7e:	88 c0       	rjmp	.+272    	; 0x1c90 <USB_Device_ProcessControlRequest+0x232>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1b80:	81 11       	cpse	r24, r1
    1b82:	b7 c0       	rjmp	.+366    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1b84:	10 91 bd 01 	lds	r17, 0x01BD
    1b88:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1b8a:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1b8c:	f8 94       	cli
    1b8e:	80 91 e8 00 	lds	r24, 0x00E8
    1b92:	87 7f       	andi	r24, 0xF7	; 247
    1b94:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1b98:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b9c:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1ba0:	80 ff       	sbrs	r24, 0
    1ba2:	fc cf       	rjmp	.-8      	; 0x1b9c <USB_Device_ProcessControlRequest+0x13e>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1ba4:	80 91 e3 00 	lds	r24, 0x00E3
    1ba8:	80 78       	andi	r24, 0x80	; 128
    1baa:	81 2b       	or	r24, r17

				UDADDR = Temp;
    1bac:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    1bb0:	80 68       	ori	r24, 0x80	; 128
    1bb2:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1bb6:	11 11       	cpse	r17, r1
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <USB_Device_ProcessControlRequest+0x160>
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <USB_Device_ProcessControlRequest+0x162>
    1bbe:	83 e0       	ldi	r24, 0x03	; 3
    1bc0:	80 93 ba 01 	sts	0x01BA, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1bc4:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    1bc6:	95 c0       	rjmp	.+298    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1bc8:	80 58       	subi	r24, 0x80	; 128
    1bca:	82 30       	cpi	r24, 0x02	; 2
    1bcc:	08 f0       	brcs	.+2      	; 0x1bd0 <USB_Device_ProcessControlRequest+0x172>
    1bce:	91 c0       	rjmp	.+290    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1bd0:	80 91 bd 01 	lds	r24, 0x01BD
    1bd4:	90 91 be 01 	lds	r25, 0x01BE
    1bd8:	8c 3d       	cpi	r24, 0xDC	; 220
    1bda:	53 e0       	ldi	r21, 0x03	; 3
    1bdc:	95 07       	cpc	r25, r21
    1bde:	79 f5       	brne	.+94     	; 0x1c3e <USB_Device_ProcessControlRequest+0x1e0>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1be0:	83 e0       	ldi	r24, 0x03	; 3
    1be2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1be4:	8a e2       	ldi	r24, 0x2A	; 42
    1be6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1be8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1bea:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1bec:	de 01       	movw	r26, r28
    1bee:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1bf2:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1bf4:	51 e2       	ldi	r21, 0x21	; 33
    1bf6:	e3 2f       	mov	r30, r19
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	50 93 57 00 	sts	0x0057, r21
    1bfe:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1c00:	20 ff       	sbrs	r18, 0
    1c02:	03 c0       	rjmp	.+6      	; 0x1c0a <USB_Device_ProcessControlRequest+0x1ac>
					{
						SerialByte >>= 4;
    1c04:	e2 95       	swap	r30
    1c06:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1c08:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1c0a:	ef 70       	andi	r30, 0x0F	; 15
    1c0c:	8e 2f       	mov	r24, r30
    1c0e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1c10:	ea 30       	cpi	r30, 0x0A	; 10
    1c12:	10 f0       	brcs	.+4      	; 0x1c18 <USB_Device_ProcessControlRequest+0x1ba>
    1c14:	c7 96       	adiw	r24, 0x37	; 55
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <USB_Device_ProcessControlRequest+0x1bc>
    1c18:	c0 96       	adiw	r24, 0x30	; 48
    1c1a:	8d 93       	st	X+, r24
    1c1c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1c1e:	2f 5f       	subi	r18, 0xFF	; 255
    1c20:	24 31       	cpi	r18, 0x14	; 20
    1c22:	49 f7       	brne	.-46     	; 0x1bf6 <USB_Device_ProcessControlRequest+0x198>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1c24:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c26:	80 91 e8 00 	lds	r24, 0x00E8
    1c2a:	87 7f       	andi	r24, 0xF7	; 247
    1c2c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1c30:	6a e2       	ldi	r22, 0x2A	; 42
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	ce 01       	movw	r24, r28
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Endpoint_Write_Control_Stream_LE>
    1c3c:	14 c0       	rjmp	.+40     	; 0x1c66 <USB_Device_ProcessControlRequest+0x208>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1c3e:	ae 01       	movw	r20, r28
    1c40:	4f 5f       	subi	r20, 0xFF	; 255
    1c42:	5f 4f       	sbci	r21, 0xFF	; 255
    1c44:	60 91 bf 01 	lds	r22, 0x01BF
    1c48:	0e 94 52 09 	call	0x12a4	; 0x12a4 <CALLBACK_USB_GetDescriptor>
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	89 2b       	or	r24, r25
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <USB_Device_ProcessControlRequest+0x1f6>
    1c52:	4f c0       	rjmp	.+158    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
    1c54:	90 91 e8 00 	lds	r25, 0x00E8
    1c58:	97 7f       	andi	r25, 0xF7	; 247
    1c5a:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	0e 94 c0 0c 	call	0x1980	; 0x1980 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c66:	80 91 e8 00 	lds	r24, 0x00E8
    1c6a:	8b 77       	andi	r24, 0x7B	; 123
    1c6c:	80 93 e8 00 	sts	0x00E8, r24
    1c70:	40 c0       	rjmp	.+128    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1c72:	80 38       	cpi	r24, 0x80	; 128
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <USB_Device_ProcessControlRequest+0x21a>
    1c76:	3d c0       	rjmp	.+122    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c78:	80 91 e8 00 	lds	r24, 0x00E8
    1c7c:	87 7f       	andi	r24, 0xF7	; 247
    1c7e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1c82:	80 91 b6 01 	lds	r24, 0x01B6
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c86:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c8a:	80 91 e8 00 	lds	r24, 0x00E8
    1c8e:	8e 77       	andi	r24, 0x7E	; 126
    1c90:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1c94:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Endpoint_ClearStatusStage>
    1c98:	2c c0       	rjmp	.+88     	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1c9a:	81 11       	cpse	r24, r1
    1c9c:	2a c0       	rjmp	.+84     	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
		#else
			uint8_t MemoryAddressSpace;
		#endif
	#endif

	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DevDescriptorPtr
    1c9e:	ae 01       	movw	r20, r28
    1ca0:	4f 5f       	subi	r20, 0xFF	; 255
    1ca2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	91 e0       	ldi	r25, 0x01	; 1
    1caa:	0e 94 52 09 	call	0x12a4	; 0x12a4 <CALLBACK_USB_GetDescriptor>
    1cae:	89 2b       	or	r24, r25
    1cb0:	01 f1       	breq	.+64     	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
	}

	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	if (MemoryAddressSpace == MEMSPACE_FLASH)
	{
		if (((uint8_t)USB_ControlRequest.wValue > pgm_read_byte(&DevDescriptorPtr->NumberOfConfigurations)))
    1cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb6:	71 96       	adiw	r30, 0x11	; 17
    1cb8:	e4 91       	lpm	r30, Z
    1cba:	90 91 bd 01 	lds	r25, 0x01BD
    1cbe:	e9 17       	cp	r30, r25
    1cc0:	c0 f0       	brcs	.+48     	; 0x1cf2 <USB_Device_ProcessControlRequest+0x294>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1cc2:	80 91 e8 00 	lds	r24, 0x00E8
    1cc6:	87 7f       	andi	r24, 0xF7	; 247
    1cc8:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1ccc:	90 93 b6 01 	sts	0x01B6, r25

	Endpoint_ClearStatusStage();
    1cd0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1cd4:	80 91 b6 01 	lds	r24, 0x01B6
    1cd8:	81 11       	cpse	r24, r1
    1cda:	06 c0       	rjmp	.+12     	; 0x1ce8 <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1cdc:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1ce0:	87 fd       	sbrc	r24, 7
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <USB_Device_ProcessControlRequest+0x28a>
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	01 c0       	rjmp	.+2      	; 0x1cea <USB_Device_ProcessControlRequest+0x28c>
    1ce8:	84 e0       	ldi	r24, 0x04	; 4
    1cea:	80 93 ba 01 	sts	0x01BA, r24

	EVENT_USB_Device_ConfigurationChanged();
    1cee:	0e 94 4d 08 	call	0x109a	; 0x109a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1cf2:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1cf6:	83 ff       	sbrs	r24, 3
    1cf8:	0a c0       	rjmp	.+20     	; 0x1d0e <USB_Device_ProcessControlRequest+0x2b0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1cfa:	80 91 eb 00 	lds	r24, 0x00EB
    1cfe:	80 62       	ori	r24, 0x20	; 32
    1d00:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d04:	80 91 e8 00 	lds	r24, 0x00E8
    1d08:	87 7f       	andi	r24, 0xF7	; 247
    1d0a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1d0e:	aa 96       	adiw	r28, 0x2a	; 42
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	08 95       	ret

00001d24 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1d24:	90 93 4f 01 	sts	0x014F, r25
    1d28:	80 93 4e 01 	sts	0x014E, r24
    1d2c:	08 95       	ret

00001d2e <host_get_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    1d2e:	80 91 4e 01 	lds	r24, 0x014E
    1d32:	90 91 4f 01 	lds	r25, 0x014F
    1d36:	08 95       	ret

00001d38 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1d38:	e0 91 4e 01 	lds	r30, 0x014E
    1d3c:	f0 91 4f 01 	lds	r31, 0x014F
    1d40:	30 97       	sbiw	r30, 0x00	; 0
    1d42:	21 f0       	breq	.+8      	; 0x1d4c <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1d44:	01 90       	ld	r0, Z+
    1d46:	f0 81       	ld	r31, Z
    1d48:	e0 2d       	mov	r30, r0
    1d4a:	09 94       	ijmp
}
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	08 95       	ret

00001d50 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    if (!driver) return;
    1d5c:	e0 91 4e 01 	lds	r30, 0x014E
    1d60:	f0 91 4f 01 	lds	r31, 0x014F
    1d64:	30 97       	sbiw	r30, 0x00	; 0
    1d66:	b1 f1       	breq	.+108    	; 0x1dd4 <host_keyboard_send+0x84>
    1d68:	8c 01       	movw	r16, r24
    (*driver->send_keyboard)(report);
    1d6a:	02 80       	ldd	r0, Z+2	; 0x02
    1d6c:	f3 81       	ldd	r31, Z+3	; 0x03
    1d6e:	e0 2d       	mov	r30, r0
    1d70:	09 95       	icall

    if (debug_keyboard) {
    1d72:	80 91 b5 01 	lds	r24, 0x01B5
    1d76:	82 ff       	sbrs	r24, 2
    1d78:	2d c0       	rjmp	.+90     	; 0x1dd4 <host_keyboard_send+0x84>
        dprint("keyboard_report: ");
    1d7a:	80 ff       	sbrs	r24, 0
    1d7c:	04 c0       	rjmp	.+8      	; 0x1d86 <host_keyboard_send+0x36>
    1d7e:	8e ea       	ldi	r24, 0xAE	; 174
    1d80:	93 e0       	ldi	r25, 0x03	; 3
    1d82:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    1d86:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1d88:	10 e1       	ldi	r17, 0x10	; 16
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    1d8a:	88 ea       	ldi	r24, 0xA8	; 168
    1d8c:	e8 2e       	mov	r14, r24
    1d8e:	83 e0       	ldi	r24, 0x03	; 3
    1d90:	f8 2e       	mov	r15, r24
    1d92:	80 91 b5 01 	lds	r24, 0x01B5
    1d96:	80 ff       	sbrs	r24, 0
    1d98:	0b c0       	rjmp	.+22     	; 0x1db0 <host_keyboard_send+0x60>
    1d9a:	88 81       	ld	r24, Y
    1d9c:	1f 92       	push	r1
    1d9e:	8f 93       	push	r24
    1da0:	ff 92       	push	r15
    1da2:	ef 92       	push	r14
    1da4:	0e 94 56 05 	call	0xaac	; 0xaac <__xprintf>
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	11 50       	subi	r17, 0x01	; 1
    1db2:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < REPORT_SIZE; i++) {
    1db4:	11 11       	cpse	r17, r1
    1db6:	ed cf       	rjmp	.-38     	; 0x1d92 <host_keyboard_send+0x42>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1db8:	80 91 b5 01 	lds	r24, 0x01B5
    1dbc:	80 ff       	sbrs	r24, 0
    1dbe:	0a c0       	rjmp	.+20     	; 0x1dd4 <host_keyboard_send+0x84>
    1dc0:	86 ea       	ldi	r24, 0xA6	; 166
    1dc2:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	1f 91       	pop	r17
    1dca:	0f 91       	pop	r16
    1dcc:	ff 90       	pop	r15
    1dce:	ef 90       	pop	r14
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1dd0:	0c 94 bd 04 	jmp	0x97a	; 0x97a <xputs>
    }
}
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	ff 90       	pop	r15
    1dde:	ef 90       	pop	r14
    1de0:	08 95       	ret

00001de2 <host_system_send>:
    (*driver->send_mouse)(report);
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    1de2:	20 91 4c 01 	lds	r18, 0x014C
    1de6:	30 91 4d 01 	lds	r19, 0x014D
    1dea:	82 17       	cp	r24, r18
    1dec:	93 07       	cpc	r25, r19
    1dee:	71 f0       	breq	.+28     	; 0x1e0c <host_system_send+0x2a>
    last_system_report = report;
    1df0:	90 93 4d 01 	sts	0x014D, r25
    1df4:	80 93 4c 01 	sts	0x014C, r24

    if (!driver) return;
    1df8:	e0 91 4e 01 	lds	r30, 0x014E
    1dfc:	f0 91 4f 01 	lds	r31, 0x014F
    1e00:	30 97       	sbiw	r30, 0x00	; 0
    1e02:	21 f0       	breq	.+8      	; 0x1e0c <host_system_send+0x2a>
    (*driver->send_system)(report);
    1e04:	06 80       	ldd	r0, Z+6	; 0x06
    1e06:	f7 81       	ldd	r31, Z+7	; 0x07
    1e08:	e0 2d       	mov	r30, r0
    1e0a:	09 94       	ijmp
    1e0c:	08 95       	ret

00001e0e <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    1e0e:	20 91 4a 01 	lds	r18, 0x014A
    1e12:	30 91 4b 01 	lds	r19, 0x014B
    1e16:	82 17       	cp	r24, r18
    1e18:	93 07       	cpc	r25, r19
    1e1a:	71 f0       	breq	.+28     	; 0x1e38 <host_consumer_send+0x2a>
    last_consumer_report = report;
    1e1c:	90 93 4b 01 	sts	0x014B, r25
    1e20:	80 93 4a 01 	sts	0x014A, r24

    if (!driver) return;
    1e24:	e0 91 4e 01 	lds	r30, 0x014E
    1e28:	f0 91 4f 01 	lds	r31, 0x014F
    1e2c:	30 97       	sbiw	r30, 0x00	; 0
    1e2e:	21 f0       	breq	.+8      	; 0x1e38 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    1e30:	00 84       	ldd	r0, Z+8	; 0x08
    1e32:	f1 85       	ldd	r31, Z+9	; 0x09
    1e34:	e0 2d       	mov	r30, r0
    1e36:	09 94       	ijmp
    1e38:	08 95       	ret

00001e3a <keyboard_init>:
#endif


void keyboard_init(void)
{
    timer_init();
    1e3a:	0e 94 de 19 	call	0x33bc	; 0x33bc <timer_init>
    matrix_init();
    1e3e:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <matrix_init>

00001e42 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    1e42:	cf 93       	push	r28
    1e44:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    1e46:	80 91 b5 01 	lds	r24, 0x01B5
    1e4a:	82 ff       	sbrs	r24, 2
    1e4c:	1e c0       	rjmp	.+60     	; 0x1e8a <keyboard_set_leds+0x48>
    1e4e:	80 ff       	sbrs	r24, 0
    1e50:	04 c0       	rjmp	.+8      	; 0x1e5a <keyboard_set_leds+0x18>
    1e52:	87 ec       	ldi	r24, 0xC7	; 199
    1e54:	93 e0       	ldi	r25, 0x03	; 3
    1e56:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    1e5a:	80 91 b5 01 	lds	r24, 0x01B5
    1e5e:	80 ff       	sbrs	r24, 0
    1e60:	0c c0       	rjmp	.+24     	; 0x1e7a <keyboard_set_leds+0x38>
    1e62:	1f 92       	push	r1
    1e64:	cf 93       	push	r28
    1e66:	82 ec       	ldi	r24, 0xC2	; 194
    1e68:	93 e0       	ldi	r25, 0x03	; 3
    1e6a:	9f 93       	push	r25
    1e6c:	8f 93       	push	r24
    1e6e:	0e 94 56 05 	call	0xaac	; 0xaac <__xprintf>
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	80 91 b5 01 	lds	r24, 0x01B5
    1e7e:	80 ff       	sbrs	r24, 0
    1e80:	04 c0       	rjmp	.+8      	; 0x1e8a <keyboard_set_leds+0x48>
    1e82:	80 ec       	ldi	r24, 0xC0	; 192
    1e84:	93 e0       	ldi	r25, 0x03	; 3
    1e86:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    led_set(leds);
    1e8a:	8c 2f       	mov	r24, r28
}
    1e8c:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    1e8e:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <led_set>

00001e92 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1e92:	4f 92       	push	r4
    1e94:	5f 92       	push	r5
    1e96:	7f 92       	push	r7
    1e98:	8f 92       	push	r8
    1e9a:	9f 92       	push	r9
    1e9c:	af 92       	push	r10
    1e9e:	bf 92       	push	r11
    1ea0:	cf 92       	push	r12
    1ea2:	df 92       	push	r13
    1ea4:	ef 92       	push	r14
    1ea6:	ff 92       	push	r15
    1ea8:	0f 93       	push	r16
    1eaa:	1f 93       	push	r17
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	2a 97       	sbiw	r28, 0x0a	; 10
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1ec0:	0e 94 cb 05 	call	0xb96	; 0xb96 <matrix_scan>
    1ec4:	91 e5       	ldi	r25, 0x51	; 81
    1ec6:	c9 2e       	mov	r12, r25
    1ec8:	91 e0       	ldi	r25, 0x01	; 1
    1eca:	d9 2e       	mov	r13, r25
    1ecc:	00 e0       	ldi	r16, 0x00	; 0
    1ece:	10 e0       	ldi	r17, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1ed0:	aa 24       	eor	r10, r10
    1ed2:	a3 94       	inc	r10
    1ed4:	b1 2c       	mov	r11, r1
    1ed6:	70 2e       	mov	r7, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    1ed8:	80 2f       	mov	r24, r16
    1eda:	0e 94 d6 06 	call	0xdac	; 0xdac <matrix_get_row>
    1ede:	4c 01       	movw	r8, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    1ee0:	f6 01       	movw	r30, r12
    1ee2:	41 90       	ld	r4, Z+
    1ee4:	51 90       	ld	r5, Z+
    1ee6:	6f 01       	movw	r12, r30
    1ee8:	48 26       	eor	r4, r24
    1eea:	59 26       	eor	r5, r25
        if (matrix_change) {
    1eec:	41 14       	cp	r4, r1
    1eee:	51 04       	cpc	r5, r1
    1ef0:	b1 f4       	brne	.+44     	; 0x1f1e <keyboard_task+0x8c>
    1ef2:	0f 5f       	subi	r16, 0xFF	; 255
    1ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1ef6:	04 30       	cpi	r16, 0x04	; 4
    1ef8:	11 05       	cpc	r17, r1
    1efa:	69 f7       	brne	.-38     	; 0x1ed6 <keyboard_task+0x44>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    1efc:	8f ef       	ldi	r24, 0xFF	; 255
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	8a 83       	std	Y+2, r24	; 0x02
    1f02:	1b 82       	std	Y+3, r1	; 0x03
    1f04:	0e 94 e7 19 	call	0x33ce	; 0x33ce <timer_read>
    1f08:	81 60       	ori	r24, 0x01	; 1
    1f0a:	78 2f       	mov	r23, r24
    1f0c:	9d 83       	std	Y+5, r25	; 0x05
    1f0e:	8c 83       	std	Y+4, r24	; 0x04
    1f10:	49 81       	ldd	r20, Y+1	; 0x01
    1f12:	5a 81       	ldd	r21, Y+2	; 0x02
    1f14:	6b 81       	ldd	r22, Y+3	; 0x03
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	0e 94 00 10 	call	0x2000	; 0x2000 <action_exec>
    1f1c:	3a c0       	rjmp	.+116    	; 0x1f92 <keyboard_task+0x100>
    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
        matrix_change = matrix_row ^ matrix_prev[r];
        if (matrix_change) {
            if (debug_matrix) matrix_print();
    1f1e:	80 91 b5 01 	lds	r24, 0x01B5
    1f22:	81 fd       	sbrc	r24, 1
    1f24:	0e 94 df 06 	call	0xdbe	; 0xdbe <matrix_print>
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1f2c:	75 01       	movw	r14, r10
    1f2e:	02 2e       	mov	r0, r18
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <keyboard_task+0xa4>
    1f32:	ee 0c       	add	r14, r14
    1f34:	ff 1c       	adc	r15, r15
    1f36:	0a 94       	dec	r0
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <keyboard_task+0xa0>
    1f3a:	c7 01       	movw	r24, r14
    1f3c:	84 21       	and	r24, r4
    1f3e:	95 21       	and	r25, r5
    1f40:	89 2b       	or	r24, r25
    1f42:	09 f1       	breq	.+66     	; 0x1f86 <keyboard_task+0xf4>
                    action_exec((keyevent_t){
    1f44:	2e 83       	std	Y+6, r18	; 0x06
    1f46:	7f 82       	std	Y+7, r7	; 0x07
                        .key = (key_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    1f48:	8e 20       	and	r8, r14
    1f4a:	9f 20       	and	r9, r15
    1f4c:	91 e0       	ldi	r25, 0x01	; 1
    1f4e:	89 28       	or	r8, r9
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <keyboard_task+0xc2>
    1f52:	90 e0       	ldi	r25, 0x00	; 0
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    1f54:	98 87       	std	Y+8, r25	; 0x08
                        .key = (key_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    1f56:	0e 94 e7 19 	call	0x33ce	; 0x33ce <timer_read>
    1f5a:	81 60       	ori	r24, 0x01	; 1
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    1f5c:	78 2f       	mov	r23, r24
    1f5e:	9a 87       	std	Y+10, r25	; 0x0a
    1f60:	89 87       	std	Y+9, r24	; 0x09
    1f62:	4e 81       	ldd	r20, Y+6	; 0x06
    1f64:	5f 81       	ldd	r21, Y+7	; 0x07
    1f66:	68 85       	ldd	r22, Y+8	; 0x08
    1f68:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f6a:	0e 94 00 10 	call	0x2000	; 0x2000 <action_exec>
                        .key = (key_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    1f6e:	00 0f       	add	r16, r16
    1f70:	11 1f       	adc	r17, r17
    1f72:	f8 01       	movw	r30, r16
    1f74:	ef 5a       	subi	r30, 0xAF	; 175
    1f76:	fe 4f       	sbci	r31, 0xFE	; 254
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	e8 26       	eor	r14, r24
    1f7e:	f9 26       	eor	r15, r25
    1f80:	f1 82       	std	Z+1, r15	; 0x01
    1f82:	e0 82       	st	Z, r14
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    1f84:	06 c0       	rjmp	.+12     	; 0x1f92 <keyboard_task+0x100>
    1f86:	2f 5f       	subi	r18, 0xFF	; 255
    1f88:	3f 4f       	sbci	r19, 0xFF	; 255
            if (has_ghost_in_row(r)) {
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    1f8a:	2b 30       	cpi	r18, 0x0B	; 11
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	71 f6       	brne	.-100    	; 0x1f2c <keyboard_task+0x9a>
    1f90:	b0 cf       	rjmp	.-160    	; 0x1ef2 <keyboard_task+0x60>
#ifdef PS2_MOUSE_ENABLE
    ps2_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    1f92:	10 91 50 01 	lds	r17, 0x0150
    1f96:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <host_keyboard_leds>
    1f9a:	18 17       	cp	r17, r24
    1f9c:	d9 f0       	breq	.+54     	; 0x1fd4 <keyboard_task+0x142>
        led_status = host_keyboard_leds();
    1f9e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <host_keyboard_leds>
    1fa2:	80 93 50 01 	sts	0x0150, r24
        keyboard_set_leds(led_status);
    }
}
    1fa6:	2a 96       	adiw	r28, 0x0a	; 10
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	ff 90       	pop	r15
    1fbc:	ef 90       	pop	r14
    1fbe:	df 90       	pop	r13
    1fc0:	cf 90       	pop	r12
    1fc2:	bf 90       	pop	r11
    1fc4:	af 90       	pop	r10
    1fc6:	9f 90       	pop	r9
    1fc8:	8f 90       	pop	r8
    1fca:	7f 90       	pop	r7
    1fcc:	5f 90       	pop	r5
    1fce:	4f 90       	pop	r4
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    1fd0:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <keyboard_set_leds>
    }
}
    1fd4:	2a 96       	adiw	r28, 0x0a	; 10
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	ff 90       	pop	r15
    1fea:	ef 90       	pop	r14
    1fec:	df 90       	pop	r13
    1fee:	cf 90       	pop	r12
    1ff0:	bf 90       	pop	r11
    1ff2:	af 90       	pop	r10
    1ff4:	9f 90       	pop	r9
    1ff6:	8f 90       	pop	r8
    1ff8:	7f 90       	pop	r7
    1ffa:	5f 90       	pop	r5
    1ffc:	4f 90       	pop	r4
    1ffe:	08 95       	ret

00002000 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	2b 97       	sbiw	r28, 0x0b	; 11
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	4f 83       	std	Y+7, r20	; 0x07
    2016:	58 87       	std	Y+8, r21	; 0x08
    2018:	69 87       	std	Y+9, r22	; 0x09
    201a:	7a 87       	std	Y+10, r23	; 0x0a
    201c:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    201e:	de 01       	movw	r26, r28
    2020:	11 96       	adiw	r26, 0x01	; 1
    2022:	86 e0       	ldi	r24, 0x06	; 6
    2024:	fd 01       	movw	r30, r26
    2026:	11 92       	st	Z+, r1
    2028:	8a 95       	dec	r24
    202a:	e9 f7       	brne	.-6      	; 0x2026 <action_exec+0x26>
    202c:	85 e0       	ldi	r24, 0x05	; 5
    202e:	fe 01       	movw	r30, r28
    2030:	37 96       	adiw	r30, 0x07	; 7
    2032:	01 90       	ld	r0, Z+
    2034:	0d 92       	st	X+, r0
    2036:	8a 95       	dec	r24
    2038:	e1 f7       	brne	.-8      	; 0x2032 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    203a:	49 81       	ldd	r20, Y+1	; 0x01
    203c:	5a 81       	ldd	r21, Y+2	; 0x02
    203e:	6b 81       	ldd	r22, Y+3	; 0x03
    2040:	7c 81       	ldd	r23, Y+4	; 0x04
    2042:	8d 81       	ldd	r24, Y+5	; 0x05
    2044:	9e 81       	ldd	r25, Y+6	; 0x06
    2046:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    204a:	2b 96       	adiw	r28, 0x0b	; 11
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	08 95       	ret

0000205c <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    205c:	cf 93       	push	r28
    if (code == KC_NO) {
    205e:	88 23       	and	r24, r24
    2060:	09 f4       	brne	.+2      	; 0x2064 <register_code+0x8>
    2062:	99 c0       	rjmp	.+306    	; 0x2196 <register_code+0x13a>
    2064:	c8 2f       	mov	r28, r24
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2066:	8c ef       	ldi	r24, 0xFC	; 252
    2068:	8c 0f       	add	r24, r28
    206a:	81 3a       	cpi	r24, 0xA1	; 161
    206c:	48 f4       	brcc	.+18     	; 0x2080 <register_code+0x24>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    206e:	8c 2f       	mov	r24, r28
    2070:	0e 94 17 1b 	call	0x362e	; 0x362e <command_proc>
    2074:	81 11       	cpse	r24, r1
    2076:	8f c0       	rjmp	.+286    	; 0x2196 <register_code+0x13a>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2078:	8c 2f       	mov	r24, r28
    207a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <add_key>
    207e:	0c c0       	rjmp	.+24     	; 0x2098 <register_code+0x3c>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2080:	80 e2       	ldi	r24, 0x20	; 32
    2082:	8c 0f       	add	r24, r28
    2084:	88 30       	cpi	r24, 0x08	; 8
    2086:	58 f4       	brcc	.+22     	; 0x209e <register_code+0x42>
        add_mods(MOD_BIT(code));
    2088:	c7 70       	andi	r28, 0x07	; 7
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	01 c0       	rjmp	.+2      	; 0x2090 <register_code+0x34>
    208e:	88 0f       	add	r24, r24
    2090:	ca 95       	dec	r28
    2092:	ea f7       	brpl	.-6      	; 0x208e <register_code+0x32>
    2094:	0e 94 70 19 	call	0x32e0	; 0x32e0 <add_mods>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2098:	cf 91       	pop	r28
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    209a:	0c 94 a7 19 	jmp	0x334e	; 0x334e <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    209e:	8b e5       	ldi	r24, 0x5B	; 91
    20a0:	8c 0f       	add	r24, r28
    20a2:	83 30       	cpi	r24, 0x03	; 3
    20a4:	78 f4       	brcc	.+30     	; 0x20c4 <register_code+0x68>
        host_system_send(KEYCODE2SYSTEM(code));
    20a6:	c5 3a       	cpi	r28, 0xA5	; 165
    20a8:	29 f0       	breq	.+10     	; 0x20b4 <register_code+0x58>
    20aa:	c6 3a       	cpi	r28, 0xA6	; 166
    20ac:	31 f0       	breq	.+12     	; 0x20ba <register_code+0x5e>
    20ae:	83 e8       	ldi	r24, 0x83	; 131
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	05 c0       	rjmp	.+10     	; 0x20be <register_code+0x62>
    20b4:	81 e8       	ldi	r24, 0x81	; 129
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <register_code+0x62>
    20ba:	82 e8       	ldi	r24, 0x82	; 130
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    20be:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    20c0:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    20c4:	88 e5       	ldi	r24, 0x58	; 88
    20c6:	8c 0f       	add	r24, r28
    20c8:	83 31       	cpi	r24, 0x13	; 19
    20ca:	08 f0       	brcs	.+2      	; 0x20ce <register_code+0x72>
    20cc:	64 c0       	rjmp	.+200    	; 0x2196 <register_code+0x13a>
        host_consumer_send(KEYCODE2CONSUMER(code));
    20ce:	c8 3a       	cpi	r28, 0xA8	; 168
    20d0:	39 f1       	breq	.+78     	; 0x2120 <register_code+0xc4>
    20d2:	c9 3a       	cpi	r28, 0xA9	; 169
    20d4:	41 f1       	breq	.+80     	; 0x2126 <register_code+0xca>
    20d6:	ca 3a       	cpi	r28, 0xAA	; 170
    20d8:	49 f1       	breq	.+82     	; 0x212c <register_code+0xd0>
    20da:	cb 3a       	cpi	r28, 0xAB	; 171
    20dc:	51 f1       	breq	.+84     	; 0x2132 <register_code+0xd6>
    20de:	cc 3a       	cpi	r28, 0xAC	; 172
    20e0:	59 f1       	breq	.+86     	; 0x2138 <register_code+0xdc>
    20e2:	cd 3a       	cpi	r28, 0xAD	; 173
    20e4:	61 f1       	breq	.+88     	; 0x213e <register_code+0xe2>
    20e6:	c0 3b       	cpi	r28, 0xB0	; 176
    20e8:	69 f1       	breq	.+90     	; 0x2144 <register_code+0xe8>
    20ea:	ce 3a       	cpi	r28, 0xAE	; 174
    20ec:	71 f1       	breq	.+92     	; 0x214a <register_code+0xee>
    20ee:	cf 3a       	cpi	r28, 0xAF	; 175
    20f0:	79 f1       	breq	.+94     	; 0x2150 <register_code+0xf4>
    20f2:	c1 3b       	cpi	r28, 0xB1	; 177
    20f4:	81 f1       	breq	.+96     	; 0x2156 <register_code+0xfa>
    20f6:	c2 3b       	cpi	r28, 0xB2	; 178
    20f8:	89 f1       	breq	.+98     	; 0x215c <register_code+0x100>
    20fa:	c3 3b       	cpi	r28, 0xB3	; 179
    20fc:	91 f1       	breq	.+100    	; 0x2162 <register_code+0x106>
    20fe:	c4 3b       	cpi	r28, 0xB4	; 180
    2100:	99 f1       	breq	.+102    	; 0x2168 <register_code+0x10c>
    2102:	c5 3b       	cpi	r28, 0xB5	; 181
    2104:	a1 f1       	breq	.+104    	; 0x216e <register_code+0x112>
    2106:	c6 3b       	cpi	r28, 0xB6	; 182
    2108:	a9 f1       	breq	.+106    	; 0x2174 <register_code+0x118>
    210a:	c7 3b       	cpi	r28, 0xB7	; 183
    210c:	b1 f1       	breq	.+108    	; 0x217a <register_code+0x11e>
    210e:	c8 3b       	cpi	r28, 0xB8	; 184
    2110:	b9 f1       	breq	.+110    	; 0x2180 <register_code+0x124>
    2112:	c9 3b       	cpi	r28, 0xB9	; 185
    2114:	c1 f1       	breq	.+112    	; 0x2186 <register_code+0x12a>
    2116:	ca 3b       	cpi	r28, 0xBA	; 186
    2118:	c9 f1       	breq	.+114    	; 0x218c <register_code+0x130>
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	38 c0       	rjmp	.+112    	; 0x2190 <register_code+0x134>
    2120:	82 ee       	ldi	r24, 0xE2	; 226
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	35 c0       	rjmp	.+106    	; 0x2190 <register_code+0x134>
    2126:	89 ee       	ldi	r24, 0xE9	; 233
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	32 c0       	rjmp	.+100    	; 0x2190 <register_code+0x134>
    212c:	8a ee       	ldi	r24, 0xEA	; 234
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	2f c0       	rjmp	.+94     	; 0x2190 <register_code+0x134>
    2132:	85 eb       	ldi	r24, 0xB5	; 181
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	2c c0       	rjmp	.+88     	; 0x2190 <register_code+0x134>
    2138:	86 eb       	ldi	r24, 0xB6	; 182
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	29 c0       	rjmp	.+82     	; 0x2190 <register_code+0x134>
    213e:	87 eb       	ldi	r24, 0xB7	; 183
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	26 c0       	rjmp	.+76     	; 0x2190 <register_code+0x134>
    2144:	8c ec       	ldi	r24, 0xCC	; 204
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	23 c0       	rjmp	.+70     	; 0x2190 <register_code+0x134>
    214a:	8d ec       	ldi	r24, 0xCD	; 205
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	20 c0       	rjmp	.+64     	; 0x2190 <register_code+0x134>
    2150:	83 e8       	ldi	r24, 0x83	; 131
    2152:	91 e0       	ldi	r25, 0x01	; 1
    2154:	1d c0       	rjmp	.+58     	; 0x2190 <register_code+0x134>
    2156:	8a e8       	ldi	r24, 0x8A	; 138
    2158:	91 e0       	ldi	r25, 0x01	; 1
    215a:	1a c0       	rjmp	.+52     	; 0x2190 <register_code+0x134>
    215c:	82 e9       	ldi	r24, 0x92	; 146
    215e:	91 e0       	ldi	r25, 0x01	; 1
    2160:	17 c0       	rjmp	.+46     	; 0x2190 <register_code+0x134>
    2162:	84 e9       	ldi	r24, 0x94	; 148
    2164:	91 e0       	ldi	r25, 0x01	; 1
    2166:	14 c0       	rjmp	.+40     	; 0x2190 <register_code+0x134>
    2168:	81 e2       	ldi	r24, 0x21	; 33
    216a:	92 e0       	ldi	r25, 0x02	; 2
    216c:	11 c0       	rjmp	.+34     	; 0x2190 <register_code+0x134>
    216e:	83 e2       	ldi	r24, 0x23	; 35
    2170:	92 e0       	ldi	r25, 0x02	; 2
    2172:	0e c0       	rjmp	.+28     	; 0x2190 <register_code+0x134>
    2174:	84 e2       	ldi	r24, 0x24	; 36
    2176:	92 e0       	ldi	r25, 0x02	; 2
    2178:	0b c0       	rjmp	.+22     	; 0x2190 <register_code+0x134>
    217a:	85 e2       	ldi	r24, 0x25	; 37
    217c:	92 e0       	ldi	r25, 0x02	; 2
    217e:	08 c0       	rjmp	.+16     	; 0x2190 <register_code+0x134>
    2180:	86 e2       	ldi	r24, 0x26	; 38
    2182:	92 e0       	ldi	r25, 0x02	; 2
    2184:	05 c0       	rjmp	.+10     	; 0x2190 <register_code+0x134>
    2186:	87 e2       	ldi	r24, 0x27	; 39
    2188:	92 e0       	ldi	r25, 0x02	; 2
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <register_code+0x134>
    218c:	8a e2       	ldi	r24, 0x2A	; 42
    218e:	92 e0       	ldi	r25, 0x02	; 2
    }
}
    2190:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2192:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <host_consumer_send>
    }
}
    2196:	cf 91       	pop	r28
    2198:	08 95       	ret

0000219a <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    219a:	88 23       	and	r24, r24
    219c:	29 f1       	breq	.+74     	; 0x21e8 <unregister_code+0x4e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    219e:	9c ef       	ldi	r25, 0xFC	; 252
    21a0:	98 0f       	add	r25, r24
    21a2:	91 3a       	cpi	r25, 0xA1	; 161
    21a4:	18 f4       	brcc	.+6      	; 0x21ac <unregister_code+0x12>
        del_key(code);
    21a6:	0e 94 21 19 	call	0x3242	; 0x3242 <del_key>
    21aa:	0d c0       	rjmp	.+26     	; 0x21c6 <unregister_code+0x2c>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    21ac:	90 e2       	ldi	r25, 0x20	; 32
    21ae:	98 0f       	add	r25, r24
    21b0:	98 30       	cpi	r25, 0x08	; 8
    21b2:	58 f4       	brcc	.+22     	; 0x21ca <unregister_code+0x30>
        del_mods(MOD_BIT(code));
    21b4:	87 70       	andi	r24, 0x07	; 7
    21b6:	91 e0       	ldi	r25, 0x01	; 1
    21b8:	01 c0       	rjmp	.+2      	; 0x21bc <unregister_code+0x22>
    21ba:	99 0f       	add	r25, r25
    21bc:	8a 95       	dec	r24
    21be:	ea f7       	brpl	.-6      	; 0x21ba <unregister_code+0x20>
    21c0:	89 2f       	mov	r24, r25
    21c2:	0e 94 76 19 	call	0x32ec	; 0x32ec <del_mods>
        send_keyboard_report();
    21c6:	0c 94 a7 19 	jmp	0x334e	; 0x334e <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    21ca:	9b e5       	ldi	r25, 0x5B	; 91
    21cc:	98 0f       	add	r25, r24
    21ce:	93 30       	cpi	r25, 0x03	; 3
    21d0:	20 f4       	brcc	.+8      	; 0x21da <unregister_code+0x40>
        host_system_send(0);
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    21da:	88 5a       	subi	r24, 0xA8	; 168
    21dc:	83 31       	cpi	r24, 0x13	; 19
    21de:	20 f4       	brcc	.+8      	; 0x21e8 <unregister_code+0x4e>
        host_consumer_send(0);
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <host_consumer_send>
    21e8:	08 95       	ret

000021ea <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    21ea:	88 23       	and	r24, r24
    21ec:	21 f0       	breq	.+8      	; 0x21f6 <register_mods+0xc>
        add_mods(mods);
    21ee:	0e 94 70 19 	call	0x32e0	; 0x32e0 <add_mods>
        send_keyboard_report();
    21f2:	0c 94 a7 19 	jmp	0x334e	; 0x334e <send_keyboard_report>
    21f6:	08 95       	ret

000021f8 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    21f8:	88 23       	and	r24, r24
    21fa:	21 f0       	breq	.+8      	; 0x2204 <unregister_mods+0xc>
        del_mods(mods);
    21fc:	0e 94 76 19 	call	0x32ec	; 0x32ec <del_mods>
        send_keyboard_report();
    2200:	0c 94 a7 19 	jmp	0x334e	; 0x334e <send_keyboard_report>
    2204:	08 95       	ret

00002206 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2206:	cf 92       	push	r12
    2208:	df 92       	push	r13
    220a:	ef 92       	push	r14
    220c:	ff 92       	push	r15
    220e:	0f 93       	push	r16
    2210:	1f 93       	push	r17
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	00 d0       	rcall	.+0      	; 0x2218 <process_action+0x12>
    2218:	00 d0       	rcall	.+0      	; 0x221a <process_action+0x14>
    221a:	00 d0       	rcall	.+0      	; 0x221c <process_action+0x16>
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    keyevent_t event = record->event;
    2220:	25 e0       	ldi	r18, 0x05	; 5
    2222:	fc 01       	movw	r30, r24
    2224:	de 01       	movw	r26, r28
    2226:	11 96       	adiw	r26, 0x01	; 1
    2228:	01 90       	ld	r0, Z+
    222a:	0d 92       	st	X+, r0
    222c:	2a 95       	dec	r18
    222e:	e1 f7       	brne	.-8      	; 0x2228 <process_action+0x22>
    2230:	fc 01       	movw	r30, r24
    2232:	30 81       	ld	r19, Z
    2234:	21 81       	ldd	r18, Z+1	; 0x01
    2236:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2238:	05 81       	ldd	r16, Z+5	; 0x05
    223a:	02 95       	swap	r16
    223c:	0f 70       	andi	r16, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    223e:	43 81       	ldd	r20, Z+3	; 0x03
    2240:	54 81       	ldd	r21, Z+4	; 0x04
    2242:	45 2b       	or	r20, r21
    2244:	09 f4       	brne	.+2      	; 0x2248 <process_action+0x42>
    2246:	6e c2       	rjmp	.+1244   	; 0x2724 <process_action+0x51e>
    2248:	2f 3f       	cpi	r18, 0xFF	; 255
    224a:	19 f4       	brne	.+6      	; 0x2252 <process_action+0x4c>
#endif

    if (IS_NOEVENT(event)) { return; }
    224c:	3f 3f       	cpi	r19, 0xFF	; 255
    224e:	09 f4       	brne	.+2      	; 0x2252 <process_action+0x4c>
    2250:	69 c2       	rjmp	.+1234   	; 0x2724 <process_action+0x51e>
    2252:	6c 01       	movw	r12, r24

    action_t action = layer_switch_get_action(event.key);
    2254:	39 83       	std	Y+1, r19	; 0x01
    2256:	2a 83       	std	Y+2, r18	; 0x02
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	9a 81       	ldd	r25, Y+2	; 0x02
    225c:	0e 94 94 18 	call	0x3128	; 0x3128 <layer_switch_get_action>
    2260:	18 2f       	mov	r17, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	0e 94 93 18 	call	0x3126	; 0x3126 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2268:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    226c:	2e 81       	ldd	r18, Y+6	; 0x06
    226e:	e2 2f       	mov	r30, r18
    2270:	e2 95       	swap	r30
    2272:	ef 70       	andi	r30, 0x0F	; 15
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	e0 5a       	subi	r30, 0xA0	; 160
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    227e:	82 2f       	mov	r24, r18
    2280:	80 7f       	andi	r24, 0xF0	; 240
    2282:	92 2f       	mov	r25, r18
    2284:	9f 70       	andi	r25, 0x0F	; 15
    2286:	09 2f       	mov	r16, r25
    2288:	88 23       	and	r24, r24
    228a:	11 f0       	breq	.+4      	; 0x2290 <process_action+0x8a>
    228c:	02 95       	swap	r16
    228e:	00 7f       	andi	r16, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    2290:	ff 20       	and	r15, r15
    2292:	49 f0       	breq	.+18     	; 0x22a6 <process_action+0xa0>
                    if (mods) {
    2294:	00 23       	and	r16, r16
    2296:	09 f4       	brne	.+2      	; 0x229a <process_action+0x94>
    2298:	f6 c1       	rjmp	.+1004   	; 0x2686 <process_action+0x480>
                        add_weak_mods(mods);
    229a:	80 2f       	mov	r24, r16
    229c:	0e 94 80 19 	call	0x3300	; 0x3300 <add_weak_mods>
                        send_keyboard_report();
    22a0:	0e 94 a7 19 	call	0x334e	; 0x334e <send_keyboard_report>
    22a4:	f0 c1       	rjmp	.+992    	; 0x2686 <process_action+0x480>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    22a6:	81 2f       	mov	r24, r17
    22a8:	0e 94 cd 10 	call	0x219a	; 0x219a <unregister_code>
                    if (mods) {
    22ac:	00 23       	and	r16, r16
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <process_action+0xac>
    22b0:	39 c2       	rjmp	.+1138   	; 0x2724 <process_action+0x51e>
                        del_weak_mods(mods);
    22b2:	80 2f       	mov	r24, r16
    22b4:	0e 94 86 19 	call	0x330c	; 0x330c <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    22b8:	26 96       	adiw	r28, 0x06	; 6
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	cd bf       	out	0x3d, r28	; 61
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	1f 91       	pop	r17
    22ca:	0f 91       	pop	r16
    22cc:	ff 90       	pop	r15
    22ce:	ef 90       	pop	r14
    22d0:	df 90       	pop	r13
    22d2:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    22d4:	0c 94 a7 19 	jmp	0x334e	; 0x334e <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    22d8:	82 2f       	mov	r24, r18
    22da:	80 7f       	andi	r24, 0xF0	; 240
    22dc:	92 2f       	mov	r25, r18
    22de:	9f 70       	andi	r25, 0x0F	; 15
    22e0:	80 32       	cpi	r24, 0x20	; 32
    22e2:	11 f4       	brne	.+4      	; 0x22e8 <process_action+0xe2>
    22e4:	89 2f       	mov	r24, r25
    22e6:	03 c0       	rjmp	.+6      	; 0x22ee <process_action+0xe8>
    22e8:	89 2f       	mov	r24, r25
    22ea:	82 95       	swap	r24
    22ec:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    22ee:	11 23       	and	r17, r17
    22f0:	19 f0       	breq	.+6      	; 0x22f8 <process_action+0xf2>
    22f2:	11 30       	cpi	r17, 0x01	; 1
    22f4:	09 f1       	breq	.+66     	; 0x2338 <process_action+0x132>
    22f6:	2a c0       	rjmp	.+84     	; 0x234c <process_action+0x146>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    22f8:	ff 20       	and	r15, r15
    22fa:	a1 f0       	breq	.+40     	; 0x2324 <process_action+0x11e>
                            if (tap_count == 0) {
    22fc:	00 23       	and	r16, r16
    22fe:	81 f1       	breq	.+96     	; 0x2360 <process_action+0x15a>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2300:	01 30       	cpi	r16, 0x01	; 1
    2302:	71 f5       	brne	.+92     	; 0x2360 <process_action+0x15a>
            break;
#endif
        default:
            break;
    }
}
    2304:	26 96       	adiw	r28, 0x06	; 6
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	ff 90       	pop	r15
    231a:	ef 90       	pop	r14
    231c:	df 90       	pop	r13
    231e:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2320:	0c 94 90 19 	jmp	0x3320	; 0x3320 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2324:	00 23       	and	r16, r16
    2326:	19 f0       	breq	.+6      	; 0x232e <process_action+0x128>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2328:	01 30       	cpi	r16, 0x01	; 1
    232a:	09 f4       	brne	.+2      	; 0x232e <process_action+0x128>
    232c:	fb c1       	rjmp	.+1014   	; 0x2724 <process_action+0x51e>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    232e:	8e 83       	std	Y+6, r24	; 0x06
    2330:	0e 94 93 19 	call	0x3326	; 0x3326 <clear_oneshot_mods>
                                unregister_mods(mods);
    2334:	8e 81       	ldd	r24, Y+6	; 0x06
    2336:	26 c0       	rjmp	.+76     	; 0x2384 <process_action+0x17e>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2338:	ff 20       	and	r15, r15
    233a:	21 f0       	breq	.+8      	; 0x2344 <process_action+0x13e>
                            if (tap_count <= TAPPING_TOGGLE) {
    233c:	06 30       	cpi	r16, 0x06	; 6
    233e:	08 f0       	brcs	.+2      	; 0x2342 <process_action+0x13c>
    2340:	f1 c1       	rjmp	.+994    	; 0x2724 <process_action+0x51e>
    2342:	0e c0       	rjmp	.+28     	; 0x2360 <process_action+0x15a>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2344:	05 30       	cpi	r16, 0x05	; 5
    2346:	08 f0       	brcs	.+2      	; 0x234a <process_action+0x144>
    2348:	ed c1       	rjmp	.+986    	; 0x2724 <process_action+0x51e>
    234a:	1c c0       	rjmp	.+56     	; 0x2384 <process_action+0x17e>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    234c:	ff 20       	and	r15, r15
    234e:	c1 f0       	breq	.+48     	; 0x2380 <process_action+0x17a>
                            if (tap_count > 0) {
    2350:	00 23       	and	r16, r16
    2352:	31 f0       	breq	.+12     	; 0x2360 <process_action+0x15a>
                                if (record->tap.interrupted) {
    2354:	f6 01       	movw	r30, r12
    2356:	95 81       	ldd	r25, Z+5	; 0x05
    2358:	90 ff       	sbrs	r25, 0
    235a:	95 c1       	rjmp	.+810    	; 0x2686 <process_action+0x480>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    235c:	9f 70       	andi	r25, 0x0F	; 15
    235e:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    2360:	26 96       	adiw	r28, 0x06	; 6
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	cd bf       	out	0x3d, r28	; 61
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	1f 91       	pop	r17
    2372:	0f 91       	pop	r16
    2374:	ff 90       	pop	r15
    2376:	ef 90       	pop	r14
    2378:	df 90       	pop	r13
    237a:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    237c:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2380:	01 11       	cpse	r16, r1
    2382:	95 c1       	rjmp	.+810    	; 0x26ae <process_action+0x4a8>
            break;
#endif
        default:
            break;
    }
}
    2384:	26 96       	adiw	r28, 0x06	; 6
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	ff 90       	pop	r15
    239a:	ef 90       	pop	r14
    239c:	df 90       	pop	r13
    239e:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    23a0:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <unregister_mods>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    23a4:	82 2f       	mov	r24, r18
    23a6:	83 70       	andi	r24, 0x03	; 3
    23a8:	09 f0       	breq	.+2      	; 0x23ac <process_action+0x1a6>
    23aa:	77 c0       	rjmp	.+238    	; 0x249a <process_action+0x294>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    23ac:	f1 10       	cpse	r15, r1
    23ae:	ba c1       	rjmp	.+884    	; 0x2724 <process_action+0x51e>
                    uint8_t shift = action.layer_bitop.part*4;
    23b0:	81 2f       	mov	r24, r17
    23b2:	82 95       	swap	r24
    23b4:	86 95       	lsr	r24
    23b6:	87 70       	andi	r24, 0x07	; 7
    23b8:	88 0f       	add	r24, r24
    23ba:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    23bc:	91 2f       	mov	r25, r17
    23be:	9f 70       	andi	r25, 0x0F	; 15
    23c0:	c9 2e       	mov	r12, r25
    23c2:	d1 2c       	mov	r13, r1
    23c4:	e1 2c       	mov	r14, r1
    23c6:	f1 2c       	mov	r15, r1
    23c8:	08 2e       	mov	r0, r24
    23ca:	04 c0       	rjmp	.+8      	; 0x23d4 <process_action+0x1ce>
    23cc:	cc 0c       	add	r12, r12
    23ce:	dd 1c       	adc	r13, r13
    23d0:	ee 1c       	adc	r14, r14
    23d2:	ff 1c       	adc	r15, r15
    23d4:	0a 94       	dec	r0
    23d6:	d2 f7       	brpl	.-12     	; 0x23cc <process_action+0x1c6>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    23d8:	14 ff       	sbrs	r17, 4
    23da:	12 c0       	rjmp	.+36     	; 0x2400 <process_action+0x1fa>
    23dc:	4f e0       	ldi	r20, 0x0F	; 15
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	60 e0       	ldi	r22, 0x00	; 0
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	04 c0       	rjmp	.+8      	; 0x23ee <process_action+0x1e8>
    23e6:	44 0f       	add	r20, r20
    23e8:	55 1f       	adc	r21, r21
    23ea:	66 1f       	adc	r22, r22
    23ec:	77 1f       	adc	r23, r23
    23ee:	8a 95       	dec	r24
    23f0:	d2 f7       	brpl	.-12     	; 0x23e6 <process_action+0x1e0>
    23f2:	cb 01       	movw	r24, r22
    23f4:	ba 01       	movw	r22, r20
    23f6:	60 95       	com	r22
    23f8:	70 95       	com	r23
    23fa:	80 95       	com	r24
    23fc:	90 95       	com	r25
    23fe:	03 c0       	rjmp	.+6      	; 0x2406 <process_action+0x200>
    2400:	60 e0       	ldi	r22, 0x00	; 0
    2402:	70 e0       	ldi	r23, 0x00	; 0
    2404:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2406:	26 95       	lsr	r18
    2408:	26 95       	lsr	r18
    240a:	23 70       	andi	r18, 0x03	; 3
    240c:	42 2f       	mov	r20, r18
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	42 30       	cpi	r20, 0x02	; 2
    2412:	51 05       	cpc	r21, r1
    2414:	d1 f0       	breq	.+52     	; 0x244a <process_action+0x244>
    2416:	43 30       	cpi	r20, 0x03	; 3
    2418:	51 05       	cpc	r21, r1
    241a:	59 f1       	breq	.+86     	; 0x2472 <process_action+0x26c>
    241c:	6c 29       	or	r22, r12
    241e:	7d 29       	or	r23, r13
    2420:	8e 29       	or	r24, r14
    2422:	9f 29       	or	r25, r15
    2424:	41 30       	cpi	r20, 0x01	; 1
    2426:	51 05       	cpc	r21, r1
    2428:	41 f1       	breq	.+80     	; 0x247a <process_action+0x274>
            break;
#endif
        default:
            break;
    }
}
    242a:	26 96       	adiw	r28, 0x06	; 6
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	ff 90       	pop	r15
    2440:	ef 90       	pop	r14
    2442:	df 90       	pop	r13
    2444:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2446:	0c 94 81 17 	jmp	0x2f02	; 0x2f02 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    244a:	6c 29       	or	r22, r12
    244c:	7d 29       	or	r23, r13
    244e:	8e 29       	or	r24, r14
    2450:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2452:	26 96       	adiw	r28, 0x06	; 6
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	1f 91       	pop	r17
    2464:	0f 91       	pop	r16
    2466:	ff 90       	pop	r15
    2468:	ef 90       	pop	r14
    246a:	df 90       	pop	r13
    246c:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    246e:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2472:	0e 94 81 17 	call	0x2f02	; 0x2f02 <default_layer_and>
    2476:	c7 01       	movw	r24, r14
    2478:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    247a:	26 96       	adiw	r28, 0x06	; 6
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	1f 91       	pop	r17
    248c:	0f 91       	pop	r16
    248e:	ff 90       	pop	r15
    2490:	ef 90       	pop	r14
    2492:	df 90       	pop	r13
    2494:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2496:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    249a:	ff 20       	and	r15, r15
    249c:	19 f0       	breq	.+6      	; 0x24a4 <process_action+0x29e>
    249e:	82 2f       	mov	r24, r18
    24a0:	81 70       	andi	r24, 0x01	; 1
    24a2:	01 c0       	rjmp	.+2      	; 0x24a6 <process_action+0x2a0>
    24a4:	86 95       	lsr	r24
    24a6:	88 23       	and	r24, r24
    24a8:	09 f4       	brne	.+2      	; 0x24ac <process_action+0x2a6>
    24aa:	3c c1       	rjmp	.+632    	; 0x2724 <process_action+0x51e>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    24ac:	81 2f       	mov	r24, r17
    24ae:	82 95       	swap	r24
    24b0:	86 95       	lsr	r24
    24b2:	87 70       	andi	r24, 0x07	; 7
    24b4:	88 0f       	add	r24, r24
    24b6:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    24b8:	91 2f       	mov	r25, r17
    24ba:	9f 70       	andi	r25, 0x0F	; 15
    24bc:	c9 2e       	mov	r12, r25
    24be:	d1 2c       	mov	r13, r1
    24c0:	e1 2c       	mov	r14, r1
    24c2:	f1 2c       	mov	r15, r1
    24c4:	08 2e       	mov	r0, r24
    24c6:	04 c0       	rjmp	.+8      	; 0x24d0 <process_action+0x2ca>
    24c8:	cc 0c       	add	r12, r12
    24ca:	dd 1c       	adc	r13, r13
    24cc:	ee 1c       	adc	r14, r14
    24ce:	ff 1c       	adc	r15, r15
    24d0:	0a 94       	dec	r0
    24d2:	d2 f7       	brpl	.-12     	; 0x24c8 <process_action+0x2c2>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    24d4:	14 ff       	sbrs	r17, 4
    24d6:	12 c0       	rjmp	.+36     	; 0x24fc <process_action+0x2f6>
    24d8:	4f e0       	ldi	r20, 0x0F	; 15
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	04 c0       	rjmp	.+8      	; 0x24ea <process_action+0x2e4>
    24e2:	44 0f       	add	r20, r20
    24e4:	55 1f       	adc	r21, r21
    24e6:	66 1f       	adc	r22, r22
    24e8:	77 1f       	adc	r23, r23
    24ea:	8a 95       	dec	r24
    24ec:	d2 f7       	brpl	.-12     	; 0x24e2 <process_action+0x2dc>
    24ee:	cb 01       	movw	r24, r22
    24f0:	ba 01       	movw	r22, r20
    24f2:	60 95       	com	r22
    24f4:	70 95       	com	r23
    24f6:	80 95       	com	r24
    24f8:	90 95       	com	r25
    24fa:	03 c0       	rjmp	.+6      	; 0x2502 <process_action+0x2fc>
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	70 e0       	ldi	r23, 0x00	; 0
    2500:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2502:	26 95       	lsr	r18
    2504:	26 95       	lsr	r18
    2506:	23 70       	andi	r18, 0x03	; 3
    2508:	42 2f       	mov	r20, r18
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	42 30       	cpi	r20, 0x02	; 2
    250e:	51 05       	cpc	r21, r1
    2510:	d1 f0       	breq	.+52     	; 0x2546 <process_action+0x340>
    2512:	43 30       	cpi	r20, 0x03	; 3
    2514:	51 05       	cpc	r21, r1
    2516:	59 f1       	breq	.+86     	; 0x256e <process_action+0x368>
    2518:	6c 29       	or	r22, r12
    251a:	7d 29       	or	r23, r13
    251c:	8e 29       	or	r24, r14
    251e:	9f 29       	or	r25, r15
    2520:	41 30       	cpi	r20, 0x01	; 1
    2522:	51 05       	cpc	r21, r1
    2524:	41 f1       	breq	.+80     	; 0x2576 <process_action+0x370>
            break;
#endif
        default:
            break;
    }
}
    2526:	26 96       	adiw	r28, 0x06	; 6
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	df 91       	pop	r29
    2534:	cf 91       	pop	r28
    2536:	1f 91       	pop	r17
    2538:	0f 91       	pop	r16
    253a:	ff 90       	pop	r15
    253c:	ef 90       	pop	r14
    253e:	df 90       	pop	r13
    2540:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2542:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2546:	6c 29       	or	r22, r12
    2548:	7d 29       	or	r23, r13
    254a:	8e 29       	or	r24, r14
    254c:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    254e:	26 96       	adiw	r28, 0x06	; 6
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	ff 90       	pop	r15
    2564:	ef 90       	pop	r14
    2566:	df 90       	pop	r13
    2568:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    256a:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    256e:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <layer_and>
    2572:	c7 01       	movw	r24, r14
    2574:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2576:	26 96       	adiw	r28, 0x06	; 6
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	df 91       	pop	r29
    2584:	cf 91       	pop	r28
    2586:	1f 91       	pop	r17
    2588:	0f 91       	pop	r16
    258a:	ff 90       	pop	r15
    258c:	ef 90       	pop	r14
    258e:	df 90       	pop	r13
    2590:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2592:	0c 94 3f 18 	jmp	0x307e	; 0x307e <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2596:	11 3f       	cpi	r17, 0xF1	; 241
    2598:	29 f1       	breq	.+74     	; 0x25e4 <process_action+0x3de>
    259a:	18 f4       	brcc	.+6      	; 0x25a2 <process_action+0x39c>
    259c:	10 3f       	cpi	r17, 0xF0	; 240
    259e:	39 f0       	breq	.+14     	; 0x25ae <process_action+0x3a8>
    25a0:	6d c0       	rjmp	.+218    	; 0x267c <process_action+0x476>
    25a2:	12 3f       	cpi	r17, 0xF2	; 242
    25a4:	99 f1       	breq	.+102    	; 0x260c <process_action+0x406>
    25a6:	13 3f       	cpi	r17, 0xF3	; 243
    25a8:	09 f4       	brne	.+2      	; 0x25ac <process_action+0x3a6>
    25aa:	44 c0       	rjmp	.+136    	; 0x2634 <process_action+0x42e>
    25ac:	67 c0       	rjmp	.+206    	; 0x267c <process_action+0x476>
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    25ae:	ff 20       	and	r15, r15
    25b0:	a9 f0       	breq	.+42     	; 0x25dc <process_action+0x3d6>
                        if (tap_count < TAPPING_TOGGLE) {
    25b2:	05 30       	cpi	r16, 0x05	; 5
    25b4:	08 f0       	brcs	.+2      	; 0x25b8 <process_action+0x3b2>
    25b6:	b6 c0       	rjmp	.+364    	; 0x2724 <process_action+0x51e>
                            layer_invert(action.layer_tap.val);
    25b8:	82 2f       	mov	r24, r18
    25ba:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    25bc:	26 96       	adiw	r28, 0x06	; 6
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	de bf       	out	0x3e, r29	; 62
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	cd bf       	out	0x3d, r28	; 61
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ff 90       	pop	r15
    25d2:	ef 90       	pop	r14
    25d4:	df 90       	pop	r13
    25d6:	cf 90       	pop	r12
            switch (action.layer_tap.code) {
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    25d8:	0c 94 1e 18 	jmp	0x303c	; 0x303c <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    25dc:	06 30       	cpi	r16, 0x06	; 6
    25de:	08 f0       	brcs	.+2      	; 0x25e2 <process_action+0x3dc>
    25e0:	a1 c0       	rjmp	.+322    	; 0x2724 <process_action+0x51e>
    25e2:	ea cf       	rjmp	.-44     	; 0x25b8 <process_action+0x3b2>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    25e4:	ff 20       	and	r15, r15
    25e6:	a1 f0       	breq	.+40     	; 0x2610 <process_action+0x40a>
    25e8:	82 2f       	mov	r24, r18
    25ea:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    25ec:	26 96       	adiw	r28, 0x06	; 6
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	de bf       	out	0x3e, r29	; 62
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	cd bf       	out	0x3d, r28	; 61
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	1f 91       	pop	r17
    25fe:	0f 91       	pop	r16
    2600:	ff 90       	pop	r15
    2602:	ef 90       	pop	r14
    2604:	df 90       	pop	r13
    2606:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2608:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    260c:	ff 20       	and	r15, r15
    260e:	61 f3       	breq	.-40     	; 0x25e8 <process_action+0x3e2>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2610:	82 2f       	mov	r24, r18
    2612:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2614:	26 96       	adiw	r28, 0x06	; 6
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	1f 91       	pop	r17
    2626:	0f 91       	pop	r16
    2628:	ff 90       	pop	r15
    262a:	ef 90       	pop	r14
    262c:	df 90       	pop	r13
    262e:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2630:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2634:	ff 20       	and	r15, r15
    2636:	91 f0       	breq	.+36     	; 0x265c <process_action+0x456>
    2638:	82 2f       	mov	r24, r18
    263a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    263c:	26 96       	adiw	r28, 0x06	; 6
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	ff 90       	pop	r15
    2652:	ef 90       	pop	r14
    2654:	df 90       	pop	r13
    2656:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2658:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    265c:	26 96       	adiw	r28, 0x06	; 6
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	f8 94       	cli
    2662:	de bf       	out	0x3e, r29	; 62
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	cd bf       	out	0x3d, r28	; 61
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	ff 90       	pop	r15
    2672:	ef 90       	pop	r14
    2674:	df 90       	pop	r13
    2676:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2678:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    267c:	ff 20       	and	r15, r15
    267e:	a1 f0       	breq	.+40     	; 0x26a8 <process_action+0x4a2>
                        if (tap_count > 0) {
    2680:	00 23       	and	r16, r16
    2682:	09 f4       	brne	.+2      	; 0x2686 <process_action+0x480>
    2684:	b1 cf       	rjmp	.-158    	; 0x25e8 <process_action+0x3e2>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2686:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2688:	26 96       	adiw	r28, 0x06	; 6
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    269c:	ff 90       	pop	r15
    269e:	ef 90       	pop	r14
    26a0:	df 90       	pop	r13
    26a2:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    26a4:	0c 94 2e 10 	jmp	0x205c	; 0x205c <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    26a8:	00 23       	and	r16, r16
    26aa:	09 f4       	brne	.+2      	; 0x26ae <process_action+0x4a8>
    26ac:	b1 cf       	rjmp	.-158    	; 0x2610 <process_action+0x40a>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    26ae:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    26b0:	26 96       	adiw	r28, 0x06	; 6
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	ff 90       	pop	r15
    26c6:	ef 90       	pop	r14
    26c8:	df 90       	pop	r13
    26ca:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    26cc:	0c 94 cd 10 	jmp	0x219a	; 0x219a <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    26d0:	42 2f       	mov	r20, r18
    26d2:	4f 70       	andi	r20, 0x0F	; 15
    26d4:	61 2f       	mov	r22, r17
    26d6:	c6 01       	movw	r24, r12
    26d8:	0e 94 db 19 	call	0x33b6	; 0x33b6 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    26dc:	26 96       	adiw	r28, 0x06	; 6
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	1f 91       	pop	r17
    26ee:	0f 91       	pop	r16
    26f0:	ff 90       	pop	r15
    26f2:	ef 90       	pop	r14
    26f4:	df 90       	pop	r13
    26f6:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    26f8:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    26fc:	42 2f       	mov	r20, r18
    26fe:	4f 70       	andi	r20, 0x0F	; 15
    2700:	61 2f       	mov	r22, r17
    2702:	c6 01       	movw	r24, r12
            break;
#endif
        default:
            break;
    }
}
    2704:	26 96       	adiw	r28, 0x06	; 6
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	ff 90       	pop	r15
    271a:	ef 90       	pop	r14
    271c:	df 90       	pop	r13
    271e:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2720:	0c 94 5f 05 	jmp	0xabe	; 0xabe <action_function>
            break;
#endif
        default:
            break;
    }
}
    2724:	26 96       	adiw	r28, 0x06	; 6
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	1f 91       	pop	r17
    2736:	0f 91       	pop	r16
    2738:	ff 90       	pop	r15
    273a:	ef 90       	pop	r14
    273c:	df 90       	pop	r13
    273e:	cf 90       	pop	r12
    2740:	08 95       	ret

00002742 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2742:	0e 94 8d 19 	call	0x331a	; 0x331a <clear_weak_mods>
    clear_keys();
    2746:	0e 94 62 19 	call	0x32c4	; 0x32c4 <clear_keys>
    send_keyboard_report();
    274a:	0c 94 a7 19 	jmp	0x334e	; 0x334e <send_keyboard_report>

0000274e <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    274e:	0e 94 7d 19 	call	0x32fa	; 0x32fa <clear_mods>
    clear_keyboard_but_mods();
    2752:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <clear_keyboard_but_mods>

00002756 <is_tap_key>:
#endif
}

bool is_tap_key(key_t key)
{
    action_t action = layer_switch_get_action(key);
    2756:	0e 94 94 18 	call	0x3128	; 0x3128 <layer_switch_get_action>

    switch (action.kind.id) {
    275a:	29 2f       	mov	r18, r25
    275c:	22 95       	swap	r18
    275e:	2f 70       	andi	r18, 0x0F	; 15
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	2c 30       	cpi	r18, 0x0C	; 12
    2764:	31 05       	cpc	r19, r1
    2766:	4c f4       	brge	.+18     	; 0x277a <is_tap_key+0x24>
    2768:	2a 30       	cpi	r18, 0x0A	; 10
    276a:	31 05       	cpc	r19, r1
    276c:	94 f4       	brge	.+36     	; 0x2792 <is_tap_key+0x3c>
    276e:	22 50       	subi	r18, 0x02	; 2
    2770:	31 09       	sbc	r19, r1
    2772:	22 30       	cpi	r18, 0x02	; 2
    2774:	31 05       	cpc	r19, r1
    2776:	38 f4       	brcc	.+14     	; 0x2786 <is_tap_key+0x30>
    2778:	0c c0       	rjmp	.+24     	; 0x2792 <is_tap_key+0x3c>
    277a:	2c 30       	cpi	r18, 0x0C	; 12
    277c:	31 05       	cpc	r19, r1
    277e:	29 f0       	breq	.+10     	; 0x278a <is_tap_key+0x34>
    2780:	2f 30       	cpi	r18, 0x0F	; 15
    2782:	31 05       	cpc	r19, r1
    2784:	11 f0       	breq	.+4      	; 0x278a <is_tap_key+0x34>
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	08 95       	ret
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            return true;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    278a:	93 fb       	bst	r25, 3
    278c:	88 27       	eor	r24, r24
    278e:	80 f9       	bld	r24, 0
    2790:	08 95       	ret
    switch (action.kind.id) {
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            return true;
    2792:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2794:	08 95       	ret

00002796 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	00 d0       	rcall	.+0      	; 0x279c <debug_event+0x6>
    279c:	00 d0       	rcall	.+0      	; 0x279e <debug_event+0x8>
    279e:	1f 92       	push	r1
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	08 95       	ret

000027b4 <debug_record>:

void debug_record(keyrecord_t record)
{
    27b4:	cf 93       	push	r28
    27b6:	df 93       	push	r29
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <debug_record+0x6>
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <debug_record+0x8>
    27bc:	00 d0       	rcall	.+0      	; 0x27be <debug_record+0xa>
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    27c2:	26 96       	adiw	r28, 0x06	; 6
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	08 95       	ret

000027d4 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    27da:	c0 91 59 01 	lds	r28, 0x0159
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    27de:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    27e0:	80 91 5a 01 	lds	r24, 0x015A
    27e4:	c8 17       	cp	r28, r24
    27e6:	99 f0       	breq	.+38     	; 0x280e <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    27e8:	d0 e0       	ldi	r29, 0x00	; 0
    27ea:	1c 9f       	mul	r17, r28
    27ec:	f0 01       	movw	r30, r0
    27ee:	1d 9f       	mul	r17, r29
    27f0:	f0 0d       	add	r31, r0
    27f2:	11 24       	eor	r1, r1
    27f4:	e5 5a       	subi	r30, 0xA5	; 165
    27f6:	fe 4f       	sbci	r31, 0xFE	; 254
    27f8:	40 81       	ld	r20, Z
    27fa:	51 81       	ldd	r21, Z+1	; 0x01
    27fc:	62 81       	ldd	r22, Z+2	; 0x02
    27fe:	73 81       	ldd	r23, Z+3	; 0x03
    2800:	84 81       	ldd	r24, Z+4	; 0x04
    2802:	95 81       	ldd	r25, Z+5	; 0x05
    2804:	0e 94 da 13 	call	0x27b4	; 0x27b4 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2808:	21 96       	adiw	r28, 0x01	; 1
    280a:	c7 70       	andi	r28, 0x07	; 7
    280c:	e9 cf       	rjmp	.-46     	; 0x27e0 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	08 95       	ret

00002816 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2816:	40 91 8b 01 	lds	r20, 0x018B
    281a:	50 91 8c 01 	lds	r21, 0x018C
    281e:	60 91 8d 01 	lds	r22, 0x018D
    2822:	70 91 8e 01 	lds	r23, 0x018E
    2826:	80 91 8f 01 	lds	r24, 0x018F
    282a:	90 91 90 01 	lds	r25, 0x0190
    282e:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <debug_record>

00002832 <waiting_buffer_scan_tap>:

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2832:	80 91 90 01 	lds	r24, 0x0190
    2836:	82 95       	swap	r24
    2838:	8f 70       	andi	r24, 0x0F	; 15
    283a:	09 f0       	breq	.+2      	; 0x283e <waiting_buffer_scan_tap+0xc>
    283c:	54 c0       	rjmp	.+168    	; 0x28e6 <waiting_buffer_scan_tap+0xb4>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    283e:	80 91 8d 01 	lds	r24, 0x018D
    2842:	88 23       	and	r24, r24
    2844:	09 f4       	brne	.+2      	; 0x2848 <waiting_buffer_scan_tap+0x16>
    2846:	4f c0       	rjmp	.+158    	; 0x28e6 <waiting_buffer_scan_tap+0xb4>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2848:	80 91 59 01 	lds	r24, 0x0159
    284c:	a0 91 5a 01 	lds	r26, 0x015A
    2850:	60 91 8b 01 	lds	r22, 0x018B
    2854:	70 91 8c 01 	lds	r23, 0x018C
    2858:	40 91 8e 01 	lds	r20, 0x018E
    285c:	50 91 8f 01 	lds	r21, 0x018F
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2860:	b6 e0       	ldi	r27, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2862:	8a 17       	cp	r24, r26
    2864:	09 f4       	brne	.+2      	; 0x2868 <waiting_buffer_scan_tap+0x36>
    2866:	3f c0       	rjmp	.+126    	; 0x28e6 <waiting_buffer_scan_tap+0xb4>
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	41 15       	cp	r20, r1
    286c:	51 05       	cpc	r21, r1
    286e:	c1 f1       	breq	.+112    	; 0x28e0 <waiting_buffer_scan_tap+0xae>
    2870:	7f 3f       	cpi	r23, 0xFF	; 255
    2872:	11 f4       	brne	.+4      	; 0x2878 <waiting_buffer_scan_tap+0x46>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2874:	6f 3f       	cpi	r22, 0xFF	; 255
    2876:	a1 f1       	breq	.+104    	; 0x28e0 <waiting_buffer_scan_tap+0xae>
    2878:	b8 9f       	mul	r27, r24
    287a:	f0 01       	movw	r30, r0
    287c:	b9 9f       	mul	r27, r25
    287e:	f0 0d       	add	r31, r0
    2880:	11 24       	eor	r1, r1
    2882:	e5 5a       	subi	r30, 0xA5	; 165
    2884:	fe 4f       	sbci	r31, 0xFE	; 254
    2886:	21 81       	ldd	r18, Z+1	; 0x01
    2888:	72 13       	cpse	r23, r18
    288a:	2a c0       	rjmp	.+84     	; 0x28e0 <waiting_buffer_scan_tap+0xae>
    288c:	20 81       	ld	r18, Z
    288e:	62 13       	cpse	r22, r18
    2890:	27 c0       	rjmp	.+78     	; 0x28e0 <waiting_buffer_scan_tap+0xae>
    2892:	22 81       	ldd	r18, Z+2	; 0x02
    2894:	21 11       	cpse	r18, r1
    2896:	24 c0       	rjmp	.+72     	; 0x28e0 <waiting_buffer_scan_tap+0xae>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2898:	23 81       	ldd	r18, Z+3	; 0x03
    289a:	34 81       	ldd	r19, Z+4	; 0x04
    289c:	24 17       	cp	r18, r20
    289e:	35 07       	cpc	r19, r21
    28a0:	10 f4       	brcc	.+4      	; 0x28a6 <waiting_buffer_scan_tap+0x74>
    28a2:	21 50       	subi	r18, 0x01	; 1
    28a4:	31 09       	sbc	r19, r1
    28a6:	24 1b       	sub	r18, r20
    28a8:	35 0b       	sbc	r19, r21
    28aa:	28 3c       	cpi	r18, 0xC8	; 200
    28ac:	31 05       	cpc	r19, r1
    28ae:	c0 f4       	brcc	.+48     	; 0x28e0 <waiting_buffer_scan_tap+0xae>
            tapping_key.tap.count = 1;
    28b0:	20 91 90 01 	lds	r18, 0x0190
    28b4:	2f 70       	andi	r18, 0x0F	; 15
    28b6:	20 61       	ori	r18, 0x10	; 16
    28b8:	20 93 90 01 	sts	0x0190, r18
            waiting_buffer[i].tap.count = 1;
    28bc:	26 e0       	ldi	r18, 0x06	; 6
    28be:	28 9f       	mul	r18, r24
    28c0:	f0 01       	movw	r30, r0
    28c2:	29 9f       	mul	r18, r25
    28c4:	f0 0d       	add	r31, r0
    28c6:	11 24       	eor	r1, r1
    28c8:	e0 5a       	subi	r30, 0xA0	; 160
    28ca:	fe 4f       	sbci	r31, 0xFE	; 254
    28cc:	80 81       	ld	r24, Z
    28ce:	8f 70       	andi	r24, 0x0F	; 15
    28d0:	80 61       	ori	r24, 0x10	; 16
    28d2:	80 83       	st	Z, r24
            process_action(&tapping_key);
    28d4:	8b e8       	ldi	r24, 0x8B	; 139
    28d6:	91 e0       	ldi	r25, 0x01	; 1
    28d8:	0e 94 03 11 	call	0x2206	; 0x2206 <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    28dc:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    28e0:	01 96       	adiw	r24, 0x01	; 1
    28e2:	87 70       	andi	r24, 0x07	; 7
    28e4:	be cf       	rjmp	.-132    	; 0x2862 <waiting_buffer_scan_tap+0x30>
    28e6:	08 95       	ret

000028e8 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    28e8:	cf 92       	push	r12
    28ea:	df 92       	push	r13
    28ec:	ef 92       	push	r14
    28ee:	ff 92       	push	r15
    28f0:	0f 93       	push	r16
    28f2:	1f 93       	push	r17
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
    28fc:	62 97       	sbiw	r28, 0x12	; 18
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	de bf       	out	0x3e, r29	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	cd bf       	out	0x3d, r28	; 61
    2908:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    290a:	85 e0       	ldi	r24, 0x05	; 5
    290c:	f8 01       	movw	r30, r16
    290e:	de 01       	movw	r26, r28
    2910:	1d 96       	adiw	r26, 0x0d	; 13
    2912:	01 90       	ld	r0, Z+
    2914:	0d 92       	st	X+, r0
    2916:	8a 95       	dec	r24
    2918:	e1 f7       	brne	.-8      	; 0x2912 <process_tapping+0x2a>
    291a:	d8 01       	movw	r26, r16
    291c:	4c 91       	ld	r20, X
    291e:	11 96       	adiw	r26, 0x01	; 1
    2920:	5c 91       	ld	r21, X
    2922:	11 97       	sbiw	r26, 0x01	; 1
    2924:	12 96       	adiw	r26, 0x02	; 2
    2926:	6c 91       	ld	r22, X
    2928:	12 97       	sbiw	r26, 0x02	; 2
    292a:	13 96       	adiw	r26, 0x03	; 3
    292c:	cd 90       	ld	r12, X+
    292e:	dc 90       	ld	r13, X
    2930:	14 97       	sbiw	r26, 0x04	; 4
    2932:	30 91 8b 01 	lds	r19, 0x018B
    2936:	70 91 8c 01 	lds	r23, 0x018C
    293a:	80 91 8e 01 	lds	r24, 0x018E
    293e:	90 91 8f 01 	lds	r25, 0x018F
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	09 f4       	brne	.+2      	; 0x2948 <process_tapping+0x60>
    2946:	6b c1       	rjmp	.+726    	; 0x2c1e <process_tapping+0x336>
    2948:	7f 3f       	cpi	r23, 0xFF	; 255
    294a:	19 f4       	brne	.+6      	; 0x2952 <process_tapping+0x6a>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    294c:	3f 3f       	cpi	r19, 0xFF	; 255
    294e:	09 f4       	brne	.+2      	; 0x2952 <process_tapping+0x6a>
    2950:	66 c1       	rjmp	.+716    	; 0x2c1e <process_tapping+0x336>
    2952:	e0 90 8d 01 	lds	r14, 0x018D
    2956:	ee 20       	and	r14, r14
    2958:	09 f4       	brne	.+2      	; 0x295c <process_tapping+0x74>
    295a:	c0 c0       	rjmp	.+384    	; 0x2adc <process_tapping+0x1f4>
    295c:	20 91 90 01 	lds	r18, 0x0190
        if (WITHIN_TAPPING_TERM(event)) {
    2960:	c8 16       	cp	r12, r24
    2962:	d9 06       	cpc	r13, r25
    2964:	28 f0       	brcs	.+10     	; 0x2970 <process_tapping+0x88>
    2966:	f6 01       	movw	r30, r12
    2968:	e8 1b       	sub	r30, r24
    296a:	f9 0b       	sbc	r31, r25
    296c:	cf 01       	movw	r24, r30
    296e:	04 c0       	rjmp	.+8      	; 0x2978 <process_tapping+0x90>
    2970:	80 95       	com	r24
    2972:	90 95       	com	r25
    2974:	8c 0d       	add	r24, r12
    2976:	9d 1d       	adc	r25, r13
    2978:	ff 24       	eor	r15, r15
    297a:	f3 94       	inc	r15
    297c:	88 3c       	cpi	r24, 0xC8	; 200
    297e:	91 05       	cpc	r25, r1
    2980:	78 f0       	brcs	.+30     	; 0x29a0 <process_tapping+0xb8>
    2982:	f1 2c       	mov	r15, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2984:	20 7f       	andi	r18, 0xF0	; 240
    2986:	09 f0       	breq	.+2      	; 0x298a <process_tapping+0xa2>
    2988:	c6 c0       	rjmp	.+396    	; 0x2b16 <process_tapping+0x22e>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    298a:	7c 2d       	mov	r23, r12
    298c:	d9 8a       	std	Y+17, r13	; 0x11
    298e:	c8 8a       	std	Y+16, r12	; 0x10
    2990:	89 89       	ldd	r24, Y+17	; 0x11
    2992:	0e 94 cb 13 	call	0x2796	; 0x2796 <debug_event>
                process_action(&tapping_key);
    2996:	8b e8       	ldi	r24, 0x8B	; 139
    2998:	91 e0       	ldi	r25, 0x01	; 1
    299a:	0e 94 03 11 	call	0x2206	; 0x2206 <process_action>
    299e:	b1 c0       	rjmp	.+354    	; 0x2b02 <process_tapping+0x21a>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    29a0:	82 2f       	mov	r24, r18
    29a2:	80 7f       	andi	r24, 0xF0	; 240
    29a4:	09 f0       	breq	.+2      	; 0x29a8 <process_tapping+0xc0>
    29a6:	46 c0       	rjmp	.+140    	; 0x2a34 <process_tapping+0x14c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    29a8:	75 13       	cpse	r23, r21
    29aa:	14 c0       	rjmp	.+40     	; 0x29d4 <process_tapping+0xec>
    29ac:	34 13       	cpse	r19, r20
    29ae:	12 c0       	rjmp	.+36     	; 0x29d4 <process_tapping+0xec>
    29b0:	61 11       	cpse	r22, r1
    29b2:	10 c0       	rjmp	.+32     	; 0x29d4 <process_tapping+0xec>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    29b4:	2f 70       	andi	r18, 0x0F	; 15
    29b6:	20 61       	ori	r18, 0x10	; 16
    29b8:	20 93 90 01 	sts	0x0190, r18
                    debug_tapping_key();
    29bc:	0e 94 0b 14 	call	0x2816	; 0x2816 <debug_tapping_key>
                    process_action(&tapping_key);
    29c0:	8b e8       	ldi	r24, 0x8B	; 139
    29c2:	91 e0       	ldi	r25, 0x01	; 1
    29c4:	0e 94 03 11 	call	0x2206	; 0x2206 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    29c8:	80 91 90 01 	lds	r24, 0x0190
    29cc:	d8 01       	movw	r26, r16
    29ce:	15 96       	adiw	r26, 0x05	; 5
    29d0:	8c 93       	st	X, r24
    29d2:	2e c0       	rjmp	.+92     	; 0x2a30 <process_tapping+0x148>
    29d4:	cd 28       	or	r12, r13
    29d6:	19 f1       	breq	.+70     	; 0x2a1e <process_tapping+0x136>
    29d8:	5f 3f       	cpi	r21, 0xFF	; 255
    29da:	11 f4       	brne	.+4      	; 0x29e0 <process_tapping+0xf8>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    29dc:	4f 3f       	cpi	r20, 0xFF	; 255
    29de:	f9 f0       	breq	.+62     	; 0x2a1e <process_tapping+0x136>
    29e0:	f6 2e       	mov	r15, r22
    29e2:	61 11       	cpse	r22, r1
    29e4:	1c c0       	rjmp	.+56     	; 0x2a1e <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    29e6:	80 91 59 01 	lds	r24, 0x0159
    29ea:	20 91 5a 01 	lds	r18, 0x015A
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    29ee:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    29f0:	82 17       	cp	r24, r18
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <process_tapping+0x10e>
    29f4:	5a c0       	rjmp	.+180    	; 0x2aaa <process_tapping+0x1c2>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	38 9f       	mul	r19, r24
    29fa:	f0 01       	movw	r30, r0
    29fc:	39 9f       	mul	r19, r25
    29fe:	f0 0d       	add	r31, r0
    2a00:	11 24       	eor	r1, r1
    2a02:	e5 5a       	subi	r30, 0xA5	; 165
    2a04:	fe 4f       	sbci	r31, 0xFE	; 254
    2a06:	71 81       	ldd	r23, Z+1	; 0x01
    2a08:	57 13       	cpse	r21, r23
    2a0a:	06 c0       	rjmp	.+12     	; 0x2a18 <process_tapping+0x130>
    2a0c:	70 81       	ld	r23, Z
    2a0e:	47 13       	cpse	r20, r23
    2a10:	03 c0       	rjmp	.+6      	; 0x2a18 <process_tapping+0x130>
    2a12:	72 81       	ldd	r23, Z+2	; 0x02
    2a14:	71 11       	cpse	r23, r1
    2a16:	03 c0       	rjmp	.+6      	; 0x2a1e <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a18:	01 96       	adiw	r24, 0x01	; 1
    2a1a:	87 70       	andi	r24, 0x07	; 7
    2a1c:	e9 cf       	rjmp	.-46     	; 0x29f0 <process_tapping+0x108>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2a1e:	f6 2e       	mov	r15, r22
    2a20:	66 23       	and	r22, r22
    2a22:	09 f4       	brne	.+2      	; 0x2a26 <process_tapping+0x13e>
    2a24:	18 c1       	rjmp	.+560    	; 0x2c56 <process_tapping+0x36e>
                        tapping_key.tap.interrupted = true;
    2a26:	80 91 90 01 	lds	r24, 0x0190
    2a2a:	81 60       	ori	r24, 0x01	; 1
    2a2c:	80 93 90 01 	sts	0x0190, r24
                    }
                    // enqueue 
                    return false;
    2a30:	f1 2c       	mov	r15, r1
    2a32:	11 c1       	rjmp	.+546    	; 0x2c56 <process_tapping+0x36e>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2a34:	75 13       	cpse	r23, r21
    2a36:	08 c0       	rjmp	.+16     	; 0x2a48 <process_tapping+0x160>
    2a38:	34 13       	cpse	r19, r20
    2a3a:	06 c0       	rjmp	.+12     	; 0x2a48 <process_tapping+0x160>
    2a3c:	61 11       	cpse	r22, r1
    2a3e:	04 c0       	rjmp	.+8      	; 0x2a48 <process_tapping+0x160>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2a40:	80 91 90 01 	lds	r24, 0x0190
    2a44:	d8 01       	movw	r26, r16
    2a46:	c3 c0       	rjmp	.+390    	; 0x2bce <process_tapping+0x2e6>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2a48:	4d 87       	std	Y+13, r20	; 0x0d
    2a4a:	5e 87       	std	Y+14, r21	; 0x0e
    2a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a50:	6a 8b       	std	Y+18, r22	; 0x12
    2a52:	0e 94 ab 13 	call	0x2756	; 0x2756 <is_tap_key>
    2a56:	6a 89       	ldd	r22, Y+18	; 0x12
    2a58:	88 23       	and	r24, r24
    2a5a:	e1 f1       	breq	.+120    	; 0x2ad4 <process_tapping+0x1ec>
    2a5c:	66 23       	and	r22, r22
    2a5e:	d1 f1       	breq	.+116    	; 0x2ad4 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    2a60:	20 91 90 01 	lds	r18, 0x0190
    2a64:	82 2f       	mov	r24, r18
    2a66:	82 95       	swap	r24
    2a68:	8f 70       	andi	r24, 0x0F	; 15
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	02 97       	sbiw	r24, 0x02	; 2
    2a6e:	74 f0       	brlt	.+28     	; 0x2a8c <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2a70:	80 91 8b 01 	lds	r24, 0x018B
    2a74:	90 91 8c 01 	lds	r25, 0x018C
    2a78:	98 87       	std	Y+8, r25	; 0x08
    2a7a:	8f 83       	std	Y+7, r24	; 0x07
    2a7c:	19 86       	std	Y+9, r1	; 0x09
    2a7e:	db 86       	std	Y+11, r13	; 0x0b
    2a80:	ca 86       	std	Y+10, r12	; 0x0a
    2a82:	2c 87       	std	Y+12, r18	; 0x0c
    2a84:	ce 01       	movw	r24, r28
    2a86:	07 96       	adiw	r24, 0x07	; 7
    2a88:	0e 94 03 11 	call	0x2206	; 0x2206 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    2a8c:	86 e0       	ldi	r24, 0x06	; 6
    2a8e:	f8 01       	movw	r30, r16
    2a90:	ab e8       	ldi	r26, 0x8B	; 139
    2a92:	b1 e0       	ldi	r27, 0x01	; 1
    2a94:	01 90       	ld	r0, Z+
    2a96:	0d 92       	st	X+, r0
    2a98:	8a 95       	dec	r24
    2a9a:	e1 f7       	brne	.-8      	; 0x2a94 <process_tapping+0x1ac>
                    waiting_buffer_scan_tap();
    2a9c:	0e 94 19 14 	call	0x2832	; 0x2832 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    2aa0:	0e 94 0b 14 	call	0x2816	; 0x2816 <debug_tapping_key>
                    return true;
    2aa4:	ff 24       	eor	r15, r15
    2aa6:	f3 94       	inc	r15
    2aa8:	d6 c0       	rjmp	.+428    	; 0x2c56 <process_tapping+0x36e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    2aaa:	4d 87       	std	Y+13, r20	; 0x0d
    2aac:	5e 87       	std	Y+14, r21	; 0x0e
    2aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab2:	0e 94 94 18 	call	0x3128	; 0x3128 <layer_switch_get_action>
                    switch (action.kind.id) {
    2ab6:	29 2f       	mov	r18, r25
    2ab8:	22 95       	swap	r18
    2aba:	2f 70       	andi	r18, 0x0F	; 15
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	22 30       	cpi	r18, 0x02	; 2
    2ac0:	31 05       	cpc	r19, r1
    2ac2:	0c f0       	brlt	.+2      	; 0x2ac6 <process_tapping+0x1de>
    2ac4:	bc c0       	rjmp	.+376    	; 0x2c3e <process_tapping+0x356>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    2ac6:	9f 70       	andi	r25, 0x0F	; 15
    2ac8:	09 f0       	breq	.+2      	; 0x2acc <process_tapping+0x1e4>
    2aca:	b6 c0       	rjmp	.+364    	; 0x2c38 <process_tapping+0x350>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
                            if (IS_MOD(action.key.code)) return false;
    2acc:	80 5e       	subi	r24, 0xE0	; 224
    2ace:	88 30       	cpi	r24, 0x08	; 8
    2ad0:	08 f4       	brcc	.+2      	; 0x2ad4 <process_tapping+0x1ec>
    2ad2:	c1 c0       	rjmp	.+386    	; 0x2c56 <process_tapping+0x36e>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    2ad4:	c8 01       	movw	r24, r16
    2ad6:	0e 94 03 11 	call	0x2206	; 0x2206 <process_action>
    2ada:	e4 cf       	rjmp	.-56     	; 0x2aa4 <process_tapping+0x1bc>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2adc:	c8 16       	cp	r12, r24
    2ade:	d9 06       	cpc	r13, r25
    2ae0:	08 f4       	brcc	.+2      	; 0x2ae4 <process_tapping+0x1fc>
    2ae2:	53 c0       	rjmp	.+166    	; 0x2b8a <process_tapping+0x2a2>
    2ae4:	f6 01       	movw	r30, r12
    2ae6:	e8 1b       	sub	r30, r24
    2ae8:	f9 0b       	sbc	r31, r25
    2aea:	cf 01       	movw	r24, r30
    2aec:	88 3c       	cpi	r24, 0xC8	; 200
    2aee:	91 05       	cpc	r25, r1
    2af0:	08 f4       	brcc	.+2      	; 0x2af4 <process_tapping+0x20c>
    2af2:	50 c0       	rjmp	.+160    	; 0x2b94 <process_tapping+0x2ac>
    2af4:	f1 2c       	mov	r15, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    2af6:	7c 2d       	mov	r23, r12
    2af8:	d9 8a       	std	Y+17, r13	; 0x11
    2afa:	c8 8a       	std	Y+16, r12	; 0x10
    2afc:	89 89       	ldd	r24, Y+17	; 0x11
    2afe:	0e 94 cb 13 	call	0x2796	; 0x2796 <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    2b02:	eb e8       	ldi	r30, 0x8B	; 139
    2b04:	f1 e0       	ldi	r31, 0x01	; 1
    2b06:	86 e0       	ldi	r24, 0x06	; 6
    2b08:	df 01       	movw	r26, r30
    2b0a:	1d 92       	st	X+, r1
    2b0c:	8a 95       	dec	r24
    2b0e:	e9 f7       	brne	.-6      	; 0x2b0a <process_tapping+0x222>
                debug_tapping_key();
    2b10:	0e 94 0b 14 	call	0x2816	; 0x2816 <debug_tapping_key>
                return false;
    2b14:	a0 c0       	rjmp	.+320    	; 0x2c56 <process_tapping+0x36e>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2b16:	75 13       	cpse	r23, r21
    2b18:	14 c0       	rjmp	.+40     	; 0x2b42 <process_tapping+0x25a>
    2b1a:	34 13       	cpse	r19, r20
    2b1c:	12 c0       	rjmp	.+36     	; 0x2b42 <process_tapping+0x25a>
    2b1e:	61 11       	cpse	r22, r1
    2b20:	10 c0       	rjmp	.+32     	; 0x2b42 <process_tapping+0x25a>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2b22:	80 91 90 01 	lds	r24, 0x0190
    2b26:	f8 01       	movw	r30, r16
    2b28:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    2b2a:	c8 01       	movw	r24, r16
    2b2c:	0e 94 03 11 	call	0x2206	; 0x2206 <process_action>
                    tapping_key = (keyrecord_t){};
    2b30:	86 e0       	ldi	r24, 0x06	; 6
    2b32:	eb e8       	ldi	r30, 0x8B	; 139
    2b34:	f1 e0       	ldi	r31, 0x01	; 1
    2b36:	df 01       	movw	r26, r30
    2b38:	1d 92       	st	X+, r1
    2b3a:	8a 95       	dec	r24
    2b3c:	e9 f7       	brne	.-6      	; 0x2b38 <process_tapping+0x250>
                    return true;
    2b3e:	fe 2c       	mov	r15, r14
    2b40:	8a c0       	rjmp	.+276    	; 0x2c56 <process_tapping+0x36e>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2b42:	4d 87       	std	Y+13, r20	; 0x0d
    2b44:	5e 87       	std	Y+14, r21	; 0x0e
    2b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b4a:	6a 8b       	std	Y+18, r22	; 0x12
    2b4c:	0e 94 ab 13 	call	0x2756	; 0x2756 <is_tap_key>
    2b50:	6a 89       	ldd	r22, Y+18	; 0x12
    2b52:	88 23       	and	r24, r24
    2b54:	09 f4       	brne	.+2      	; 0x2b58 <process_tapping+0x270>
    2b56:	be cf       	rjmp	.-132    	; 0x2ad4 <process_tapping+0x1ec>
    2b58:	66 23       	and	r22, r22
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <process_tapping+0x276>
    2b5c:	bb cf       	rjmp	.-138    	; 0x2ad4 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    2b5e:	20 91 90 01 	lds	r18, 0x0190
    2b62:	82 2f       	mov	r24, r18
    2b64:	82 95       	swap	r24
    2b66:	8f 70       	andi	r24, 0x0F	; 15
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	02 97       	sbiw	r24, 0x02	; 2
    2b6c:	0c f4       	brge	.+2      	; 0x2b70 <process_tapping+0x288>
    2b6e:	8e cf       	rjmp	.-228    	; 0x2a8c <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2b70:	80 91 8b 01 	lds	r24, 0x018B
    2b74:	90 91 8c 01 	lds	r25, 0x018C
    2b78:	9a 83       	std	Y+2, r25	; 0x02
    2b7a:	89 83       	std	Y+1, r24	; 0x01
    2b7c:	1b 82       	std	Y+3, r1	; 0x03
    2b7e:	dd 82       	std	Y+5, r13	; 0x05
    2b80:	cc 82       	std	Y+4, r12	; 0x04
    2b82:	2e 83       	std	Y+6, r18	; 0x06
    2b84:	ce 01       	movw	r24, r28
    2b86:	01 96       	adiw	r24, 0x01	; 1
    2b88:	7f cf       	rjmp	.-258    	; 0x2a88 <process_tapping+0x1a0>
    2b8a:	80 95       	com	r24
    2b8c:	90 95       	com	r25
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2b8e:	8c 0d       	add	r24, r12
    2b90:	9d 1d       	adc	r25, r13
    2b92:	ac cf       	rjmp	.-168    	; 0x2aec <process_tapping+0x204>
            if (event.pressed) {
    2b94:	f6 2e       	mov	r15, r22
    2b96:	66 23       	and	r22, r22
    2b98:	09 f4       	brne	.+2      	; 0x2b9c <process_tapping+0x2b4>
    2b9a:	9c cf       	rjmp	.-200    	; 0x2ad4 <process_tapping+0x1ec>
                if (IS_TAPPING_KEY(event.key)) {
    2b9c:	75 13       	cpse	r23, r21
    2b9e:	2e c0       	rjmp	.+92     	; 0x2bfc <process_tapping+0x314>
    2ba0:	34 13       	cpse	r19, r20
    2ba2:	2c c0       	rjmp	.+88     	; 0x2bfc <process_tapping+0x314>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2ba4:	20 91 90 01 	lds	r18, 0x0190
    2ba8:	20 fd       	sbrc	r18, 0
    2baa:	1f c0       	rjmp	.+62     	; 0x2bea <process_tapping+0x302>
    2bac:	82 2f       	mov	r24, r18
    2bae:	82 95       	swap	r24
    2bb0:	8f 70       	andi	r24, 0x0F	; 15
    2bb2:	d9 f0       	breq	.+54     	; 0x2bea <process_tapping+0x302>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2bb4:	d8 01       	movw	r26, r16
    2bb6:	15 96       	adiw	r26, 0x05	; 5
    2bb8:	2c 93       	st	X, r18
    2bba:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2bbc:	8f 30       	cpi	r24, 0x0F	; 15
    2bbe:	49 f0       	breq	.+18     	; 0x2bd2 <process_tapping+0x2ea>
    2bc0:	8f 5f       	subi	r24, 0xFF	; 255
    2bc2:	98 2f       	mov	r25, r24
    2bc4:	92 95       	swap	r25
    2bc6:	90 7f       	andi	r25, 0xF0	; 240
    2bc8:	82 2f       	mov	r24, r18
    2bca:	8f 70       	andi	r24, 0x0F	; 15
    2bcc:	89 2b       	or	r24, r25
    2bce:	15 96       	adiw	r26, 0x05	; 5
    2bd0:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    2bd2:	c8 01       	movw	r24, r16
    2bd4:	0e 94 03 11 	call	0x2206	; 0x2206 <process_action>
                        tapping_key = *keyp;
    2bd8:	86 e0       	ldi	r24, 0x06	; 6
    2bda:	f8 01       	movw	r30, r16
    2bdc:	ab e8       	ldi	r26, 0x8B	; 139
    2bde:	b1 e0       	ldi	r27, 0x01	; 1
    2be0:	01 90       	ld	r0, Z+
    2be2:	0d 92       	st	X+, r0
    2be4:	8a 95       	dec	r24
    2be6:	e1 f7       	brne	.-8      	; 0x2be0 <process_tapping+0x2f8>
    2be8:	93 cf       	rjmp	.-218    	; 0x2b10 <process_tapping+0x228>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2bea:	86 e0       	ldi	r24, 0x06	; 6
    2bec:	f8 01       	movw	r30, r16
    2bee:	ab e8       	ldi	r26, 0x8B	; 139
    2bf0:	b1 e0       	ldi	r27, 0x01	; 1
    2bf2:	01 90       	ld	r0, Z+
    2bf4:	0d 92       	st	X+, r0
    2bf6:	8a 95       	dec	r24
    2bf8:	e1 f7       	brne	.-8      	; 0x2bf2 <process_tapping+0x30a>
                        return true;
    2bfa:	2d c0       	rjmp	.+90     	; 0x2c56 <process_tapping+0x36e>
                    }
                } else if (is_tap_key(event.key)) {
    2bfc:	4d 87       	std	Y+13, r20	; 0x0d
    2bfe:	5e 87       	std	Y+14, r21	; 0x0e
    2c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c04:	0e 94 ab 13 	call	0x2756	; 0x2756 <is_tap_key>
    2c08:	81 11       	cpse	r24, r1
    2c0a:	40 cf       	rjmp	.-384    	; 0x2a8c <process_tapping+0x1a4>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    2c0c:	80 91 90 01 	lds	r24, 0x0190
    2c10:	81 60       	ori	r24, 0x01	; 1
    2c12:	80 93 90 01 	sts	0x0190, r24
                    process_action(keyp);
    2c16:	c8 01       	movw	r24, r16
    2c18:	0e 94 03 11 	call	0x2206	; 0x2206 <process_action>
                    return true;
    2c1c:	1c c0       	rjmp	.+56     	; 0x2c56 <process_tapping+0x36e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    2c1e:	66 23       	and	r22, r22
    2c20:	09 f4       	brne	.+2      	; 0x2c24 <process_tapping+0x33c>
    2c22:	58 cf       	rjmp	.-336    	; 0x2ad4 <process_tapping+0x1ec>
    2c24:	4d 87       	std	Y+13, r20	; 0x0d
    2c26:	5e 87       	std	Y+14, r21	; 0x0e
    2c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2c:	0e 94 ab 13 	call	0x2756	; 0x2756 <is_tap_key>
    2c30:	88 23       	and	r24, r24
    2c32:	09 f4       	brne	.+2      	; 0x2c36 <process_tapping+0x34e>
    2c34:	4f cf       	rjmp	.-354    	; 0x2ad4 <process_tapping+0x1ec>
    2c36:	2a cf       	rjmp	.-428    	; 0x2a8c <process_tapping+0x1a4>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    2c38:	81 11       	cpse	r24, r1
    2c3a:	48 cf       	rjmp	.-368    	; 0x2acc <process_tapping+0x1e4>
    2c3c:	0c c0       	rjmp	.+24     	; 0x2c56 <process_tapping+0x36e>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    2c3e:	24 30       	cpi	r18, 0x04	; 4
    2c40:	31 05       	cpc	r19, r1
    2c42:	0c f0       	brlt	.+2      	; 0x2c46 <process_tapping+0x35e>
    2c44:	47 cf       	rjmp	.-370    	; 0x2ad4 <process_tapping+0x1ec>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2c46:	9f 70       	andi	r25, 0x0F	; 15
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <process_tapping+0x364>
    2c4a:	40 cf       	rjmp	.-384    	; 0x2acc <process_tapping+0x1e4>
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	95 81       	ldd	r25, Z+5	; 0x05
    2c50:	90 7f       	andi	r25, 0xF0	; 240
    2c52:	09 f0       	breq	.+2      	; 0x2c56 <process_tapping+0x36e>
    2c54:	3b cf       	rjmp	.-394    	; 0x2acc <process_tapping+0x1e4>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    2c56:	8f 2d       	mov	r24, r15
    2c58:	62 96       	adiw	r28, 0x12	; 18
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	1f 91       	pop	r17
    2c6a:	0f 91       	pop	r16
    2c6c:	ff 90       	pop	r15
    2c6e:	ef 90       	pop	r14
    2c70:	df 90       	pop	r13
    2c72:	cf 90       	pop	r12
    2c74:	08 95       	ret

00002c76 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    2c76:	1f 93       	push	r17
    2c78:	cf 93       	push	r28
    2c7a:	df 93       	push	r29
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	2c 97       	sbiw	r28, 0x0c	; 12
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    2c8c:	4f 83       	std	Y+7, r20	; 0x07
    2c8e:	58 87       	std	Y+8, r21	; 0x08
    2c90:	69 87       	std	Y+9, r22	; 0x09
    2c92:	7a 87       	std	Y+10, r23	; 0x0a
    2c94:	8b 87       	std	Y+11, r24	; 0x0b
    2c96:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    2c98:	ce 01       	movw	r24, r28
    2c9a:	07 96       	adiw	r24, 0x07	; 7
    2c9c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <process_tapping>
    2ca0:	88 23       	and	r24, r24
    2ca2:	69 f0       	breq	.+26     	; 0x2cbe <action_tapping_process+0x48>
    2ca4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ca6:	98 85       	ldd	r25, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2ca8:	2a 85       	ldd	r18, Y+10	; 0x0a
    2caa:	3b 85       	ldd	r19, Y+11	; 0x0b
    2cac:	23 2b       	or	r18, r19
    2cae:	f1 f1       	breq	.+124    	; 0x2d2c <action_tapping_process+0xb6>
    2cb0:	9f 3f       	cpi	r25, 0xFF	; 255
    2cb2:	09 f0       	breq	.+2      	; 0x2cb6 <action_tapping_process+0x40>
    2cb4:	63 c0       	rjmp	.+198    	; 0x2d7c <action_tapping_process+0x106>
    2cb6:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb8:	09 f0       	breq	.+2      	; 0x2cbc <action_tapping_process+0x46>
    2cba:	60 c0       	rjmp	.+192    	; 0x2d7c <action_tapping_process+0x106>
    2cbc:	37 c0       	rjmp	.+110    	; 0x2d2c <action_tapping_process+0xb6>
    2cbe:	86 e0       	ldi	r24, 0x06	; 6
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	37 96       	adiw	r30, 0x07	; 7
    2cc4:	de 01       	movw	r26, r28
    2cc6:	11 96       	adiw	r26, 0x01	; 1
    2cc8:	01 90       	ld	r0, Z+
    2cca:	0d 92       	st	X+, r0
    2ccc:	8a 95       	dec	r24
    2cce:	e1 f7       	brne	.-8      	; 0x2cc8 <action_tapping_process+0x52>
    2cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd2:	78 85       	ldd	r23, Y+8	; 0x08
    2cd4:	ea 85       	ldd	r30, Y+10	; 0x0a
    2cd6:	fb 85       	ldd	r31, Y+11	; 0x0b
    2cd8:	30 97       	sbiw	r30, 0x00	; 0
    2cda:	41 f1       	breq	.+80     	; 0x2d2c <action_tapping_process+0xb6>
    2cdc:	7f 3f       	cpi	r23, 0xFF	; 255
    2cde:	11 f4       	brne	.+4      	; 0x2ce4 <action_tapping_process+0x6e>
    2ce0:	6f 3f       	cpi	r22, 0xFF	; 255
    2ce2:	21 f1       	breq	.+72     	; 0x2d2c <action_tapping_process+0xb6>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    2ce4:	20 91 5a 01 	lds	r18, 0x015A
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	c9 01       	movw	r24, r18
    2cec:	01 96       	adiw	r24, 0x01	; 1
    2cee:	87 70       	andi	r24, 0x07	; 7
    2cf0:	99 27       	eor	r25, r25
    2cf2:	40 91 59 01 	lds	r20, 0x0159
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	84 17       	cp	r24, r20
    2cfa:	95 07       	cpc	r25, r21
    2cfc:	09 f4       	brne	.+2      	; 0x2d00 <action_tapping_process+0x8a>
    2cfe:	47 c0       	rjmp	.+142    	; 0x2d8e <action_tapping_process+0x118>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    2d00:	69 83       	std	Y+1, r22	; 0x01
    2d02:	7a 83       	std	Y+2, r23	; 0x02
    2d04:	fd 83       	std	Y+5, r31	; 0x05
    2d06:	ec 83       	std	Y+4, r30	; 0x04
    2d08:	96 e0       	ldi	r25, 0x06	; 6
    2d0a:	92 9f       	mul	r25, r18
    2d0c:	d0 01       	movw	r26, r0
    2d0e:	93 9f       	mul	r25, r19
    2d10:	b0 0d       	add	r27, r0
    2d12:	11 24       	eor	r1, r1
    2d14:	a5 5a       	subi	r26, 0xA5	; 165
    2d16:	be 4f       	sbci	r27, 0xFE	; 254
    2d18:	fe 01       	movw	r30, r28
    2d1a:	31 96       	adiw	r30, 0x01	; 1
    2d1c:	01 90       	ld	r0, Z+
    2d1e:	0d 92       	st	X+, r0
    2d20:	9a 95       	dec	r25
    2d22:	e1 f7       	brne	.-8      	; 0x2d1c <action_tapping_process+0xa6>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    2d24:	80 93 5a 01 	sts	0x015A, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    2d28:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2d2c:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2d2e:	80 91 59 01 	lds	r24, 0x0159
    2d32:	90 91 5a 01 	lds	r25, 0x015A
    2d36:	89 17       	cp	r24, r25
    2d38:	c1 f1       	breq	.+112    	; 0x2daa <action_tapping_process+0x134>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2d3a:	18 9f       	mul	r17, r24
    2d3c:	c0 01       	movw	r24, r0
    2d3e:	11 24       	eor	r1, r1
    2d40:	85 5a       	subi	r24, 0xA5	; 165
    2d42:	9e 4f       	sbci	r25, 0xFE	; 254
    2d44:	0e 94 74 14 	call	0x28e8	; 0x28e8 <process_tapping>
    2d48:	88 23       	and	r24, r24
    2d4a:	79 f1       	breq	.+94     	; 0x2daa <action_tapping_process+0x134>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    2d4c:	e0 91 59 01 	lds	r30, 0x0159
    2d50:	1e 9f       	mul	r17, r30
    2d52:	f0 01       	movw	r30, r0
    2d54:	11 24       	eor	r1, r1
    2d56:	e5 5a       	subi	r30, 0xA5	; 165
    2d58:	fe 4f       	sbci	r31, 0xFE	; 254
    2d5a:	40 81       	ld	r20, Z
    2d5c:	51 81       	ldd	r21, Z+1	; 0x01
    2d5e:	62 81       	ldd	r22, Z+2	; 0x02
    2d60:	73 81       	ldd	r23, Z+3	; 0x03
    2d62:	84 81       	ldd	r24, Z+4	; 0x04
    2d64:	95 81       	ldd	r25, Z+5	; 0x05
    2d66:	0e 94 da 13 	call	0x27b4	; 0x27b4 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2d6a:	80 91 59 01 	lds	r24, 0x0159
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	01 96       	adiw	r24, 0x01	; 1
    2d72:	87 70       	andi	r24, 0x07	; 7
    2d74:	99 27       	eor	r25, r25
    2d76:	80 93 59 01 	sts	0x0159, r24
    2d7a:	d9 cf       	rjmp	.-78     	; 0x2d2e <action_tapping_process+0xb8>

void action_tapping_process(keyrecord_t record)
{
    if (process_tapping(&record)) {
        if (!IS_NOEVENT(record.event)) {
            debug("processed: "); debug_record(record); debug("\n");
    2d7c:	4f 81       	ldd	r20, Y+7	; 0x07
    2d7e:	58 85       	ldd	r21, Y+8	; 0x08
    2d80:	69 85       	ldd	r22, Y+9	; 0x09
    2d82:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d84:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d86:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d88:	0e 94 da 13 	call	0x27b4	; 0x27b4 <debug_record>
    2d8c:	cf cf       	rjmp	.-98     	; 0x2d2c <action_tapping_process+0xb6>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    2d8e:	0e 94 a7 13 	call	0x274e	; 0x274e <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    2d92:	10 92 5a 01 	sts	0x015A, r1
    waiting_buffer_tail = 0;
    2d96:	10 92 59 01 	sts	0x0159, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    2d9a:	eb e8       	ldi	r30, 0x8B	; 139
    2d9c:	f1 e0       	ldi	r31, 0x01	; 1
    2d9e:	86 e0       	ldi	r24, 0x06	; 6
    2da0:	df 01       	movw	r26, r30
    2da2:	1d 92       	st	X+, r1
    2da4:	8a 95       	dec	r24
    2da6:	e9 f7       	brne	.-6      	; 0x2da2 <action_tapping_process+0x12c>
    2da8:	c1 cf       	rjmp	.-126    	; 0x2d2c <action_tapping_process+0xb6>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    2daa:	2c 96       	adiw	r28, 0x0c	; 12
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	de bf       	out	0x3e, r29	; 62
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	cd bf       	out	0x3d, r28	; 61
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	1f 91       	pop	r17
    2dbc:	08 95       	ret

00002dbe <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = pgm_read_byte(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    2dbe:	ef 92       	push	r14
    2dc0:	ff 92       	push	r15
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	8c 01       	movw	r16, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    2dcc:	89 2b       	or	r24, r25
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <action_macro_play+0x14>
    2dd0:	6a c0       	rjmp	.+212    	; 0x2ea6 <action_macro_play+0xe8>
    2dd2:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    2dd4:	ee 24       	eor	r14, r14
    2dd6:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    2dd8:	e8 01       	movw	r28, r16
    2dda:	21 96       	adiw	r28, 0x01	; 1
    2ddc:	f8 01       	movw	r30, r16
    2dde:	84 91       	lpm	r24, Z
    2de0:	84 37       	cpi	r24, 0x74	; 116
    2de2:	40 f4       	brcc	.+16     	; 0x2df4 <action_macro_play+0x36>
    2de4:	84 30       	cpi	r24, 0x04	; 4
    2de6:	08 f0       	brcs	.+2      	; 0x2dea <action_macro_play+0x2c>
    2de8:	4f c0       	rjmp	.+158    	; 0x2e88 <action_macro_play+0xca>
    2dea:	81 30       	cpi	r24, 0x01	; 1
    2dec:	81 f0       	breq	.+32     	; 0x2e0e <action_macro_play+0x50>
    2dee:	82 30       	cpi	r24, 0x02	; 2
    2df0:	19 f1       	breq	.+70     	; 0x2e38 <action_macro_play+0x7a>
    2df2:	59 c0       	rjmp	.+178    	; 0x2ea6 <action_macro_play+0xe8>
    2df4:	85 37       	cpi	r24, 0x75	; 117
    2df6:	09 f4       	brne	.+2      	; 0x2dfa <action_macro_play+0x3c>
    2df8:	42 c0       	rjmp	.+132    	; 0x2e7e <action_macro_play+0xc0>
    2dfa:	98 f1       	brcs	.+102    	; 0x2e62 <action_macro_play+0xa4>
    2dfc:	9c e7       	ldi	r25, 0x7C	; 124
    2dfe:	98 0f       	add	r25, r24
    2e00:	90 37       	cpi	r25, 0x70	; 112
    2e02:	08 f0       	brcs	.+2      	; 0x2e06 <action_macro_play+0x48>
    2e04:	50 c0       	rjmp	.+160    	; 0x2ea6 <action_macro_play+0xe8>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    2e06:	8f 77       	andi	r24, 0x7F	; 127
    2e08:	0e 94 cd 10 	call	0x219a	; 0x219a <unregister_code>
    2e0c:	3f c0       	rjmp	.+126    	; 0x2e8c <action_macro_play+0xce>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    2e0e:	0e 5f       	subi	r16, 0xFE	; 254
    2e10:	1f 4f       	sbci	r17, 0xFF	; 255
    2e12:	fe 01       	movw	r30, r28
    2e14:	c4 91       	lpm	r28, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2e16:	80 e2       	ldi	r24, 0x20	; 32
    2e18:	8c 0f       	add	r24, r28
    2e1a:	88 30       	cpi	r24, 0x08	; 8
    2e1c:	48 f4       	brcc	.+18     	; 0x2e30 <action_macro_play+0x72>
                    add_weak_mods(MOD_BIT(macro));
    2e1e:	c7 70       	andi	r28, 0x07	; 7
    2e20:	8e 2d       	mov	r24, r14
    2e22:	01 c0       	rjmp	.+2      	; 0x2e26 <action_macro_play+0x68>
    2e24:	88 0f       	add	r24, r24
    2e26:	ca 95       	dec	r28
    2e28:	ea f7       	brpl	.-6      	; 0x2e24 <action_macro_play+0x66>
    2e2a:	0e 94 80 19 	call	0x3300	; 0x3300 <add_weak_mods>
    2e2e:	2f c0       	rjmp	.+94     	; 0x2e8e <action_macro_play+0xd0>
                } else {
                    register_code(macro);
    2e30:	8c 2f       	mov	r24, r28
    2e32:	0e 94 2e 10 	call	0x205c	; 0x205c <register_code>
    2e36:	2b c0       	rjmp	.+86     	; 0x2e8e <action_macro_play+0xd0>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    2e38:	0e 5f       	subi	r16, 0xFE	; 254
    2e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	c4 91       	lpm	r28, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2e40:	80 e2       	ldi	r24, 0x20	; 32
    2e42:	8c 0f       	add	r24, r28
    2e44:	88 30       	cpi	r24, 0x08	; 8
    2e46:	48 f4       	brcc	.+18     	; 0x2e5a <action_macro_play+0x9c>
                    del_weak_mods(MOD_BIT(macro));
    2e48:	c7 70       	andi	r28, 0x07	; 7
    2e4a:	8e 2d       	mov	r24, r14
    2e4c:	01 c0       	rjmp	.+2      	; 0x2e50 <action_macro_play+0x92>
    2e4e:	88 0f       	add	r24, r24
    2e50:	ca 95       	dec	r28
    2e52:	ea f7       	brpl	.-6      	; 0x2e4e <action_macro_play+0x90>
    2e54:	0e 94 86 19 	call	0x330c	; 0x330c <del_weak_mods>
    2e58:	1a c0       	rjmp	.+52     	; 0x2e8e <action_macro_play+0xd0>
                } else {
                    unregister_code(macro);
    2e5a:	8c 2f       	mov	r24, r28
    2e5c:	0e 94 cd 10 	call	0x219a	; 0x219a <unregister_code>
    2e60:	16 c0       	rjmp	.+44     	; 0x2e8e <action_macro_play+0xd0>
                }
                break;
            case WAIT:
                MACRO_READ();
    2e62:	0e 5f       	subi	r16, 0xFE	; 254
    2e64:	1f 4f       	sbci	r17, 0xFF	; 255
    2e66:	fe 01       	movw	r30, r28
    2e68:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) _delay_ms(1); }
    2e6a:	cc 23       	and	r28, r28
    2e6c:	81 f0       	breq	.+32     	; 0x2e8e <action_macro_play+0xd0>
    2e6e:	8f e9       	ldi	r24, 0x9F	; 159
    2e70:	9f e0       	ldi	r25, 0x0F	; 15
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <action_macro_play+0xb4>
    2e76:	00 c0       	rjmp	.+0      	; 0x2e78 <action_macro_play+0xba>
    2e78:	00 00       	nop
    2e7a:	c1 50       	subi	r28, 0x01	; 1
    2e7c:	f6 cf       	rjmp	.-20     	; 0x2e6a <action_macro_play+0xac>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    2e7e:	0e 5f       	subi	r16, 0xFE	; 254
    2e80:	1f 4f       	sbci	r17, 0xFF	; 255
    2e82:	fe 01       	movw	r30, r28
    2e84:	f4 90       	lpm	r15, Z
                dprintf("INTERVAL(%u)\n", interval);
                break;
    2e86:	03 c0       	rjmp	.+6      	; 0x2e8e <action_macro_play+0xd0>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    2e88:	0e 94 2e 10 	call	0x205c	; 0x205c <register_code>
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    2e8c:	8e 01       	movw	r16, r28
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) _delay_ms(1); }
    2e8e:	8f 2d       	mov	r24, r15
    2e90:	88 23       	and	r24, r24
    2e92:	09 f4       	brne	.+2      	; 0x2e96 <action_macro_play+0xd8>
    2e94:	a1 cf       	rjmp	.-190    	; 0x2dd8 <action_macro_play+0x1a>
    2e96:	ef e9       	ldi	r30, 0x9F	; 159
    2e98:	ff e0       	ldi	r31, 0x0F	; 15
    2e9a:	31 97       	sbiw	r30, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <action_macro_play+0xdc>
    2e9e:	00 c0       	rjmp	.+0      	; 0x2ea0 <action_macro_play+0xe2>
    2ea0:	00 00       	nop
    2ea2:	81 50       	subi	r24, 0x01	; 1
    2ea4:	f5 cf       	rjmp	.-22     	; 0x2e90 <action_macro_play+0xd2>
    }
}
    2ea6:	df 91       	pop	r29
    2ea8:	cf 91       	pop	r28
    2eaa:	1f 91       	pop	r17
    2eac:	0f 91       	pop	r16
    2eae:	ff 90       	pop	r15
    2eb0:	ef 90       	pop	r14
    2eb2:	08 95       	ret

00002eb4 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    2eb4:	08 95       	ret

00002eb6 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2eb6:	60 93 95 01 	sts	0x0195, r22
    2eba:	70 93 96 01 	sts	0x0196, r23
    2ebe:	80 93 97 01 	sts	0x0197, r24
    2ec2:	90 93 98 01 	sts	0x0198, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2ec6:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <clear_keyboard_but_mods>

00002eca <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    2eca:	0f 93       	push	r16
    2ecc:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    2ece:	00 91 95 01 	lds	r16, 0x0195
    2ed2:	10 91 96 01 	lds	r17, 0x0196
    2ed6:	20 91 97 01 	lds	r18, 0x0197
    2eda:	30 91 98 01 	lds	r19, 0x0198
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	80 2b       	or	r24, r16
    2ee4:	91 2b       	or	r25, r17
    2ee6:	a2 2b       	or	r26, r18
    2ee8:	b3 2b       	or	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2eea:	80 93 95 01 	sts	0x0195, r24
    2eee:	90 93 96 01 	sts	0x0196, r25
    2ef2:	a0 93 97 01 	sts	0x0197, r26
    2ef6:	b0 93 98 01 	sts	0x0198, r27

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2efe:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <clear_keyboard_but_mods>

00002f02 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    2f02:	0f 93       	push	r16
    2f04:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    2f06:	00 91 95 01 	lds	r16, 0x0195
    2f0a:	10 91 96 01 	lds	r17, 0x0196
    2f0e:	20 91 97 01 	lds	r18, 0x0197
    2f12:	30 91 98 01 	lds	r19, 0x0198
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	80 23       	and	r24, r16
    2f1c:	91 23       	and	r25, r17
    2f1e:	a2 23       	and	r26, r18
    2f20:	b3 23       	and	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2f22:	80 93 95 01 	sts	0x0195, r24
    2f26:	90 93 96 01 	sts	0x0196, r25
    2f2a:	a0 93 97 01 	sts	0x0197, r26
    2f2e:	b0 93 98 01 	sts	0x0198, r27
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    2f32:	1f 91       	pop	r17
    2f34:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2f36:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <clear_keyboard_but_mods>

00002f3a <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    2f3e:	00 91 95 01 	lds	r16, 0x0195
    2f42:	10 91 96 01 	lds	r17, 0x0196
    2f46:	20 91 97 01 	lds	r18, 0x0197
    2f4a:	30 91 98 01 	lds	r19, 0x0198
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	80 27       	eor	r24, r16
    2f54:	91 27       	eor	r25, r17
    2f56:	a2 27       	eor	r26, r18
    2f58:	b3 27       	eor	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2f5a:	80 93 95 01 	sts	0x0195, r24
    2f5e:	90 93 96 01 	sts	0x0196, r25
    2f62:	a0 93 97 01 	sts	0x0197, r26
    2f66:	b0 93 98 01 	sts	0x0198, r27
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    2f6a:	1f 91       	pop	r17
    2f6c:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2f6e:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <clear_keyboard_but_mods>

00002f72 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2f72:	10 92 91 01 	sts	0x0191, r1
    2f76:	10 92 92 01 	sts	0x0192, r1
    2f7a:	10 92 93 01 	sts	0x0193, r1
    2f7e:	10 92 94 01 	sts	0x0194, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2f82:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <clear_keyboard_but_mods>

00002f86 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    2f86:	41 e0       	ldi	r20, 0x01	; 1
    2f88:	50 e0       	ldi	r21, 0x00	; 0
    2f8a:	60 e0       	ldi	r22, 0x00	; 0
    2f8c:	70 e0       	ldi	r23, 0x00	; 0
    2f8e:	04 c0       	rjmp	.+8      	; 0x2f98 <layer_move+0x12>
    2f90:	44 0f       	add	r20, r20
    2f92:	55 1f       	adc	r21, r21
    2f94:	66 1f       	adc	r22, r22
    2f96:	77 1f       	adc	r23, r23
    2f98:	8a 95       	dec	r24
    2f9a:	d2 f7       	brpl	.-12     	; 0x2f90 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2f9c:	40 93 91 01 	sts	0x0191, r20
    2fa0:	50 93 92 01 	sts	0x0192, r21
    2fa4:	60 93 93 01 	sts	0x0193, r22
    2fa8:	70 93 94 01 	sts	0x0194, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2fac:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <clear_keyboard_but_mods>

00002fb0 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    2fb0:	41 e0       	ldi	r20, 0x01	; 1
    2fb2:	50 e0       	ldi	r21, 0x00	; 0
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	04 c0       	rjmp	.+8      	; 0x2fc2 <layer_on+0x12>
    2fba:	44 0f       	add	r20, r20
    2fbc:	55 1f       	adc	r21, r21
    2fbe:	66 1f       	adc	r22, r22
    2fc0:	77 1f       	adc	r23, r23
    2fc2:	8a 95       	dec	r24
    2fc4:	d2 f7       	brpl	.-12     	; 0x2fba <layer_on+0xa>
    2fc6:	80 91 91 01 	lds	r24, 0x0191
    2fca:	90 91 92 01 	lds	r25, 0x0192
    2fce:	a0 91 93 01 	lds	r26, 0x0193
    2fd2:	b0 91 94 01 	lds	r27, 0x0194
    2fd6:	48 2b       	or	r20, r24
    2fd8:	59 2b       	or	r21, r25
    2fda:	6a 2b       	or	r22, r26
    2fdc:	7b 2b       	or	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2fde:	40 93 91 01 	sts	0x0191, r20
    2fe2:	50 93 92 01 	sts	0x0192, r21
    2fe6:	60 93 93 01 	sts	0x0193, r22
    2fea:	70 93 94 01 	sts	0x0194, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2fee:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <clear_keyboard_but_mods>

00002ff2 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    2ff2:	41 e0       	ldi	r20, 0x01	; 1
    2ff4:	50 e0       	ldi	r21, 0x00	; 0
    2ff6:	60 e0       	ldi	r22, 0x00	; 0
    2ff8:	70 e0       	ldi	r23, 0x00	; 0
    2ffa:	04 c0       	rjmp	.+8      	; 0x3004 <layer_off+0x12>
    2ffc:	44 0f       	add	r20, r20
    2ffe:	55 1f       	adc	r21, r21
    3000:	66 1f       	adc	r22, r22
    3002:	77 1f       	adc	r23, r23
    3004:	8a 95       	dec	r24
    3006:	d2 f7       	brpl	.-12     	; 0x2ffc <layer_off+0xa>
    3008:	40 95       	com	r20
    300a:	50 95       	com	r21
    300c:	60 95       	com	r22
    300e:	70 95       	com	r23
    3010:	80 91 91 01 	lds	r24, 0x0191
    3014:	90 91 92 01 	lds	r25, 0x0192
    3018:	a0 91 93 01 	lds	r26, 0x0193
    301c:	b0 91 94 01 	lds	r27, 0x0194
    3020:	48 23       	and	r20, r24
    3022:	59 23       	and	r21, r25
    3024:	6a 23       	and	r22, r26
    3026:	7b 23       	and	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3028:	40 93 91 01 	sts	0x0191, r20
    302c:	50 93 92 01 	sts	0x0192, r21
    3030:	60 93 93 01 	sts	0x0193, r22
    3034:	70 93 94 01 	sts	0x0194, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3038:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <clear_keyboard_but_mods>

0000303c <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    303c:	41 e0       	ldi	r20, 0x01	; 1
    303e:	50 e0       	ldi	r21, 0x00	; 0
    3040:	60 e0       	ldi	r22, 0x00	; 0
    3042:	70 e0       	ldi	r23, 0x00	; 0
    3044:	04 c0       	rjmp	.+8      	; 0x304e <layer_invert+0x12>
    3046:	44 0f       	add	r20, r20
    3048:	55 1f       	adc	r21, r21
    304a:	66 1f       	adc	r22, r22
    304c:	77 1f       	adc	r23, r23
    304e:	8a 95       	dec	r24
    3050:	d2 f7       	brpl	.-12     	; 0x3046 <layer_invert+0xa>
    3052:	80 91 91 01 	lds	r24, 0x0191
    3056:	90 91 92 01 	lds	r25, 0x0192
    305a:	a0 91 93 01 	lds	r26, 0x0193
    305e:	b0 91 94 01 	lds	r27, 0x0194
    3062:	48 27       	eor	r20, r24
    3064:	59 27       	eor	r21, r25
    3066:	6a 27       	eor	r22, r26
    3068:	7b 27       	eor	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    306a:	40 93 91 01 	sts	0x0191, r20
    306e:	50 93 92 01 	sts	0x0192, r21
    3072:	60 93 93 01 	sts	0x0193, r22
    3076:	70 93 94 01 	sts	0x0194, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    307a:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <clear_keyboard_but_mods>

0000307e <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    307e:	0f 93       	push	r16
    3080:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3082:	00 91 91 01 	lds	r16, 0x0191
    3086:	10 91 92 01 	lds	r17, 0x0192
    308a:	20 91 93 01 	lds	r18, 0x0193
    308e:	30 91 94 01 	lds	r19, 0x0194
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	80 2b       	or	r24, r16
    3098:	91 2b       	or	r25, r17
    309a:	a2 2b       	or	r26, r18
    309c:	b3 2b       	or	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    309e:	80 93 91 01 	sts	0x0191, r24
    30a2:	90 93 92 01 	sts	0x0192, r25
    30a6:	a0 93 93 01 	sts	0x0193, r26
    30aa:	b0 93 94 01 	sts	0x0194, r27
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    30ae:	1f 91       	pop	r17
    30b0:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    30b2:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <clear_keyboard_but_mods>

000030b6 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    30b6:	0f 93       	push	r16
    30b8:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    30ba:	00 91 91 01 	lds	r16, 0x0191
    30be:	10 91 92 01 	lds	r17, 0x0192
    30c2:	20 91 93 01 	lds	r18, 0x0193
    30c6:	30 91 94 01 	lds	r19, 0x0194
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	80 23       	and	r24, r16
    30d0:	91 23       	and	r25, r17
    30d2:	a2 23       	and	r26, r18
    30d4:	b3 23       	and	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    30d6:	80 93 91 01 	sts	0x0191, r24
    30da:	90 93 92 01 	sts	0x0192, r25
    30de:	a0 93 93 01 	sts	0x0193, r26
    30e2:	b0 93 94 01 	sts	0x0194, r27
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    30e6:	1f 91       	pop	r17
    30e8:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    30ea:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <clear_keyboard_but_mods>

000030ee <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    30ee:	0f 93       	push	r16
    30f0:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    30f2:	00 91 91 01 	lds	r16, 0x0191
    30f6:	10 91 92 01 	lds	r17, 0x0192
    30fa:	20 91 93 01 	lds	r18, 0x0193
    30fe:	30 91 94 01 	lds	r19, 0x0194
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	80 27       	eor	r24, r16
    3108:	91 27       	eor	r25, r17
    310a:	a2 27       	eor	r26, r18
    310c:	b3 27       	eor	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    310e:	80 93 91 01 	sts	0x0191, r24
    3112:	90 93 92 01 	sts	0x0192, r25
    3116:	a0 93 93 01 	sts	0x0193, r26
    311a:	b0 93 94 01 	sts	0x0194, r27
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    311e:	1f 91       	pop	r17
    3120:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3122:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <clear_keyboard_but_mods>

00003126 <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    3126:	08 95       	ret

00003128 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(key_t key)
{
    3128:	cf 92       	push	r12
    312a:	df 92       	push	r13
    312c:	ef 92       	push	r14
    312e:	ff 92       	push	r15
    3130:	0f 93       	push	r16
    3132:	1f 93       	push	r17
    3134:	cf 93       	push	r28
    3136:	df 93       	push	r29
    3138:	8c 01       	movw	r16, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    313a:	c0 90 95 01 	lds	r12, 0x0195
    313e:	d0 90 96 01 	lds	r13, 0x0196
    3142:	e0 90 97 01 	lds	r14, 0x0197
    3146:	f0 90 98 01 	lds	r15, 0x0198
    314a:	40 91 91 01 	lds	r20, 0x0191
    314e:	50 91 92 01 	lds	r21, 0x0192
    3152:	60 91 93 01 	lds	r22, 0x0193
    3156:	70 91 94 01 	lds	r23, 0x0194
    315a:	c4 2a       	or	r12, r20
    315c:	d5 2a       	or	r13, r21
    315e:	e6 2a       	or	r14, r22
    3160:	f7 2a       	or	r15, r23
    3162:	cf e1       	ldi	r28, 0x1F	; 31
    3164:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3166:	d7 01       	movw	r26, r14
    3168:	c6 01       	movw	r24, r12
    316a:	0c 2e       	mov	r0, r28
    316c:	04 c0       	rjmp	.+8      	; 0x3176 <layer_switch_get_action+0x4e>
    316e:	b6 95       	lsr	r27
    3170:	a7 95       	ror	r26
    3172:	97 95       	ror	r25
    3174:	87 95       	ror	r24
    3176:	0a 94       	dec	r0
    3178:	d2 f7       	brpl	.-12     	; 0x316e <layer_switch_get_action+0x46>
    317a:	80 ff       	sbrs	r24, 0
    317c:	07 c0       	rjmp	.+14     	; 0x318c <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    317e:	b8 01       	movw	r22, r16
    3180:	8c 2f       	mov	r24, r28
    3182:	0e 94 cd 19 	call	0x339a	; 0x339a <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3186:	81 30       	cpi	r24, 0x01	; 1
    3188:	91 05       	cpc	r25, r1
    318a:	31 f4       	brne	.+12     	; 0x3198 <layer_switch_get_action+0x70>
    318c:	21 97       	sbiw	r28, 0x01	; 1
    318e:	58 f7       	brcc	.-42     	; 0x3166 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3190:	b8 01       	movw	r22, r16
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	0e 94 cd 19 	call	0x339a	; 0x339a <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	ff 90       	pop	r15
    31a2:	ef 90       	pop	r14
    31a4:	df 90       	pop	r13
    31a6:	cf 90       	pop	r12
    31a8:	08 95       	ret

000031aa <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    31aa:	90 91 49 01 	lds	r25, 0x0149
    31ae:	99 23       	and	r25, r25
    31b0:	59 f1       	breq	.+86     	; 0x3208 <add_key+0x5e>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < REPORT_BITS) {
    31b2:	98 2f       	mov	r25, r24
    31b4:	96 95       	lsr	r25
    31b6:	96 95       	lsr	r25
    31b8:	96 95       	lsr	r25
    31ba:	9f 30       	cpi	r25, 0x0F	; 15
    31bc:	a0 f4       	brcc	.+40     	; 0x31e6 <add_key+0x3c>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    31be:	e0 91 15 01 	lds	r30, 0x0115
    31c2:	f0 91 16 01 	lds	r31, 0x0116
    31c6:	e9 0f       	add	r30, r25
    31c8:	f1 1d       	adc	r31, r1
    31ca:	87 70       	andi	r24, 0x07	; 7
    31cc:	21 e0       	ldi	r18, 0x01	; 1
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	a9 01       	movw	r20, r18
    31d2:	02 c0       	rjmp	.+4      	; 0x31d8 <add_key+0x2e>
    31d4:	44 0f       	add	r20, r20
    31d6:	55 1f       	adc	r21, r21
    31d8:	8a 95       	dec	r24
    31da:	e2 f7       	brpl	.-8      	; 0x31d4 <add_key+0x2a>
    31dc:	ca 01       	movw	r24, r20
    31de:	91 81       	ldd	r25, Z+1	; 0x01
    31e0:	89 2b       	or	r24, r25
    31e2:	81 83       	std	Z+1, r24	; 0x01
    31e4:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    31e6:	90 91 b5 01 	lds	r25, 0x01B5
    31ea:	90 ff       	sbrs	r25, 0
    31ec:	29 c0       	rjmp	.+82     	; 0x3240 <add_key+0x96>
    31ee:	1f 92       	push	r1
    31f0:	8f 93       	push	r24
    31f2:	88 ef       	ldi	r24, 0xF8	; 248
    31f4:	93 e0       	ldi	r25, 0x03	; 3
    31f6:	9f 93       	push	r25
    31f8:	8f 93       	push	r24
    31fa:	0e 94 56 05 	call	0xaac	; 0xaac <__xprintf>
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	08 95       	ret
static inline void add_key_byte(uint8_t code)
{
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3208:	20 91 15 01 	lds	r18, 0x0115
    320c:	30 91 16 01 	lds	r19, 0x0116
    3210:	f9 01       	movw	r30, r18
    3212:	32 96       	adiw	r30, 0x02	; 2
    3214:	9f ef       	ldi	r25, 0xFF	; 255
    3216:	40 e0       	ldi	r20, 0x00	; 0
    3218:	51 91       	ld	r21, Z+
    321a:	58 17       	cp	r21, r24
    321c:	89 f0       	breq	.+34     	; 0x3240 <add_key+0x96>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    321e:	9f 3f       	cpi	r25, 0xFF	; 255
    3220:	19 f4       	brne	.+6      	; 0x3228 <add_key+0x7e>
    3222:	51 11       	cpse	r21, r1
    3224:	01 c0       	rjmp	.+2      	; 0x3228 <add_key+0x7e>
    3226:	94 2f       	mov	r25, r20
    3228:	4f 5f       	subi	r20, 0xFF	; 255
/* local functions */
static inline void add_key_byte(uint8_t code)
{
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < REPORT_KEYS; i++) {
    322a:	4e 30       	cpi	r20, 0x0E	; 14
    322c:	a9 f7       	brne	.-22     	; 0x3218 <add_key+0x6e>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == REPORT_KEYS) {
        if (empty != -1) {
    322e:	9f 3f       	cpi	r25, 0xFF	; 255
    3230:	39 f0       	breq	.+14     	; 0x3240 <add_key+0x96>
            keyboard_report->keys[empty] = code;
    3232:	f9 01       	movw	r30, r18
    3234:	e9 0f       	add	r30, r25
    3236:	f1 1d       	adc	r31, r1
    3238:	97 fd       	sbrc	r25, 7
    323a:	fa 95       	dec	r31
    323c:	82 83       	std	Z+2, r24	; 0x02
    323e:	08 95       	ret
    3240:	08 95       	ret

00003242 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3242:	90 91 49 01 	lds	r25, 0x0149
    3246:	99 23       	and	r25, r25
    3248:	61 f1       	breq	.+88     	; 0x32a2 <del_key+0x60>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < REPORT_BITS) {
    324a:	98 2f       	mov	r25, r24
    324c:	96 95       	lsr	r25
    324e:	96 95       	lsr	r25
    3250:	96 95       	lsr	r25
    3252:	9f 30       	cpi	r25, 0x0F	; 15
    3254:	a8 f4       	brcc	.+42     	; 0x3280 <del_key+0x3e>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3256:	e0 91 15 01 	lds	r30, 0x0115
    325a:	f0 91 16 01 	lds	r31, 0x0116
    325e:	e9 0f       	add	r30, r25
    3260:	f1 1d       	adc	r31, r1
    3262:	87 70       	andi	r24, 0x07	; 7
    3264:	21 e0       	ldi	r18, 0x01	; 1
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	a9 01       	movw	r20, r18
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <del_key+0x2e>
    326c:	44 0f       	add	r20, r20
    326e:	55 1f       	adc	r21, r21
    3270:	8a 95       	dec	r24
    3272:	e2 f7       	brpl	.-8      	; 0x326c <del_key+0x2a>
    3274:	ca 01       	movw	r24, r20
    3276:	80 95       	com	r24
    3278:	91 81       	ldd	r25, Z+1	; 0x01
    327a:	89 23       	and	r24, r25
    327c:	81 83       	std	Z+1, r24	; 0x01
    327e:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3280:	90 91 b5 01 	lds	r25, 0x01B5
    3284:	90 ff       	sbrs	r25, 0
    3286:	1d c0       	rjmp	.+58     	; 0x32c2 <del_key+0x80>
    3288:	1f 92       	push	r1
    328a:	8f 93       	push	r24
    328c:	8a ed       	ldi	r24, 0xDA	; 218
    328e:	93 e0       	ldi	r25, 0x03	; 3
    3290:	9f 93       	push	r25
    3292:	8f 93       	push	r24
    3294:	0e 94 56 05 	call	0xaac	; 0xaac <__xprintf>
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	08 95       	ret
}

static inline void del_key_byte(uint8_t code)
{
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    32a2:	20 91 15 01 	lds	r18, 0x0115
    32a6:	30 91 16 01 	lds	r19, 0x0116
    32aa:	f9 01       	movw	r30, r18
    32ac:	32 96       	adiw	r30, 0x02	; 2
    32ae:	20 5f       	subi	r18, 0xF0	; 240
    32b0:	3f 4f       	sbci	r19, 0xFF	; 255
    32b2:	90 81       	ld	r25, Z
    32b4:	98 13       	cpse	r25, r24
    32b6:	01 c0       	rjmp	.+2      	; 0x32ba <del_key+0x78>
            keyboard_report->keys[i] = 0;
    32b8:	10 82       	st	Z, r1
    32ba:	31 96       	adiw	r30, 0x01	; 1
    }
}

static inline void del_key_byte(uint8_t code)
{
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
    32bc:	e2 17       	cp	r30, r18
    32be:	f3 07       	cpc	r31, r19
    32c0:	c1 f7       	brne	.-16     	; 0x32b2 <del_key+0x70>
    32c2:	08 95       	ret

000032c4 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    32c8:	e0 91 15 01 	lds	r30, 0x0115
    32cc:	f0 91 16 01 	lds	r31, 0x0116
    32d0:	e8 0f       	add	r30, r24
    32d2:	f9 1f       	adc	r31, r25
    32d4:	10 82       	st	Z, r1
    32d6:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < REPORT_SIZE; i++) {
    32d8:	80 31       	cpi	r24, 0x10	; 16
    32da:	91 05       	cpc	r25, r1
    32dc:	a9 f7       	brne	.-22     	; 0x32c8 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    32de:	08 95       	ret

000032e0 <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    32e0:	90 91 ab 01 	lds	r25, 0x01AB
    32e4:	89 2b       	or	r24, r25
    32e6:	80 93 ab 01 	sts	0x01AB, r24
    32ea:	08 95       	ret

000032ec <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    32ec:	80 95       	com	r24
    32ee:	90 91 ab 01 	lds	r25, 0x01AB
    32f2:	89 23       	and	r24, r25
    32f4:	80 93 ab 01 	sts	0x01AB, r24
    32f8:	08 95       	ret

000032fa <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    32fa:	10 92 ab 01 	sts	0x01AB, r1
    32fe:	08 95       	ret

00003300 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3300:	90 91 aa 01 	lds	r25, 0x01AA
    3304:	89 2b       	or	r24, r25
    3306:	80 93 aa 01 	sts	0x01AA, r24
    330a:	08 95       	ret

0000330c <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    330c:	80 95       	com	r24
    330e:	90 91 aa 01 	lds	r25, 0x01AA
    3312:	89 23       	and	r24, r25
    3314:	80 93 aa 01 	sts	0x01AA, r24
    3318:	08 95       	ret

0000331a <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    331a:	10 92 aa 01 	sts	0x01AA, r1
    331e:	08 95       	ret

00003320 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3320:	80 93 99 01 	sts	0x0199, r24
    3324:	08 95       	ret

00003326 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3326:	10 92 99 01 	sts	0x0199, r1
    332a:	08 95       	ret

0000332c <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    332c:	80 91 15 01 	lds	r24, 0x0115
    3330:	90 91 16 01 	lds	r25, 0x0116
    3334:	fc 01       	movw	r30, r24
    3336:	31 96       	adiw	r30, 0x01	; 1
    3338:	9c 01       	movw	r18, r24
    333a:	20 5f       	subi	r18, 0xF0	; 240
    333c:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    333e:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3340:	91 91       	ld	r25, Z+
    3342:	91 11       	cpse	r25, r1
            cnt++;
    3344:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < REPORT_SIZE; i++) {
    3346:	e2 17       	cp	r30, r18
    3348:	f3 07       	cpc	r31, r19
    334a:	d1 f7       	brne	.-12     	; 0x3340 <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    334c:	08 95       	ret

0000334e <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    334e:	e0 91 15 01 	lds	r30, 0x0115
    3352:	f0 91 16 01 	lds	r31, 0x0116
    3356:	80 91 ab 01 	lds	r24, 0x01AB
    335a:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    335c:	e0 91 15 01 	lds	r30, 0x0115
    3360:	f0 91 16 01 	lds	r31, 0x0116
    3364:	90 81       	ld	r25, Z
    3366:	80 91 aa 01 	lds	r24, 0x01AA
    336a:	89 2b       	or	r24, r25
    336c:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    336e:	80 91 99 01 	lds	r24, 0x0199
    3372:	88 23       	and	r24, r24
    3374:	61 f0       	breq	.+24     	; 0x338e <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3376:	e0 91 15 01 	lds	r30, 0x0115
    337a:	f0 91 16 01 	lds	r31, 0x0116
    337e:	90 81       	ld	r25, Z
    3380:	89 2b       	or	r24, r25
    3382:	80 83       	st	Z, r24
        if (has_anykey()) {
    3384:	0e 94 96 19 	call	0x332c	; 0x332c <has_anykey>
    3388:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    338a:	10 92 99 01 	sts	0x0199, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    338e:	80 91 15 01 	lds	r24, 0x0115
    3392:	90 91 16 01 	lds	r25, 0x0116
    3396:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <host_keyboard_send>

0000339a <action_for_key>:

uint16_t actionmap_key_to_action(uint8_t layer, key_t key);

/* converts key to action */
action_t action_for_key(uint8_t layer, key_t key) {
  uint16_t keycode = actionmap_key_to_action(layer, key);
    339a:	0e 94 64 05 	call	0xac8	; 0xac8 <actionmap_key_to_action>
    339e:	9c 01       	movw	r18, r24
  if(keycode >= KC_FN0 && keycode <= KC_FN31) {
    33a0:	80 5c       	subi	r24, 0xC0	; 192
    33a2:	91 09       	sbc	r25, r1
    33a4:	80 97       	sbiw	r24, 0x20	; 32
    33a6:	20 f4       	brcc	.+8      	; 0x33b0 <action_for_key+0x16>
    return keymap_fn_to_action(keycode);
    33a8:	82 2f       	mov	r24, r18
    33aa:	0e 94 76 05 	call	0xaec	; 0xaec <keymap_fn_to_action>
    33ae:	08 95       	ret
  } else {
    action_t action;
    action.key.code = (uint8_t)keycode;
    action.key.mods = (keycode >> 8) & 0x1f;

    return action;
    33b0:	c9 01       	movw	r24, r18
    33b2:	9f 70       	andi	r25, 0x0F	; 15
  }
}
    33b4:	08 95       	ret

000033b6 <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	08 95       	ret

000033bc <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    33bc:	82 e0       	ldi	r24, 0x02	; 2
    33be:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    33c0:	93 e0       	ldi	r25, 0x03	; 3
    33c2:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    33c4:	9a ef       	ldi	r25, 0xFA	; 250
    33c6:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    33c8:	80 93 6e 00 	sts	0x006E, r24
    33cc:	08 95       	ret

000033ce <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    33ce:	2f b7       	in	r18, 0x3f	; 63
    cli();
    33d0:	f8 94       	cli
    t = timer_count;
    33d2:	80 91 ac 01 	lds	r24, 0x01AC
    33d6:	90 91 ad 01 	lds	r25, 0x01AD
    33da:	a0 91 ae 01 	lds	r26, 0x01AE
    33de:	b0 91 af 01 	lds	r27, 0x01AF
    SREG = sreg;
    33e2:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    33e4:	08 95       	ret

000033e6 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    33e6:	1f 92       	push	r1
    33e8:	0f 92       	push	r0
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	0f 92       	push	r0
    33ee:	11 24       	eor	r1, r1
    33f0:	8f 93       	push	r24
    33f2:	9f 93       	push	r25
    33f4:	af 93       	push	r26
    33f6:	bf 93       	push	r27
    timer_count++;
    33f8:	80 91 ac 01 	lds	r24, 0x01AC
    33fc:	90 91 ad 01 	lds	r25, 0x01AD
    3400:	a0 91 ae 01 	lds	r26, 0x01AE
    3404:	b0 91 af 01 	lds	r27, 0x01AF
    3408:	01 96       	adiw	r24, 0x01	; 1
    340a:	a1 1d       	adc	r26, r1
    340c:	b1 1d       	adc	r27, r1
    340e:	80 93 ac 01 	sts	0x01AC, r24
    3412:	90 93 ad 01 	sts	0x01AD, r25
    3416:	a0 93 ae 01 	sts	0x01AE, r26
    341a:	b0 93 af 01 	sts	0x01AF, r27
}
    341e:	bf 91       	pop	r27
    3420:	af 91       	pop	r26
    3422:	9f 91       	pop	r25
    3424:	8f 91       	pop	r24
    3426:	0f 90       	pop	r0
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	0f 90       	pop	r0
    342c:	1f 90       	pop	r1
    342e:	18 95       	reti

00003430 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3430:	90 93 b1 01 	sts	0x01B1, r25
    3434:	80 93 b0 01 	sts	0x01B0, r24
    3438:	08 95       	ret

0000343a <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    343a:	0e 94 46 0a 	call	0x148c	; 0x148c <USB_Disable>
    cli();
    343e:	f8 94       	cli
    3440:	2f ef       	ldi	r18, 0xFF	; 255
    3442:	87 ea       	ldi	r24, 0xA7	; 167
    3444:	91 e6       	ldi	r25, 0x61	; 97
    3446:	21 50       	subi	r18, 0x01	; 1
    3448:	80 40       	sbci	r24, 0x00	; 0
    344a:	90 40       	sbci	r25, 0x00	; 0
    344c:	e1 f7       	brne	.-8      	; 0x3446 <bootloader_jump+0xc>
    344e:	00 c0       	rjmp	.+0      	; 0x3450 <bootloader_jump+0x16>
    3450:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3452:	87 e0       	ldi	r24, 0x07	; 7
    3454:	90 eb       	ldi	r25, 0xB0	; 176
    3456:	dc 01       	movw	r26, r24
    3458:	80 93 c3 01 	sts	0x01C3, r24
    345c:	90 93 c4 01 	sts	0x01C4, r25
    3460:	a0 93 c5 01 	sts	0x01C5, r26
    3464:	b0 93 c6 01 	sts	0x01C6, r27
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3468:	9c e0       	ldi	r25, 0x0C	; 12
    346a:	88 e1       	ldi	r24, 0x18	; 24
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	a8 95       	wdr
    3472:	80 93 60 00 	sts	0x0060, r24
    3476:	0f be       	out	0x3f, r0	; 63
    3478:	90 93 60 00 	sts	0x0060, r25
    wdt_enable(WDTO_250MS);
    for (;;);
    347c:	ff cf       	rjmp	.-2      	; 0x347c <bootloader_jump+0x42>

0000347e <suspend_power_down>:
#include "action.h"
#include "backlight.h"


void suspend_power_down(void)
{
    347e:	08 95       	ret

00003480 <suspend_wakeup_condition>:
    wdt_disable();
#endif
}

bool suspend_wakeup_condition(void)
{
    3480:	cf 93       	push	r28
    matrix_scan();
    3482:	0e 94 cb 05 	call	0xb96	; 0xb96 <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3486:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3488:	8c 2f       	mov	r24, r28
    348a:	0e 94 d6 06 	call	0xdac	; 0xdac <matrix_get_row>
    348e:	89 2b       	or	r24, r25
    3490:	29 f4       	brne	.+10     	; 0x349c <suspend_wakeup_condition+0x1c>
}

bool suspend_wakeup_condition(void)
{
    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3492:	cf 5f       	subi	r28, 0xFF	; 255
    3494:	c4 30       	cpi	r28, 0x04	; 4
    3496:	c1 f7       	brne	.-16     	; 0x3488 <suspend_wakeup_condition+0x8>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	01 c0       	rjmp	.+2      	; 0x349e <suspend_wakeup_condition+0x1e>

bool suspend_wakeup_condition(void)
{
    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    349c:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    349e:	cf 91       	pop	r28
    34a0:	08 95       	ret

000034a2 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    34a2:	0c 94 a7 13 	jmp	0x274e	; 0x274e <clear_keyboard>

000034a6 <biton32>:
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}

uint8_t biton32(uint32_t bits)
{
    34a6:	cf 92       	push	r12
    34a8:	df 92       	push	r13
    34aa:	ef 92       	push	r14
    34ac:	ff 92       	push	r15
    uint8_t n = 0;
    if (bits >>16) { bits >>=16; n +=16;}
    34ae:	6c 01       	movw	r12, r24
    34b0:	ee 24       	eor	r14, r14
    34b2:	ff 24       	eor	r15, r15
    34b4:	c1 14       	cp	r12, r1
    34b6:	d1 04       	cpc	r13, r1
    34b8:	e1 04       	cpc	r14, r1
    34ba:	f1 04       	cpc	r15, r1
    34bc:	21 f0       	breq	.+8      	; 0x34c6 <biton32+0x20>
    34be:	c7 01       	movw	r24, r14
    34c0:	b6 01       	movw	r22, r12
    34c2:	20 e1       	ldi	r18, 0x10	; 16
    34c4:	01 c0       	rjmp	.+2      	; 0x34c8 <biton32+0x22>
    return n;
}

uint8_t biton32(uint32_t bits)
{
    uint8_t n = 0;
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    if (bits >>16) { bits >>=16; n +=16;}
    if (bits >> 8) { bits >>= 8; n += 8;}
    34c8:	c7 2e       	mov	r12, r23
    34ca:	d8 2e       	mov	r13, r24
    34cc:	e9 2e       	mov	r14, r25
    34ce:	ff 24       	eor	r15, r15
    34d0:	c1 14       	cp	r12, r1
    34d2:	d1 04       	cpc	r13, r1
    34d4:	e1 04       	cpc	r14, r1
    34d6:	f1 04       	cpc	r15, r1
    34d8:	19 f0       	breq	.+6      	; 0x34e0 <biton32+0x3a>
    34da:	28 5f       	subi	r18, 0xF8	; 248
    34dc:	c7 01       	movw	r24, r14
    34de:	b6 01       	movw	r22, r12
    if (bits >> 4) { bits >>= 4; n += 4;}
    34e0:	6b 01       	movw	r12, r22
    34e2:	7c 01       	movw	r14, r24
    34e4:	54 e0       	ldi	r21, 0x04	; 4
    34e6:	f6 94       	lsr	r15
    34e8:	e7 94       	ror	r14
    34ea:	d7 94       	ror	r13
    34ec:	c7 94       	ror	r12
    34ee:	5a 95       	dec	r21
    34f0:	d1 f7       	brne	.-12     	; 0x34e6 <biton32+0x40>
    34f2:	c1 14       	cp	r12, r1
    34f4:	d1 04       	cpc	r13, r1
    34f6:	e1 04       	cpc	r14, r1
    34f8:	f1 04       	cpc	r15, r1
    34fa:	19 f0       	breq	.+6      	; 0x3502 <biton32+0x5c>
    34fc:	2c 5f       	subi	r18, 0xFC	; 252
    34fe:	c7 01       	movw	r24, r14
    3500:	b6 01       	movw	r22, r12
    if (bits >> 2) { bits >>= 2; n += 2;}
    3502:	6b 01       	movw	r12, r22
    3504:	7c 01       	movw	r14, r24
    3506:	42 e0       	ldi	r20, 0x02	; 2
    3508:	f6 94       	lsr	r15
    350a:	e7 94       	ror	r14
    350c:	d7 94       	ror	r13
    350e:	c7 94       	ror	r12
    3510:	4a 95       	dec	r20
    3512:	d1 f7       	brne	.-12     	; 0x3508 <biton32+0x62>
    3514:	c1 14       	cp	r12, r1
    3516:	d1 04       	cpc	r13, r1
    3518:	e1 04       	cpc	r14, r1
    351a:	f1 04       	cpc	r15, r1
    351c:	19 f0       	breq	.+6      	; 0x3524 <biton32+0x7e>
    351e:	2e 5f       	subi	r18, 0xFE	; 254
    3520:	c7 01       	movw	r24, r14
    3522:	b6 01       	movw	r22, r12
    if (bits >> 1) { bits >>= 1; n += 1;}
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	b6 95       	lsr	r27
    352a:	a7 95       	ror	r26
    352c:	97 95       	ror	r25
    352e:	87 95       	ror	r24
    3530:	89 2b       	or	r24, r25
    3532:	8a 2b       	or	r24, r26
    3534:	8b 2b       	or	r24, r27
    3536:	09 f0       	breq	.+2      	; 0x353a <biton32+0x94>
    3538:	2f 5f       	subi	r18, 0xFF	; 255
    return n;
}
    353a:	82 2f       	mov	r24, r18
    353c:	ff 90       	pop	r15
    353e:	ef 90       	pop	r14
    3540:	df 90       	pop	r13
    3542:	cf 90       	pop	r12
    3544:	08 95       	ret

00003546 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3546:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3548:	98 2f       	mov	r25, r24
    354a:	9c 7c       	andi	r25, 0xCC	; 204
    354c:	39 2f       	mov	r19, r25
    354e:	36 95       	lsr	r19
    3550:	36 95       	lsr	r19
    3552:	28 2f       	mov	r18, r24
    3554:	23 73       	andi	r18, 0x33	; 51
    3556:	44 e0       	ldi	r20, 0x04	; 4
    3558:	24 9f       	mul	r18, r20
    355a:	c0 01       	movw	r24, r0
    355c:	11 24       	eor	r1, r1
    355e:	93 2f       	mov	r25, r19
    3560:	98 2b       	or	r25, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3562:	29 2f       	mov	r18, r25
    3564:	2a 7a       	andi	r18, 0xAA	; 170
    3566:	26 95       	lsr	r18
    3568:	89 2f       	mov	r24, r25
    356a:	85 75       	andi	r24, 0x55	; 85
    356c:	88 0f       	add	r24, r24
    return bits;
}
    356e:	82 2b       	or	r24, r18
    3570:	08 95       	ret

00003572 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3572:	1f 93       	push	r17
    3574:	cf 93       	push	r28
    3576:	df 93       	push	r29
    3578:	1f 92       	push	r1
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    357e:	99 83       	std	Y+1, r25	; 0x01
    3580:	0e 94 a3 1a 	call	0x3546	; 0x3546 <bitrev>
    3584:	18 2f       	mov	r17, r24
    3586:	99 81       	ldd	r25, Y+1	; 0x01
    3588:	89 2f       	mov	r24, r25
    358a:	0e 94 a3 1a 	call	0x3546	; 0x3546 <bitrev>
    358e:	21 2f       	mov	r18, r17
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	32 2f       	mov	r19, r18
    3594:	22 27       	eor	r18, r18
    return bits;
}
    3596:	a9 01       	movw	r20, r18
    3598:	48 2b       	or	r20, r24
    359a:	ca 01       	movw	r24, r20
    359c:	0f 90       	pop	r0
    359e:	df 91       	pop	r29
    35a0:	cf 91       	pop	r28
    35a2:	1f 91       	pop	r17
    35a4:	08 95       	ret

000035a6 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    35a6:	cf 93       	push	r28
    35a8:	c8 2f       	mov	r28, r24
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    35aa:	8d e3       	ldi	r24, 0x3D	; 61
    35ac:	94 e0       	ldi	r25, 0x04	; 4
    35ae:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    35b2:	60 91 95 01 	lds	r22, 0x0195
    35b6:	70 91 96 01 	lds	r23, 0x0196
    35ba:	80 91 97 01 	lds	r24, 0x0197
    35be:	90 91 98 01 	lds	r25, 0x0198
    35c2:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <biton32>
    35c6:	1f 92       	push	r1
    35c8:	8f 93       	push	r24
    35ca:	8a e3       	ldi	r24, 0x3A	; 58
    35cc:	94 e0       	ldi	r25, 0x04	; 4
    35ce:	9f 93       	push	r25
    35d0:	8f 93       	push	r24
    35d2:	0e 94 56 05 	call	0xaac	; 0xaac <__xprintf>
    print(" to "); print_dec(layer); print("\n");
    35d6:	85 e3       	ldi	r24, 0x35	; 53
    35d8:	94 e0       	ldi	r25, 0x04	; 4
    35da:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    35de:	1f 92       	push	r1
    35e0:	cf 93       	push	r28
    35e2:	82 e3       	ldi	r24, 0x32	; 50
    35e4:	94 e0       	ldi	r25, 0x04	; 4
    35e6:	9f 93       	push	r25
    35e8:	8f 93       	push	r24
    35ea:	0e 94 56 05 	call	0xaac	; 0xaac <__xprintf>
    35ee:	80 e3       	ldi	r24, 0x30	; 48
    35f0:	94 e0       	ldi	r25, 0x04	; 4
    35f2:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    default_layer_set(1UL<<layer);
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	a0 e0       	ldi	r26, 0x00	; 0
    35fc:	b0 e0       	ldi	r27, 0x00	; 0
    35fe:	bc 01       	movw	r22, r24
    3600:	cd 01       	movw	r24, r26
    3602:	04 c0       	rjmp	.+8      	; 0x360c <switch_default_layer+0x66>
    3604:	66 0f       	add	r22, r22
    3606:	77 1f       	adc	r23, r23
    3608:	88 1f       	adc	r24, r24
    360a:	99 1f       	adc	r25, r25
    360c:	ca 95       	dec	r28
    360e:	d2 f7       	brpl	.-12     	; 0x3604 <switch_default_layer+0x5e>
    3610:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <default_layer_set>
    clear_keyboard();
    3614:	8d b7       	in	r24, 0x3d	; 61
    3616:	9e b7       	in	r25, 0x3e	; 62
    3618:	08 96       	adiw	r24, 0x08	; 8
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	f8 94       	cli
    361e:	9e bf       	out	0x3e, r25	; 62
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	8d bf       	out	0x3d, r24	; 61
}
    3624:	cf 91       	pop	r28
static void switch_default_layer(uint8_t layer)
{
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    print(" to "); print_dec(layer); print("\n");
    default_layer_set(1UL<<layer);
    clear_keyboard();
    3626:	0c 94 a7 13 	jmp	0x274e	; 0x274e <clear_keyboard>

0000362a <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	08 95       	ret

0000362e <command_proc>:
typedef enum { ONESHOT, CONSOLE, MOUSEKEY } cmdstate_t;
static cmdstate_t state = ONESHOT;


bool command_proc(uint8_t code)
{
    362e:	cf 93       	push	r28
    3630:	c8 2f       	mov	r28, r24
    switch (state) {
    3632:	80 91 b4 01 	lds	r24, 0x01B4
    3636:	88 23       	and	r24, r24
    3638:	21 f0       	breq	.+8      	; 0x3642 <command_proc+0x14>
    363a:	81 30       	cpi	r24, 0x01	; 1
    363c:	09 f4       	brne	.+2      	; 0x3640 <command_proc+0x12>
    363e:	99 c1       	rjmp	.+818    	; 0x3972 <command_proc+0x344>
    3640:	ba c1       	rjmp	.+884    	; 0x39b6 <command_proc+0x388>
        case ONESHOT:
            if (!IS_COMMAND())
    3642:	e0 91 15 01 	lds	r30, 0x0115
    3646:	f0 91 16 01 	lds	r31, 0x0116
    364a:	80 81       	ld	r24, Z
    364c:	82 32       	cpi	r24, 0x22	; 34
    364e:	09 f0       	breq	.+2      	; 0x3652 <command_proc+0x24>
    3650:	b4 c1       	rjmp	.+872    	; 0x39ba <command_proc+0x38c>
                return false;
            return (command_extra(code) || command_common(code));
    3652:	8c 2f       	mov	r24, r28
    3654:	0e 94 15 1b 	call	0x362a	; 0x362a <command_extra>
    3658:	81 11       	cpse	r24, r1
    365a:	88 c1       	rjmp	.+784    	; 0x396c <command_proc+0x33e>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    365c:	cb 31       	cpi	r28, 0x1B	; 27
    365e:	09 f4       	brne	.+2      	; 0x3662 <command_proc+0x34>
    3660:	fa c0       	rjmp	.+500    	; 0x3856 <command_proc+0x228>
    3662:	08 f0       	brcs	.+2      	; 0x3666 <command_proc+0x38>
    3664:	51 c0       	rjmp	.+162    	; 0x3708 <command_proc+0xda>
    3666:	c0 31       	cpi	r28, 0x10	; 16
    3668:	09 f4       	brne	.+2      	; 0x366c <command_proc+0x3e>
    366a:	1b c1       	rjmp	.+566    	; 0x38a2 <command_proc+0x274>
    366c:	40 f5       	brcc	.+80     	; 0x36be <command_proc+0x90>
    366e:	c7 30       	cpi	r28, 0x07	; 7
    3670:	09 f4       	brne	.+2      	; 0x3674 <command_proc+0x46>
    3672:	e1 c0       	rjmp	.+450    	; 0x3836 <command_proc+0x208>
    3674:	e8 f4       	brcc	.+58     	; 0x36b0 <command_proc+0x82>
    3676:	c6 30       	cpi	r28, 0x06	; 6
    3678:	09 f0       	breq	.+2      	; 0x367c <command_proc+0x4e>
    367a:	72 c1       	rjmp	.+740    	; 0x3960 <command_proc+0x332>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    367c:	80 91 b5 01 	lds	r24, 0x01B5
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    3680:	81 7f       	andi	r24, 0xF1	; 241
    3682:	8e 7f       	andi	r24, 0xFE	; 254
    3684:	80 93 b5 01 	sts	0x01B5, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\n----- Console Help -----\n");
    3688:	81 e6       	ldi	r24, 0x61	; 97
    368a:	94 e0       	ldi	r25, 0x04	; 4
    368c:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("ESC/q:	quit\n");
    3690:	84 e5       	ldi	r24, 0x54	; 84
    3692:	94 e0       	ldi	r25, 0x04	; 4
    3694:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("\nEnter Console Mode\n");
    3698:	86 ea       	ldi	r24, 0xA6	; 166
    369a:	98 e0       	ldi	r25, 0x08	; 8
    369c:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
            print("C> ");
    36a0:	82 ea       	ldi	r24, 0xA2	; 162
    36a2:	98 e0       	ldi	r25, 0x08	; 8
    36a4:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
            state = CONSOLE;
    36a8:	81 e0       	ldi	r24, 0x01	; 1
    36aa:	80 93 b4 01 	sts	0x01B4, r24
    36ae:	5e c1       	rjmp	.+700    	; 0x396c <command_proc+0x33e>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    36b0:	cb 30       	cpi	r28, 0x0B	; 11
    36b2:	09 f4       	brne	.+2      	; 0x36b6 <command_proc+0x88>
    36b4:	75 c0       	rjmp	.+234    	; 0x37a0 <command_proc+0x172>
    36b6:	ce 30       	cpi	r28, 0x0E	; 14
    36b8:	09 f4       	brne	.+2      	; 0x36bc <command_proc+0x8e>
    36ba:	e0 c0       	rjmp	.+448    	; 0x387c <command_proc+0x24e>
    36bc:	51 c1       	rjmp	.+674    	; 0x3960 <command_proc+0x332>
    36be:	c6 31       	cpi	r28, 0x16	; 22
    36c0:	09 f4       	brne	.+2      	; 0x36c4 <command_proc+0x96>
    36c2:	22 c1       	rjmp	.+580    	; 0x3908 <command_proc+0x2da>
    36c4:	20 f4       	brcc	.+8      	; 0x36ce <command_proc+0xa0>
    36c6:	c1 31       	cpi	r28, 0x11	; 17
    36c8:	09 f4       	brne	.+2      	; 0x36cc <command_proc+0x9e>
    36ca:	31 c1       	rjmp	.+610    	; 0x392e <command_proc+0x300>
    36cc:	49 c1       	rjmp	.+658    	; 0x3960 <command_proc+0x332>
    36ce:	c7 31       	cpi	r28, 0x17	; 23
    36d0:	09 f4       	brne	.+2      	; 0x36d4 <command_proc+0xa6>
    36d2:	01 c1       	rjmp	.+514    	; 0x38d6 <command_proc+0x2a8>
    36d4:	c9 31       	cpi	r28, 0x19	; 25
    36d6:	09 f0       	breq	.+2      	; 0x36da <command_proc+0xac>
    36d8:	43 c1       	rjmp	.+646    	; 0x3960 <command_proc+0x332>
            } else {
                print("\nDEBUG: mouse disabled.\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\n----- Version -----\n");
    36da:	82 ea       	ldi	r24, 0xA2	; 162
    36dc:	97 e0       	ldi	r25, 0x07	; 7
    36de:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    36e2:	8a e7       	ldi	r24, 0x7A	; 122
    36e4:	97 e0       	ldi	r25, 0x07	; 7
    36e6:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    36ea:	84 e4       	ldi	r24, 0x44	; 68
    36ec:	97 e0       	ldi	r25, 0x07	; 7
    36ee:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    36f2:	87 e1       	ldi	r24, 0x17	; 23
    36f4:	97 e0       	ldi	r25, 0x07	; 7
    36f6:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
            /* build options */
            print("OPTIONS:"
    36fa:	8e ee       	ldi	r24, 0xEE	; 238
    36fc:	96 e0       	ldi	r25, 0x06	; 6
    36fe:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__) 
    3702:	80 ec       	ldi	r24, 0xC0	; 192
    3704:	96 e0       	ldi	r25, 0x06	; 6
    3706:	22 c1       	rjmp	.+580    	; 0x394c <command_proc+0x31e>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    3708:	c5 33       	cpi	r28, 0x35	; 53
    370a:	09 f4       	brne	.+2      	; 0x370e <command_proc+0xe0>
    370c:	22 c1       	rjmp	.+580    	; 0x3952 <command_proc+0x324>
    370e:	68 f4       	brcc	.+26     	; 0x372a <command_proc+0xfc>
    3710:	c7 32       	cpi	r28, 0x27	; 39
    3712:	09 f4       	brne	.+2      	; 0x3716 <command_proc+0xe8>
    3714:	1e c1       	rjmp	.+572    	; 0x3952 <command_proc+0x324>
    3716:	28 f4       	brcc	.+10     	; 0x3722 <command_proc+0xf4>
    3718:	ce 31       	cpi	r28, 0x1E	; 30
    371a:	08 f4       	brcc	.+2      	; 0x371e <command_proc+0xf0>
    371c:	21 c1       	rjmp	.+578    	; 0x3960 <command_proc+0x332>
        case KC_GRV:
        case KC_0:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    371e:	83 ee       	ldi	r24, 0xE3	; 227
    3720:	1b c1       	rjmp	.+566    	; 0x3958 <command_proc+0x32a>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    3722:	c9 32       	cpi	r28, 0x29	; 41
    3724:	09 f4       	brne	.+2      	; 0x3728 <command_proc+0xfa>
    3726:	15 c1       	rjmp	.+554    	; 0x3952 <command_proc+0x324>
    3728:	1b c1       	rjmp	.+566    	; 0x3960 <command_proc+0x332>
    372a:	c6 34       	cpi	r28, 0x46	; 70
    372c:	40 f4       	brcc	.+16     	; 0x373e <command_proc+0x110>
    372e:	ca 33       	cpi	r28, 0x3A	; 58
    3730:	08 f0       	brcs	.+2      	; 0x3734 <command_proc+0x106>
    3732:	11 c1       	rjmp	.+546    	; 0x3956 <command_proc+0x328>
    3734:	c8 33       	cpi	r28, 0x38	; 56
    3736:	a1 f1       	breq	.+104    	; 0x37a0 <command_proc+0x172>
    3738:	c9 33       	cpi	r28, 0x39	; 57
    373a:	c1 f0       	breq	.+48     	; 0x376c <command_proc+0x13e>
    373c:	11 c1       	rjmp	.+546    	; 0x3960 <command_proc+0x332>
    373e:	c8 34       	cpi	r28, 0x48	; 72
    3740:	09 f0       	breq	.+2      	; 0x3744 <command_proc+0x116>
    3742:	0e c1       	rjmp	.+540    	; 0x3960 <command_proc+0x332>
            print("\nEnter Console Mode\n");
            print("C> ");
            state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    3744:	0e 94 a7 13 	call	0x274e	; 0x274e <clear_keyboard>
            print("\n\nJump to bootloader... ");
    3748:	89 e8       	ldi	r24, 0x89	; 137
    374a:	98 e0       	ldi	r25, 0x08	; 8
    374c:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    3750:	2f ef       	ldi	r18, 0xFF	; 255
    3752:	83 ed       	ldi	r24, 0xD3	; 211
    3754:	90 e3       	ldi	r25, 0x30	; 48
    3756:	21 50       	subi	r18, 0x01	; 1
    3758:	80 40       	sbci	r24, 0x00	; 0
    375a:	90 40       	sbci	r25, 0x00	; 0
    375c:	e1 f7       	brne	.-8      	; 0x3756 <command_proc+0x128>
    375e:	00 c0       	rjmp	.+0      	; 0x3760 <command_proc+0x132>
    3760:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    3762:	0e 94 1d 1a 	call	0x343a	; 0x343a <bootloader_jump>
            print("not supported.\n");
    3766:	89 e7       	ldi	r24, 0x79	; 121
    3768:	98 e0       	ldi	r25, 0x08	; 8
    376a:	f0 c0       	rjmp	.+480    	; 0x394c <command_proc+0x31e>
            print("eeconfig:\n");
            print_eeconfig();
            break;
#endif
        case KC_CAPSLOCK:
            if (host_get_driver()) {
    376c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <host_get_driver>
    3770:	89 2b       	or	r24, r25
    3772:	69 f0       	breq	.+26     	; 0x378e <command_proc+0x160>
                host_driver = host_get_driver();
    3774:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <host_get_driver>
    3778:	90 93 b3 01 	sts	0x01B3, r25
    377c:	80 93 b2 01 	sts	0x01B2, r24
                host_set_driver(0);
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <host_set_driver>
                print("Locked.\n");
    3788:	86 ec       	ldi	r24, 0xC6	; 198
    378a:	98 e0       	ldi	r25, 0x08	; 8
    378c:	df c0       	rjmp	.+446    	; 0x394c <command_proc+0x31e>
            } else {
                host_set_driver(host_driver);
    378e:	80 91 b2 01 	lds	r24, 0x01B2
    3792:	90 91 b3 01 	lds	r25, 0x01B3
    3796:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <host_set_driver>
                print("Unlocked.\n");
    379a:	8b eb       	ldi	r24, 0xBB	; 187
    379c:	98 e0       	ldi	r25, 0x08	; 8
    379e:	d6 c0       	rjmp	.+428    	; 0x394c <command_proc+0x31e>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\n----- Command Help -----\n");
    37a0:	8f e3       	ldi	r24, 0x3F	; 63
    37a2:	96 e0       	ldi	r25, 0x06	; 6
    37a4:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("c:	enter console mode\n");
    37a8:	88 e2       	ldi	r24, 0x28	; 40
    37aa:	96 e0       	ldi	r25, 0x06	; 6
    37ac:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("d:	toggle debug enable\n");
    37b0:	80 e1       	ldi	r24, 0x10	; 16
    37b2:	96 e0       	ldi	r25, 0x06	; 6
    37b4:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("x:	toggle matrix debug\n");
    37b8:	88 ef       	ldi	r24, 0xF8	; 248
    37ba:	95 e0       	ldi	r25, 0x05	; 5
    37bc:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("k:	toggle keyboard debug\n");
    37c0:	8e ed       	ldi	r24, 0xDE	; 222
    37c2:	95 e0       	ldi	r25, 0x05	; 5
    37c4:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("m:	toggle mouse debug\n");
    37c8:	87 ec       	ldi	r24, 0xC7	; 199
    37ca:	95 e0       	ldi	r25, 0x05	; 5
    37cc:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
#ifdef SLEEP_LED_ENABLE
    print("z:	toggle sleep LED test\n");
#endif
    print("v:	print device version & info\n");
    37d0:	87 ea       	ldi	r24, 0xA7	; 167
    37d2:	95 e0       	ldi	r25, 0x05	; 5
    37d4:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("t:	print timer count\n");
    37d8:	81 e9       	ldi	r24, 0x91	; 145
    37da:	95 e0       	ldi	r25, 0x05	; 5
    37dc:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("s:	print status\n");
    37e0:	80 e8       	ldi	r24, 0x80	; 128
    37e2:	95 e0       	ldi	r25, 0x05	; 5
    37e4:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("e:	print eeprom config\n");
    37e8:	88 e6       	ldi	r24, 0x68	; 104
    37ea:	95 e0       	ldi	r25, 0x05	; 5
    37ec:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
#ifdef NKRO_ENABLE
    print("n:	toggle NKRO\n");
    37f0:	88 e5       	ldi	r24, 0x58	; 88
    37f2:	95 e0       	ldi	r25, 0x05	; 5
    37f4:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
#endif
    print("0/F10:	switch to Layer0 \n");
    37f8:	8e e3       	ldi	r24, 0x3E	; 62
    37fa:	95 e0       	ldi	r25, 0x05	; 5
    37fc:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("1/F1:	switch to Layer1 \n");
    3800:	85 e2       	ldi	r24, 0x25	; 37
    3802:	95 e0       	ldi	r25, 0x05	; 5
    3804:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("2/F2:	switch to Layer2 \n");
    3808:	8c e0       	ldi	r24, 0x0C	; 12
    380a:	95 e0       	ldi	r25, 0x05	; 5
    380c:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("3/F3:	switch to Layer3 \n");
    3810:	83 ef       	ldi	r24, 0xF3	; 243
    3812:	94 e0       	ldi	r25, 0x04	; 4
    3814:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("4/F4:	switch to Layer4 \n");
    3818:	8a ed       	ldi	r24, 0xDA	; 218
    381a:	94 e0       	ldi	r25, 0x04	; 4
    381c:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("PScr:	power down/remote wake-up\n");
    3820:	89 eb       	ldi	r24, 0xB9	; 185
    3822:	94 e0       	ldi	r25, 0x04	; 4
    3824:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("Caps:	Lock Keyboard(Child Proof)\n");
    3828:	87 e9       	ldi	r24, 0x97	; 151
    382a:	94 e0       	ldi	r25, 0x04	; 4
    382c:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("Paus:	jump to bootloader\n");
    3830:	8d e7       	ldi	r24, 0x7D	; 125
    3832:	94 e0       	ldi	r25, 0x04	; 4
    3834:	8b c0       	rjmp	.+278    	; 0x394c <command_proc+0x31e>
            _delay_ms(1000);
            bootloader_jump(); // not return
            print("not supported.\n");
            break;
        case KC_D:
            if (debug_enable) {
    3836:	80 91 b5 01 	lds	r24, 0x01B5
    383a:	80 ff       	sbrs	r24, 0
    383c:	09 c0       	rjmp	.+18     	; 0x3850 <command_proc+0x222>
                print("\nDEBUG: disabled.\n");
    383e:	86 e6       	ldi	r24, 0x66	; 102
    3840:	98 e0       	ldi	r25, 0x08	; 8
    3842:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
                debug_matrix   = false;
    3846:	80 91 b5 01 	lds	r24, 0x01B5
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    384a:	81 7f       	andi	r24, 0xF1	; 241
    384c:	8e 7f       	andi	r24, 0xFE	; 254
    384e:	3d c0       	rjmp	.+122    	; 0x38ca <command_proc+0x29c>
            } else {
                print("\nDEBUG: enabled.\n");
    3850:	84 e5       	ldi	r24, 0x54	; 84
    3852:	98 e0       	ldi	r25, 0x08	; 8
    3854:	35 c0       	rjmp	.+106    	; 0x38c0 <command_proc+0x292>
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    3856:	80 91 b5 01 	lds	r24, 0x01B5
    385a:	81 fb       	bst	r24, 1
    385c:	22 27       	eor	r18, r18
    385e:	20 f9       	bld	r18, 0
    3860:	91 e0       	ldi	r25, 0x01	; 1
    3862:	92 27       	eor	r25, r18
    3864:	90 fb       	bst	r25, 0
    3866:	81 f9       	bld	r24, 1
    3868:	80 93 b5 01 	sts	0x01B5, r24
            if (debug_matrix) {
    386c:	99 23       	and	r25, r25
    386e:	19 f0       	breq	.+6      	; 0x3876 <command_proc+0x248>
                print("\nDEBUG: matrix enabled.\n");
    3870:	8b e3       	ldi	r24, 0x3B	; 59
    3872:	98 e0       	ldi	r25, 0x08	; 8
    3874:	25 c0       	rjmp	.+74     	; 0x38c0 <command_proc+0x292>
                debug_enable = true;
            } else {
                print("\nDEBUG: matrix disabled.\n");
    3876:	81 e2       	ldi	r24, 0x21	; 33
    3878:	98 e0       	ldi	r25, 0x08	; 8
    387a:	68 c0       	rjmp	.+208    	; 0x394c <command_proc+0x31e>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    387c:	80 91 b5 01 	lds	r24, 0x01B5
    3880:	82 fb       	bst	r24, 2
    3882:	22 27       	eor	r18, r18
    3884:	20 f9       	bld	r18, 0
    3886:	91 e0       	ldi	r25, 0x01	; 1
    3888:	92 27       	eor	r25, r18
    388a:	90 fb       	bst	r25, 0
    388c:	82 f9       	bld	r24, 2
    388e:	80 93 b5 01 	sts	0x01B5, r24
            if (debug_keyboard) {
    3892:	99 23       	and	r25, r25
    3894:	19 f0       	breq	.+6      	; 0x389c <command_proc+0x26e>
                print("\nDEBUG: keyboard enabled.\n");
    3896:	86 e0       	ldi	r24, 0x06	; 6
    3898:	98 e0       	ldi	r25, 0x08	; 8
    389a:	12 c0       	rjmp	.+36     	; 0x38c0 <command_proc+0x292>
                debug_enable = true;
            } else {
                print("\nDEBUG: keyboard disabled.\n");
    389c:	8a ee       	ldi	r24, 0xEA	; 234
    389e:	97 e0       	ldi	r25, 0x07	; 7
    38a0:	55 c0       	rjmp	.+170    	; 0x394c <command_proc+0x31e>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    38a2:	80 91 b5 01 	lds	r24, 0x01B5
    38a6:	83 fb       	bst	r24, 3
    38a8:	22 27       	eor	r18, r18
    38aa:	20 f9       	bld	r18, 0
    38ac:	91 e0       	ldi	r25, 0x01	; 1
    38ae:	92 27       	eor	r25, r18
    38b0:	90 fb       	bst	r25, 0
    38b2:	83 f9       	bld	r24, 3
    38b4:	80 93 b5 01 	sts	0x01B5, r24
            if (debug_mouse) {
    38b8:	99 23       	and	r25, r25
    38ba:	51 f0       	breq	.+20     	; 0x38d0 <command_proc+0x2a2>
                print("\nDEBUG: mouse enabled.\n");
    38bc:	82 ed       	ldi	r24, 0xD2	; 210
    38be:	97 e0       	ldi	r25, 0x07	; 7
    38c0:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
                debug_enable = true;
    38c4:	80 91 b5 01 	lds	r24, 0x01B5
    38c8:	81 60       	ori	r24, 0x01	; 1
    38ca:	80 93 b5 01 	sts	0x01B5, r24
    38ce:	4e c0       	rjmp	.+156    	; 0x396c <command_proc+0x33e>
            } else {
                print("\nDEBUG: mouse disabled.\n");
    38d0:	89 eb       	ldi	r24, 0xB9	; 185
    38d2:	97 e0       	ldi	r25, 0x07	; 7
    38d4:	3b c0       	rjmp	.+118    	; 0x394c <command_proc+0x31e>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__) 
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_T: // print timer
            print_val_hex32(timer_count);
    38d6:	80 91 ac 01 	lds	r24, 0x01AC
    38da:	90 91 ad 01 	lds	r25, 0x01AD
    38de:	a0 91 ae 01 	lds	r26, 0x01AE
    38e2:	b0 91 af 01 	lds	r27, 0x01AF
    38e6:	bf 93       	push	r27
    38e8:	af 93       	push	r26
    38ea:	9f 93       	push	r25
    38ec:	8f 93       	push	r24
    38ee:	8c ea       	ldi	r24, 0xAC	; 172
    38f0:	96 e0       	ldi	r25, 0x06	; 6
    38f2:	9f 93       	push	r25
    38f4:	8f 93       	push	r24
    38f6:	0e 94 56 05 	call	0xaac	; 0xaac <__xprintf>
    38fa:	0f 90       	pop	r0
    38fc:	0f 90       	pop	r0
    38fe:	0f 90       	pop	r0
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	32 c0       	rjmp	.+100    	; 0x396c <command_proc+0x33e>
            break;
        case KC_S:
            print("\n\n----- Status -----\n");
    3908:	86 e9       	ldi	r24, 0x96	; 150
    390a:	96 e0       	ldi	r25, 0x06	; 6
    390c:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
            print_val_hex8(host_keyboard_leds());
    3910:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <host_keyboard_leds>
    3914:	1f 92       	push	r1
    3916:	8f 93       	push	r24
    3918:	8c e7       	ldi	r24, 0x7C	; 124
    391a:	96 e0       	ldi	r25, 0x06	; 6
    391c:	9f 93       	push	r25
    391e:	8f 93       	push	r24
    3920:	0e 94 56 05 	call	0xaac	; 0xaac <__xprintf>
    3924:	0f 90       	pop	r0
    3926:	0f 90       	pop	r0
    3928:	0f 90       	pop	r0
    392a:	0f 90       	pop	r0
    392c:	1f c0       	rjmp	.+62     	; 0x396c <command_proc+0x33e>
#   endif
#endif
            break;
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    392e:	0e 94 a7 13 	call	0x274e	; 0x274e <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    3932:	90 91 49 01 	lds	r25, 0x0149
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	89 27       	eor	r24, r25
    393a:	80 93 49 01 	sts	0x0149, r24
            if (keyboard_nkro)
    393e:	88 23       	and	r24, r24
    3940:	19 f0       	breq	.+6      	; 0x3948 <command_proc+0x31a>
                print("NKRO: enabled\n");
    3942:	8d e6       	ldi	r24, 0x6D	; 109
    3944:	96 e0       	ldi	r25, 0x06	; 6
    3946:	02 c0       	rjmp	.+4      	; 0x394c <command_proc+0x31e>
            else
                print("NKRO: disabled\n");
    3948:	8d e5       	ldi	r24, 0x5D	; 93
    394a:	96 e0       	ldi	r25, 0x06	; 6
    394c:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    3950:	0d c0       	rjmp	.+26     	; 0x396c <command_proc+0x33e>
            break;
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
            switch_default_layer(0);
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	02 c0       	rjmp	.+4      	; 0x395a <command_proc+0x32c>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F12:
            switch_default_layer((code - KC_F1) + 1);
    3956:	87 ec       	ldi	r24, 0xC7	; 199
    3958:	8c 0f       	add	r24, r28
    395a:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <switch_default_layer>
    395e:	06 c0       	rjmp	.+12     	; 0x396c <command_proc+0x33e>
            break;
        default:
            print("?");
    3960:	8b e5       	ldi	r24, 0x5B	; 91
    3962:	96 e0       	ldi	r25, 0x06	; 6
    3964:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
{
    switch (state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
            return (command_extra(code) || command_common(code));
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	01 c0       	rjmp	.+2      	; 0x396e <command_proc+0x340>
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	81 70       	andi	r24, 0x01	; 1
    3970:	25 c0       	rjmp	.+74     	; 0x39bc <command_proc+0x38e>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    3972:	c4 31       	cpi	r28, 0x14	; 20
    3974:	99 f0       	breq	.+38     	; 0x399c <command_proc+0x36e>
    3976:	18 f4       	brcc	.+6      	; 0x397e <command_proc+0x350>
    3978:	cb 30       	cpi	r28, 0x0B	; 11
    397a:	29 f0       	breq	.+10     	; 0x3986 <command_proc+0x358>
    397c:	16 c0       	rjmp	.+44     	; 0x39aa <command_proc+0x37c>
    397e:	c9 32       	cpi	r28, 0x29	; 41
    3980:	69 f0       	breq	.+26     	; 0x399c <command_proc+0x36e>
    3982:	c8 33       	cpi	r28, 0x38	; 56
    3984:	91 f4       	brne	.+36     	; 0x39aa <command_proc+0x37c>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\n----- Console Help -----\n");
    3986:	81 e6       	ldi	r24, 0x61	; 97
    3988:	94 e0       	ldi	r25, 0x04	; 4
    398a:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
    print("ESC/q:	quit\n");
    398e:	84 e5       	ldi	r24, 0x54	; 84
    3990:	94 e0       	ldi	r25, 0x04	; 4
    3992:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    3996:	8c e2       	ldi	r24, 0x2C	; 44
    3998:	94 e0       	ldi	r25, 0x04	; 4
    399a:	09 c0       	rjmp	.+18     	; 0x39ae <command_proc+0x380>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            print("\nQuit Console Mode\n");
    399c:	88 e1       	ldi	r24, 0x18	; 24
    399e:	94 e0       	ldi	r25, 0x04	; 4
    39a0:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
            state = ONESHOT;
    39a4:	10 92 b4 01 	sts	0x01B4, r1
    39a8:	04 c0       	rjmp	.+8      	; 0x39b2 <command_proc+0x384>
            print("M0>");
            state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    39aa:	86 e1       	ldi	r24, 0x16	; 22
    39ac:	94 e0       	ldi	r25, 0x04	; 4
    39ae:	0e 94 bd 04 	call	0x97a	; 0x97a <xputs>
#endif
        default:
            state = ONESHOT;
            return false;
    }
    return true;
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	03 c0       	rjmp	.+6      	; 0x39bc <command_proc+0x38e>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            state = ONESHOT;
    39b6:	10 92 b4 01 	sts	0x01B4, r1
bool command_proc(uint8_t code)
{
    switch (state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    39ba:	80 e0       	ldi	r24, 0x00	; 0
        default:
            state = ONESHOT;
            return false;
    }
    return true;
}
    39bc:	cf 91       	pop	r28
    39be:	08 95       	ret

000039c0 <__tablejump2__>:
    39c0:	ee 0f       	add	r30, r30
    39c2:	ff 1f       	adc	r31, r31
    39c4:	05 90       	lpm	r0, Z+
    39c6:	f4 91       	lpm	r31, Z
    39c8:	e0 2d       	mov	r30, r0
    39ca:	09 94       	ijmp

000039cc <_exit>:
    39cc:	f8 94       	cli

000039ce <__stop_program>:
    39ce:	ff cf       	rjmp	.-2      	; 0x39ce <__stop_program>
