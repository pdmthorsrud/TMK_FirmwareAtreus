
atreus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000039e0  00003a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  00800126  00800126  00003a9a  2**0
                  ALLOC
  3 .noinit       00000004  008001c3  008001c3  00003a9a  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00003a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000066  00000000  00000000  00004354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000043ba  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000043cc  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000780  00000000  00000000  0000440c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000decf  00000000  00000000  00004b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003cfc  00000000  00000000  00012a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006003  00000000  00000000  00016757  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001480  00000000  00000000  0001c75c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e84  00000000  00000000  0001dbdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000064a8  00000000  00000000  00021a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b0  00000000  00000000  00027f08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__ctors_end>
       4:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
       8:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
       c:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      10:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      14:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      18:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      1c:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      20:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      24:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      28:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_10>
      2c:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__vector_11>
      30:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      34:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      38:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      3c:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      40:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      44:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      48:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      4c:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      50:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      54:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__vector_21>
      58:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      5c:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      60:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      64:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      68:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      6c:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      70:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      74:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      78:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      7c:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      80:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      84:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      88:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      8c:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      90:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      94:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      98:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      9c:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      a0:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      a4:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      a8:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__bad_interrupt>
      ac:	59 0d       	add	r21, r9
      ae:	7b 0d       	add	r23, r11
      b0:	80 0e       	add	r8, r16
      b2:	7b 0d       	add	r23, r11
      b4:	80 0e       	add	r8, r16
      b6:	c0 0d       	add	r28, r0
      b8:	e4 0d       	add	r30, r4
      ba:	80 0e       	add	r8, r16
      bc:	39 0e       	add	r3, r25
      be:	4d 0e       	add	r4, r29
      c0:	48 11       	cpse	r20, r8
      c2:	48 11       	cpse	r20, r8
      c4:	76 11       	cpse	r23, r6
      c6:	76 11       	cpse	r23, r6
      c8:	a1 13       	cpse	r26, r17
      ca:	a1 13       	cpse	r26, r17
      cc:	a1 13       	cpse	r26, r17
      ce:	a1 13       	cpse	r26, r17
      d0:	dc 11       	cpse	r29, r12
      d2:	a1 13       	cpse	r26, r17
      d4:	d1 12       	cpse	r13, r17
      d6:	d1 12       	cpse	r13, r17
      d8:	75 13       	cpse	r23, r21
      da:	a1 13       	cpse	r26, r17
      dc:	a1 13       	cpse	r26, r17
      de:	8c 13       	cpse	r24, r28

000000e0 <__trampolines_end>:
      e0:	f1 a1       	ldd	r31, Z+33	; 0x21
      e2:	04 85       	ldd	r16, Z+12	; 0x0c
      e4:	1b 81       	ldd	r17, Y+3	; 0x03
      e6:	00 f0       	brcs	.+0      	; 0xe8 <keymaps>

000000e8 <keymaps>:
      e8:	14 00 1a 00 08 00 15 00 17 00 00 00 1c 00 18 00     ................
      f8:	0c 00 12 00 13 00 04 00 16 00 07 00 09 00 0a 00     ................
     108:	00 00 0b 00 0d 00 0e 00 0f 00 33 00 1d 00 1b 00     ..........3.....
     118:	06 00 19 00 05 00 e0 00 11 00 10 00 36 00 37 00     ............6.7.
     128:	38 00 29 00 2b 00 e3 00 e1 00 2c 00 e2 00 2a 00     8.).+.....,...*.
     138:	c0 00 2d 00 34 00 28 00 1e 02 1f 02 52 00 2f 02     ..-.4.(.....R./.
     148:	30 02 00 00 4b 00 24 00 25 00 26 00 25 02 20 02     0...K.$.%.&.%. .
     158:	50 00 51 00 4f 00 21 02 00 00 4e 00 21 00 22 00     P.Q.O.!...N.!.".
     168:	23 00 2e 02 2f 00 30 00 26 02 27 02 24 02 e0 00     #.../.0.&.'.$...
     178:	35 00 1e 00 1f 00 20 00 31 00 c1 00 49 02 e3 00     5..... .1...I...
     188:	e1 00 2a 00 e2 00 2c 00 c0 00 37 00 27 00 2e 00     ..*...,...7.'...
     198:	49 00 4a 00 52 00 4d 00 4b 00 00 00 52 00 40 00     I.J.R.M.K...R.@.
     1a8:	41 00 42 00 43 00 4c 00 50 00 51 00 4f 00 4e 00     A.B.C.L.P.Q.O.N.
     1b8:	00 00 51 00 3d 00 3e 00 3f 00 44 00 00 00 80 00     ..Q.=.>.?.D.....
     1c8:	39 00 00 00 c3 00 e0 00 00 00 3a 00 3b 00 3c 00     9.........:.;.<.
     1d8:	45 00 00 00 81 00 e3 00 e1 00 2a 00 e2 00 2c 00     E.........*...,.
     1e8:	c2 00 46 00 47 00 48 00                             ..F.G.H.

000001f0 <__c.4718>:
     1f0:	6e 6f 74 20 73 75 70 70 6f 72 74 65 64 2e 0a 00     not supported...

00000200 <__c.4715>:
     200:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
     210:	61 64 65 72 2e 2e 2e 20 00                          ader... .

00000219 <__c.2030>:
     219:	0a 00                                               ..

0000021b <__c.2028>:
     21b:	25 30 31 36 62 00                                   %016b.

00000221 <__c.2026>:
     221:	3a 20 00                                            : .

00000224 <__c.2024>:
     224:	25 30 32 58 00                                      %02X.

00000229 <__c.2021>:
     229:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     239:	42 43 44 45 46 0a 00                                BCDEF..

00000240 <__c.1999>:
     240:	0a 00                                               ..

00000242 <__c.1997>:
     242:	25 30 32 58 00                                      %02X.

00000247 <__c.1995>:
     247:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000251 <__c.4853>:
     251:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     261:	00                                                  .

00000262 <__c.4851>:
     262:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     272:	00                                                  .

00000273 <ProductString>:
     273:	0e 03 41 00 74 00 72 00 65 00 75 00 73 00 00 00     ..A.t.r.e.u.s...

00000283 <ManufacturerString>:
     283:	18 03 74 00 65 00 63 00 68 00 6e 00 6f 00 6d 00     ..t.e.c.h.n.o.m.
     293:	61 00 6e 00 63 00 79 00 00 00                       a.n.c.y...

0000029d <LanguageString>:
     29d:	04 03 09 04                                         ....

000002a1 <ConfigurationDescriptor>:
     2a1:	09 02 5b 00 03 01 00 a0 32 09 04 00 00 01 03 01     ..[.....2.......
     2b1:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     2c1:	00 01 09 04 01 00 02 03 00 00 00 09 21 11 01 00     ............!...
     2d1:	01 22 20 00 07 05 82 03 20 00 01 07 05 03 03 20     ." ..... ...... 
     2e1:	00 01 09 04 02 00 01 03 00 00 00 09 21 11 01 00     ............!...
     2f1:	01 22 39 00 07 05 84 03 10 00 01                    ."9........

000002fc <DeviceDescriptor>:
     2fc:	12 01 10 01 00 00 00 08 c0 16 7c 04 24 00 01 02     ..........|.$...
     30c:	00 01                                               ..

0000030e <NKROReport>:
     30e:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     31e:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     32e:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     33e:	25 01 95 78 75 01 81 02 c0                          %..xu....

00000347 <ConsoleReport>:
     347:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     357:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

00000367 <KeyboardReport>:
     367:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     377:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     387:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     397:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000003a6 <__c.4527>:
     3a6:	0a 00                                               ..

000003a8 <__c.4522>:
     3a8:	25 30 32 58 20 00                                   %02X .

000003ae <__c.4519>:
     3ae:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     3be:	20 00                                                .

000003c0 <__c.4806>:
     3c0:	0a 00                                               ..

000003c2 <__c.4804>:
     3c2:	25 30 32 58 00                                      %02X.

000003c7 <__c.4802>:
     3c7:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     3d7:	3a 20 00                                            : .

000003da <__c.4667>:
     3da:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     3ea:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000003f8 <__c.4662>:
     3f8:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     408:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000416 <__c.4996>:
     416:	3f 00                                               ?.

00000418 <__c.4993>:
     418:	0a 51 75 69 74 20 43 6f 6e 73 6f 6c 65 20 4d 6f     .Quit Console Mo
     428:	64 65 0a 00                                         de..

0000042c <__c.4998>:
     42c:	43 3e 20 00                                         C> .

00000430 <__c.5024>:
     430:	0a 00                                               ..

00000432 <__c.5022>:
     432:	25 75 00                                            %u.

00000435 <__c.5020>:
     435:	20 74 6f 20 00                                       to .

0000043a <__c.5018>:
     43a:	25 75 00                                            %u.

0000043d <__c.5016>:
     43d:	73 77 69 74 63 68 5f 64 65 66 61 75 6c 74 5f 6c     switch_default_l
     44d:	61 79 65 72 3a 20 00                                ayer: .

00000454 <__c.4983>:
     454:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

00000461 <__c.4981>:
     461:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6e 73 6f 6c 65 20     ..----- Console 
     471:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

0000047d <__c.4900>:
     47d:	50 61 75 73 3a 09 6a 75 6d 70 20 74 6f 20 62 6f     Paus:.jump to bo
     48d:	6f 74 6c 6f 61 64 65 72 0a 00                       otloader..

00000497 <__c.4898>:
     497:	43 61 70 73 3a 09 4c 6f 63 6b 20 4b 65 79 62 6f     Caps:.Lock Keybo
     4a7:	61 72 64 28 43 68 69 6c 64 20 50 72 6f 6f 66 29     ard(Child Proof)
     4b7:	0a 00                                               ..

000004b9 <__c.4896>:
     4b9:	50 53 63 72 3a 09 70 6f 77 65 72 20 64 6f 77 6e     PScr:.power down
     4c9:	2f 72 65 6d 6f 74 65 20 77 61 6b 65 2d 75 70 0a     /remote wake-up.
     4d9:	00                                                  .

000004da <__c.4894>:
     4da:	34 2f 46 34 3a 09 73 77 69 74 63 68 20 74 6f 20     4/F4:.switch to 
     4ea:	4c 61 79 65 72 34 20 0a 00                          Layer4 ..

000004f3 <__c.4892>:
     4f3:	33 2f 46 33 3a 09 73 77 69 74 63 68 20 74 6f 20     3/F3:.switch to 
     503:	4c 61 79 65 72 33 20 0a 00                          Layer3 ..

0000050c <__c.4890>:
     50c:	32 2f 46 32 3a 09 73 77 69 74 63 68 20 74 6f 20     2/F2:.switch to 
     51c:	4c 61 79 65 72 32 20 0a 00                          Layer2 ..

00000525 <__c.4888>:
     525:	31 2f 46 31 3a 09 73 77 69 74 63 68 20 74 6f 20     1/F1:.switch to 
     535:	4c 61 79 65 72 31 20 0a 00                          Layer1 ..

0000053e <__c.4886>:
     53e:	30 2f 46 31 30 3a 09 73 77 69 74 63 68 20 74 6f     0/F10:.switch to
     54e:	20 4c 61 79 65 72 30 20 0a 00                        Layer0 ..

00000558 <__c.4884>:
     558:	6e 3a 09 74 6f 67 67 6c 65 20 4e 4b 52 4f 0a 00     n:.toggle NKRO..

00000568 <__c.4882>:
     568:	65 3a 09 70 72 69 6e 74 20 65 65 70 72 6f 6d 20     e:.print eeprom 
     578:	63 6f 6e 66 69 67 0a 00                             config..

00000580 <__c.4880>:
     580:	73 3a 09 70 72 69 6e 74 20 73 74 61 74 75 73 0a     s:.print status.
     590:	00                                                  .

00000591 <__c.4878>:
     591:	74 3a 09 70 72 69 6e 74 20 74 69 6d 65 72 20 63     t:.print timer c
     5a1:	6f 75 6e 74 0a 00                                   ount..

000005a7 <__c.4876>:
     5a7:	76 3a 09 70 72 69 6e 74 20 64 65 76 69 63 65 20     v:.print device 
     5b7:	76 65 72 73 69 6f 6e 20 26 20 69 6e 66 6f 0a 00     version & info..

000005c7 <__c.4874>:
     5c7:	6d 3a 09 74 6f 67 67 6c 65 20 6d 6f 75 73 65 20     m:.toggle mouse 
     5d7:	64 65 62 75 67 0a 00                                debug..

000005de <__c.4872>:
     5de:	6b 3a 09 74 6f 67 67 6c 65 20 6b 65 79 62 6f 61     k:.toggle keyboa
     5ee:	72 64 20 64 65 62 75 67 0a 00                       rd debug..

000005f8 <__c.4870>:
     5f8:	78 3a 09 74 6f 67 67 6c 65 20 6d 61 74 72 69 78     x:.toggle matrix
     608:	20 64 65 62 75 67 0a 00                              debug..

00000610 <__c.4868>:
     610:	64 3a 09 74 6f 67 67 6c 65 20 64 65 62 75 67 20     d:.toggle debug 
     620:	65 6e 61 62 6c 65 0a 00                             enable..

00000628 <__c.4866>:
     628:	63 3a 09 65 6e 74 65 72 20 63 6f 6e 73 6f 6c 65     c:.enter console
     638:	20 6d 6f 64 65 0a 00                                 mode..

0000063f <__c.4864>:
     63f:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6d 6d 61 6e 64 20     ..----- Command 
     64f:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

0000065b <__c.4976>:
     65b:	3f 00                                               ?.

0000065d <__c.4968>:
     65d:	4e 4b 52 4f 3a 20 64 69 73 61 62 6c 65 64 0a 00     NKRO: disabled..

0000066d <__c.4966>:
     66d:	4e 4b 52 4f 3a 20 65 6e 61 62 6c 65 64 0a 00        NKRO: enabled..

0000067c <__c.4963>:
     67c:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     68c:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000696 <__c.4961>:
     696:	0a 0a 2d 2d 2d 2d 2d 20 53 74 61 74 75 73 20 2d     ..----- Status -
     6a6:	2d 2d 2d 2d 0a 00                                   ----..

000006ac <__c.4958>:
     6ac:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     6bc:	6c 58 0a 00                                         lX..

000006c0 <__c.4955>:
     6c0:	47 43 43 3a 20 35 2e 33 2e 30 20 41 56 52 2d 4c     GCC: 5.3.0 AVR-L
     6d0:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     6e0:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

000006eb <__c.4953>:
     6eb:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 43 4f     OPTIONS: LUFA CO
     6fb:	4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44 20 4e 4b     NSOLE COMMAND NK
     70b:	52 4f 20 34 30 39 36 0a 00                          RO 4096..

00000714 <__c.4951>:
     714:	42 55 49 4c 44 3a 20 39 31 34 37 30 31 61 2d 64     BUILD: 914701a-d
     724:	69 72 74 79 20 28 31 37 3a 31 38 3a 35 36 20 41     irty (17:18:56 A
     734:	75 67 20 31 34 20 32 30 31 36 29 0a 00              ug 14 2016)..

00000741 <__c.4949>:
     741:	56 49 44 3a 20 30 78 31 36 43 30 28 74 65 63 68     VID: 0x16C0(tech
     751:	6e 6f 6d 61 6e 63 79 29 20 50 49 44 3a 20 30 78     nomancy) PID: 0x
     761:	30 34 37 43 28 41 74 72 65 75 73 29 20 56 45 52     047C(Atreus) VER
     771:	3a 20 33 36 0a 00                                   : 36..

00000777 <__c.4947>:
     777:	44 45 53 43 3a 20 54 4d 4b 20 6b 65 79 62 6f 61     DESC: TMK keyboa
     787:	72 64 20 66 69 72 6d 77 61 72 65 20 66 6f 72 20     rd firmware for 
     797:	41 74 72 65 75 73 0a 00                             Atreus..

0000079f <__c.4945>:
     79f:	0a 0a 2d 2d 2d 2d 2d 20 56 65 72 73 69 6f 6e 20     ..----- Version 
     7af:	2d 2d 2d 2d 2d 0a 00                                -----..

000007b6 <__c.4942>:
     7b6:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 64 69     .DEBUG: mouse di
     7c6:	73 61 62 6c 65 64 2e 0a 00                          sabled...

000007cf <__c.4940>:
     7cf:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 65 6e     .DEBUG: mouse en
     7df:	61 62 6c 65 64 2e 0a 00                             abled...

000007e7 <__c.4937>:
     7e7:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     7f7:	20 64 69 73 61 62 6c 65 64 2e 0a 00                  disabled...

00000803 <__c.4935>:
     803:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     813:	20 65 6e 61 62 6c 65 64 2e 0a 00                     enabled...

0000081e <__c.4932>:
     81e:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 64     .DEBUG: matrix d
     82e:	69 73 61 62 6c 65 64 2e 0a 00                       isabled...

00000838 <__c.4930>:
     838:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 65     .DEBUG: matrix e
     848:	6e 61 62 6c 65 64 2e 0a 00                          nabled...

00000851 <__c.4927>:
     851:	0a 44 45 42 55 47 3a 20 65 6e 61 62 6c 65 64 2e     .DEBUG: enabled.
     861:	0a 00                                               ..

00000863 <__c.4925>:
     863:	0a 44 45 42 55 47 3a 20 64 69 73 61 62 6c 65 64     .DEBUG: disabled
     873:	2e 0a 00                                            ...

00000876 <__c.4922>:
     876:	6e 6f 74 20 73 75 70 70 6f 72 74 65 64 2e 0a 00     not supported...

00000886 <__c.4920>:
     886:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
     896:	61 64 65 72 2e 2e 2e 20 00                          ader... .

0000089f <__c.4917>:
     89f:	43 3e 20 00                                         C> .

000008a3 <__c.4915>:
     8a3:	0a 45 6e 74 65 72 20 43 6f 6e 73 6f 6c 65 20 4d     .Enter Console M
     8b3:	6f 64 65 0a 00                                      ode..

000008b8 <__c.4909>:
     8b8:	55 6e 6c 6f 63 6b 65 64 2e 0a 00                    Unlocked...

000008c3 <__c.4907>:
     8c3:	4c 6f 63 6b 65 64 2e 0a 00                          Locked...

000008cc <__ctors_end>:
     8cc:	11 24       	eor	r1, r1
     8ce:	1f be       	out	0x3f, r1	; 63
     8d0:	cf ef       	ldi	r28, 0xFF	; 255
     8d2:	da e0       	ldi	r29, 0x0A	; 10
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	cd bf       	out	0x3d, r28	; 61

000008d8 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     8d8:	04 b6       	in	r0, 0x34	; 52
     8da:	03 fe       	sbrs	r0, 3
     8dc:	27 c0       	rjmp	.+78     	; 0x92c <__do_copy_data>
     8de:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <__bss_end>
     8e2:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <__bss_end+0x1>
     8e6:	a0 91 c5 01 	lds	r26, 0x01C5	; 0x8001c5 <__bss_end+0x2>
     8ea:	b0 91 c6 01 	lds	r27, 0x01C6	; 0x8001c6 <__bss_end+0x3>
     8ee:	87 30       	cpi	r24, 0x07	; 7
     8f0:	90 4b       	sbci	r25, 0xB0	; 176
     8f2:	a7 40       	sbci	r26, 0x07	; 7
     8f4:	b0 4b       	sbci	r27, 0xB0	; 176
     8f6:	d1 f4       	brne	.+52     	; 0x92c <__do_copy_data>
        reset_key = 0;
     8f8:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <__bss_end>
     8fc:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <__bss_end+0x1>
     900:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <__bss_end+0x2>
     904:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     908:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     90a:	84 b7       	in	r24, 0x34	; 52
     90c:	87 7f       	andi	r24, 0xF7	; 247
     90e:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	a8 95       	wdr
     916:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     91a:	88 61       	ori	r24, 0x18	; 24
     91c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     920:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     924:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     926:	e0 e0       	ldi	r30, 0x00	; 0
     928:	f8 e3       	ldi	r31, 0x38	; 56
     92a:	09 95       	icall

0000092c <__do_copy_data>:
     92c:	11 e0       	ldi	r17, 0x01	; 1
     92e:	a0 e0       	ldi	r26, 0x00	; 0
     930:	b1 e0       	ldi	r27, 0x01	; 1
     932:	e0 ee       	ldi	r30, 0xE0	; 224
     934:	f9 e3       	ldi	r31, 0x39	; 57
     936:	02 c0       	rjmp	.+4      	; 0x93c <__do_copy_data+0x10>
     938:	05 90       	lpm	r0, Z+
     93a:	0d 92       	st	X+, r0
     93c:	a6 32       	cpi	r26, 0x26	; 38
     93e:	b1 07       	cpc	r27, r17
     940:	d9 f7       	brne	.-10     	; 0x938 <__do_copy_data+0xc>

00000942 <__do_clear_bss>:
     942:	21 e0       	ldi	r18, 0x01	; 1
     944:	a6 e2       	ldi	r26, 0x26	; 38
     946:	b1 e0       	ldi	r27, 0x01	; 1
     948:	01 c0       	rjmp	.+2      	; 0x94c <.do_clear_bss_start>

0000094a <.do_clear_bss_loop>:
     94a:	1d 92       	st	X+, r1

0000094c <.do_clear_bss_start>:
     94c:	a3 3c       	cpi	r26, 0xC3	; 195
     94e:	b2 07       	cpc	r27, r18
     950:	e1 f7       	brne	.-8      	; 0x94a <.do_clear_bss_loop>
     952:	0e 94 06 09 	call	0x120c	; 0x120c <main>
     956:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <_exit>

0000095a <__bad_interrupt>:
     95a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000095e <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     95e:	ff 93       	push	r31
	push	ZL
     960:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     962:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <xfunc_out>
	lds	ZH, xfunc_out+1	;/
     966:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <xfunc_out+0x1>
	sbiw	ZL, 0		;Skip if null
     96a:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     96c:	09 f0       	breq	.+2      	; 0x970 <xputc+0x12>
	icall
     96e:	09 95       	icall
2:	pop	ZL
     970:	ef 91       	pop	r30
	pop	ZH
     972:	ff 91       	pop	r31
	ret
     974:	08 95       	ret

00000976 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     976:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     978:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     97a:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     97c:	11 f0       	breq	.+4      	; 0x982 <xputs+0xc>
	rcall	xputc
     97e:	ef df       	rcall	.-34     	; 0x95e <xputc>
	rjmp	1b
     980:	fb cf       	rjmp	.-10     	; 0x978 <xputs+0x2>
2:	ret
     982:	08 95       	ret

00000984 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     984:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     986:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     988:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     98a:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     98c:	0c c0       	rjmp	.+24     	; 0x9a6 <xitoa+0x22>
	neg	r20		;
     98e:	41 95       	neg	r20
	sbrs	r25, 7		;
     990:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <xitoa+0x22>
	ldi	r30, '-'	;
     994:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     996:	60 95       	com	r22
	com	r23		;
     998:	70 95       	com	r23
	com	r24		;
     99a:	80 95       	com	r24
	com	r25		;
     99c:	90 95       	com	r25
	adc	r22, r1		;
     99e:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     9a0:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     9a2:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     9a4:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     9a6:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <xitoa+0x2a>
	neg	r18		;
     9aa:	21 95       	neg	r18
	ldi	r19, '0'	;/
     9ac:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     9ae:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     9b0:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     9b2:	66 0f       	add	r22, r22
	rol	r23		;
     9b4:	77 1f       	adc	r23, r23
	rol	r24		;
     9b6:	88 1f       	adc	r24, r24
	rol	r25		;
     9b8:	99 1f       	adc	r25, r25
	rol	r26		;
     9ba:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     9bc:	a4 17       	cp	r26, r20
	brcs	3f		;
     9be:	10 f0       	brcs	.+4      	; 0x9c4 <xitoa+0x40>
	sub	r26, r20	;
     9c0:	a4 1b       	sub	r26, r20
	inc	r22		;
     9c2:	63 95       	inc	r22
3:	dec	r21		;
     9c4:	5a 95       	dec	r21
	brne	2b		;/
     9c6:	a9 f7       	brne	.-22     	; 0x9b2 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     9c8:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     9ca:	08 f0       	brcs	.+2      	; 0x9ce <xitoa+0x4a>
	subi	r26, -7		;
     9cc:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     9ce:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     9d0:	af 93       	push	r26
	inc	r31		;/
     9d2:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     9d4:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     9d6:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     9d8:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     9da:	91 05       	cpc	r25, r1
	brne	1b		;/
     9dc:	41 f7       	brne	.-48     	; 0x9ae <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     9de:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <xitoa+0x62>
	push	r30		;
     9e2:	ef 93       	push	r30
	inc	r31		;/
     9e4:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     9e6:	f2 17       	cp	r31, r18
	brcc	6f		;
     9e8:	18 f4       	brcc	.+6      	; 0x9f0 <xitoa+0x6c>
	push	r19		;
     9ea:	3f 93       	push	r19
	inc	r31		;
     9ec:	f3 95       	inc	r31
	rjmp	5b		;/
     9ee:	fb cf       	rjmp	.-10     	; 0x9e6 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     9f0:	8f 91       	pop	r24
	rcall	xputc		;
     9f2:	b5 df       	rcall	.-150    	; 0x95e <xputc>
	dec	r31		;
     9f4:	fa 95       	dec	r31
	brne	6b		;/
     9f6:	e1 f7       	brne	.-8      	; 0x9f0 <xitoa+0x6c>

	ret
     9f8:	08 95       	ret

000009fa <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     9fa:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     9fc:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     9fe:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     a00:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     a02:	21 f0       	breq	.+8      	; 0xa0c <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     a04:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     a06:	19 f0       	breq	.+6      	; 0xa0e <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     a08:	aa df       	rcall	.-172    	; 0x95e <xputc>
	rjmp	0b		;/
     a0a:	f9 cf       	rjmp	.-14     	; 0x9fe <xvprintf+0x4>
90:	ret
     a0c:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     a0e:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     a10:	e8 94       	clt
	_LPMI	r21		;Get flags
     a12:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     a14:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     a16:	c1 f3       	breq	.-16     	; 0xa08 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     a18:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     a1a:	11 f4       	brne	.+4      	; 0xa20 <xvprintf+0x26>
	set			;/
     a1c:	68 94       	set
22:	_LPMI	r21		;Get width
     a1e:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     a20:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     a22:	48 f4       	brcc	.+18     	; 0xa36 <xvprintf+0x3c>
	subi	r21, '0'	;
     a24:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     a26:	90 f3       	brcs	.-28     	; 0xa0c <xvprintf+0x12>
	lsl	r18		;
     a28:	22 0f       	add	r18, r18
	mov	r0, r18		;
     a2a:	02 2e       	mov	r0, r18
	lsl	r18		;
     a2c:	22 0f       	add	r18, r18
	lsl	r18		;
     a2e:	22 0f       	add	r18, r18
	add	r18, r0		;
     a30:	20 0d       	add	r18, r0
	add	r18, r21	;
     a32:	25 0f       	add	r18, r21
	rjmp	22b		;/
     a34:	f4 cf       	rjmp	.-24     	; 0xa1e <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     a36:	0e f4       	brtc	.+2      	; 0xa3a <xvprintf+0x40>
	neg	r18		;
     a38:	21 95       	neg	r18
25:	ld	r24, Y+		;
     a3a:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     a3c:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     a3e:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     a40:	19 f3       	breq	.-58     	; 0xa08 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     a42:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     a44:	29 f1       	breq	.+74     	; 0xa90 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     a46:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     a48:	59 f1       	breq	.+86     	; 0xaa0 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     a4a:	bc 01       	movw	r22, r24
	clr	r24		;
     a4c:	88 27       	eor	r24, r24
	clr	r25		;
     a4e:	99 27       	eor	r25, r25
	clt			;/
     a50:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     a52:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     a54:	21 f4       	brne	.+8      	; 0xa5e <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     a56:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     a58:	99 91       	ld	r25, Y+
	set			;
     a5a:	68 94       	set
	_LPMI	r21		;/
     a5c:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     a5e:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     a60:	39 f4       	brne	.+14     	; 0xa70 <xvprintf+0x76>
	ldi	r20, -10	;
     a62:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     a64:	7e f0       	brts	.+30     	; 0xa84 <xvprintf+0x8a>
	sbrs	r23, 7		;
     a66:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     a68:	0d c0       	rjmp	.+26     	; 0xa84 <xvprintf+0x8a>
	ldi	r24, -1		;
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     a6c:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     a6e:	0a c0       	rjmp	.+20     	; 0xa84 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     a70:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     a72:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     a74:	39 f0       	breq	.+14     	; 0xa84 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     a76:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     a78:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     a7a:	21 f0       	breq	.+8      	; 0xa84 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     a7c:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     a7e:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     a80:	09 f0       	breq	.+2      	; 0xa84 <xvprintf+0x8a>
	ret			;abort
     a82:	08 95       	ret
40:	push	ZH		;Output the value
     a84:	ff 93       	push	r31
	push	ZL		;
     a86:	ef 93       	push	r30
	rcall	xitoa		;
     a88:	7d df       	rcall	.-262    	; 0x984 <xitoa>
42:	pop	ZL		;
     a8a:	ef 91       	pop	r30
	pop	ZH		;
     a8c:	ff 91       	pop	r31
	rjmp	0b		;/
     a8e:	b7 cf       	rjmp	.-146    	; 0x9fe <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     a90:	ff 93       	push	r31
	push	ZL
     a92:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     a94:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     a96:	81 91       	ld	r24, Z+
	cpi	r24, 0
     a98:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     a9a:	b9 f3       	breq	.-18     	; 0xa8a <xvprintf+0x90>
	rcall	xputc
     a9c:	60 df       	rcall	.-320    	; 0x95e <xputc>
	rjmp	51b
     a9e:	fb cf       	rjmp	.-10     	; 0xa96 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     aa0:	ff 93       	push	r31
	push	ZL
     aa2:	ef 93       	push	r30
	rcall	xputs
     aa4:	68 df       	rcall	.-304    	; 0x976 <xputs>
	rjmp	42b
     aa6:	f1 cf       	rjmp	.-30     	; 0xa8a <xvprintf+0x90>

00000aa8 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     aa8:	df 93       	push	r29
	push	YL
     aaa:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     aac:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     aae:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     ab0:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     ab2:	a3 df       	rcall	.-186    	; 0x9fa <xvprintf>
	pop	YL
     ab4:	cf 91       	pop	r28
	pop	YH
     ab6:	df 91       	pop	r29
	ret
     ab8:	08 95       	ret

00000aba <action_function>:
  [3] = ACTION_FUNCTION(BOOTLOADER)
};

void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
  if (id == BOOTLOADER) {
     aba:	61 11       	cpse	r22, r1
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <action_function+0x8>
    bootloader();
     abe:	0c 94 7e 05 	jmp	0xafc	; 0xafc <bootloader>
     ac2:	08 95       	ret

00000ac4 <actionmap_key_to_action>:
#include "keymap_common.h"

/* translates key to keycode */
uint16_t actionmap_key_to_action(uint8_t layer, key_t key)
{
    return pgm_read_word(&keymaps[(layer)][(key.row)][(key.col)]);
     ac4:	2c e2       	ldi	r18, 0x2C	; 44
     ac6:	82 9f       	mul	r24, r18
     ac8:	c0 01       	movw	r24, r0
     aca:	11 24       	eor	r1, r1
     acc:	fc 01       	movw	r30, r24
     ace:	2b e0       	ldi	r18, 0x0B	; 11
     ad0:	72 9f       	mul	r23, r18
     ad2:	e0 0d       	add	r30, r0
     ad4:	f1 1d       	adc	r31, r1
     ad6:	11 24       	eor	r1, r1
     ad8:	e6 0f       	add	r30, r22
     ada:	f1 1d       	adc	r31, r1
     adc:	ee 0f       	add	r30, r30
     ade:	ff 1f       	adc	r31, r31
     ae0:	e8 51       	subi	r30, 0x18	; 24
     ae2:	ff 4f       	sbci	r31, 0xFF	; 255
     ae4:	85 91       	lpm	r24, Z+
     ae6:	94 91       	lpm	r25, Z
}
     ae8:	08 95       	ret

00000aea <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     aea:	e8 2f       	mov	r30, r24
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	ee 0f       	add	r30, r30
     af0:	ff 1f       	adc	r31, r31
     af2:	e0 5a       	subi	r30, 0xA0	; 160
     af4:	f0 40       	sbci	r31, 0x00	; 0
     af6:	85 91       	lpm	r24, Z+
     af8:	94 91       	lpm	r25, Z
}
     afa:	08 95       	ret

00000afc <bootloader>:

void bootloader() {
  clear_keyboard();
     afc:	0e 94 b7 13 	call	0x276e	; 0x276e <clear_keyboard>
  print("\n\nJump to bootloader... ");
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b08:	2f ef       	ldi	r18, 0xFF	; 255
     b0a:	84 e3       	ldi	r24, 0x34	; 52
     b0c:	9c e0       	ldi	r25, 0x0C	; 12
     b0e:	21 50       	subi	r18, 0x01	; 1
     b10:	80 40       	sbci	r24, 0x00	; 0
     b12:	90 40       	sbci	r25, 0x00	; 0
     b14:	e1 f7       	brne	.-8      	; 0xb0e <__stack+0xf>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <__stack+0x19>
     b18:	00 00       	nop
  TIMSK0 = 0; TIMSK1 = 0; TIMSK3 = 0; TIMSK4 = 0; UCSR1B = 0; TWCR = 0;
  DDRB = 0; DDRC = 0; DDRD = 0; DDRE = 0; DDRF = 0; TWCR = 0;
  PORTB = 0; PORTC = 0; PORTD = 0; PORTE = 0; PORTF = 0;
  asm volatile("jmp 0x7E00");
#else
  *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
     b1a:	87 e7       	ldi	r24, 0x77	; 119
     b1c:	97 e7       	ldi	r25, 0x77	; 119
     b1e:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <_end+0x63a>
     b22:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <_end+0x639>
  bootloader_jump();
     b26:	0e 94 28 1a 	call	0x3450	; 0x3450 <bootloader_jump>
  print("not supported.\n");
     b2a:	80 ef       	ldi	r24, 0xF0	; 240
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	0c 94 bb 04 	jmp	0x976	; 0x976 <xputs>

00000b32 <unselect_rows>:

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
     b32:	8a b1       	in	r24, 0x0a	; 10
     b34:	80 7f       	andi	r24, 0xF0	; 240
     b36:	8a b9       	out	0x0a, r24	; 10
     b38:	8b b1       	in	r24, 0x0b	; 11
     b3a:	80 7f       	andi	r24, 0xF0	; 240
     b3c:	8b b9       	out	0x0b, r24	; 11
     b3e:	08 95       	ret

00000b40 <matrix_init>:
     b40:	0e 94 99 05 	call	0xb32	; 0xb32 <unselect_rows>
     b44:	80 b3       	in	r24, 0x10	; 16
     b46:	8d 78       	andi	r24, 0x8D	; 141
     b48:	80 bb       	out	0x10, r24	; 16
     b4a:	81 b3       	in	r24, 0x11	; 17
     b4c:	82 67       	ori	r24, 0x72	; 114
     b4e:	81 bb       	out	0x11, r24	; 17
     b50:	84 b1       	in	r24, 0x04	; 4
     b52:	81 70       	andi	r24, 0x01	; 1
     b54:	84 b9       	out	0x04, r24	; 4
     b56:	85 b1       	in	r24, 0x05	; 5
     b58:	8e 6f       	ori	r24, 0xFE	; 254
     b5a:	85 b9       	out	0x05, r24	; 5
     b5c:	ae e2       	ldi	r26, 0x2E	; 46
     b5e:	b1 e0       	ldi	r27, 0x01	; 1
     b60:	11 96       	adiw	r26, 0x01	; 1
     b62:	1c 92       	st	X, r1
     b64:	1e 92       	st	-X, r1
     b66:	e6 e2       	ldi	r30, 0x26	; 38
     b68:	f1 e0       	ldi	r31, 0x01	; 1
     b6a:	11 82       	std	Z+1, r1	; 0x01
     b6c:	10 82       	st	Z, r1
     b6e:	13 96       	adiw	r26, 0x03	; 3
     b70:	1c 92       	st	X, r1
     b72:	1e 92       	st	-X, r1
     b74:	12 97       	sbiw	r26, 0x02	; 2
     b76:	13 82       	std	Z+3, r1	; 0x03
     b78:	12 82       	std	Z+2, r1	; 0x02
     b7a:	15 96       	adiw	r26, 0x05	; 5
     b7c:	1c 92       	st	X, r1
     b7e:	1e 92       	st	-X, r1
     b80:	14 97       	sbiw	r26, 0x04	; 4
     b82:	15 82       	std	Z+5, r1	; 0x05
     b84:	14 82       	std	Z+4, r1	; 0x04
     b86:	17 96       	adiw	r26, 0x07	; 7
     b88:	1c 92       	st	X, r1
     b8a:	1e 92       	st	-X, r1
     b8c:	16 97       	sbiw	r26, 0x06	; 6
     b8e:	17 82       	std	Z+7, r1	; 0x07
     b90:	16 82       	std	Z+6, r1	; 0x06
     b92:	08 95       	ret

00000b94 <matrix_scan>:
     b94:	bf 92       	push	r11
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	c6 e2       	ldi	r28, 0x26	; 38
     ba8:	d1 e0       	ldi	r29, 0x01	; 1
     baa:	d1 2c       	mov	r13, r1
     bac:	cc 24       	eor	r12, r12
     bae:	c3 94       	inc	r12
     bb0:	45 e0       	ldi	r20, 0x05	; 5
     bb2:	b4 2e       	mov	r11, r20
     bb4:	52 e4       	ldi	r21, 0x42	; 66
     bb6:	e5 2e       	mov	r14, r21
     bb8:	52 e0       	ldi	r21, 0x02	; 2
     bba:	f5 2e       	mov	r15, r21
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	d8 16       	cp	r13, r24
     bc0:	61 f0       	breq	.+24     	; 0xbda <matrix_scan+0x46>
     bc2:	93 e0       	ldi	r25, 0x03	; 3
     bc4:	d9 16       	cp	r13, r25
     bc6:	61 f0       	breq	.+24     	; 0xbe0 <matrix_scan+0x4c>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	d8 16       	cp	r13, r24
     bcc:	19 f0       	breq	.+6      	; 0xbd4 <matrix_scan+0x40>
     bce:	50 9a       	sbi	0x0a, 0	; 10
     bd0:	58 98       	cbi	0x0b, 0	; 11
     bd2:	08 c0       	rjmp	.+16     	; 0xbe4 <matrix_scan+0x50>
     bd4:	51 9a       	sbi	0x0a, 1	; 10
     bd6:	59 98       	cbi	0x0b, 1	; 11
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <matrix_scan+0x50>
     bda:	52 9a       	sbi	0x0a, 2	; 10
     bdc:	5a 98       	cbi	0x0b, 2	; 11
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <matrix_scan+0x50>
     be0:	53 9a       	sbi	0x0a, 3	; 10
     be2:	5b 98       	cbi	0x0b, 3	; 11
     be4:	87 ec       	ldi	r24, 0xC7	; 199
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <matrix_scan+0x54>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <matrix_scan+0x5a>
     bee:	00 00       	nop
     bf0:	8f b1       	in	r24, 0x0f	; 15
     bf2:	82 95       	swap	r24
     bf4:	86 95       	lsr	r24
     bf6:	86 95       	lsr	r24
     bf8:	83 70       	andi	r24, 0x03	; 3
     bfa:	8c 25       	eor	r24, r12
     bfc:	08 2f       	mov	r16, r24
     bfe:	01 70       	andi	r16, 0x01	; 1
     c00:	10 e0       	ldi	r17, 0x00	; 0
     c02:	7d 99       	sbic	0x0f, 5	; 15
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <matrix_scan+0x78>
     c06:	22 e0       	ldi	r18, 0x02	; 2
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <matrix_scan+0x7c>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	c8 01       	movw	r24, r16
     c12:	82 2b       	or	r24, r18
     c14:	93 2b       	or	r25, r19
     c16:	7c 99       	sbic	0x0f, 4	; 15
     c18:	03 c0       	rjmp	.+6      	; 0xc20 <matrix_scan+0x8c>
     c1a:	24 e0       	ldi	r18, 0x04	; 4
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <matrix_scan+0x90>
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	ac 01       	movw	r20, r24
     c26:	42 2b       	or	r20, r18
     c28:	53 2b       	or	r21, r19
     c2a:	23 b1       	in	r18, 0x03	; 3
     c2c:	02 2e       	mov	r0, r18
     c2e:	00 0c       	add	r0, r0
     c30:	33 0b       	sbc	r19, r19
     c32:	20 95       	com	r18
     c34:	30 95       	com	r19
     c36:	c9 01       	movw	r24, r18
     c38:	88 27       	eor	r24, r24
     c3a:	99 0f       	add	r25, r25
     c3c:	88 1f       	adc	r24, r24
     c3e:	99 27       	eor	r25, r25
     c40:	33 e0       	ldi	r19, 0x03	; 3
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	3a 95       	dec	r19
     c48:	e1 f7       	brne	.-8      	; 0xc42 <matrix_scan+0xae>
     c4a:	84 2b       	or	r24, r20
     c4c:	95 2b       	or	r25, r21
     c4e:	1e 99       	sbic	0x03, 6	; 3
     c50:	03 c0       	rjmp	.+6      	; 0xc58 <matrix_scan+0xc4>
     c52:	40 e1       	ldi	r20, 0x10	; 16
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <matrix_scan+0xc8>
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	84 2b       	or	r24, r20
     c5e:	95 2b       	or	r25, r21
     c60:	1d 99       	sbic	0x03, 5	; 3
     c62:	03 c0       	rjmp	.+6      	; 0xc6a <matrix_scan+0xd6>
     c64:	40 e2       	ldi	r20, 0x20	; 32
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <matrix_scan+0xda>
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	84 2b       	or	r24, r20
     c70:	95 2b       	or	r25, r21
     c72:	1c 99       	sbic	0x03, 4	; 3
     c74:	03 c0       	rjmp	.+6      	; 0xc7c <matrix_scan+0xe8>
     c76:	20 e4       	ldi	r18, 0x40	; 64
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <matrix_scan+0xec>
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	82 2b       	or	r24, r18
     c82:	93 2b       	or	r25, r19
     c84:	1b 99       	sbic	0x03, 3	; 3
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <matrix_scan+0xfa>
     c88:	60 e8       	ldi	r22, 0x80	; 128
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <matrix_scan+0xfe>
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	86 2b       	or	r24, r22
     c94:	97 2b       	or	r25, r23
     c96:	1a 99       	sbic	0x03, 2	; 3
     c98:	03 c0       	rjmp	.+6      	; 0xca0 <matrix_scan+0x10c>
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	51 e0       	ldi	r21, 0x01	; 1
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <matrix_scan+0x110>
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	84 2b       	or	r24, r20
     ca6:	95 2b       	or	r25, r21
     ca8:	19 99       	sbic	0x03, 1	; 3
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <matrix_scan+0x11e>
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	32 e0       	ldi	r19, 0x02	; 2
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <matrix_scan+0x122>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	82 2b       	or	r24, r18
     cb8:	93 2b       	or	r25, r19
     cba:	79 99       	sbic	0x0f, 1	; 15
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <matrix_scan+0x130>
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	34 e0       	ldi	r19, 0x04	; 4
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <matrix_scan+0x134>
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	82 2b       	or	r24, r18
     cca:	93 2b       	or	r25, r19
     ccc:	28 81       	ld	r18, Y
     cce:	39 81       	ldd	r19, Y+1	; 0x01
     cd0:	28 17       	cp	r18, r24
     cd2:	39 07       	cpc	r19, r25
     cd4:	41 f1       	breq	.+80     	; 0xd26 <matrix_scan+0x192>
     cd6:	99 83       	std	Y+1, r25	; 0x01
     cd8:	88 83       	st	Y, r24
     cda:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <debouncing>
     cde:	88 23       	and	r24, r24
     ce0:	01 f1       	breq	.+64     	; 0xd22 <matrix_scan+0x18e>
     ce2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
     ce6:	80 ff       	sbrs	r24, 0
     ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <matrix_scan+0x15e>
     cea:	87 e4       	ldi	r24, 0x47	; 71
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
     cf2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
     cf6:	80 ff       	sbrs	r24, 0
     cf8:	0c c0       	rjmp	.+24     	; 0xd12 <matrix_scan+0x17e>
     cfa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <debouncing>
     cfe:	1f 92       	push	r1
     d00:	8f 93       	push	r24
     d02:	ff 92       	push	r15
     d04:	ef 92       	push	r14
     d06:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__xprintf>
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
     d16:	80 ff       	sbrs	r24, 0
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <matrix_scan+0x18e>
     d1a:	80 e4       	ldi	r24, 0x40	; 64
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
     d22:	b0 92 08 01 	sts	0x0108, r11	; 0x800108 <debouncing>
     d26:	0e 94 99 05 	call	0xb32	; 0xb32 <unselect_rows>
     d2a:	d3 94       	inc	r13
     d2c:	22 96       	adiw	r28, 0x02	; 2
     d2e:	94 e0       	ldi	r25, 0x04	; 4
     d30:	d9 12       	cpse	r13, r25
     d32:	44 cf       	rjmp	.-376    	; 0xbbc <matrix_scan+0x28>
     d34:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <debouncing>
     d38:	88 23       	and	r24, r24
     d3a:	61 f1       	breq	.+88     	; 0xd94 <matrix_scan+0x200>
     d3c:	81 50       	subi	r24, 0x01	; 1
     d3e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <debouncing>
     d42:	88 23       	and	r24, r24
     d44:	39 f0       	breq	.+14     	; 0xd54 <matrix_scan+0x1c0>
     d46:	8f e9       	ldi	r24, 0x9F	; 159
     d48:	9f e0       	ldi	r25, 0x0F	; 15
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <matrix_scan+0x1b6>
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <matrix_scan+0x1bc>
     d50:	00 00       	nop
     d52:	20 c0       	rjmp	.+64     	; 0xd94 <matrix_scan+0x200>
     d54:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     d58:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
     d5c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <matrix+0x1>
     d60:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <matrix>
     d64:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end+0x2>
     d68:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x3>
     d6c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <matrix+0x3>
     d70:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <matrix+0x2>
     d74:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end+0x4>
     d78:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x5>
     d7c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <matrix+0x5>
     d80:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <matrix+0x4>
     d84:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end+0x6>
     d88:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <__data_end+0x7>
     d8c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <matrix+0x7>
     d90:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <matrix+0x6>
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	ff 90       	pop	r15
     da0:	ef 90       	pop	r14
     da2:	df 90       	pop	r13
     da4:	cf 90       	pop	r12
     da6:	bf 90       	pop	r11
     da8:	08 95       	ret

00000daa <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     daa:	e8 2f       	mov	r30, r24
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	e2 5d       	subi	r30, 0xD2	; 210
     db4:	fe 4f       	sbci	r31, 0xFE	; 254
}
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	08 95       	ret

00000dbc <matrix_print>:

void matrix_print(void)
{
     dbc:	cf 92       	push	r12
     dbe:	df 92       	push	r13
     dc0:	ef 92       	push	r14
     dc2:	ff 92       	push	r15
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
     dcc:	89 e2       	ldi	r24, 0x29	; 41
     dce:	92 e0       	ldi	r25, 0x02	; 2
     dd0:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
     dd4:	8e e2       	ldi	r24, 0x2E	; 46
     dd6:	e8 2e       	mov	r14, r24
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	f8 2e       	mov	r15, r24
     ddc:	c0 e0       	ldi	r28, 0x00	; 0
     dde:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
     de0:	94 e2       	ldi	r25, 0x24	; 36
     de2:	c9 2e       	mov	r12, r25
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	d9 2e       	mov	r13, r25
        pbin_reverse16(matrix_get_row(row));
     de8:	0b e1       	ldi	r16, 0x1B	; 27
     dea:	12 e0       	ldi	r17, 0x02	; 2
        phex(row); print(": ");
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	df 92       	push	r13
     df2:	cf 92       	push	r12
     df4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__xprintf>
     df8:	81 e2       	ldi	r24, 0x21	; 33
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
        pbin_reverse16(matrix_get_row(row));
     e00:	f7 01       	movw	r30, r14
     e02:	81 91       	ld	r24, Z+
     e04:	91 91       	ld	r25, Z+
     e06:	7f 01       	movw	r14, r30
     e08:	0e 94 c0 1a 	call	0x3580	; 0x3580 <bitrev16>
     e0c:	9f 93       	push	r25
     e0e:	8f 93       	push	r24
     e10:	1f 93       	push	r17
     e12:	0f 93       	push	r16
     e14:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__xprintf>
        print("\n");
     e18:	89 e1       	ldi	r24, 0x19	; 25
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
     e20:	21 96       	adiw	r28, 0x01	; 1
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
     e22:	8d b7       	in	r24, 0x3d	; 61
     e24:	9e b7       	in	r25, 0x3e	; 62
     e26:	08 96       	adiw	r24, 0x08	; 8
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	9e bf       	out	0x3e, r25	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	8d bf       	out	0x3d, r24	; 61
     e32:	c4 30       	cpi	r28, 0x04	; 4
     e34:	d1 05       	cpc	r29, r1
     e36:	d1 f6       	brne	.-76     	; 0xdec <matrix_print+0x30>
    }
}
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	df 90       	pop	r13
     e46:	cf 90       	pop	r12
     e48:	08 95       	ret

00000e4a <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
     e4a:	81 ff       	sbrs	r24, 1
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <led_set+0x8>
        // output low
        DDRD |= (1<<4);
     e4e:	54 9a       	sbi	0x0a, 4	; 10
     e50:	01 c0       	rjmp	.+2      	; 0xe54 <led_set+0xa>
        PORTD &= ~(1<<4);
    } else {
        // Hi-Z
        DDRD &= ~(1<<4);
     e52:	54 98       	cbi	0x0a, 4	; 10
        PORTD &= ~(1<<4);
     e54:	5c 98       	cbi	0x0b, 4	; 11
     e56:	08 95       	ret

00000e58 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     e58:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <keyboard_led_stats>
     e5c:	08 95       	ret

00000e5e <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
     e5e:	08 95       	ret

00000e60 <sendchar>:
{
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     e60:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <USB_DeviceState>
     e64:	94 30       	cpi	r25, 0x04	; 4
     e66:	09 f0       	breq	.+2      	; 0xe6a <sendchar+0xa>
     e68:	59 c0       	rjmp	.+178    	; 0xf1c <sendchar+0xbc>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e6a:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     e6e:	9f 70       	andi	r25, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e70:	30 91 ec 00 	lds	r19, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     e74:	23 2f       	mov	r18, r19
     e76:	21 70       	andi	r18, 0x01	; 1
     e78:	30 fd       	sbrc	r19, 0
     e7a:	20 e8       	ldi	r18, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e7c:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e7e:	22 e0       	ldi	r18, 0x02	; 2
     e80:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e84:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     e88:	20 ff       	sbrs	r18, 0
     e8a:	29 c0       	rjmp	.+82     	; 0xede <sendchar+0x7e>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     e8c:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     e90:	27 ff       	sbrs	r18, 7
     e92:	25 c0       	rjmp	.+74     	; 0xede <sendchar+0x7e>
        Endpoint_SelectEndpoint(ep);
        return -1;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
     e94:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <timeouted.4831>
     e98:	22 23       	and	r18, r18
     e9a:	21 f0       	breq	.+8      	; 0xea4 <sendchar+0x44>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e9c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ea0:	25 ff       	sbrs	r18, 5
     ea2:	1d c0       	rjmp	.+58     	; 0xede <sendchar+0x7e>
        Endpoint_SelectEndpoint(ep);
        return - 1;
    }

    timeouted = false;
     ea4:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <timeouted.4831>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     ea8:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     eac:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

    uint8_t timeout = SEND_TIMEOUT;
    uint16_t prevFN = USB_Device_GetFrameNumber();
    while (!Endpoint_IsReadWriteAllowed()) {
     eb0:	26 e0       	ldi	r18, 0x06	; 6
     eb2:	07 c0       	rjmp	.+14     	; 0xec2 <sendchar+0x62>
     eb4:	60 91 e4 00 	lds	r22, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     eb8:	70 91 e5 00 	lds	r23, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
        }
        if (Endpoint_IsStalled()) {
            Endpoint_SelectEndpoint(ep);
            return -1;
        }
        if (prevFN != USB_Device_GetFrameNumber()) {
     ebc:	46 17       	cp	r20, r22
     ebe:	57 07       	cpc	r21, r23
     ec0:	91 f4       	brne	.+36     	; 0xee6 <sendchar+0x86>
     ec2:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    while (!Endpoint_IsReadWriteAllowed()) {
     ec6:	35 fd       	sbrc	r19, 5
     ec8:	19 c0       	rjmp	.+50     	; 0xefc <sendchar+0x9c>
        switch (USB_DeviceState) {
     eca:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <USB_DeviceState>
     ece:	33 23       	and	r19, r19
     ed0:	29 f1       	breq	.+74     	; 0xf1c <sendchar+0xbc>
     ed2:	35 30       	cpi	r19, 0x05	; 5
     ed4:	19 f1       	breq	.+70     	; 0xf1c <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ed6:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
        if (Endpoint_IsStalled()) {
     eda:	35 ff       	sbrs	r19, 5
     edc:	eb cf       	rjmp	.-42     	; 0xeb4 <sendchar+0x54>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ede:	9f 70       	andi	r25, 0x0F	; 15
     ee0:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     ee4:	1b c0       	rjmp	.+54     	; 0xf1c <sendchar+0xbc>
     ee6:	21 50       	subi	r18, 0x01	; 1
            if (!(timeout--)) {
     ee8:	21 f4       	brne	.+8      	; 0xef2 <sendchar+0x92>
                timeouted = true;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timeouted.4831>
     ef0:	f6 cf       	rjmp	.-20     	; 0xede <sendchar+0x7e>
     ef2:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     ef6:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     efa:	e3 cf       	rjmp	.-58     	; 0xec2 <sendchar+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     efc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed())
     f04:	85 fd       	sbrc	r24, 5
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <sendchar+0xb2>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f0c:	8e 77       	andi	r24, 0x7E	; 126
     f0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f12:	9f 70       	andi	r25, 0x0F	; 15
     f14:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        Endpoint_ClearIN();

    Endpoint_SelectEndpoint(ep);
    return 0;
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	08 95       	ret
            return -1;
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
}
     f1e:	08 95       	ret

00000f20 <send_consumer>:
{
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	00 d0       	rcall	.+0      	; 0xf26 <send_consumer+0x6>
     f26:	1f 92       	push	r1
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
    if (USB_DeviceState != DEVICE_STATE_Configured)
     f2c:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <USB_DeviceState>
     f30:	24 30       	cpi	r18, 0x04	; 4
     f32:	d9 f4       	brne	.+54     	; 0xf6a <send_consumer+0x4a>
    report_extra_t r = {
     f34:	23 e0       	ldi	r18, 0x03	; 3
     f36:	29 83       	std	Y+1, r18	; 0x01
     f38:	9b 83       	std	Y+3, r25	; 0x03
     f3a:	8a 83       	std	Y+2, r24	; 0x02
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    uint8_t timeout = 0;
     f42:	80 e0       	ldi	r24, 0x00	; 0
    while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
     f44:	81 50       	subi	r24, 0x01	; 1
     f46:	21 f0       	breq	.+8      	; 0xf50 <send_consumer+0x30>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f48:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f4c:	95 ff       	sbrs	r25, 5
     f4e:	fa cf       	rjmp	.-12     	; 0xf44 <send_consumer+0x24>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	63 e0       	ldi	r22, 0x03	; 3
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	ce 01       	movw	r24, r28
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	0e 94 07 0c 	call	0x180e	; 0x180e <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f64:	8e 77       	andi	r24, 0x7E	; 126
     f66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <send_system>:
{
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <send_system+0x6>
     f7c:	1f 92       	push	r1
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
    if (USB_DeviceState != DEVICE_STATE_Configured)
     f82:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <USB_DeviceState>
     f86:	24 30       	cpi	r18, 0x04	; 4
     f88:	d9 f4       	brne	.+54     	; 0xfc0 <send_system+0x4a>
    report_extra_t r = {
     f8a:	22 e0       	ldi	r18, 0x02	; 2
     f8c:	29 83       	std	Y+1, r18	; 0x01
     f8e:	9b 83       	std	Y+3, r25	; 0x03
     f90:	8a 83       	std	Y+2, r24	; 0x02
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    uint8_t timeout = 0;
     f98:	80 e0       	ldi	r24, 0x00	; 0
    while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
     f9a:	81 50       	subi	r24, 0x01	; 1
     f9c:	21 f0       	breq	.+8      	; 0xfa6 <send_system+0x30>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f9e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fa2:	95 ff       	sbrs	r25, 5
     fa4:	fa cf       	rjmp	.-12     	; 0xf9a <send_system+0x24>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	63 e0       	ldi	r22, 0x03	; 3
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	ce 01       	movw	r24, r28
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	0e 94 07 0c 	call	0x180e	; 0x180e <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fb6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fba:	8e 77       	andi	r24, 0x7E	; 126
     fbc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <send_keyboard>:
{
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	ec 01       	movw	r28, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
     fd2:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <USB_DeviceState>
     fd6:	84 30       	cpi	r24, 0x04	; 4
     fd8:	49 f5       	brne	.+82     	; 0x102c <send_keyboard+0x60>
    if (keyboard_nkro) {
     fda:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <keyboard_nkro>
     fde:	91 11       	cpse	r25, r1
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <send_keyboard+0x18>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
{
     fe8:	80 e0       	ldi	r24, 0x00	; 0
    while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
     fea:	81 50       	subi	r24, 0x01	; 1
     fec:	21 f0       	breq	.+8      	; 0xff6 <send_keyboard+0x2a>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fee:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ff2:	95 ff       	sbrs	r25, 5
     ff4:	fa cf       	rjmp	.-12     	; 0xfea <send_keyboard+0x1e>
    if (keyboard_nkro) {
     ff6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <keyboard_nkro>
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	50 e0       	ldi	r21, 0x00	; 0
    if (keyboard_nkro) {
     ffe:	88 23       	and	r24, r24
    1000:	19 f0       	breq	.+6      	; 0x1008 <send_keyboard+0x3c>
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1002:	60 e1       	ldi	r22, 0x10	; 16
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <send_keyboard+0x40>
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1008:	68 e0       	ldi	r22, 0x08	; 8
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	ce 01       	movw	r24, r28
    100e:	0e 94 07 0c 	call	0x180e	; 0x180e <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1012:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1016:	8e 77       	andi	r24, 0x7E	; 126
    1018:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    keyboard_report_sent = *report;
    101c:	80 e1       	ldi	r24, 0x10	; 16
    101e:	fe 01       	movw	r30, r28
    1020:	a7 e3       	ldi	r26, 0x37	; 55
    1022:	b1 e0       	ldi	r27, 0x01	; 1
    1024:	01 90       	ld	r0, Z+
    1026:	0d 92       	st	X+, r0
    1028:	8a 95       	dec	r24
    102a:	e1 f7       	brne	.-8      	; 0x1024 <send_keyboard+0x58>
}
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <EVENT_USB_Device_Connect>:
    1032:	08 95       	ret

00001034 <EVENT_USB_Device_Disconnect>:
    1034:	08 95       	ret

00001036 <EVENT_USB_Device_Reset>:
    1036:	08 95       	ret

00001038 <EVENT_USB_Device_Suspend>:
{
    1038:	08 95       	ret

0000103a <EVENT_USB_Device_WakeUp>:
    suspend_wakeup_init();
    103a:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <suspend_wakeup_init>

0000103e <EVENT_USB_Device_StartOfFrame>:
    if (USB_DeviceState != DEVICE_STATE_Configured)
    103e:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <USB_DeviceState>
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	41 f5       	brne	.+80     	; 0x1096 <EVENT_USB_Device_StartOfFrame+0x58>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1046:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    104a:	8f 70       	andi	r24, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    104c:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1050:	92 2f       	mov	r25, r18
    1052:	91 70       	andi	r25, 0x01	; 1
    1054:	20 fd       	sbrc	r18, 0
    1056:	90 e8       	ldi	r25, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1058:	89 2b       	or	r24, r25
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1060:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1064:	90 ff       	sbrs	r25, 0
    1066:	14 c0       	rjmp	.+40     	; 0x1090 <EVENT_USB_Device_StartOfFrame+0x52>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1068:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    106c:	97 ff       	sbrs	r25, 7
    106e:	10 c0       	rjmp	.+32     	; 0x1090 <EVENT_USB_Device_StartOfFrame+0x52>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1070:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    while (Endpoint_IsReadWriteAllowed())
    1074:	95 ff       	sbrs	r25, 5
    1076:	03 c0       	rjmp	.+6      	; 0x107e <EVENT_USB_Device_StartOfFrame+0x40>
				UEDATX = Data;
    1078:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    107c:	f9 cf       	rjmp	.-14     	; 0x1070 <EVENT_USB_Device_StartOfFrame+0x32>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    107e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (Endpoint_IsINReady()) {
    1082:	90 ff       	sbrs	r25, 0
    1084:	05 c0       	rjmp	.+10     	; 0x1090 <EVENT_USB_Device_StartOfFrame+0x52>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1086:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    108a:	9e 77       	andi	r25, 0x7E	; 126
    108c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1090:	8f 70       	andi	r24, 0x0F	; 15
    1092:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1096:	08 95       	ret

00001098 <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1098:	42 e0       	ldi	r20, 0x02	; 2
    109a:	61 ec       	ldi	r22, 0xC1	; 193
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	0e 94 bd 09 	call	0x137a	; 0x137a <Endpoint_ConfigureEndpoint_Prv>
    10a2:	46 e2       	ldi	r20, 0x26	; 38
    10a4:	61 ec       	ldi	r22, 0xC1	; 193
    10a6:	82 e0       	ldi	r24, 0x02	; 2
    10a8:	0e 94 bd 09 	call	0x137a	; 0x137a <Endpoint_ConfigureEndpoint_Prv>
    10ac:	42 e2       	ldi	r20, 0x22	; 34
    10ae:	60 ec       	ldi	r22, 0xC0	; 192
    10b0:	83 e0       	ldi	r24, 0x03	; 3
    10b2:	0e 94 bd 09 	call	0x137a	; 0x137a <Endpoint_ConfigureEndpoint_Prv>
    10b6:	42 e1       	ldi	r20, 0x12	; 18
    10b8:	61 ec       	ldi	r22, 0xC1	; 193
    10ba:	84 e0       	ldi	r24, 0x04	; 4
    10bc:	0c 94 bd 09 	jmp	0x137a	; 0x137a <Endpoint_ConfigureEndpoint_Prv>

000010c0 <EVENT_USB_Device_ControlRequest>:
    switch (USB_ControlRequest.bRequest)
    10c0:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <USB_ControlRequest+0x1>
    10c4:	83 30       	cpi	r24, 0x03	; 3
    10c6:	09 f4       	brne	.+2      	; 0x10ca <EVENT_USB_Device_ControlRequest+0xa>
    10c8:	53 c0       	rjmp	.+166    	; 0x1170 <EVENT_USB_Device_ControlRequest+0xb0>
    10ca:	30 f4       	brcc	.+12     	; 0x10d8 <EVENT_USB_Device_ControlRequest+0x18>
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	71 f0       	breq	.+28     	; 0x10ec <EVENT_USB_Device_ControlRequest+0x2c>
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <EVENT_USB_Device_ControlRequest+0x16>
    10d4:	82 c0       	rjmp	.+260    	; 0x11da <EVENT_USB_Device_ControlRequest+0x11a>
    10d6:	08 95       	ret
    10d8:	8a 30       	cpi	r24, 0x0A	; 10
    10da:	09 f4       	brne	.+2      	; 0x10de <EVENT_USB_Device_ControlRequest+0x1e>
    10dc:	6e c0       	rjmp	.+220    	; 0x11ba <EVENT_USB_Device_ControlRequest+0xfa>
    10de:	8b 30       	cpi	r24, 0x0B	; 11
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <EVENT_USB_Device_ControlRequest+0x24>
    10e2:	57 c0       	rjmp	.+174    	; 0x1192 <EVENT_USB_Device_ControlRequest+0xd2>
    10e4:	89 30       	cpi	r24, 0x09	; 9
    10e6:	09 f0       	breq	.+2      	; 0x10ea <EVENT_USB_Device_ControlRequest+0x2a>
    10e8:	90 c0       	rjmp	.+288    	; 0x120a <EVENT_USB_Device_ControlRequest+0x14a>
    10ea:	20 c0       	rjmp	.+64     	; 0x112c <EVENT_USB_Device_ControlRequest+0x6c>
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    10ec:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USB_ControlRequest>
    10f0:	81 3a       	cpi	r24, 0xA1	; 161
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <EVENT_USB_Device_ControlRequest+0x36>
    10f4:	8a c0       	rjmp	.+276    	; 0x120a <EVENT_USB_Device_ControlRequest+0x14a>
				UEINTX &= ~(1 << RXSTPI);
    10f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10fa:	87 7f       	andi	r24, 0xF7	; 247
    10fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                switch (USB_ControlRequest.wIndex) {
    1100:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <USB_ControlRequest+0x4>
    1104:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <USB_ControlRequest+0x5>
    1108:	89 2b       	or	r24, r25
    110a:	21 f4       	brne	.+8      	; 0x1114 <EVENT_USB_Device_ControlRequest+0x54>
                    ReportSize = sizeof(keyboard_report_sent);
    110c:	60 e1       	ldi	r22, 0x10	; 16
                    ReportData = (uint8_t*)&keyboard_report_sent;
    110e:	87 e3       	ldi	r24, 0x37	; 55
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	03 c0       	rjmp	.+6      	; 0x111a <EVENT_USB_Device_ControlRequest+0x5a>
    uint8_t  ReportSize = 0;
    1114:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* ReportData = NULL;
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1120:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1124:	8b 77       	andi	r24, 0x7B	; 123
    1126:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    112a:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    112c:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USB_ControlRequest>
    1130:	81 32       	cpi	r24, 0x21	; 33
    1132:	09 f0       	breq	.+2      	; 0x1136 <EVENT_USB_Device_ControlRequest+0x76>
    1134:	6a c0       	rjmp	.+212    	; 0x120a <EVENT_USB_Device_ControlRequest+0x14a>
                switch (USB_ControlRequest.wIndex) {
    1136:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <USB_ControlRequest+0x4>
    113a:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <USB_ControlRequest+0x5>
    113e:	89 2b       	or	r24, r25
    1140:	09 f0       	breq	.+2      	; 0x1144 <EVENT_USB_Device_ControlRequest+0x84>
    1142:	63 c0       	rjmp	.+198    	; 0x120a <EVENT_USB_Device_ControlRequest+0x14a>
				UEINTX &= ~(1 << RXSTPI);
    1144:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1148:	87 7f       	andi	r24, 0xF7	; 247
    114a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    114e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsOUTReceived())) {
    1152:	82 fd       	sbrc	r24, 2
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <EVENT_USB_Device_ControlRequest+0xa0>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1156:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <USB_DeviceState>
    115a:	81 11       	cpse	r24, r1
    115c:	f8 cf       	rjmp	.-16     	; 0x114e <EVENT_USB_Device_ControlRequest+0x8e>
    115e:	55 c0       	rjmp	.+170    	; 0x120a <EVENT_USB_Device_ControlRequest+0x14a>
				return UEDATX;
    1160:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                    keyboard_led_stats = Endpoint_Read_8();
    1164:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <keyboard_led_stats>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1168:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    116c:	8b 77       	andi	r24, 0x7B	; 123
    116e:	49 c0       	rjmp	.+146    	; 0x1202 <EVENT_USB_Device_ControlRequest+0x142>
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1170:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USB_ControlRequest>
    1174:	81 3a       	cpi	r24, 0xA1	; 161
    1176:	09 f0       	breq	.+2      	; 0x117a <EVENT_USB_Device_ControlRequest+0xba>
    1178:	48 c0       	rjmp	.+144    	; 0x120a <EVENT_USB_Device_ControlRequest+0x14a>
				UEINTX &= ~(1 << RXSTPI);
    117a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    117e:	87 7f       	andi	r24, 0xF7	; 247
    1180:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1184:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                while (!(Endpoint_IsINReady()));
    1188:	80 ff       	sbrs	r24, 0
    118a:	fc cf       	rjmp	.-8      	; 0x1184 <EVENT_USB_Device_ControlRequest+0xc4>
                Endpoint_Write_8(protocol_report);
    118c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <protocol_report>
    1190:	33 c0       	rjmp	.+102    	; 0x11f8 <EVENT_USB_Device_ControlRequest+0x138>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1192:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USB_ControlRequest>
    1196:	81 32       	cpi	r24, 0x21	; 33
    1198:	c1 f5       	brne	.+112    	; 0x120a <EVENT_USB_Device_ControlRequest+0x14a>
				UEINTX &= ~(1 << RXSTPI);
    119a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    119e:	87 7f       	andi	r24, 0xF7	; 247
    11a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    11a4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <Endpoint_ClearStatusStage>
                protocol_report = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    11a8:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <USB_ControlRequest+0x2>
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	91 11       	cpse	r25, r1
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <EVENT_USB_Device_ControlRequest+0xf4>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <protocol_report>
    11b8:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    11ba:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USB_ControlRequest>
    11be:	81 32       	cpi	r24, 0x21	; 33
    11c0:	21 f5       	brne	.+72     	; 0x120a <EVENT_USB_Device_ControlRequest+0x14a>
    11c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11c6:	87 7f       	andi	r24, 0xF7	; 247
    11c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    11cc:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <Endpoint_ClearStatusStage>
                idle_duration = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    11d0:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <USB_ControlRequest+0x3>
    11d4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <idle_duration>
    11d8:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11da:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USB_ControlRequest>
    11de:	81 3a       	cpi	r24, 0xA1	; 161
    11e0:	a1 f4       	brne	.+40     	; 0x120a <EVENT_USB_Device_ControlRequest+0x14a>
    11e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11e6:	87 7f       	andi	r24, 0xF7	; 247
    11e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                while (!(Endpoint_IsINReady()));
    11f0:	80 ff       	sbrs	r24, 0
    11f2:	fc cf       	rjmp	.-8      	; 0x11ec <EVENT_USB_Device_ControlRequest+0x12c>
                Endpoint_Write_8(idle_duration);
    11f4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <idle_duration>
				UEDATX = Data;
    11f8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1200:	8e 77       	andi	r24, 0x7E	; 126
    1202:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    1206:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <Endpoint_ClearStatusStage>
    120a:	08 95       	ret

0000120c <main>:
 * main
 ******************************************************************************/
static void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    120c:	84 b7       	in	r24, 0x34	; 52
    120e:	87 7f       	andi	r24, 0xF7	; 247
    1210:	84 bf       	out	0x34, r24	; 52
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	a8 95       	wdr
    1218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    121c:	88 61       	ori	r24, 0x18	; 24
    121e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1222:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1226:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	80 e8       	ldi	r24, 0x80	; 128
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1234:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1238:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    123a:	0e 94 44 0a 	call	0x1488	; 0x1488 <USB_Disable>

    USB_Init();
    123e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1242:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1246:	84 60       	ori	r24, 0x04	; 4
    1248:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    124c:	80 e3       	ldi	r24, 0x30	; 48
    124e:	97 e0       	ldi	r25, 0x07	; 7
    1250:	0e 94 23 1a 	call	0x3446	; 0x3446 <print_set_sendchar>

int main(void)  __attribute__ ((weak));
int main(void)
{
    SetupHardware();
    sei();
    1254:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1256:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <USB_DeviceState>
    125a:	84 30       	cpi	r24, 0x04	; 4
    125c:	e1 f7       	brne	.-8      	; 0x1256 <main+0x4a>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    125e:	82 e6       	ldi	r24, 0x62	; 98
    1260:	92 e0       	ldi	r25, 0x02	; 2
    1262:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>

    /* init modules */
    keyboard_init();
    1266:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <keyboard_init>
    host_set_driver(&lufa_driver);
    126a:	89 e0       	ldi	r24, 0x09	; 9
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    1272:	81 e5       	ldi	r24, 0x51	; 81
    1274:	92 e0       	ldi	r25, 0x02	; 2
    1276:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    127a:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <USB_DeviceState>
    127e:	85 30       	cpi	r24, 0x05	; 5
    1280:	69 f4       	brne	.+26     	; 0x129c <main+0x90>
            suspend_power_down();
    1282:	0e 94 4a 1a 	call	0x3494	; 0x3494 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1286:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <USB_Device_RemoteWakeupEnabled>
    128a:	88 23       	and	r24, r24
    128c:	b1 f3       	breq	.-20     	; 0x127a <main+0x6e>
    128e:	0e 94 4b 1a 	call	0x3496	; 0x3496 <suspend_wakeup_condition>
    1292:	88 23       	and	r24, r24
    1294:	91 f3       	breq	.-28     	; 0x127a <main+0x6e>
                    USB_Device_SendRemoteWakeup();
    1296:	0e 94 a7 09 	call	0x134e	; 0x134e <USB_Device_SendRemoteWakeup>
    129a:	ef cf       	rjmp	.-34     	; 0x127a <main+0x6e>
            }
        }

        keyboard_task();
    129c:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    12a0:	ec cf       	rjmp	.-40     	; 0x127a <main+0x6e>

000012a2 <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    12a2:	29 2f       	mov	r18, r25
    12a4:	33 27       	eor	r19, r19
    12a6:	23 30       	cpi	r18, 0x03	; 3
    12a8:	31 05       	cpc	r19, r1
    12aa:	c9 f0       	breq	.+50     	; 0x12de <CALLBACK_USB_GetDescriptor+0x3c>
    12ac:	60 f4       	brcc	.+24     	; 0x12c6 <CALLBACK_USB_GetDescriptor+0x24>
    12ae:	21 30       	cpi	r18, 0x01	; 1
    12b0:	31 05       	cpc	r19, r1
    12b2:	81 f0       	breq	.+32     	; 0x12d4 <CALLBACK_USB_GetDescriptor+0x32>
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	09 f0       	breq	.+2      	; 0x12bc <CALLBACK_USB_GetDescriptor+0x1a>
    12ba:	41 c0       	rjmp	.+130    	; 0x133e <CALLBACK_USB_GetDescriptor+0x9c>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    12bc:	8b e5       	ldi	r24, 0x5B	; 91
    12be:	90 e0       	ldi	r25, 0x00	; 0
            Address = &ConfigurationDescriptor;
    12c0:	21 ea       	ldi	r18, 0xA1	; 161
    12c2:	32 e0       	ldi	r19, 0x02	; 2
            break;
    12c4:	40 c0       	rjmp	.+128    	; 0x1346 <CALLBACK_USB_GetDescriptor+0xa4>
    switch (DescriptorType)
    12c6:	21 32       	cpi	r18, 0x21	; 33
    12c8:	31 05       	cpc	r19, r1
    12ca:	e1 f0       	breq	.+56     	; 0x1304 <CALLBACK_USB_GetDescriptor+0x62>
    12cc:	22 32       	cpi	r18, 0x22	; 34
    12ce:	31 05       	cpc	r19, r1
    12d0:	31 f1       	breq	.+76     	; 0x131e <CALLBACK_USB_GetDescriptor+0x7c>
    12d2:	35 c0       	rjmp	.+106    	; 0x133e <CALLBACK_USB_GetDescriptor+0x9c>
            Size    = sizeof(USB_Descriptor_Device_t);
    12d4:	82 e1       	ldi	r24, 0x12	; 18
    12d6:	90 e0       	ldi	r25, 0x00	; 0
            Address = &DeviceDescriptor;
    12d8:	2c ef       	ldi	r18, 0xFC	; 252
    12da:	32 e0       	ldi	r19, 0x02	; 2
    12dc:	34 c0       	rjmp	.+104    	; 0x1346 <CALLBACK_USB_GetDescriptor+0xa4>
        case DTYPE_String:
            switch (DescriptorIndex )
    12de:	99 27       	eor	r25, r25
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	91 05       	cpc	r25, r1
    12e4:	49 f0       	breq	.+18     	; 0x12f8 <CALLBACK_USB_GetDescriptor+0x56>
    12e6:	28 f0       	brcs	.+10     	; 0x12f2 <CALLBACK_USB_GetDescriptor+0x50>
    12e8:	02 97       	sbiw	r24, 0x02	; 2
    12ea:	49 f5       	brne	.+82     	; 0x133e <CALLBACK_USB_GetDescriptor+0x9c>
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    12ec:	e3 e7       	ldi	r30, 0x73	; 115
    12ee:	f2 e0       	ldi	r31, 0x02	; 2
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <CALLBACK_USB_GetDescriptor+0x5a>
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    12f2:	ed e9       	ldi	r30, 0x9D	; 157
    12f4:	f2 e0       	ldi	r31, 0x02	; 2
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <CALLBACK_USB_GetDescriptor+0x5a>
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    12f8:	e3 e8       	ldi	r30, 0x83	; 131
    12fa:	f2 e0       	ldi	r31, 0x02	; 2
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    12fc:	84 91       	lpm	r24, Z
    12fe:	90 e0       	ldi	r25, 0x00	; 0
                    Address = &ProductString;
    1300:	9f 01       	movw	r18, r30
                    break;
    1302:	21 c0       	rjmp	.+66     	; 0x1346 <CALLBACK_USB_GetDescriptor+0xa4>
    1304:	63 30       	cpi	r22, 0x03	; 3
    1306:	d8 f4       	brcc	.+54     	; 0x133e <CALLBACK_USB_GetDescriptor+0x9c>
    1308:	e6 2f       	mov	r30, r22
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	ee 0f       	add	r30, r30
    130e:	ff 1f       	adc	r31, r31
    1310:	e0 5e       	subi	r30, 0xE0	; 224
    1312:	fe 4f       	sbci	r31, 0xFE	; 254
    1314:	20 81       	ld	r18, Z
    1316:	31 81       	ldd	r19, Z+1	; 0x01
    1318:	89 e0       	ldi	r24, 0x09	; 9
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	14 c0       	rjmp	.+40     	; 0x1346 <CALLBACK_USB_GetDescriptor+0xa4>
    131e:	63 30       	cpi	r22, 0x03	; 3
    1320:	70 f4       	brcc	.+28     	; 0x133e <CALLBACK_USB_GetDescriptor+0x9c>
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	fb 01       	movw	r30, r22
    1326:	ee 0f       	add	r30, r30
    1328:	ff 1f       	adc	r31, r31
    132a:	e6 5e       	subi	r30, 0xE6	; 230
    132c:	fe 4f       	sbci	r31, 0xFE	; 254
    132e:	20 81       	ld	r18, Z
    1330:	31 81       	ldd	r19, Z+1	; 0x01
    1332:	fb 01       	movw	r30, r22
    1334:	e9 5e       	subi	r30, 0xE9	; 233
    1336:	fe 4f       	sbci	r31, 0xFE	; 254
    1338:	80 81       	ld	r24, Z
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <CALLBACK_USB_GetDescriptor+0xa4>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1346:	fa 01       	movw	r30, r20
    1348:	31 83       	std	Z+1, r19	; 0x01
    134a:	20 83       	st	Z, r18
    return Size;
}
    134c:	08 95       	ret

0000134e <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    134e:	80 e1       	ldi	r24, 0x10	; 16
    1350:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1352:	82 e1       	ldi	r24, 0x12	; 18
    1354:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1356:	09 b4       	in	r0, 0x29	; 41
    1358:	00 fe       	sbrs	r0, 0
    135a:	fd cf       	rjmp	.-6      	; 0x1356 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    135c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1360:	8f 7d       	andi	r24, 0xDF	; 223
    1362:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1366:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    136a:	82 60       	ori	r24, 0x02	; 2
    136c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	while (UDCON & (1 << RMWKUP));
    1370:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1374:	81 fd       	sbrc	r24, 1
    1376:	fc cf       	rjmp	.-8      	; 0x1370 <USB_Device_SendRemoteWakeup+0x22>
}
    1378:	08 95       	ret

0000137a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    137a:	98 2f       	mov	r25, r24
    137c:	97 30       	cpi	r25, 0x07	; 7
    137e:	68 f5       	brcc	.+90     	; 0x13da <Endpoint_ConfigureEndpoint_Prv+0x60>
    1380:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1384:	98 17       	cp	r25, r24
    1386:	39 f0       	breq	.+14     	; 0x1396 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1388:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    138c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1390:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1394:	03 c0       	rjmp	.+6      	; 0x139c <Endpoint_ConfigureEndpoint_Prv+0x22>
    1396:	24 2f       	mov	r18, r20
    1398:	76 2f       	mov	r23, r22
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	21 fd       	sbrc	r18, 1
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <Endpoint_ConfigureEndpoint_Prv+0x2a>
    13a0:	9f 5f       	subi	r25, 0xFF	; 255
    13a2:	ec cf       	rjmp	.-40     	; 0x137c <Endpoint_ConfigureEndpoint_Prv+0x2>
    13a4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    13a8:	3e 7f       	andi	r19, 0xFE	; 254
    13aa:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    13ae:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    13b2:	3d 7f       	andi	r19, 0xFD	; 253
    13b4:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    13b8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    13bc:	31 60       	ori	r19, 0x01	; 1
    13be:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    13c2:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    13c6:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    13ca:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    13ce:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    13d2:	27 fd       	sbrc	r18, 7
    13d4:	e5 cf       	rjmp	.-54     	; 0x13a0 <Endpoint_ConfigureEndpoint_Prv+0x26>
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	08 95       	ret
    13da:	8f 70       	andi	r24, 0x0F	; 15
    13dc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	08 95       	ret

000013e4 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    13e4:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USB_ControlRequest>
    13e8:	87 ff       	sbrs	r24, 7
    13ea:	11 c0       	rjmp	.+34     	; 0x140e <Endpoint_ClearStatusStage+0x2a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    13f0:	82 fd       	sbrc	r24, 2
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    13f4:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <USB_DeviceState>
    13f8:	81 11       	cpse	r24, r1
    13fa:	f8 cf       	rjmp	.-16     	; 0x13ec <Endpoint_ClearStatusStage+0x8>
    13fc:	11 c0       	rjmp	.+34     	; 0x1420 <Endpoint_ClearStatusStage+0x3c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1402:	8b 77       	andi	r24, 0x7B	; 123
    1404:	0b c0       	rjmp	.+22     	; 0x141c <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1406:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <USB_DeviceState>
    140a:	88 23       	and	r24, r24
    140c:	49 f0       	breq	.+18     	; 0x1420 <Endpoint_ClearStatusStage+0x3c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    140e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    1412:	80 ff       	sbrs	r24, 0
    1414:	f8 cf       	rjmp	.-16     	; 0x1406 <Endpoint_ClearStatusStage+0x22>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1416:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    141a:	8e 77       	andi	r24, 0x7E	; 126
    141c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1420:	08 95       	ret

00001422 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1422:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1426:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    142a:	95 e6       	ldi	r25, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    142c:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1430:	84 2f       	mov	r24, r20
    1432:	81 70       	andi	r24, 0x01	; 1
    1434:	40 ff       	sbrs	r20, 0
    1436:	23 c0       	rjmp	.+70     	; 0x147e <Endpoint_WaitUntilReady+0x5c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1438:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    143c:	80 fd       	sbrc	r24, 0
    143e:	1d c0       	rjmp	.+58     	; 0x147a <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1440:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1444:	88 23       	and	r24, r24
    1446:	99 f0       	breq	.+38     	; 0x146e <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1448:	85 30       	cpi	r24, 0x05	; 5
    144a:	99 f0       	breq	.+38     	; 0x1472 <Endpoint_WaitUntilReady+0x50>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    144c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1450:	85 fd       	sbrc	r24, 5
    1452:	11 c0       	rjmp	.+34     	; 0x1476 <Endpoint_WaitUntilReady+0x54>
    1454:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1458:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    145c:	24 17       	cp	r18, r20
    145e:	35 07       	cpc	r19, r21
    1460:	29 f3       	breq	.-54     	; 0x142c <Endpoint_WaitUntilReady+0xa>
    1462:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1464:	11 f0       	breq	.+4      	; 0x146a <Endpoint_WaitUntilReady+0x48>
    1466:	9a 01       	movw	r18, r20
    1468:	e1 cf       	rjmp	.-62     	; 0x142c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    146a:	84 e0       	ldi	r24, 0x04	; 4
    146c:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    1472:	83 e0       	ldi	r24, 0x03	; 3
    1474:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    147e:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsOUTReceived())
    1482:	42 ff       	sbrs	r20, 2
    1484:	dd cf       	rjmp	.-70     	; 0x1440 <Endpoint_WaitUntilReady+0x1e>
		}
	}
}
    1486:	08 95       	ret

00001488 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1488:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    148c:	0e 94 df 0a 	call	0x15be	; 0x15be <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1490:	e0 ee       	ldi	r30, 0xE0	; 224
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	81 60       	ori	r24, 0x01	; 1
    1498:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    149a:	e8 ed       	ldi	r30, 0xD8	; 216
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8f 77       	andi	r24, 0x7F	; 127
    14a2:	80 83       	st	Z, r24
				PLLCSR = 0;
    14a4:	19 bc       	out	0x29, r1	; 41
				UHWCON &= ~(1 << UVREGE);
    14a6:	a7 ed       	ldi	r26, 0xD7	; 215
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	8c 91       	ld	r24, X
    14ac:	8e 7f       	andi	r24, 0xFE	; 254
    14ae:	8c 93       	st	X, r24
				USBCON &= ~(1 << OTGPADE);
    14b0:	80 81       	ld	r24, Z
    14b2:	8f 7e       	andi	r24, 0xEF	; 239
    14b4:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    14b6:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <USB_IsInitialized>
    14ba:	08 95       	ret

000014bc <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <USB_ResetInterface+0x6>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    14c6:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    14ca:	0e 94 df 0a 	call	0x15be	; 0x15be <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    14ce:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    14d2:	8f 77       	andi	r24, 0x7F	; 127
    14d4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
    14d8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    14dc:	80 68       	ori	r24, 0x80	; 128
    14de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON &= ~(1 << FRZCLK);
    14e2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    14e6:	8f 7d       	andi	r24, 0xDF	; 223
    14e8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    14ec:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    14ee:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    14f2:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    14f6:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    14fa:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <USB_Device_CurrentlySelfPowered>
		  USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
		else
		  USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
	}
	#else
	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr) != NO_DESCRIPTOR)
    14fe:	ae 01       	movw	r20, r28
    1500:	4f 5f       	subi	r20, 0xFF	; 255
    1502:	5f 4f       	sbci	r21, 0xFF	; 255
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <CALLBACK_USB_GetDescriptor>
    150e:	89 2b       	or	r24, r25
    1510:	31 f0       	breq	.+12     	; 0x151e <USB_ResetInterface+0x62>
		#if defined(USE_RAM_DESCRIPTORS)
		USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
		#elif defined(USE_EEPROM_DESCRIPTORS)
		USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
		#else
		USB_Device_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
    1512:	e9 81       	ldd	r30, Y+1	; 0x01
    1514:	fa 81       	ldd	r31, Y+2	; 0x02
    1516:	37 96       	adiw	r30, 0x07	; 7
    1518:	e4 91       	lpm	r30, Z
    151a:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <USB_Device_ControlEndpointSize>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    151e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1522:	8b 7f       	andi	r24, 0xFB	; 251
    1524:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1528:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    152c:	81 60       	ori	r24, 0x01	; 1
    152e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUSTI);
	#endif

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    1532:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <USB_Device_ControlEndpointSize>
    1536:	30 e0       	ldi	r19, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1538:	88 e0       	ldi	r24, 0x08	; 8
    153a:	90 e0       	ldi	r25, 0x00	; 0
				uint8_t  MaskVal    = 0;
    153c:	40 e0       	ldi	r20, 0x00	; 0

				while (CheckBytes < Bytes)
    153e:	82 17       	cp	r24, r18
    1540:	93 07       	cpc	r25, r19
    1542:	20 f4       	brcc	.+8      	; 0x154c <USB_ResetInterface+0x90>
				{
					MaskVal++;
    1544:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	f9 cf       	rjmp	.-14     	; 0x153e <USB_ResetInterface+0x82>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    154c:	42 95       	swap	r20
    154e:	40 7f       	andi	r20, 0xF0	; 240
    1550:	42 60       	ori	r20, 0x02	; 2
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	0e 94 bd 09 	call	0x137a	; 0x137a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    155a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    155e:	8e 7f       	andi	r24, 0xFE	; 254
    1560:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  |= (1 << SUSPE);
    1564:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1568:	81 60       	ori	r24, 0x01	; 1
    156a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << EORSTE);
    156e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1572:	88 60       	ori	r24, 0x08	; 8
    1574:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				UDCON  &= ~(1 << DETACH);
    1578:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    157c:	8e 7f       	andi	r24, 0xFE	; 254
    157e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
				USBCON |=  (1 << OTGPADE);
    1582:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1586:	80 61       	ori	r24, 0x10	; 16
    1588:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
}
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	08 95       	ret

00001596 <USB_Init>:
				UHWCON |=  (1 << UVREGE);
    1596:	e7 ed       	ldi	r30, 0xD7	; 215
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	81 60       	ori	r24, 0x01	; 1
    159e:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    15a0:	84 e0       	ldi	r24, 0x04	; 4
    15a2:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <USB_IsInitialized>
	USB_ResetInterface();
    15aa:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <USB_ResetInterface>

000015ae <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    15ae:	e8 ed       	ldi	r30, 0xD8	; 216
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8e 7f       	andi	r24, 0xFE	; 254
    15b6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    15b8:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15bc:	08 95       	ret

000015be <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    15be:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    15c2:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    15c6:	08 95       	ret

000015c8 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	2f 93       	push	r18
    15d4:	3f 93       	push	r19
    15d6:	4f 93       	push	r20
    15d8:	5f 93       	push	r21
    15da:	6f 93       	push	r22
    15dc:	7f 93       	push	r23
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	af 93       	push	r26
    15e4:	bf 93       	push	r27
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    15ea:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    15ee:	82 ff       	sbrs	r24, 2
    15f0:	0b c0       	rjmp	.+22     	; 0x1608 <__vector_10+0x40>
						return (UDIEN  & (1 << SOFE));
    15f2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15f6:	82 ff       	sbrs	r24, 2
    15f8:	07 c0       	rjmp	.+14     	; 0x1608 <__vector_10+0x40>
						UDINT  &= ~(1 << SOFI);
    15fa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    15fe:	8b 7f       	andi	r24, 0xFB	; 251
    1600:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1604:	0e 94 1f 08 	call	0x103e	; 0x103e <EVENT_USB_Device_StartOfFrame>
						return (USBINT & (1 << VBUSTI));
    1608:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    160c:	80 ff       	sbrs	r24, 0
    160e:	1f c0       	rjmp	.+62     	; 0x164e <__vector_10+0x86>
						return (USBCON & (1 << VBUSTE));
    1610:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1614:	80 ff       	sbrs	r24, 0
    1616:	1b c0       	rjmp	.+54     	; 0x164e <__vector_10+0x86>
						USBINT &= ~(1 << VBUSTI);
    1618:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    161c:	8e 7f       	andi	r24, 0xFE	; 254
    161e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1622:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1626:	80 ff       	sbrs	r24, 0
    1628:	0d c0       	rjmp	.+26     	; 0x1644 <__vector_10+0x7c>
				PLLCSR = USB_PLL_PSC;
    162a:	80 e1       	ldi	r24, 0x10	; 16
    162c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    162e:	82 e1       	ldi	r24, 0x12	; 18
    1630:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1632:	09 b4       	in	r0, 0x29	; 41
    1634:	00 fe       	sbrs	r0, 0
    1636:	fd cf       	rjmp	.-6      	; 0x1632 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <USB_DeviceState>
			EVENT_USB_Device_Connect();
    163e:	0e 94 19 08 	call	0x1032	; 0x1032 <EVENT_USB_Device_Connect>
    1642:	05 c0       	rjmp	.+10     	; 0x164e <__vector_10+0x86>
				PLLCSR = 0;
    1644:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1646:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    164a:	0e 94 1a 08 	call	0x1034	; 0x1034 <EVENT_USB_Device_Disconnect>
						return (UDINT  & (1 << SUSPI));
    164e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1652:	80 ff       	sbrs	r24, 0
    1654:	19 c0       	rjmp	.+50     	; 0x1688 <__vector_10+0xc0>
						return (UDIEN  & (1 << SUSPE));
    1656:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    165a:	80 ff       	sbrs	r24, 0
    165c:	15 c0       	rjmp	.+42     	; 0x1688 <__vector_10+0xc0>
						UDIEN  &= ~(1 << SUSPE);
    165e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1662:	8e 7f       	andi	r24, 0xFE	; 254
    1664:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1668:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    166c:	80 61       	ori	r24, 0x10	; 16
    166e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				USBCON |=  (1 << FRZCLK);
    1672:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1676:	80 62       	ori	r24, 0x20	; 32
    1678:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    167c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    167e:	85 e0       	ldi	r24, 0x05	; 5
    1680:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1684:	0e 94 1c 08 	call	0x1038	; 0x1038 <EVENT_USB_Device_Suspend>
						return (UDINT  & (1 << WAKEUPI));
    1688:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    168c:	84 ff       	sbrs	r24, 4
    168e:	2e c0       	rjmp	.+92     	; 0x16ec <__vector_10+0x124>
						return (UDIEN  & (1 << WAKEUPE));
    1690:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1694:	84 ff       	sbrs	r24, 4
    1696:	2a c0       	rjmp	.+84     	; 0x16ec <__vector_10+0x124>
				PLLCSR = USB_PLL_PSC;
    1698:	80 e1       	ldi	r24, 0x10	; 16
    169a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    169c:	82 e1       	ldi	r24, 0x12	; 18
    169e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    16a0:	09 b4       	in	r0, 0x29	; 41
    16a2:	00 fe       	sbrs	r0, 0
    16a4:	fd cf       	rjmp	.-6      	; 0x16a0 <__vector_10+0xd8>
				USBCON &= ~(1 << FRZCLK);
    16a6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    16aa:	8f 7d       	andi	r24, 0xDF	; 223
    16ac:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    16b0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    16b4:	8f 7e       	andi	r24, 0xEF	; 239
    16b6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    16ba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    16be:	8f 7e       	andi	r24, 0xEF	; 239
    16c0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    16c4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    16c8:	81 60       	ori	r24, 0x01	; 1
    16ca:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    16ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <USB_Device_ConfigurationNumber>
    16d2:	81 11       	cpse	r24, r1
    16d4:	06 c0       	rjmp	.+12     	; 0x16e2 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    16d6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    16da:	87 fd       	sbrc	r24, 7
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <__vector_10+0x11a>
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <__vector_10+0x11c>
    16e2:	84 e0       	ldi	r24, 0x04	; 4
    16e4:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    16e8:	0e 94 1d 08 	call	0x103a	; 0x103a <EVENT_USB_Device_WakeUp>
						return (UDINT  & (1 << EORSTI));
    16ec:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    16f0:	83 ff       	sbrs	r24, 3
    16f2:	38 c0       	rjmp	.+112    	; 0x1764 <__vector_10+0x19c>
						return (UDIEN  & (1 << EORSTE));
    16f4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    16f8:	83 ff       	sbrs	r24, 3
    16fa:	34 c0       	rjmp	.+104    	; 0x1764 <__vector_10+0x19c>
						UDINT  &= ~(1 << EORSTI);
    16fc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1700:	87 7f       	andi	r24, 0xF7	; 247
    1702:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1706:	82 e0       	ldi	r24, 0x02	; 2
    1708:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    170c:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1710:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1714:	8e 7f       	andi	r24, 0xFE	; 254
    1716:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    171a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    171e:	8e 7f       	andi	r24, 0xFE	; 254
    1720:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1724:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1728:	80 61       	ori	r24, 0x10	; 16
    172a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		USB_INT_Clear(USB_INT_SUSPI);
		USB_INT_Disable(USB_INT_SUSPI);
		USB_INT_Enable(USB_INT_WAKEUPI);

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    172e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <USB_Device_ControlEndpointSize>
    1732:	30 e0       	ldi	r19, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1734:	88 e0       	ldi	r24, 0x08	; 8
    1736:	90 e0       	ldi	r25, 0x00	; 0
				uint8_t  MaskVal    = 0;
    1738:	40 e0       	ldi	r20, 0x00	; 0

				while (CheckBytes < Bytes)
    173a:	82 17       	cp	r24, r18
    173c:	93 07       	cpc	r25, r19
    173e:	20 f4       	brcc	.+8      	; 0x1748 <__vector_10+0x180>
				{
					MaskVal++;
    1740:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	f9 cf       	rjmp	.-14     	; 0x173a <__vector_10+0x172>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1748:	42 95       	swap	r20
    174a:	40 7f       	andi	r20, 0xF0	; 240
    174c:	42 60       	ori	r20, 0x02	; 2
    174e:	60 e0       	ldi	r22, 0x00	; 0
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	0e 94 bd 09 	call	0x137a	; 0x137a <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    1756:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    175a:	88 60       	ori	r24, 0x08	; 8
    175c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1760:	0e 94 1b 08 	call	0x1036	; 0x1036 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	bf 91       	pop	r27
    176a:	af 91       	pop	r26
    176c:	9f 91       	pop	r25
    176e:	8f 91       	pop	r24
    1770:	7f 91       	pop	r23
    1772:	6f 91       	pop	r22
    1774:	5f 91       	pop	r21
    1776:	4f 91       	pop	r20
    1778:	3f 91       	pop	r19
    177a:	2f 91       	pop	r18
    177c:	0f 90       	pop	r0
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	0f 90       	pop	r0
    1782:	1f 90       	pop	r1
    1784:	18 95       	reti

00001786 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1786:	1f 92       	push	r1
    1788:	0f 92       	push	r0
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	0f 92       	push	r0
    178e:	11 24       	eor	r1, r1
    1790:	2f 93       	push	r18
    1792:	3f 93       	push	r19
    1794:	4f 93       	push	r20
    1796:	5f 93       	push	r21
    1798:	6f 93       	push	r22
    179a:	7f 93       	push	r23
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
    17a0:	af 93       	push	r26
    17a2:	bf 93       	push	r27
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	ef 93       	push	r30
    17aa:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    17ac:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    17b0:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    17b2:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    17b6:	d8 2f       	mov	r29, r24
    17b8:	d1 70       	andi	r29, 0x01	; 1
    17ba:	80 fd       	sbrc	r24, 0
    17bc:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17be:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    17c2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    17c6:	87 7f       	andi	r24, 0xF7	; 247
    17c8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    17cc:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    17ce:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <USB_Device_ProcessControlRequest>
    17d2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    17d6:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    17da:	88 60       	ori	r24, 0x08	; 8
    17dc:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    17e0:	cd 2b       	or	r28, r29
    17e2:	cf 70       	andi	r28, 0x0F	; 15
    17e4:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    17e8:	ff 91       	pop	r31
    17ea:	ef 91       	pop	r30
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	bf 91       	pop	r27
    17f2:	af 91       	pop	r26
    17f4:	9f 91       	pop	r25
    17f6:	8f 91       	pop	r24
    17f8:	7f 91       	pop	r23
    17fa:	6f 91       	pop	r22
    17fc:	5f 91       	pop	r21
    17fe:	4f 91       	pop	r20
    1800:	3f 91       	pop	r19
    1802:	2f 91       	pop	r18
    1804:	0f 90       	pop	r0
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	0f 90       	pop	r0
    180a:	1f 90       	pop	r1
    180c:	18 95       	reti

0000180e <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    180e:	cf 92       	push	r12
    1810:	df 92       	push	r13
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	ec 01       	movw	r28, r24
    1820:	8b 01       	movw	r16, r22
    1822:	6a 01       	movw	r12, r20
    1824:	0e 94 11 0a 	call	0x1422	; 0x1422 <Endpoint_WaitUntilReady>
    1828:	81 11       	cpse	r24, r1
    182a:	33 c0       	rjmp	.+102    	; 0x1892 <Endpoint_Write_Stream_LE+0x84>
    182c:	c1 14       	cp	r12, r1
    182e:	d1 04       	cpc	r13, r1
    1830:	39 f0       	breq	.+14     	; 0x1840 <Endpoint_Write_Stream_LE+0x32>
    1832:	f6 01       	movw	r30, r12
    1834:	80 81       	ld	r24, Z
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	08 1b       	sub	r16, r24
    183a:	19 0b       	sbc	r17, r25
    183c:	c8 0f       	add	r28, r24
    183e:	d9 1f       	adc	r29, r25
    1840:	e1 2c       	mov	r14, r1
    1842:	f1 2c       	mov	r15, r1
    1844:	01 15       	cp	r16, r1
    1846:	11 05       	cpc	r17, r1
    1848:	19 f1       	breq	.+70     	; 0x1890 <Endpoint_Write_Stream_LE+0x82>
    184a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    184e:	85 fd       	sbrc	r24, 5
    1850:	16 c0       	rjmp	.+44     	; 0x187e <Endpoint_Write_Stream_LE+0x70>
    1852:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1856:	8e 77       	andi	r24, 0x7E	; 126
    1858:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    185c:	c1 14       	cp	r12, r1
    185e:	d1 04       	cpc	r13, r1
    1860:	49 f0       	breq	.+18     	; 0x1874 <Endpoint_Write_Stream_LE+0x66>
    1862:	f6 01       	movw	r30, r12
    1864:	80 81       	ld	r24, Z
    1866:	91 81       	ldd	r25, Z+1	; 0x01
    1868:	e8 0e       	add	r14, r24
    186a:	f9 1e       	adc	r15, r25
    186c:	f1 82       	std	Z+1, r15	; 0x01
    186e:	e0 82       	st	Z, r14
    1870:	85 e0       	ldi	r24, 0x05	; 5
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <Endpoint_Write_Stream_LE+0x84>
    1874:	0e 94 11 0a 	call	0x1422	; 0x1422 <Endpoint_WaitUntilReady>
    1878:	88 23       	and	r24, r24
    187a:	21 f3       	breq	.-56     	; 0x1844 <Endpoint_Write_Stream_LE+0x36>
    187c:	0a c0       	rjmp	.+20     	; 0x1892 <Endpoint_Write_Stream_LE+0x84>
    187e:	89 91       	ld	r24, Y+
    1880:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1884:	01 50       	subi	r16, 0x01	; 1
    1886:	11 09       	sbc	r17, r1
    1888:	ff ef       	ldi	r31, 0xFF	; 255
    188a:	ef 1a       	sub	r14, r31
    188c:	ff 0a       	sbc	r15, r31
    188e:	da cf       	rjmp	.-76     	; 0x1844 <Endpoint_Write_Stream_LE+0x36>
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	08 95       	ret

000018a4 <Endpoint_Write_Control_Stream_LE>:
    18a4:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <USB_ControlRequest+0x6>
    18a8:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <USB_ControlRequest+0x7>
    18ac:	26 17       	cp	r18, r22
    18ae:	37 07       	cpc	r19, r23
    18b0:	48 f0       	brcs	.+18     	; 0x18c4 <Endpoint_Write_Control_Stream_LE+0x20>
    18b2:	61 15       	cp	r22, r1
    18b4:	71 05       	cpc	r23, r1
    18b6:	39 f4       	brne	.+14     	; 0x18c6 <Endpoint_Write_Control_Stream_LE+0x22>
    18b8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18bc:	2e 77       	andi	r18, 0x7E	; 126
    18be:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <Endpoint_Write_Control_Stream_LE+0x22>
    18c4:	b9 01       	movw	r22, r18
    18c6:	38 2f       	mov	r19, r24
    18c8:	49 2f       	mov	r20, r25
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	61 15       	cp	r22, r1
    18ce:	71 05       	cpc	r23, r1
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <Endpoint_Write_Control_Stream_LE+0x30>
    18d2:	41 c0       	rjmp	.+130    	; 0x1956 <Endpoint_Write_Control_Stream_LE+0xb2>
    18d4:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <USB_DeviceState>
    18d8:	88 23       	and	r24, r24
    18da:	09 f4       	brne	.+2      	; 0x18de <Endpoint_Write_Control_Stream_LE+0x3a>
    18dc:	4d c0       	rjmp	.+154    	; 0x1978 <Endpoint_Write_Control_Stream_LE+0xd4>
    18de:	85 30       	cpi	r24, 0x05	; 5
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <Endpoint_Write_Control_Stream_LE+0x40>
    18e2:	4c c0       	rjmp	.+152    	; 0x197c <Endpoint_Write_Control_Stream_LE+0xd8>
    18e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18e8:	83 fd       	sbrc	r24, 3
    18ea:	44 c0       	rjmp	.+136    	; 0x1974 <Endpoint_Write_Control_Stream_LE+0xd0>
    18ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18f0:	82 fd       	sbrc	r24, 2
    18f2:	3a c0       	rjmp	.+116    	; 0x1968 <Endpoint_Write_Control_Stream_LE+0xc4>
    18f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18f8:	80 ff       	sbrs	r24, 0
    18fa:	e8 cf       	rjmp	.-48     	; 0x18cc <Endpoint_Write_Control_Stream_LE+0x28>
    18fc:	50 91 f3 00 	lds	r21, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1900:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1904:	82 2f       	mov	r24, r18
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	95 2b       	or	r25, r21
    190a:	e3 2f       	mov	r30, r19
    190c:	f4 2f       	mov	r31, r20
    190e:	8e 1b       	sub	r24, r30
    1910:	9f 0b       	sbc	r25, r31
    1912:	af 01       	movw	r20, r30
    1914:	48 0f       	add	r20, r24
    1916:	59 1f       	adc	r21, r25
    1918:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <USB_Device_ControlEndpointSize>
    191c:	61 15       	cp	r22, r1
    191e:	71 05       	cpc	r23, r1
    1920:	59 f0       	breq	.+22     	; 0x1938 <Endpoint_Write_Control_Stream_LE+0x94>
    1922:	a2 2f       	mov	r26, r18
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	4a 17       	cp	r20, r26
    1928:	5b 07       	cpc	r21, r27
    192a:	30 f4       	brcc	.+12     	; 0x1938 <Endpoint_Write_Control_Stream_LE+0x94>
    192c:	21 91       	ld	r18, Z+
    192e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1932:	61 50       	subi	r22, 0x01	; 1
    1934:	71 09       	sbc	r23, r1
    1936:	ed cf       	rjmp	.-38     	; 0x1912 <Endpoint_Write_Control_Stream_LE+0x6e>
    1938:	82 2f       	mov	r24, r18
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	21 e0       	ldi	r18, 0x01	; 1
    193e:	84 17       	cp	r24, r20
    1940:	95 07       	cpc	r25, r21
    1942:	09 f0       	breq	.+2      	; 0x1946 <Endpoint_Write_Control_Stream_LE+0xa2>
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    194a:	8e 77       	andi	r24, 0x7E	; 126
    194c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1950:	3e 2f       	mov	r19, r30
    1952:	4f 2f       	mov	r20, r31
    1954:	bb cf       	rjmp	.-138    	; 0x18cc <Endpoint_Write_Control_Stream_LE+0x28>
    1956:	21 11       	cpse	r18, r1
    1958:	bd cf       	rjmp	.-134    	; 0x18d4 <Endpoint_Write_Control_Stream_LE+0x30>
    195a:	06 c0       	rjmp	.+12     	; 0x1968 <Endpoint_Write_Control_Stream_LE+0xc4>
    195c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <USB_DeviceState>
    1960:	88 23       	and	r24, r24
    1962:	51 f0       	breq	.+20     	; 0x1978 <Endpoint_Write_Control_Stream_LE+0xd4>
    1964:	85 30       	cpi	r24, 0x05	; 5
    1966:	51 f0       	breq	.+20     	; 0x197c <Endpoint_Write_Control_Stream_LE+0xd8>
    1968:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    196c:	82 ff       	sbrs	r24, 2
    196e:	f6 cf       	rjmp	.-20     	; 0x195c <Endpoint_Write_Control_Stream_LE+0xb8>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	08 95       	ret
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	08 95       	ret
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	08 95       	ret
    197c:	83 e0       	ldi	r24, 0x03	; 3
    197e:	08 95       	ret

00001980 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1980:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <USB_ControlRequest+0x6>
    1984:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <USB_ControlRequest+0x7>
    1988:	26 17       	cp	r18, r22
    198a:	37 07       	cpc	r19, r23
    198c:	48 f0       	brcs	.+18     	; 0x19a0 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    198e:	61 15       	cp	r22, r1
    1990:	71 05       	cpc	r23, r1
    1992:	39 f4       	brne	.+14     	; 0x19a2 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1994:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1998:	2e 77       	andi	r18, 0x7E	; 126
    199a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <Endpoint_Write_Control_PStream_LE+0x22>
    19a0:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19a2:	38 2f       	mov	r19, r24
    19a4:	49 2f       	mov	r20, r25
    19a6:	20 e0       	ldi	r18, 0x00	; 0
	while (Length || LastPacketFull)
    19a8:	61 15       	cp	r22, r1
    19aa:	71 05       	cpc	r23, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <Endpoint_Write_Control_PStream_LE+0x30>
    19ae:	42 c0       	rjmp	.+132    	; 0x1a34 <Endpoint_Write_Control_PStream_LE+0xb4>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19b0:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19b4:	88 23       	and	r24, r24
    19b6:	09 f4       	brne	.+2      	; 0x19ba <Endpoint_Write_Control_PStream_LE+0x3a>
    19b8:	4e c0       	rjmp	.+156    	; 0x1a56 <Endpoint_Write_Control_PStream_LE+0xd6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19ba:	85 30       	cpi	r24, 0x05	; 5
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <Endpoint_Write_Control_PStream_LE+0x40>
    19be:	4d c0       	rjmp	.+154    	; 0x1a5a <Endpoint_Write_Control_PStream_LE+0xda>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    19c4:	83 fd       	sbrc	r24, 3
    19c6:	45 c0       	rjmp	.+138    	; 0x1a52 <Endpoint_Write_Control_PStream_LE+0xd2>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    19cc:	82 fd       	sbrc	r24, 2
    19ce:	3b c0       	rjmp	.+118    	; 0x1a46 <Endpoint_Write_Control_PStream_LE+0xc6>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    19d4:	80 ff       	sbrs	r24, 0
    19d6:	e8 cf       	rjmp	.-48     	; 0x19a8 <Endpoint_Write_Control_PStream_LE+0x28>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    19d8:	50 91 f3 00 	lds	r21, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    19dc:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    19e0:	82 2f       	mov	r24, r18
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	95 2b       	or	r25, r21
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19e6:	e3 2f       	mov	r30, r19
    19e8:	f4 2f       	mov	r31, r20
    19ea:	8e 1b       	sub	r24, r30
    19ec:	9f 0b       	sbc	r25, r31
    19ee:	af 01       	movw	r20, r30
    19f0:	48 0f       	add	r20, r24
    19f2:	59 1f       	adc	r21, r25
    19f4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <USB_Device_ControlEndpointSize>
    19f8:	61 15       	cp	r22, r1
    19fa:	71 05       	cpc	r23, r1
    19fc:	61 f0       	breq	.+24     	; 0x1a16 <Endpoint_Write_Control_PStream_LE+0x96>
    19fe:	a2 2f       	mov	r26, r18
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	4a 17       	cp	r20, r26
    1a04:	5b 07       	cpc	r21, r27
    1a06:	38 f4       	brcc	.+14     	; 0x1a16 <Endpoint_Write_Control_PStream_LE+0x96>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a08:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a0a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a0e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a10:	61 50       	subi	r22, 0x01	; 1
    1a12:	71 09       	sbc	r23, r1
    1a14:	ec cf       	rjmp	.-40     	; 0x19ee <Endpoint_Write_Control_PStream_LE+0x6e>
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a16:	82 2f       	mov	r24, r18
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	21 e0       	ldi	r18, 0x01	; 1
    1a1c:	84 17       	cp	r24, r20
    1a1e:	95 07       	cpc	r25, r21
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <Endpoint_Write_Control_PStream_LE+0xa4>
    1a22:	20 e0       	ldi	r18, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a28:	8e 77       	andi	r24, 0x7E	; 126
    1a2a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a2e:	3e 2f       	mov	r19, r30
    1a30:	4f 2f       	mov	r20, r31
    1a32:	ba cf       	rjmp	.-140    	; 0x19a8 <Endpoint_Write_Control_PStream_LE+0x28>
	while (Length || LastPacketFull)
    1a34:	21 11       	cpse	r18, r1
    1a36:	bc cf       	rjmp	.-136    	; 0x19b0 <Endpoint_Write_Control_PStream_LE+0x30>
    1a38:	06 c0       	rjmp	.+12     	; 0x1a46 <Endpoint_Write_Control_PStream_LE+0xc6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a3a:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a3e:	88 23       	and	r24, r24
    1a40:	51 f0       	breq	.+20     	; 0x1a56 <Endpoint_Write_Control_PStream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a42:	85 30       	cpi	r24, 0x05	; 5
    1a44:	51 f0       	breq	.+20     	; 0x1a5a <Endpoint_Write_Control_PStream_LE+0xda>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsOUTReceived()))
    1a4a:	82 ff       	sbrs	r24, 2
    1a4c:	f6 cf       	rjmp	.-20     	; 0x1a3a <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a5a:	83 e0       	ldi	r24, 0x03	; 3
}
    1a5c:	08 95       	ret

00001a5e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	aa 97       	sbiw	r28, 0x2a	; 42
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	eb eb       	ldi	r30, 0xBB	; 187
    1a78:	f1 e0       	ldi	r31, 0x01	; 1
				return UEDATX;
    1a7a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1a7e:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1a80:	21 e0       	ldi	r18, 0x01	; 1
    1a82:	e3 3c       	cpi	r30, 0xC3	; 195
    1a84:	f2 07       	cpc	r31, r18
    1a86:	c9 f7       	brne	.-14     	; 0x1a7a <USB_Device_ProcessControlRequest+0x1c>
	#endif

	EVENT_USB_Device_ControlRequest();
    1a88:	0e 94 60 08 	call	0x10c0	; 0x10c0 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1a90:	83 ff       	sbrs	r24, 3
    1a92:	36 c1       	rjmp	.+620    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1a94:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1a98:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <USB_ControlRequest+0x1>
    1a9c:	49 2f       	mov	r20, r25
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	4a 30       	cpi	r20, 0x0A	; 10
    1aa2:	51 05       	cpc	r21, r1
    1aa4:	08 f0       	brcs	.+2      	; 0x1aa8 <USB_Device_ProcessControlRequest+0x4a>
    1aa6:	2c c1       	rjmp	.+600    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
    1aa8:	fa 01       	movw	r30, r20
    1aaa:	ea 5a       	subi	r30, 0xAA	; 170
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ab2:	80 38       	cpi	r24, 0x80	; 128
    1ab4:	81 f0       	breq	.+32     	; 0x1ad6 <USB_Device_ProcessControlRequest+0x78>
    1ab6:	82 38       	cpi	r24, 0x82	; 130
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <USB_Device_ProcessControlRequest+0x5e>
    1aba:	22 c1       	rjmp	.+580    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1abc:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <USB_ControlRequest+0x4>
    1ac0:	8f 70       	andi	r24, 0x0F	; 15
    1ac2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ac6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    1aca:	85 fb       	bst	r24, 5
    1acc:	88 27       	eor	r24, r24
    1ace:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ad0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1ad4:	06 c0       	rjmp	.+12     	; 0x1ae2 <USB_Device_ProcessControlRequest+0x84>
	uint8_t CurrentStatus = 0;
    1ad6:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    1ada:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <USB_Device_RemoteWakeupEnabled>
    1ade:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1ae0:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    1ae2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ae6:	97 7f       	andi	r25, 0xF7	; 247
    1ae8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1aec:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1af0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1af4:	ca c0       	rjmp	.+404    	; 0x1c8a <USB_Device_ProcessControlRequest+0x22c>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1af6:	28 2f       	mov	r18, r24
    1af8:	2d 7f       	andi	r18, 0xFD	; 253
    1afa:	09 f0       	breq	.+2      	; 0x1afe <USB_Device_ProcessControlRequest+0xa0>
    1afc:	01 c1       	rjmp	.+514    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1afe:	88 23       	and	r24, r24
    1b00:	19 f0       	breq	.+6      	; 0x1b08 <USB_Device_ProcessControlRequest+0xaa>
    1b02:	82 30       	cpi	r24, 0x02	; 2
    1b04:	61 f0       	breq	.+24     	; 0x1b1e <USB_Device_ProcessControlRequest+0xc0>
    1b06:	fc c0       	rjmp	.+504    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1b08:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <USB_ControlRequest+0x2>
    1b0c:	81 30       	cpi	r24, 0x01	; 1
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <USB_Device_ProcessControlRequest+0xb4>
    1b10:	f7 c0       	rjmp	.+494    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1b12:	93 30       	cpi	r25, 0x03	; 3
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <USB_Device_ProcessControlRequest+0xba>
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <USB_Device_RemoteWakeupEnabled>
    1b1c:	2b c0       	rjmp	.+86     	; 0x1b74 <USB_Device_ProcessControlRequest+0x116>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1b1e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <USB_ControlRequest+0x2>
    1b22:	81 11       	cpse	r24, r1
    1b24:	27 c0       	rjmp	.+78     	; 0x1b74 <USB_Device_ProcessControlRequest+0x116>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1b26:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <USB_ControlRequest+0x4>
    1b2a:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <USB_Device_ProcessControlRequest+0xd2>
    1b2e:	e8 c0       	rjmp	.+464    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b30:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1b34:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1b38:	20 ff       	sbrs	r18, 0
    1b3a:	1c c0       	rjmp	.+56     	; 0x1b74 <USB_Device_ProcessControlRequest+0x116>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1b3c:	93 30       	cpi	r25, 0x03	; 3
    1b3e:	21 f4       	brne	.+8      	; 0x1b48 <USB_Device_ProcessControlRequest+0xea>
				UECONX |= (1 << STALLRQ);
    1b40:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b44:	80 62       	ori	r24, 0x20	; 32
    1b46:	14 c0       	rjmp	.+40     	; 0x1b70 <USB_Device_ProcessControlRequest+0x112>
				UECONX |= (1 << STALLRQC);
    1b48:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b4c:	90 61       	ori	r25, 0x10	; 16
    1b4e:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1b52:	21 e0       	ldi	r18, 0x01	; 1
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	a9 01       	movw	r20, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <USB_Device_ProcessControlRequest+0x100>
    1b5a:	44 0f       	add	r20, r20
    1b5c:	55 1f       	adc	r21, r21
    1b5e:	8a 95       	dec	r24
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <USB_Device_ProcessControlRequest+0xfc>
    1b62:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1b66:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    1b6a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b6e:	88 60       	ori	r24, 0x08	; 8
    1b70:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b74:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    1b78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b7c:	87 7f       	andi	r24, 0xF7	; 247
    1b7e:	88 c0       	rjmp	.+272    	; 0x1c90 <USB_Device_ProcessControlRequest+0x232>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1b80:	81 11       	cpse	r24, r1
    1b82:	be c0       	rjmp	.+380    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1b84:	10 91 bd 01 	lds	r17, 0x01BD	; 0x8001bd <USB_ControlRequest+0x2>
    1b88:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1b8a:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1b8c:	f8 94       	cli
    1b8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b92:	87 7f       	andi	r24, 0xF7	; 247
    1b94:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1b98:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    1ba0:	80 ff       	sbrs	r24, 0
    1ba2:	fc cf       	rjmp	.-8      	; 0x1b9c <USB_Device_ProcessControlRequest+0x13e>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1ba4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1ba8:	80 78       	andi	r24, 0x80	; 128
    1baa:	81 2b       	or	r24, r17

				UDADDR = Temp;
    1bac:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
    1bb0:	80 68       	ori	r24, 0x80	; 128
    1bb2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1bb6:	11 11       	cpse	r17, r1
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <USB_Device_ProcessControlRequest+0x160>
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <USB_Device_ProcessControlRequest+0x162>
    1bbe:	83 e0       	ldi	r24, 0x03	; 3
    1bc0:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <USB_DeviceState>
				SREG = GlobalIntState;
    1bc4:	0f bf       	out	0x3f, r16	; 63
				GCC_MEMORY_BARRIER();
    1bc6:	9c c0       	rjmp	.+312    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1bc8:	80 58       	subi	r24, 0x80	; 128
    1bca:	82 30       	cpi	r24, 0x02	; 2
    1bcc:	08 f0       	brcs	.+2      	; 0x1bd0 <USB_Device_ProcessControlRequest+0x172>
    1bce:	98 c0       	rjmp	.+304    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1bd0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <USB_ControlRequest+0x2>
    1bd4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <USB_ControlRequest+0x3>
    1bd8:	8c 3d       	cpi	r24, 0xDC	; 220
    1bda:	53 e0       	ldi	r21, 0x03	; 3
    1bdc:	95 07       	cpc	r25, r21
    1bde:	79 f5       	brne	.+94     	; 0x1c3e <USB_Device_ProcessControlRequest+0x1e0>
	SignatureDescriptor.Header.Type = DTYPE_String;
    1be0:	83 e0       	ldi	r24, 0x03	; 3
    1be2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1be4:	8a e2       	ldi	r24, 0x2A	; 42
    1be6:	89 83       	std	Y+1, r24	; 0x01
				return SREG;
    1be8:	4f b7       	in	r20, 0x3f	; 63
				cli();
    1bea:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1bec:	de 01       	movw	r26, r28
    1bee:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1bf2:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1bf4:	51 e2       	ldi	r21, 0x21	; 33
    1bf6:	e3 2f       	mov	r30, r19
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1bfe:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1c00:	20 ff       	sbrs	r18, 0
    1c02:	03 c0       	rjmp	.+6      	; 0x1c0a <USB_Device_ProcessControlRequest+0x1ac>
					{
						SerialByte >>= 4;
    1c04:	e2 95       	swap	r30
    1c06:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1c08:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1c0a:	ef 70       	andi	r30, 0x0F	; 15
    1c0c:	8e 2f       	mov	r24, r30
    1c0e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1c10:	ea 30       	cpi	r30, 0x0A	; 10
    1c12:	10 f0       	brcs	.+4      	; 0x1c18 <USB_Device_ProcessControlRequest+0x1ba>
    1c14:	c7 96       	adiw	r24, 0x37	; 55
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <USB_Device_ProcessControlRequest+0x1bc>
    1c18:	c0 96       	adiw	r24, 0x30	; 48
    1c1a:	8d 93       	st	X+, r24
    1c1c:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1c1e:	2f 5f       	subi	r18, 0xFF	; 255
    1c20:	24 31       	cpi	r18, 0x14	; 20
    1c22:	49 f7       	brne	.-46     	; 0x1bf6 <USB_Device_ProcessControlRequest+0x198>
				SREG = GlobalIntState;
    1c24:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    1c26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c2a:	87 7f       	andi	r24, 0xF7	; 247
    1c2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1c30:	6a e2       	ldi	r22, 0x2A	; 42
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	ce 01       	movw	r24, r28
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <Endpoint_Write_Control_Stream_LE>
    1c3c:	14 c0       	rjmp	.+40     	; 0x1c66 <USB_Device_ProcessControlRequest+0x208>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1c3e:	ae 01       	movw	r20, r28
    1c40:	4f 5f       	subi	r20, 0xFF	; 255
    1c42:	5f 4f       	sbci	r21, 0xFF	; 255
    1c44:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <USB_ControlRequest+0x4>
    1c48:	0e 94 51 09 	call	0x12a2	; 0x12a2 <CALLBACK_USB_GetDescriptor>
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	89 2b       	or	r24, r25
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <USB_Device_ProcessControlRequest+0x1f6>
    1c52:	56 c0       	rjmp	.+172    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
    1c54:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c58:	97 7f       	andi	r25, 0xF7	; 247
    1c5a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	0e 94 c0 0c 	call	0x1980	; 0x1980 <Endpoint_Write_Control_PStream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c6a:	8b 77       	andi	r24, 0x7B	; 123
    1c6c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c70:	47 c0       	rjmp	.+142    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1c72:	80 38       	cpi	r24, 0x80	; 128
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <USB_Device_ProcessControlRequest+0x21a>
    1c76:	44 c0       	rjmp	.+136    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
				UEINTX &= ~(1 << RXSTPI);
    1c78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c7c:	87 7f       	andi	r24, 0xF7	; 247
    1c7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1c82:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    1c86:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c8e:	8e 77       	andi	r24, 0x7E	; 126
    1c90:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1c94:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <Endpoint_ClearStatusStage>
    1c98:	33 c0       	rjmp	.+102    	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1c9a:	81 11       	cpse	r24, r1
    1c9c:	31 c0       	rjmp	.+98     	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DevDescriptorPtr
    1c9e:	ae 01       	movw	r20, r28
    1ca0:	4f 5f       	subi	r20, 0xFF	; 255
    1ca2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	91 e0       	ldi	r25, 0x01	; 1
    1caa:	0e 94 51 09 	call	0x12a2	; 0x12a2 <CALLBACK_USB_GetDescriptor>
    1cae:	89 2b       	or	r24, r25
    1cb0:	39 f1       	breq	.+78     	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
		if (((uint8_t)USB_ControlRequest.wValue > pgm_read_byte(&DevDescriptorPtr->NumberOfConfigurations)))
    1cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb6:	71 96       	adiw	r30, 0x11	; 17
    1cb8:	e4 91       	lpm	r30, Z
    1cba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <USB_ControlRequest+0x2>
    1cbe:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <USB_ControlRequest+0x3>
    1cc2:	99 27       	eor	r25, r25
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	e8 17       	cp	r30, r24
    1cc8:	f9 07       	cpc	r31, r25
    1cca:	d4 f0       	brlt	.+52     	; 0x1d00 <USB_Device_ProcessControlRequest+0x2a2>
				UEINTX &= ~(1 << RXSTPI);
    1ccc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cd0:	87 7f       	andi	r24, 0xF7	; 247
    1cd2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1cd6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <USB_ControlRequest+0x2>
    1cda:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    1cde:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    1ce2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <USB_Device_ConfigurationNumber>
    1ce6:	81 11       	cpse	r24, r1
    1ce8:	06 c0       	rjmp	.+12     	; 0x1cf6 <USB_Device_ProcessControlRequest+0x298>
				return (UDADDR & (1 << ADDEN));
    1cea:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1cee:	87 fd       	sbrc	r24, 7
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <USB_Device_ProcessControlRequest+0x298>
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <USB_Device_ProcessControlRequest+0x29a>
    1cf6:	84 e0       	ldi	r24, 0x04	; 4
    1cf8:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    1cfc:	0e 94 4c 08 	call	0x1098	; 0x1098 <EVENT_USB_Device_ConfigurationChanged>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsSETUPReceived())
    1d04:	83 ff       	sbrs	r24, 3
    1d06:	0a c0       	rjmp	.+20     	; 0x1d1c <USB_Device_ProcessControlRequest+0x2be>
				UECONX |= (1 << STALLRQ);
    1d08:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1d0c:	80 62       	ori	r24, 0x20	; 32
    1d0e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UEINTX &= ~(1 << RXSTPI);
    1d12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d16:	87 7f       	andi	r24, 0xF7	; 247
    1d18:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    1d1c:	aa 96       	adiw	r28, 0x2a	; 42
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	08 95       	ret

00001d32 <host_set_driver>:
}

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    (*driver->send_mouse)(report);
    1d32:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <driver+0x1>
    1d36:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <driver>
    1d3a:	08 95       	ret

00001d3c <host_get_driver>:
    1d3c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <driver>
    1d40:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <driver+0x1>
    1d44:	08 95       	ret

00001d46 <host_keyboard_leds>:
    1d46:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <driver>
    1d4a:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <driver+0x1>
    1d4e:	30 97       	sbiw	r30, 0x00	; 0
    1d50:	21 f0       	breq	.+8      	; 0x1d5a <host_keyboard_leds+0x14>
    1d52:	01 90       	ld	r0, Z+
    1d54:	f0 81       	ld	r31, Z
    1d56:	e0 2d       	mov	r30, r0
    1d58:	09 94       	ijmp
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	08 95       	ret

00001d5e <host_keyboard_send>:
    1d5e:	ef 92       	push	r14
    1d60:	ff 92       	push	r15
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	f8 2e       	mov	r15, r24
    1d6a:	19 2f       	mov	r17, r25
    1d6c:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <driver>
    1d70:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <driver+0x1>
    1d74:	30 97       	sbiw	r30, 0x00	; 0
    1d76:	a9 f1       	breq	.+106    	; 0x1de2 <host_keyboard_send+0x84>
    1d78:	02 80       	ldd	r0, Z+2	; 0x02
    1d7a:	f3 81       	ldd	r31, Z+3	; 0x03
    1d7c:	e0 2d       	mov	r30, r0
    1d7e:	09 95       	icall
    1d80:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
    1d84:	82 ff       	sbrs	r24, 2
    1d86:	2d c0       	rjmp	.+90     	; 0x1de2 <host_keyboard_send+0x84>
    1d88:	80 ff       	sbrs	r24, 0
    1d8a:	04 c0       	rjmp	.+8      	; 0x1d94 <host_keyboard_send+0x36>
    1d8c:	8e ea       	ldi	r24, 0xAE	; 174
    1d8e:	93 e0       	ldi	r25, 0x03	; 3
    1d90:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    1d94:	cf 2d       	mov	r28, r15
    1d96:	d1 2f       	mov	r29, r17
    1d98:	10 e1       	ldi	r17, 0x10	; 16
    1d9a:	88 ea       	ldi	r24, 0xA8	; 168
    1d9c:	e8 2e       	mov	r14, r24
    1d9e:	83 e0       	ldi	r24, 0x03	; 3
    1da0:	f8 2e       	mov	r15, r24
    1da2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
    1da6:	80 ff       	sbrs	r24, 0
    1da8:	0b c0       	rjmp	.+22     	; 0x1dc0 <host_keyboard_send+0x62>
    1daa:	88 81       	ld	r24, Y
    1dac:	1f 92       	push	r1
    1dae:	8f 93       	push	r24
    1db0:	ff 92       	push	r15
    1db2:	ef 92       	push	r14
    1db4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__xprintf>
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	11 50       	subi	r17, 0x01	; 1
    1dc2:	21 96       	adiw	r28, 0x01	; 1
    1dc4:	11 11       	cpse	r17, r1
    1dc6:	ed cf       	rjmp	.-38     	; 0x1da2 <host_keyboard_send+0x44>
    1dc8:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
    1dcc:	80 ff       	sbrs	r24, 0
    1dce:	09 c0       	rjmp	.+18     	; 0x1de2 <host_keyboard_send+0x84>
    1dd0:	86 ea       	ldi	r24, 0xA6	; 166
    1dd2:	93 e0       	ldi	r25, 0x03	; 3
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	0c 94 bb 04 	jmp	0x976	; 0x976 <xputs>
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
    1de8:	ff 90       	pop	r15
    1dea:	ef 90       	pop	r14
    1dec:	08 95       	ret

00001dee <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    1dee:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <last_system_report>
    1df2:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <last_system_report+0x1>
    1df6:	28 17       	cp	r18, r24
    1df8:	39 07       	cpc	r19, r25
    1dfa:	71 f0       	breq	.+28     	; 0x1e18 <host_system_send+0x2a>
    last_system_report = report;
    1dfc:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <last_system_report+0x1>
    1e00:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <last_system_report>

    if (!driver) return;
    1e04:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <driver>
    1e08:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <driver+0x1>
    1e0c:	30 97       	sbiw	r30, 0x00	; 0
    1e0e:	21 f0       	breq	.+8      	; 0x1e18 <host_system_send+0x2a>
    (*driver->send_system)(report);
    1e10:	06 80       	ldd	r0, Z+6	; 0x06
    1e12:	f7 81       	ldd	r31, Z+7	; 0x07
    1e14:	e0 2d       	mov	r30, r0
    1e16:	09 94       	ijmp
    1e18:	08 95       	ret

00001e1a <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    1e1a:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <last_consumer_report>
    1e1e:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <last_consumer_report+0x1>
    1e22:	28 17       	cp	r18, r24
    1e24:	39 07       	cpc	r19, r25
    1e26:	71 f0       	breq	.+28     	; 0x1e44 <host_consumer_send+0x2a>
    last_consumer_report = report;
    1e28:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <last_consumer_report+0x1>
    1e2c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <last_consumer_report>

    if (!driver) return;
    1e30:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <driver>
    1e34:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <driver+0x1>
    1e38:	30 97       	sbiw	r30, 0x00	; 0
    1e3a:	21 f0       	breq	.+8      	; 0x1e44 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    1e3c:	00 84       	ldd	r0, Z+8	; 0x08
    1e3e:	f1 85       	ldd	r31, Z+9	; 0x09
    1e40:	e0 2d       	mov	r30, r0
    1e42:	09 94       	ijmp
    1e44:	08 95       	ret

00001e46 <keyboard_init>:
#endif


void keyboard_init(void)
{
    timer_init();
    1e46:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <timer_init>
    matrix_init();
    1e4a:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <matrix_init>

00001e4e <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    1e4e:	cf 93       	push	r28
    1e50:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    1e52:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
    1e56:	82 ff       	sbrs	r24, 2
    1e58:	1e c0       	rjmp	.+60     	; 0x1e96 <keyboard_set_leds+0x48>
    1e5a:	80 ff       	sbrs	r24, 0
    1e5c:	04 c0       	rjmp	.+8      	; 0x1e66 <keyboard_set_leds+0x18>
    1e5e:	87 ec       	ldi	r24, 0xC7	; 199
    1e60:	93 e0       	ldi	r25, 0x03	; 3
    1e62:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    1e66:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
    1e6a:	80 ff       	sbrs	r24, 0
    1e6c:	0c c0       	rjmp	.+24     	; 0x1e86 <keyboard_set_leds+0x38>
    1e6e:	1f 92       	push	r1
    1e70:	cf 93       	push	r28
    1e72:	82 ec       	ldi	r24, 0xC2	; 194
    1e74:	93 e0       	ldi	r25, 0x03	; 3
    1e76:	9f 93       	push	r25
    1e78:	8f 93       	push	r24
    1e7a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__xprintf>
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
    1e8a:	80 ff       	sbrs	r24, 0
    1e8c:	04 c0       	rjmp	.+8      	; 0x1e96 <keyboard_set_leds+0x48>
    1e8e:	80 ec       	ldi	r24, 0xC0	; 192
    1e90:	93 e0       	ldi	r25, 0x03	; 3
    1e92:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    led_set(leds);
    1e96:	8c 2f       	mov	r24, r28
}
    1e98:	cf 91       	pop	r28
    led_set(leds);
    1e9a:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <led_set>

00001e9e <keyboard_task>:
{
    1e9e:	5f 92       	push	r5
    1ea0:	6f 92       	push	r6
    1ea2:	7f 92       	push	r7
    1ea4:	8f 92       	push	r8
    1ea6:	9f 92       	push	r9
    1ea8:	af 92       	push	r10
    1eaa:	bf 92       	push	r11
    1eac:	cf 92       	push	r12
    1eae:	df 92       	push	r13
    1eb0:	ef 92       	push	r14
    1eb2:	ff 92       	push	r15
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	2a 97       	sbiw	r28, 0x0a	; 10
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    matrix_scan();
    1ecc:	0e 94 ca 05 	call	0xb94	; 0xb94 <matrix_scan>
    1ed0:	91 e5       	ldi	r25, 0x51	; 81
    1ed2:	c9 2e       	mov	r12, r25
    1ed4:	91 e0       	ldi	r25, 0x01	; 1
    1ed6:	d9 2e       	mov	r13, r25
    1ed8:	00 e0       	ldi	r16, 0x00	; 0
    1eda:	10 e0       	ldi	r17, 0x00	; 0
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1edc:	aa 24       	eor	r10, r10
    1ede:	a3 94       	inc	r10
    1ee0:	b1 2c       	mov	r11, r1
    1ee2:	50 2e       	mov	r5, r16
        matrix_row = matrix_get_row(r);
    1ee4:	80 2f       	mov	r24, r16
    1ee6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <matrix_get_row>
    1eea:	4c 01       	movw	r8, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    1eec:	f6 01       	movw	r30, r12
    1eee:	61 90       	ld	r6, Z+
    1ef0:	71 90       	ld	r7, Z+
    1ef2:	6f 01       	movw	r12, r30
    1ef4:	68 26       	eor	r6, r24
    1ef6:	79 26       	eor	r7, r25
        if (matrix_change) {
    1ef8:	61 14       	cp	r6, r1
    1efa:	71 04       	cpc	r7, r1
    1efc:	b1 f4       	brne	.+44     	; 0x1f2a <keyboard_task+0x8c>
    1efe:	0f 5f       	subi	r16, 0xFF	; 255
    1f00:	1f 4f       	sbci	r17, 0xFF	; 255
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1f02:	04 30       	cpi	r16, 0x04	; 4
    1f04:	11 05       	cpc	r17, r1
    1f06:	69 f7       	brne	.-38     	; 0x1ee2 <keyboard_task+0x44>
    action_exec(TICK);
    1f08:	8f ef       	ldi	r24, 0xFF	; 255
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	8a 83       	std	Y+2, r24	; 0x02
    1f0e:	1b 82       	std	Y+3, r1	; 0x03
    1f10:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <timer_read>
    1f14:	81 60       	ori	r24, 0x01	; 1
    1f16:	78 2f       	mov	r23, r24
    1f18:	9d 83       	std	Y+5, r25	; 0x05
    1f1a:	8c 83       	std	Y+4, r24	; 0x04
    1f1c:	49 81       	ldd	r20, Y+1	; 0x01
    1f1e:	5a 81       	ldd	r21, Y+2	; 0x02
    1f20:	6b 81       	ldd	r22, Y+3	; 0x03
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	0e 94 06 10 	call	0x200c	; 0x200c <action_exec>
    1f28:	3a c0       	rjmp	.+116    	; 0x1f9e <keyboard_task+0x100>
            if (debug_matrix) matrix_print();
    1f2a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
    1f2e:	81 fd       	sbrc	r24, 1
    1f30:	0e 94 de 06 	call	0xdbc	; 0xdbc <matrix_print>
    matrix_scan();
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1f38:	75 01       	movw	r14, r10
    1f3a:	02 2e       	mov	r0, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <keyboard_task+0xa4>
    1f3e:	ee 0c       	add	r14, r14
    1f40:	ff 1c       	adc	r15, r15
    1f42:	0a 94       	dec	r0
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <keyboard_task+0xa0>
    1f46:	c3 01       	movw	r24, r6
    1f48:	8e 21       	and	r24, r14
    1f4a:	9f 21       	and	r25, r15
    1f4c:	89 2b       	or	r24, r25
    1f4e:	09 f1       	breq	.+66     	; 0x1f92 <keyboard_task+0xf4>
                    action_exec((keyevent_t){
    1f50:	2e 83       	std	Y+6, r18	; 0x06
    1f52:	5f 82       	std	Y+7, r5	; 0x07
    1f54:	8e 20       	and	r8, r14
    1f56:	9f 20       	and	r9, r15
    1f58:	91 e0       	ldi	r25, 0x01	; 1
    1f5a:	89 28       	or	r8, r9
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <keyboard_task+0xc2>
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	98 87       	std	Y+8, r25	; 0x08
                        .time = (timer_read() | 1) /* time should not be 0 */
    1f62:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <timer_read>
                    action_exec((keyevent_t){
    1f66:	81 60       	ori	r24, 0x01	; 1
    1f68:	78 2f       	mov	r23, r24
    1f6a:	9a 87       	std	Y+10, r25	; 0x0a
    1f6c:	89 87       	std	Y+9, r24	; 0x09
    1f6e:	4e 81       	ldd	r20, Y+6	; 0x06
    1f70:	5f 81       	ldd	r21, Y+7	; 0x07
    1f72:	68 85       	ldd	r22, Y+8	; 0x08
    1f74:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f76:	0e 94 06 10 	call	0x200c	; 0x200c <action_exec>
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    1f7a:	00 0f       	add	r16, r16
    1f7c:	11 1f       	adc	r17, r17
    1f7e:	f8 01       	movw	r30, r16
    1f80:	ef 5a       	subi	r30, 0xAF	; 175
    1f82:	fe 4f       	sbci	r31, 0xFE	; 254
    1f84:	80 81       	ld	r24, Z
    1f86:	91 81       	ldd	r25, Z+1	; 0x01
    1f88:	e8 26       	eor	r14, r24
    1f8a:	f9 26       	eor	r15, r25
    1f8c:	f1 82       	std	Z+1, r15	; 0x01
    1f8e:	e0 82       	st	Z, r14
                    goto MATRIX_LOOP_END;
    1f90:	06 c0       	rjmp	.+12     	; 0x1f9e <keyboard_task+0x100>
    1f92:	2f 5f       	subi	r18, 0xFF	; 255
    1f94:	3f 4f       	sbci	r19, 0xFF	; 255
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    1f96:	2b 30       	cpi	r18, 0x0B	; 11
    1f98:	31 05       	cpc	r19, r1
    1f9a:	71 f6       	brne	.-100    	; 0x1f38 <keyboard_task+0x9a>
    1f9c:	b0 cf       	rjmp	.-160    	; 0x1efe <keyboard_task+0x60>
    if (led_status != host_keyboard_leds()) {
    1f9e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <host_keyboard_leds>
    1fa2:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <led_status.4783>
    1fa6:	89 17       	cp	r24, r25
    1fa8:	d9 f0       	breq	.+54     	; 0x1fe0 <keyboard_task+0x142>
        led_status = host_keyboard_leds();
    1faa:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <host_keyboard_leds>
    1fae:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <led_status.4783>
}
    1fb2:	2a 96       	adiw	r28, 0x0a	; 10
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	1f 91       	pop	r17
    1fc4:	0f 91       	pop	r16
    1fc6:	ff 90       	pop	r15
    1fc8:	ef 90       	pop	r14
    1fca:	df 90       	pop	r13
    1fcc:	cf 90       	pop	r12
    1fce:	bf 90       	pop	r11
    1fd0:	af 90       	pop	r10
    1fd2:	9f 90       	pop	r9
    1fd4:	8f 90       	pop	r8
    1fd6:	7f 90       	pop	r7
    1fd8:	6f 90       	pop	r6
    1fda:	5f 90       	pop	r5
        keyboard_set_leds(led_status);
    1fdc:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <keyboard_set_leds>
}
    1fe0:	2a 96       	adiw	r28, 0x0a	; 10
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	ff 90       	pop	r15
    1ff6:	ef 90       	pop	r14
    1ff8:	df 90       	pop	r13
    1ffa:	cf 90       	pop	r12
    1ffc:	bf 90       	pop	r11
    1ffe:	af 90       	pop	r10
    2000:	9f 90       	pop	r9
    2002:	8f 90       	pop	r8
    2004:	7f 90       	pop	r7
    2006:	6f 90       	pop	r6
    2008:	5f 90       	pop	r5
    200a:	08 95       	ret

0000200c <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	2b 97       	sbiw	r28, 0x0b	; 11
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	4f 83       	std	Y+7, r20	; 0x07
    2022:	58 87       	std	Y+8, r21	; 0x08
    2024:	69 87       	std	Y+9, r22	; 0x09
    2026:	7a 87       	std	Y+10, r23	; 0x0a
    2028:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    202a:	de 01       	movw	r26, r28
    202c:	11 96       	adiw	r26, 0x01	; 1
    202e:	86 e0       	ldi	r24, 0x06	; 6
    2030:	fd 01       	movw	r30, r26
    2032:	11 92       	st	Z+, r1
    2034:	8a 95       	dec	r24
    2036:	e9 f7       	brne	.-6      	; 0x2032 <action_exec+0x26>
    2038:	85 e0       	ldi	r24, 0x05	; 5
    203a:	fe 01       	movw	r30, r28
    203c:	37 96       	adiw	r30, 0x07	; 7
    203e:	01 90       	ld	r0, Z+
    2040:	0d 92       	st	X+, r0
    2042:	8a 95       	dec	r24
    2044:	e1 f7       	brne	.-8      	; 0x203e <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2046:	49 81       	ldd	r20, Y+1	; 0x01
    2048:	5a 81       	ldd	r21, Y+2	; 0x02
    204a:	6b 81       	ldd	r22, Y+3	; 0x03
    204c:	7c 81       	ldd	r23, Y+4	; 0x04
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	9e 81       	ldd	r25, Y+6	; 0x06
    2052:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2056:	2b 96       	adiw	r28, 0x0b	; 11
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	08 95       	ret

00002068 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2068:	cf 93       	push	r28
    206a:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    206c:	88 23       	and	r24, r24
    206e:	09 f4       	brne	.+2      	; 0x2072 <register_code+0xa>
    2070:	98 c0       	rjmp	.+304    	; 0x21a2 <register_code+0x13a>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2072:	8c ef       	ldi	r24, 0xFC	; 252
    2074:	8c 0f       	add	r24, r28
    2076:	81 3a       	cpi	r24, 0xA1	; 161
    2078:	48 f4       	brcc	.+18     	; 0x208c <register_code+0x24>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    207a:	8c 2f       	mov	r24, r28
    207c:	0e 94 1e 1b 	call	0x363c	; 0x363c <command_proc>
    2080:	81 11       	cpse	r24, r1
    2082:	8f c0       	rjmp	.+286    	; 0x21a2 <register_code+0x13a>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2084:	8c 2f       	mov	r24, r28
    2086:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <add_key>
    208a:	0c c0       	rjmp	.+24     	; 0x20a4 <register_code+0x3c>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    208c:	80 e2       	ldi	r24, 0x20	; 32
    208e:	8c 0f       	add	r24, r28
    2090:	88 30       	cpi	r24, 0x08	; 8
    2092:	58 f4       	brcc	.+22     	; 0x20aa <register_code+0x42>
        add_mods(MOD_BIT(code));
    2094:	c7 70       	andi	r28, 0x07	; 7
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	01 c0       	rjmp	.+2      	; 0x209c <register_code+0x34>
    209a:	88 0f       	add	r24, r24
    209c:	ca 95       	dec	r28
    209e:	ea f7       	brpl	.-6      	; 0x209a <register_code+0x32>
    20a0:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <add_mods>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    20a4:	cf 91       	pop	r28
        send_keyboard_report();
    20a6:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <send_keyboard_report>
    else if IS_SYSTEM(code) {
    20aa:	8b e5       	ldi	r24, 0x5B	; 91
    20ac:	8c 0f       	add	r24, r28
    20ae:	83 30       	cpi	r24, 0x03	; 3
    20b0:	78 f4       	brcc	.+30     	; 0x20d0 <register_code+0x68>
        host_system_send(KEYCODE2SYSTEM(code));
    20b2:	c5 3a       	cpi	r28, 0xA5	; 165
    20b4:	29 f0       	breq	.+10     	; 0x20c0 <register_code+0x58>
    20b6:	c6 3a       	cpi	r28, 0xA6	; 166
    20b8:	31 f0       	breq	.+12     	; 0x20c6 <register_code+0x5e>
    20ba:	83 e8       	ldi	r24, 0x83	; 131
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	05 c0       	rjmp	.+10     	; 0x20ca <register_code+0x62>
    20c0:	81 e8       	ldi	r24, 0x81	; 129
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <register_code+0x62>
    20c6:	82 e8       	ldi	r24, 0x82	; 130
    20c8:	90 e0       	ldi	r25, 0x00	; 0
}
    20ca:	cf 91       	pop	r28
        host_system_send(KEYCODE2SYSTEM(code));
    20cc:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <host_system_send>
    else if IS_CONSUMER(code) {
    20d0:	88 e5       	ldi	r24, 0x58	; 88
    20d2:	8c 0f       	add	r24, r28
    20d4:	83 31       	cpi	r24, 0x13	; 19
    20d6:	08 f0       	brcs	.+2      	; 0x20da <register_code+0x72>
    20d8:	64 c0       	rjmp	.+200    	; 0x21a2 <register_code+0x13a>
        host_consumer_send(KEYCODE2CONSUMER(code));
    20da:	c8 3a       	cpi	r28, 0xA8	; 168
    20dc:	39 f1       	breq	.+78     	; 0x212c <register_code+0xc4>
    20de:	c9 3a       	cpi	r28, 0xA9	; 169
    20e0:	41 f1       	breq	.+80     	; 0x2132 <register_code+0xca>
    20e2:	ca 3a       	cpi	r28, 0xAA	; 170
    20e4:	49 f1       	breq	.+82     	; 0x2138 <register_code+0xd0>
    20e6:	cb 3a       	cpi	r28, 0xAB	; 171
    20e8:	51 f1       	breq	.+84     	; 0x213e <register_code+0xd6>
    20ea:	cc 3a       	cpi	r28, 0xAC	; 172
    20ec:	59 f1       	breq	.+86     	; 0x2144 <register_code+0xdc>
    20ee:	cd 3a       	cpi	r28, 0xAD	; 173
    20f0:	61 f1       	breq	.+88     	; 0x214a <register_code+0xe2>
    20f2:	c0 3b       	cpi	r28, 0xB0	; 176
    20f4:	69 f1       	breq	.+90     	; 0x2150 <register_code+0xe8>
    20f6:	ce 3a       	cpi	r28, 0xAE	; 174
    20f8:	71 f1       	breq	.+92     	; 0x2156 <register_code+0xee>
    20fa:	cf 3a       	cpi	r28, 0xAF	; 175
    20fc:	79 f1       	breq	.+94     	; 0x215c <register_code+0xf4>
    20fe:	c1 3b       	cpi	r28, 0xB1	; 177
    2100:	81 f1       	breq	.+96     	; 0x2162 <register_code+0xfa>
    2102:	c2 3b       	cpi	r28, 0xB2	; 178
    2104:	89 f1       	breq	.+98     	; 0x2168 <register_code+0x100>
    2106:	c3 3b       	cpi	r28, 0xB3	; 179
    2108:	91 f1       	breq	.+100    	; 0x216e <register_code+0x106>
    210a:	c4 3b       	cpi	r28, 0xB4	; 180
    210c:	99 f1       	breq	.+102    	; 0x2174 <register_code+0x10c>
    210e:	c5 3b       	cpi	r28, 0xB5	; 181
    2110:	a1 f1       	breq	.+104    	; 0x217a <register_code+0x112>
    2112:	c6 3b       	cpi	r28, 0xB6	; 182
    2114:	a9 f1       	breq	.+106    	; 0x2180 <register_code+0x118>
    2116:	c7 3b       	cpi	r28, 0xB7	; 183
    2118:	b1 f1       	breq	.+108    	; 0x2186 <register_code+0x11e>
    211a:	c8 3b       	cpi	r28, 0xB8	; 184
    211c:	b9 f1       	breq	.+110    	; 0x218c <register_code+0x124>
    211e:	c9 3b       	cpi	r28, 0xB9	; 185
    2120:	c1 f1       	breq	.+112    	; 0x2192 <register_code+0x12a>
    2122:	ca 3b       	cpi	r28, 0xBA	; 186
    2124:	c9 f1       	breq	.+114    	; 0x2198 <register_code+0x130>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	38 c0       	rjmp	.+112    	; 0x219c <register_code+0x134>
    212c:	82 ee       	ldi	r24, 0xE2	; 226
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	35 c0       	rjmp	.+106    	; 0x219c <register_code+0x134>
    2132:	89 ee       	ldi	r24, 0xE9	; 233
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	32 c0       	rjmp	.+100    	; 0x219c <register_code+0x134>
    2138:	8a ee       	ldi	r24, 0xEA	; 234
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	2f c0       	rjmp	.+94     	; 0x219c <register_code+0x134>
    213e:	85 eb       	ldi	r24, 0xB5	; 181
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	2c c0       	rjmp	.+88     	; 0x219c <register_code+0x134>
    2144:	86 eb       	ldi	r24, 0xB6	; 182
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	29 c0       	rjmp	.+82     	; 0x219c <register_code+0x134>
    214a:	87 eb       	ldi	r24, 0xB7	; 183
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	26 c0       	rjmp	.+76     	; 0x219c <register_code+0x134>
    2150:	8c ec       	ldi	r24, 0xCC	; 204
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	23 c0       	rjmp	.+70     	; 0x219c <register_code+0x134>
    2156:	8d ec       	ldi	r24, 0xCD	; 205
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	20 c0       	rjmp	.+64     	; 0x219c <register_code+0x134>
    215c:	83 e8       	ldi	r24, 0x83	; 131
    215e:	91 e0       	ldi	r25, 0x01	; 1
    2160:	1d c0       	rjmp	.+58     	; 0x219c <register_code+0x134>
    2162:	8a e8       	ldi	r24, 0x8A	; 138
    2164:	91 e0       	ldi	r25, 0x01	; 1
    2166:	1a c0       	rjmp	.+52     	; 0x219c <register_code+0x134>
    2168:	82 e9       	ldi	r24, 0x92	; 146
    216a:	91 e0       	ldi	r25, 0x01	; 1
    216c:	17 c0       	rjmp	.+46     	; 0x219c <register_code+0x134>
    216e:	84 e9       	ldi	r24, 0x94	; 148
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	14 c0       	rjmp	.+40     	; 0x219c <register_code+0x134>
    2174:	81 e2       	ldi	r24, 0x21	; 33
    2176:	92 e0       	ldi	r25, 0x02	; 2
    2178:	11 c0       	rjmp	.+34     	; 0x219c <register_code+0x134>
    217a:	83 e2       	ldi	r24, 0x23	; 35
    217c:	92 e0       	ldi	r25, 0x02	; 2
    217e:	0e c0       	rjmp	.+28     	; 0x219c <register_code+0x134>
    2180:	84 e2       	ldi	r24, 0x24	; 36
    2182:	92 e0       	ldi	r25, 0x02	; 2
    2184:	0b c0       	rjmp	.+22     	; 0x219c <register_code+0x134>
    2186:	85 e2       	ldi	r24, 0x25	; 37
    2188:	92 e0       	ldi	r25, 0x02	; 2
    218a:	08 c0       	rjmp	.+16     	; 0x219c <register_code+0x134>
    218c:	86 e2       	ldi	r24, 0x26	; 38
    218e:	92 e0       	ldi	r25, 0x02	; 2
    2190:	05 c0       	rjmp	.+10     	; 0x219c <register_code+0x134>
    2192:	87 e2       	ldi	r24, 0x27	; 39
    2194:	92 e0       	ldi	r25, 0x02	; 2
    2196:	02 c0       	rjmp	.+4      	; 0x219c <register_code+0x134>
    2198:	8a e2       	ldi	r24, 0x2A	; 42
    219a:	92 e0       	ldi	r25, 0x02	; 2
}
    219c:	cf 91       	pop	r28
        host_consumer_send(KEYCODE2CONSUMER(code));
    219e:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <host_consumer_send>
}
    21a2:	cf 91       	pop	r28
    21a4:	08 95       	ret

000021a6 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    21a6:	88 23       	and	r24, r24
    21a8:	29 f1       	breq	.+74     	; 0x21f4 <unregister_code+0x4e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    21aa:	9c ef       	ldi	r25, 0xFC	; 252
    21ac:	98 0f       	add	r25, r24
    21ae:	91 3a       	cpi	r25, 0xA1	; 161
    21b0:	18 f4       	brcc	.+6      	; 0x21b8 <unregister_code+0x12>
        del_key(code);
    21b2:	0e 94 2c 19 	call	0x3258	; 0x3258 <del_key>
    21b6:	0d c0       	rjmp	.+26     	; 0x21d2 <unregister_code+0x2c>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    21b8:	90 e2       	ldi	r25, 0x20	; 32
    21ba:	98 0f       	add	r25, r24
    21bc:	98 30       	cpi	r25, 0x08	; 8
    21be:	58 f4       	brcc	.+22     	; 0x21d6 <unregister_code+0x30>
        del_mods(MOD_BIT(code));
    21c0:	87 70       	andi	r24, 0x07	; 7
    21c2:	91 e0       	ldi	r25, 0x01	; 1
    21c4:	01 c0       	rjmp	.+2      	; 0x21c8 <unregister_code+0x22>
    21c6:	99 0f       	add	r25, r25
    21c8:	8a 95       	dec	r24
    21ca:	ea f7       	brpl	.-6      	; 0x21c6 <unregister_code+0x20>
    21cc:	89 2f       	mov	r24, r25
    21ce:	0e 94 81 19 	call	0x3302	; 0x3302 <del_mods>
        send_keyboard_report();
    21d2:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    21d6:	9b e5       	ldi	r25, 0x5B	; 91
    21d8:	98 0f       	add	r25, r24
    21da:	93 30       	cpi	r25, 0x03	; 3
    21dc:	20 f4       	brcc	.+8      	; 0x21e6 <unregister_code+0x40>
        host_system_send(0);
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <host_system_send>
    }
    else if IS_CONSUMER(code) {
    21e6:	88 5a       	subi	r24, 0xA8	; 168
    21e8:	83 31       	cpi	r24, 0x13	; 19
    21ea:	20 f4       	brcc	.+8      	; 0x21f4 <unregister_code+0x4e>
        host_consumer_send(0);
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <host_consumer_send>
    21f4:	08 95       	ret

000021f6 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    21f6:	88 23       	and	r24, r24
    21f8:	21 f0       	breq	.+8      	; 0x2202 <register_mods+0xc>
        add_mods(mods);
    21fa:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <add_mods>
        send_keyboard_report();
    21fe:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <send_keyboard_report>
    2202:	08 95       	ret

00002204 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2204:	88 23       	and	r24, r24
    2206:	21 f0       	breq	.+8      	; 0x2210 <unregister_mods+0xc>
        del_mods(mods);
    2208:	0e 94 81 19 	call	0x3302	; 0x3302 <del_mods>
        send_keyboard_report();
    220c:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <send_keyboard_report>
    2210:	08 95       	ret

00002212 <process_action>:
{
    2212:	bf 92       	push	r11
    2214:	cf 92       	push	r12
    2216:	df 92       	push	r13
    2218:	ef 92       	push	r14
    221a:	ff 92       	push	r15
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	00 d0       	rcall	.+0      	; 0x2226 <process_action+0x14>
    2226:	00 d0       	rcall	.+0      	; 0x2228 <process_action+0x16>
    2228:	00 d0       	rcall	.+0      	; 0x222a <process_action+0x18>
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	6c 01       	movw	r12, r24
    keyevent_t event = record->event;
    2230:	85 e0       	ldi	r24, 0x05	; 5
    2232:	f6 01       	movw	r30, r12
    2234:	de 01       	movw	r26, r28
    2236:	11 96       	adiw	r26, 0x01	; 1
    2238:	01 90       	ld	r0, Z+
    223a:	0d 92       	st	X+, r0
    223c:	8a 95       	dec	r24
    223e:	e1 f7       	brne	.-8      	; 0x2238 <process_action+0x26>

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2240:	f6 01       	movw	r30, r12
    2242:	83 81       	ldd	r24, Z+3	; 0x03
    2244:	94 81       	ldd	r25, Z+4	; 0x04
    2246:	89 2b       	or	r24, r25
    2248:	09 f4       	brne	.+2      	; 0x224c <process_action+0x3a>
    224a:	7b c2       	rjmp	.+1270   	; 0x2742 <process_action+0x530>
    224c:	90 81       	ld	r25, Z
    224e:	81 81       	ldd	r24, Z+1	; 0x01
    2250:	8f 3f       	cpi	r24, 0xFF	; 255
    2252:	19 f4       	brne	.+6      	; 0x225a <process_action+0x48>
    if (IS_NOEVENT(event)) { return; }
    2254:	9f 3f       	cpi	r25, 0xFF	; 255
    2256:	09 f4       	brne	.+2      	; 0x225a <process_action+0x48>
    2258:	74 c2       	rjmp	.+1256   	; 0x2742 <process_action+0x530>
    keyevent_t event = record->event;
    225a:	f6 01       	movw	r30, r12
    225c:	f2 80       	ldd	r15, Z+2	; 0x02
    uint8_t tap_count = record->tap.count;
    225e:	05 81       	ldd	r16, Z+5	; 0x05
    2260:	02 95       	swap	r16
    2262:	0f 70       	andi	r16, 0x0F	; 15
    action_t action = layer_switch_get_action(event.key);
    2264:	99 83       	std	Y+1, r25	; 0x01
    2266:	8a 83       	std	Y+2, r24	; 0x02
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	0e 94 9f 18 	call	0x313e	; 0x313e <layer_switch_get_action>
    2270:	18 2f       	mov	r17, r24
    2272:	b9 2e       	mov	r11, r25
    dprint(" layer_state: "); layer_debug();
    2274:	0e 94 9e 18 	call	0x313c	; 0x313c <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2278:	0e 94 65 17 	call	0x2eca	; 0x2eca <default_layer_debug>
    switch (action.kind.id) {
    227c:	eb 2d       	mov	r30, r11
    227e:	e2 95       	swap	r30
    2280:	ef 70       	andi	r30, 0x0F	; 15
    2282:	4e 2f       	mov	r20, r30
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	fa 01       	movw	r30, r20
    2288:	e0 5a       	subi	r30, 0xA0	; 160
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__tablejump2__>
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2290:	9b 2d       	mov	r25, r11
    2292:	90 7f       	andi	r25, 0xF0	; 240
    2294:	8b 2d       	mov	r24, r11
    2296:	8f 70       	andi	r24, 0x0F	; 15
    2298:	08 2f       	mov	r16, r24
    229a:	99 23       	and	r25, r25
    229c:	11 f0       	breq	.+4      	; 0x22a2 <process_action+0x90>
    229e:	02 95       	swap	r16
    22a0:	00 7f       	andi	r16, 0xF0	; 240
                if (event.pressed) {
    22a2:	ff 20       	and	r15, r15
    22a4:	49 f0       	breq	.+18     	; 0x22b8 <process_action+0xa6>
                    if (mods) {
    22a6:	00 23       	and	r16, r16
    22a8:	09 f4       	brne	.+2      	; 0x22ac <process_action+0x9a>
    22aa:	f8 c1       	rjmp	.+1008   	; 0x269c <process_action+0x48a>
                        add_weak_mods(mods);
    22ac:	80 2f       	mov	r24, r16
    22ae:	0e 94 8b 19 	call	0x3316	; 0x3316 <add_weak_mods>
                        send_keyboard_report();
    22b2:	0e 94 b2 19 	call	0x3364	; 0x3364 <send_keyboard_report>
    22b6:	f2 c1       	rjmp	.+996    	; 0x269c <process_action+0x48a>
                    unregister_code(action.key.code);
    22b8:	81 2f       	mov	r24, r17
    22ba:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <unregister_code>
                    if (mods) {
    22be:	00 23       	and	r16, r16
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <process_action+0xb2>
    22c2:	3f c2       	rjmp	.+1150   	; 0x2742 <process_action+0x530>
                        del_weak_mods(mods);
    22c4:	80 2f       	mov	r24, r16
    22c6:	0e 94 91 19 	call	0x3322	; 0x3322 <del_weak_mods>
}
    22ca:	26 96       	adiw	r28, 0x06	; 6
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	ff 90       	pop	r15
    22e0:	ef 90       	pop	r14
    22e2:	df 90       	pop	r13
    22e4:	cf 90       	pop	r12
    22e6:	bf 90       	pop	r11
                        send_keyboard_report();
    22e8:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <send_keyboard_report>
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    22ec:	9b 2d       	mov	r25, r11
    22ee:	90 7f       	andi	r25, 0xF0	; 240
    22f0:	8b 2d       	mov	r24, r11
    22f2:	8f 70       	andi	r24, 0x0F	; 15
    22f4:	90 32       	cpi	r25, 0x20	; 32
    22f6:	11 f0       	breq	.+4      	; 0x22fc <process_action+0xea>
    22f8:	82 95       	swap	r24
    22fa:	80 7f       	andi	r24, 0xF0	; 240
                switch (action.layer_tap.code) {
    22fc:	11 23       	and	r17, r17
    22fe:	19 f0       	breq	.+6      	; 0x2306 <process_action+0xf4>
    2300:	11 30       	cpi	r17, 0x01	; 1
    2302:	11 f1       	breq	.+68     	; 0x2348 <process_action+0x136>
    2304:	2b c0       	rjmp	.+86     	; 0x235c <process_action+0x14a>
                        if (event.pressed) {
    2306:	ff 20       	and	r15, r15
    2308:	a9 f0       	breq	.+42     	; 0x2334 <process_action+0x122>
                            if (tap_count == 0) {
    230a:	00 23       	and	r16, r16
    230c:	89 f1       	breq	.+98     	; 0x2370 <process_action+0x15e>
                            else if (tap_count == 1) {
    230e:	01 30       	cpi	r16, 0x01	; 1
    2310:	79 f5       	brne	.+94     	; 0x2370 <process_action+0x15e>
}
    2312:	26 96       	adiw	r28, 0x06	; 6
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
    232e:	bf 90       	pop	r11
                                set_oneshot_mods(mods);
    2330:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <set_oneshot_mods>
                            if (tap_count == 0) {
    2334:	00 23       	and	r16, r16
    2336:	19 f0       	breq	.+6      	; 0x233e <process_action+0x12c>
                            else if (tap_count == 1) {
    2338:	01 30       	cpi	r16, 0x01	; 1
    233a:	09 f4       	brne	.+2      	; 0x233e <process_action+0x12c>
    233c:	02 c2       	rjmp	.+1028   	; 0x2742 <process_action+0x530>
                                clear_oneshot_mods();
    233e:	8e 83       	std	Y+6, r24	; 0x06
    2340:	0e 94 9e 19 	call	0x333c	; 0x333c <clear_oneshot_mods>
                                unregister_mods(mods);
    2344:	8e 81       	ldd	r24, Y+6	; 0x06
    2346:	27 c0       	rjmp	.+78     	; 0x2396 <process_action+0x184>
                        if (event.pressed) {
    2348:	ff 20       	and	r15, r15
    234a:	21 f0       	breq	.+8      	; 0x2354 <process_action+0x142>
                            if (tap_count <= TAPPING_TOGGLE) {
    234c:	06 30       	cpi	r16, 0x06	; 6
    234e:	08 f0       	brcs	.+2      	; 0x2352 <process_action+0x140>
    2350:	f8 c1       	rjmp	.+1008   	; 0x2742 <process_action+0x530>
    2352:	0e c0       	rjmp	.+28     	; 0x2370 <process_action+0x15e>
                            if (tap_count < TAPPING_TOGGLE) {
    2354:	05 30       	cpi	r16, 0x05	; 5
    2356:	08 f0       	brcs	.+2      	; 0x235a <process_action+0x148>
    2358:	f4 c1       	rjmp	.+1000   	; 0x2742 <process_action+0x530>
    235a:	1d c0       	rjmp	.+58     	; 0x2396 <process_action+0x184>
                        if (event.pressed) {
    235c:	ff 20       	and	r15, r15
    235e:	c9 f0       	breq	.+50     	; 0x2392 <process_action+0x180>
                            if (tap_count > 0) {
    2360:	00 23       	and	r16, r16
    2362:	31 f0       	breq	.+12     	; 0x2370 <process_action+0x15e>
                                if (record->tap.interrupted) {
    2364:	f6 01       	movw	r30, r12
    2366:	95 81       	ldd	r25, Z+5	; 0x05
    2368:	90 ff       	sbrs	r25, 0
    236a:	98 c1       	rjmp	.+816    	; 0x269c <process_action+0x48a>
                                    record->tap.count = 0;
    236c:	9f 70       	andi	r25, 0x0F	; 15
    236e:	95 83       	std	Z+5, r25	; 0x05
}
    2370:	26 96       	adiw	r28, 0x06	; 6
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	f8 94       	cli
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	cd bf       	out	0x3d, r28	; 61
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
    2384:	ff 90       	pop	r15
    2386:	ef 90       	pop	r14
    2388:	df 90       	pop	r13
    238a:	cf 90       	pop	r12
    238c:	bf 90       	pop	r11
                                    register_mods(mods);
    238e:	0c 94 fb 10 	jmp	0x21f6	; 0x21f6 <register_mods>
                            if (tap_count > 0) {
    2392:	01 11       	cpse	r16, r1
    2394:	98 c1       	rjmp	.+816    	; 0x26c6 <process_action+0x4b4>
}
    2396:	26 96       	adiw	r28, 0x06	; 6
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	1f 91       	pop	r17
    23a8:	0f 91       	pop	r16
    23aa:	ff 90       	pop	r15
    23ac:	ef 90       	pop	r14
    23ae:	df 90       	pop	r13
    23b0:	cf 90       	pop	r12
    23b2:	bf 90       	pop	r11
                                unregister_mods(mods);
    23b4:	0c 94 02 11 	jmp	0x2204	; 0x2204 <unregister_mods>
            if (action.layer_bitop.on == 0) {
    23b8:	9b 2d       	mov	r25, r11
    23ba:	93 70       	andi	r25, 0x03	; 3
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <process_action+0x1ae>
    23be:	75 c0       	rjmp	.+234    	; 0x24aa <process_action+0x298>
                if (!event.pressed) {
    23c0:	f1 10       	cpse	r15, r1
    23c2:	bf c1       	rjmp	.+894    	; 0x2742 <process_action+0x530>
                    uint8_t shift = action.layer_bitop.part*4;
    23c4:	91 2f       	mov	r25, r17
    23c6:	92 95       	swap	r25
    23c8:	96 95       	lsr	r25
    23ca:	97 70       	andi	r25, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    23cc:	99 0f       	add	r25, r25
    23ce:	99 0f       	add	r25, r25
    23d0:	81 2f       	mov	r24, r17
    23d2:	8f 70       	andi	r24, 0x0F	; 15
    23d4:	c8 2e       	mov	r12, r24
    23d6:	d1 2c       	mov	r13, r1
    23d8:	e1 2c       	mov	r14, r1
    23da:	f1 2c       	mov	r15, r1
    23dc:	09 2e       	mov	r0, r25
    23de:	04 c0       	rjmp	.+8      	; 0x23e8 <process_action+0x1d6>
    23e0:	cc 0c       	add	r12, r12
    23e2:	dd 1c       	adc	r13, r13
    23e4:	ee 1c       	adc	r14, r14
    23e6:	ff 1c       	adc	r15, r15
    23e8:	0a 94       	dec	r0
    23ea:	d2 f7       	brpl	.-12     	; 0x23e0 <process_action+0x1ce>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    23ec:	14 ff       	sbrs	r17, 4
    23ee:	12 c0       	rjmp	.+36     	; 0x2414 <process_action+0x202>
    23f0:	0f e0       	ldi	r16, 0x0F	; 15
    23f2:	10 e0       	ldi	r17, 0x00	; 0
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	04 c0       	rjmp	.+8      	; 0x2402 <process_action+0x1f0>
    23fa:	00 0f       	add	r16, r16
    23fc:	11 1f       	adc	r17, r17
    23fe:	22 1f       	adc	r18, r18
    2400:	33 1f       	adc	r19, r19
    2402:	9a 95       	dec	r25
    2404:	d2 f7       	brpl	.-12     	; 0x23fa <process_action+0x1e8>
    2406:	c9 01       	movw	r24, r18
    2408:	b8 01       	movw	r22, r16
    240a:	60 95       	com	r22
    240c:	70 95       	com	r23
    240e:	80 95       	com	r24
    2410:	90 95       	com	r25
    2412:	03 c0       	rjmp	.+6      	; 0x241a <process_action+0x208>
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	70 e0       	ldi	r23, 0x00	; 0
    2418:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    241a:	4b 2d       	mov	r20, r11
    241c:	46 95       	lsr	r20
    241e:	46 95       	lsr	r20
    2420:	43 70       	andi	r20, 0x03	; 3
    2422:	42 30       	cpi	r20, 0x02	; 2
    2424:	c1 f0       	breq	.+48     	; 0x2456 <process_action+0x244>
    2426:	60 f5       	brcc	.+88     	; 0x2480 <process_action+0x26e>
    2428:	6c 29       	or	r22, r12
    242a:	7d 29       	or	r23, r13
    242c:	8e 29       	or	r24, r14
    242e:	9f 29       	or	r25, r15
    2430:	41 30       	cpi	r20, 0x01	; 1
    2432:	51 f1       	breq	.+84     	; 0x2488 <process_action+0x276>
}
    2434:	26 96       	adiw	r28, 0x06	; 6
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	1f 91       	pop	r17
    2446:	0f 91       	pop	r16
    2448:	ff 90       	pop	r15
    244a:	ef 90       	pop	r14
    244c:	df 90       	pop	r13
    244e:	cf 90       	pop	r12
    2450:	bf 90       	pop	r11
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2452:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <default_layer_and>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2456:	6c 29       	or	r22, r12
    2458:	7d 29       	or	r23, r13
    245a:	8e 29       	or	r24, r14
    245c:	9f 29       	or	r25, r15
}
    245e:	26 96       	adiw	r28, 0x06	; 6
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	1f 91       	pop	r17
    2470:	0f 91       	pop	r16
    2472:	ff 90       	pop	r15
    2474:	ef 90       	pop	r14
    2476:	df 90       	pop	r13
    2478:	cf 90       	pop	r12
    247a:	bf 90       	pop	r11
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    247c:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2480:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <default_layer_and>
    2484:	c7 01       	movw	r24, r14
    2486:	b6 01       	movw	r22, r12
}
    2488:	26 96       	adiw	r28, 0x06	; 6
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	ff 90       	pop	r15
    249e:	ef 90       	pop	r14
    24a0:	df 90       	pop	r13
    24a2:	cf 90       	pop	r12
    24a4:	bf 90       	pop	r11
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    24a6:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <default_layer_or>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    24aa:	ff 20       	and	r15, r15
    24ac:	19 f0       	breq	.+6      	; 0x24b4 <process_action+0x2a2>
    24ae:	9b 2d       	mov	r25, r11
    24b0:	91 70       	andi	r25, 0x01	; 1
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <process_action+0x2a4>
    24b4:	96 95       	lsr	r25
    24b6:	99 23       	and	r25, r25
    24b8:	09 f4       	brne	.+2      	; 0x24bc <process_action+0x2aa>
    24ba:	43 c1       	rjmp	.+646    	; 0x2742 <process_action+0x530>
                    uint8_t shift = action.layer_bitop.part*4;
    24bc:	91 2f       	mov	r25, r17
    24be:	92 95       	swap	r25
    24c0:	96 95       	lsr	r25
    24c2:	97 70       	andi	r25, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    24c4:	99 0f       	add	r25, r25
    24c6:	99 0f       	add	r25, r25
    24c8:	81 2f       	mov	r24, r17
    24ca:	8f 70       	andi	r24, 0x0F	; 15
    24cc:	c8 2e       	mov	r12, r24
    24ce:	d1 2c       	mov	r13, r1
    24d0:	e1 2c       	mov	r14, r1
    24d2:	f1 2c       	mov	r15, r1
    24d4:	09 2e       	mov	r0, r25
    24d6:	04 c0       	rjmp	.+8      	; 0x24e0 <process_action+0x2ce>
    24d8:	cc 0c       	add	r12, r12
    24da:	dd 1c       	adc	r13, r13
    24dc:	ee 1c       	adc	r14, r14
    24de:	ff 1c       	adc	r15, r15
    24e0:	0a 94       	dec	r0
    24e2:	d2 f7       	brpl	.-12     	; 0x24d8 <process_action+0x2c6>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    24e4:	14 ff       	sbrs	r17, 4
    24e6:	12 c0       	rjmp	.+36     	; 0x250c <process_action+0x2fa>
    24e8:	0f e0       	ldi	r16, 0x0F	; 15
    24ea:	10 e0       	ldi	r17, 0x00	; 0
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	04 c0       	rjmp	.+8      	; 0x24fa <process_action+0x2e8>
    24f2:	00 0f       	add	r16, r16
    24f4:	11 1f       	adc	r17, r17
    24f6:	22 1f       	adc	r18, r18
    24f8:	33 1f       	adc	r19, r19
    24fa:	9a 95       	dec	r25
    24fc:	d2 f7       	brpl	.-12     	; 0x24f2 <process_action+0x2e0>
    24fe:	c9 01       	movw	r24, r18
    2500:	b8 01       	movw	r22, r16
    2502:	60 95       	com	r22
    2504:	70 95       	com	r23
    2506:	80 95       	com	r24
    2508:	90 95       	com	r25
    250a:	03 c0       	rjmp	.+6      	; 0x2512 <process_action+0x300>
    250c:	60 e0       	ldi	r22, 0x00	; 0
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2512:	4b 2d       	mov	r20, r11
    2514:	46 95       	lsr	r20
    2516:	46 95       	lsr	r20
    2518:	43 70       	andi	r20, 0x03	; 3
    251a:	42 30       	cpi	r20, 0x02	; 2
    251c:	c1 f0       	breq	.+48     	; 0x254e <process_action+0x33c>
    251e:	60 f5       	brcc	.+88     	; 0x2578 <process_action+0x366>
    2520:	6c 29       	or	r22, r12
    2522:	7d 29       	or	r23, r13
    2524:	8e 29       	or	r24, r14
    2526:	9f 29       	or	r25, r15
    2528:	41 30       	cpi	r20, 0x01	; 1
    252a:	51 f1       	breq	.+84     	; 0x2580 <process_action+0x36e>
}
    252c:	26 96       	adiw	r28, 0x06	; 6
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	df 91       	pop	r29
    253a:	cf 91       	pop	r28
    253c:	1f 91       	pop	r17
    253e:	0f 91       	pop	r16
    2540:	ff 90       	pop	r15
    2542:	ef 90       	pop	r14
    2544:	df 90       	pop	r13
    2546:	cf 90       	pop	r12
    2548:	bf 90       	pop	r11
                        case OP_BIT_AND: layer_and(bits | mask); break;
    254a:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <layer_and>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    254e:	6c 29       	or	r22, r12
    2550:	7d 29       	or	r23, r13
    2552:	8e 29       	or	r24, r14
    2554:	9f 29       	or	r25, r15
}
    2556:	26 96       	adiw	r28, 0x06	; 6
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	1f 91       	pop	r17
    2568:	0f 91       	pop	r16
    256a:	ff 90       	pop	r15
    256c:	ef 90       	pop	r14
    256e:	df 90       	pop	r13
    2570:	cf 90       	pop	r12
    2572:	bf 90       	pop	r11
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2574:	0c 94 82 18 	jmp	0x3104	; 0x3104 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2578:	0e 94 66 18 	call	0x30cc	; 0x30cc <layer_and>
    257c:	c7 01       	movw	r24, r14
    257e:	b6 01       	movw	r22, r12
}
    2580:	26 96       	adiw	r28, 0x06	; 6
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	f8 94       	cli
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	cd bf       	out	0x3d, r28	; 61
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	ff 90       	pop	r15
    2596:	ef 90       	pop	r14
    2598:	df 90       	pop	r13
    259a:	cf 90       	pop	r12
    259c:	bf 90       	pop	r11
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    259e:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <layer_or>
            switch (action.layer_tap.code) {
    25a2:	11 3f       	cpi	r17, 0xF1	; 241
    25a4:	31 f1       	breq	.+76     	; 0x25f2 <process_action+0x3e0>
    25a6:	18 f4       	brcc	.+6      	; 0x25ae <process_action+0x39c>
    25a8:	10 3f       	cpi	r17, 0xF0	; 240
    25aa:	39 f0       	breq	.+14     	; 0x25ba <process_action+0x3a8>
    25ac:	72 c0       	rjmp	.+228    	; 0x2692 <process_action+0x480>
    25ae:	12 3f       	cpi	r17, 0xF2	; 242
    25b0:	a9 f1       	breq	.+106    	; 0x261c <process_action+0x40a>
    25b2:	13 3f       	cpi	r17, 0xF3	; 243
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <process_action+0x3a6>
    25b6:	47 c0       	rjmp	.+142    	; 0x2646 <process_action+0x434>
    25b8:	6c c0       	rjmp	.+216    	; 0x2692 <process_action+0x480>
                    if (event.pressed) {
    25ba:	ff 20       	and	r15, r15
    25bc:	b1 f0       	breq	.+44     	; 0x25ea <process_action+0x3d8>
                        if (tap_count < TAPPING_TOGGLE) {
    25be:	05 30       	cpi	r16, 0x05	; 5
    25c0:	08 f0       	brcs	.+2      	; 0x25c4 <process_action+0x3b2>
    25c2:	bf c0       	rjmp	.+382    	; 0x2742 <process_action+0x530>
                            layer_invert(action.layer_tap.val);
    25c4:	8b 2d       	mov	r24, r11
    25c6:	8f 71       	andi	r24, 0x1F	; 31
}
    25c8:	26 96       	adiw	r28, 0x06	; 6
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	1f 91       	pop	r17
    25da:	0f 91       	pop	r16
    25dc:	ff 90       	pop	r15
    25de:	ef 90       	pop	r14
    25e0:	df 90       	pop	r13
    25e2:	cf 90       	pop	r12
    25e4:	bf 90       	pop	r11
                            layer_invert(action.layer_tap.val);
    25e6:	0c 94 29 18 	jmp	0x3052	; 0x3052 <layer_invert>
                        if (tap_count <= TAPPING_TOGGLE) {
    25ea:	06 30       	cpi	r16, 0x06	; 6
    25ec:	08 f0       	brcs	.+2      	; 0x25f0 <process_action+0x3de>
    25ee:	a9 c0       	rjmp	.+338    	; 0x2742 <process_action+0x530>
    25f0:	e9 cf       	rjmp	.-46     	; 0x25c4 <process_action+0x3b2>
                    event.pressed ? layer_on(action.layer_tap.val) :
    25f2:	ff 20       	and	r15, r15
    25f4:	a9 f0       	breq	.+42     	; 0x2620 <process_action+0x40e>
    25f6:	8b 2d       	mov	r24, r11
    25f8:	8f 71       	andi	r24, 0x1F	; 31
}
    25fa:	26 96       	adiw	r28, 0x06	; 6
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	1f 91       	pop	r17
    260c:	0f 91       	pop	r16
    260e:	ff 90       	pop	r15
    2610:	ef 90       	pop	r14
    2612:	df 90       	pop	r13
    2614:	cf 90       	pop	r12
    2616:	bf 90       	pop	r11
                    event.pressed ? layer_on(action.layer_tap.val) :
    2618:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <layer_on>
                    event.pressed ? layer_off(action.layer_tap.val) :
    261c:	ff 20       	and	r15, r15
    261e:	59 f3       	breq	.-42     	; 0x25f6 <process_action+0x3e4>
                                    layer_off(action.layer_tap.val);
    2620:	8b 2d       	mov	r24, r11
    2622:	8f 71       	andi	r24, 0x1F	; 31
}
    2624:	26 96       	adiw	r28, 0x06	; 6
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	cd bf       	out	0x3d, r28	; 61
    2630:	df 91       	pop	r29
    2632:	cf 91       	pop	r28
    2634:	1f 91       	pop	r17
    2636:	0f 91       	pop	r16
    2638:	ff 90       	pop	r15
    263a:	ef 90       	pop	r14
    263c:	df 90       	pop	r13
    263e:	cf 90       	pop	r12
    2640:	bf 90       	pop	r11
                                    layer_off(action.layer_tap.val);
    2642:	0c 94 04 18 	jmp	0x3008	; 0x3008 <layer_off>
                    event.pressed ? layer_move(action.layer_tap.val) :
    2646:	ff 20       	and	r15, r15
    2648:	99 f0       	breq	.+38     	; 0x2670 <process_action+0x45e>
    264a:	8b 2d       	mov	r24, r11
    264c:	8f 71       	andi	r24, 0x1F	; 31
}
    264e:	26 96       	adiw	r28, 0x06	; 6
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	ff 90       	pop	r15
    2664:	ef 90       	pop	r14
    2666:	df 90       	pop	r13
    2668:	cf 90       	pop	r12
    266a:	bf 90       	pop	r11
                    event.pressed ? layer_move(action.layer_tap.val) :
    266c:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <layer_move>
}
    2670:	26 96       	adiw	r28, 0x06	; 6
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
    2680:	1f 91       	pop	r17
    2682:	0f 91       	pop	r16
    2684:	ff 90       	pop	r15
    2686:	ef 90       	pop	r14
    2688:	df 90       	pop	r13
    268a:	cf 90       	pop	r12
    268c:	bf 90       	pop	r11
                                    layer_clear();
    268e:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <layer_clear>
                    if (event.pressed) {
    2692:	ff 20       	and	r15, r15
    2694:	a9 f0       	breq	.+42     	; 0x26c0 <process_action+0x4ae>
                        if (tap_count > 0) {
    2696:	00 23       	and	r16, r16
    2698:	09 f4       	brne	.+2      	; 0x269c <process_action+0x48a>
    269a:	ad cf       	rjmp	.-166    	; 0x25f6 <process_action+0x3e4>
                            register_code(action.layer_tap.code);
    269c:	81 2f       	mov	r24, r17
}
    269e:	26 96       	adiw	r28, 0x06	; 6
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	1f 91       	pop	r17
    26b0:	0f 91       	pop	r16
    26b2:	ff 90       	pop	r15
    26b4:	ef 90       	pop	r14
    26b6:	df 90       	pop	r13
    26b8:	cf 90       	pop	r12
    26ba:	bf 90       	pop	r11
                            register_code(action.layer_tap.code);
    26bc:	0c 94 34 10 	jmp	0x2068	; 0x2068 <register_code>
                        if (tap_count > 0) {
    26c0:	00 23       	and	r16, r16
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <process_action+0x4b4>
    26c4:	ad cf       	rjmp	.-166    	; 0x2620 <process_action+0x40e>
                            unregister_code(action.layer_tap.code);
    26c6:	81 2f       	mov	r24, r17
}
    26c8:	26 96       	adiw	r28, 0x06	; 6
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	ff 90       	pop	r15
    26de:	ef 90       	pop	r14
    26e0:	df 90       	pop	r13
    26e2:	cf 90       	pop	r12
    26e4:	bf 90       	pop	r11
                            unregister_code(action.layer_tap.code);
    26e6:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <unregister_code>
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    26ea:	4b 2d       	mov	r20, r11
    26ec:	4f 70       	andi	r20, 0x0F	; 15
    26ee:	61 2f       	mov	r22, r17
    26f0:	c6 01       	movw	r24, r12
    26f2:	0e 94 e6 19 	call	0x33cc	; 0x33cc <action_get_macro>
}
    26f6:	26 96       	adiw	r28, 0x06	; 6
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	1f 91       	pop	r17
    2708:	0f 91       	pop	r16
    270a:	ff 90       	pop	r15
    270c:	ef 90       	pop	r14
    270e:	df 90       	pop	r13
    2710:	cf 90       	pop	r12
    2712:	bf 90       	pop	r11
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2714:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <action_macro_play>
            action_function(record, action.func.id, action.func.opt);
    2718:	4b 2d       	mov	r20, r11
    271a:	4f 70       	andi	r20, 0x0F	; 15
    271c:	61 2f       	mov	r22, r17
    271e:	c6 01       	movw	r24, r12
}
    2720:	26 96       	adiw	r28, 0x06	; 6
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	1f 91       	pop	r17
    2732:	0f 91       	pop	r16
    2734:	ff 90       	pop	r15
    2736:	ef 90       	pop	r14
    2738:	df 90       	pop	r13
    273a:	cf 90       	pop	r12
    273c:	bf 90       	pop	r11
            action_function(record, action.func.id, action.func.opt);
    273e:	0c 94 5d 05 	jmp	0xaba	; 0xaba <action_function>
}
    2742:	26 96       	adiw	r28, 0x06	; 6
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	ff 90       	pop	r15
    2758:	ef 90       	pop	r14
    275a:	df 90       	pop	r13
    275c:	cf 90       	pop	r12
    275e:	bf 90       	pop	r11
    2760:	08 95       	ret

00002762 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2762:	0e 94 98 19 	call	0x3330	; 0x3330 <clear_weak_mods>
    clear_keys();
    2766:	0e 94 6d 19 	call	0x32da	; 0x32da <clear_keys>
    send_keyboard_report();
    276a:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <send_keyboard_report>

0000276e <clear_keyboard>:
    clear_mods();
    276e:	0e 94 88 19 	call	0x3310	; 0x3310 <clear_mods>
    clear_keyboard_but_mods();
    2772:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <clear_keyboard_but_mods>

00002776 <is_tap_key>:
#endif
}

bool is_tap_key(key_t key)
{
    action_t action = layer_switch_get_action(key);
    2776:	0e 94 9f 18 	call	0x313e	; 0x313e <layer_switch_get_action>

    switch (action.kind.id) {
    277a:	29 2f       	mov	r18, r25
    277c:	22 95       	swap	r18
    277e:	2f 70       	andi	r18, 0x0F	; 15
    2780:	2c 30       	cpi	r18, 0x0C	; 12
    2782:	30 f4       	brcc	.+12     	; 0x2790 <is_tap_key+0x1a>
    2784:	2a 30       	cpi	r18, 0x0A	; 10
    2786:	70 f4       	brcc	.+28     	; 0x27a4 <is_tap_key+0x2e>
    2788:	22 50       	subi	r18, 0x02	; 2
    278a:	22 30       	cpi	r18, 0x02	; 2
    278c:	28 f4       	brcc	.+10     	; 0x2798 <is_tap_key+0x22>
    278e:	0a c0       	rjmp	.+20     	; 0x27a4 <is_tap_key+0x2e>
    2790:	2c 30       	cpi	r18, 0x0C	; 12
    2792:	21 f0       	breq	.+8      	; 0x279c <is_tap_key+0x26>
    2794:	2f 30       	cpi	r18, 0x0F	; 15
    2796:	11 f0       	breq	.+4      	; 0x279c <is_tap_key+0x26>
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	08 95       	ret
            if (action.func.opt & FUNC_TAP) { return true; }
    279c:	93 fb       	bst	r25, 3
    279e:	88 27       	eor	r24, r24
    27a0:	80 f9       	bld	r24, 0
    27a2:	08 95       	ret
            return true;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
}
    27a6:	08 95       	ret

000027a8 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <debug_event+0x6>
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <debug_event+0x8>
    27b0:	1f 92       	push	r1
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	08 95       	ret

000027c6 <debug_record>:

void debug_record(keyrecord_t record)
{
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <debug_record+0x6>
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <debug_record+0x8>
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <debug_record+0xa>
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    27d4:	26 96       	adiw	r28, 0x06	; 6
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	df 91       	pop	r29
    27e2:	cf 91       	pop	r28
    27e4:	08 95       	ret

000027e6 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    27ec:	c0 91 59 01 	lds	r28, 0x0159	; 0x800159 <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    27f0:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    27f2:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <waiting_buffer_head>
    27f6:	c8 17       	cp	r28, r24
    27f8:	99 f0       	breq	.+38     	; 0x2820 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    27fa:	d0 e0       	ldi	r29, 0x00	; 0
    27fc:	1c 9f       	mul	r17, r28
    27fe:	f0 01       	movw	r30, r0
    2800:	1d 9f       	mul	r17, r29
    2802:	f0 0d       	add	r31, r0
    2804:	11 24       	eor	r1, r1
    2806:	e5 5a       	subi	r30, 0xA5	; 165
    2808:	fe 4f       	sbci	r31, 0xFE	; 254
    280a:	40 81       	ld	r20, Z
    280c:	51 81       	ldd	r21, Z+1	; 0x01
    280e:	62 81       	ldd	r22, Z+2	; 0x02
    2810:	73 81       	ldd	r23, Z+3	; 0x03
    2812:	84 81       	ldd	r24, Z+4	; 0x04
    2814:	95 81       	ldd	r25, Z+5	; 0x05
    2816:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <debug_record>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    281a:	21 96       	adiw	r28, 0x01	; 1
    281c:	c7 70       	andi	r28, 0x07	; 7
    281e:	e9 cf       	rjmp	.-46     	; 0x27f2 <debug_waiting_buffer+0xc>
    }
    debug("}\n");
}
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	1f 91       	pop	r17
    2826:	08 95       	ret

00002828 <debug_tapping_key>:
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2828:	40 91 8b 01 	lds	r20, 0x018B	; 0x80018b <tapping_key>
    282c:	50 91 8c 01 	lds	r21, 0x018C	; 0x80018c <tapping_key+0x1>
    2830:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <tapping_key+0x2>
    2834:	70 91 8e 01 	lds	r23, 0x018E	; 0x80018e <tapping_key+0x3>
    2838:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <tapping_key+0x4>
    283c:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <tapping_key+0x5>
    2840:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <debug_record>

00002844 <waiting_buffer_scan_tap>:
    if (tapping_key.tap.count > 0) return;
    2844:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tapping_key+0x5>
    2848:	82 95       	swap	r24
    284a:	8f 70       	andi	r24, 0x0F	; 15
    284c:	09 f0       	breq	.+2      	; 0x2850 <waiting_buffer_scan_tap+0xc>
    284e:	54 c0       	rjmp	.+168    	; 0x28f8 <waiting_buffer_scan_tap+0xb4>
    if (!tapping_key.event.pressed) return;
    2850:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <tapping_key+0x2>
    2854:	88 23       	and	r24, r24
    2856:	09 f4       	brne	.+2      	; 0x285a <waiting_buffer_scan_tap+0x16>
    2858:	4f c0       	rjmp	.+158    	; 0x28f8 <waiting_buffer_scan_tap+0xb4>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    285a:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <waiting_buffer_tail>
    285e:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <waiting_buffer_head>
    2862:	40 91 8e 01 	lds	r20, 0x018E	; 0x80018e <tapping_key+0x3>
    2866:	50 91 8f 01 	lds	r21, 0x018F	; 0x80018f <tapping_key+0x4>
    286a:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <tapping_key>
    286e:	70 91 8c 01 	lds	r23, 0x018C	; 0x80018c <tapping_key+0x1>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2872:	b6 e0       	ldi	r27, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2874:	8a 17       	cp	r24, r26
    2876:	09 f4       	brne	.+2      	; 0x287a <waiting_buffer_scan_tap+0x36>
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <waiting_buffer_scan_tap+0xb4>
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	41 15       	cp	r20, r1
    287e:	51 05       	cpc	r21, r1
    2880:	c1 f1       	breq	.+112    	; 0x28f2 <waiting_buffer_scan_tap+0xae>
    2882:	7f 3f       	cpi	r23, 0xFF	; 255
    2884:	11 f4       	brne	.+4      	; 0x288a <waiting_buffer_scan_tap+0x46>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2886:	6f 3f       	cpi	r22, 0xFF	; 255
    2888:	a1 f1       	breq	.+104    	; 0x28f2 <waiting_buffer_scan_tap+0xae>
    288a:	b8 9f       	mul	r27, r24
    288c:	f0 01       	movw	r30, r0
    288e:	b9 9f       	mul	r27, r25
    2890:	f0 0d       	add	r31, r0
    2892:	11 24       	eor	r1, r1
    2894:	e5 5a       	subi	r30, 0xA5	; 165
    2896:	fe 4f       	sbci	r31, 0xFE	; 254
    2898:	21 81       	ldd	r18, Z+1	; 0x01
    289a:	27 13       	cpse	r18, r23
    289c:	2a c0       	rjmp	.+84     	; 0x28f2 <waiting_buffer_scan_tap+0xae>
    289e:	20 81       	ld	r18, Z
    28a0:	26 13       	cpse	r18, r22
    28a2:	27 c0       	rjmp	.+78     	; 0x28f2 <waiting_buffer_scan_tap+0xae>
    28a4:	22 81       	ldd	r18, Z+2	; 0x02
    28a6:	21 11       	cpse	r18, r1
    28a8:	24 c0       	rjmp	.+72     	; 0x28f2 <waiting_buffer_scan_tap+0xae>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    28aa:	23 81       	ldd	r18, Z+3	; 0x03
    28ac:	34 81       	ldd	r19, Z+4	; 0x04
    28ae:	24 17       	cp	r18, r20
    28b0:	35 07       	cpc	r19, r21
    28b2:	10 f4       	brcc	.+4      	; 0x28b8 <waiting_buffer_scan_tap+0x74>
    28b4:	21 50       	subi	r18, 0x01	; 1
    28b6:	31 09       	sbc	r19, r1
    28b8:	24 1b       	sub	r18, r20
    28ba:	35 0b       	sbc	r19, r21
    28bc:	28 3c       	cpi	r18, 0xC8	; 200
    28be:	31 05       	cpc	r19, r1
    28c0:	c0 f4       	brcc	.+48     	; 0x28f2 <waiting_buffer_scan_tap+0xae>
            tapping_key.tap.count = 1;
    28c2:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <tapping_key+0x5>
    28c6:	2f 70       	andi	r18, 0x0F	; 15
    28c8:	20 61       	ori	r18, 0x10	; 16
    28ca:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    28ce:	26 e0       	ldi	r18, 0x06	; 6
    28d0:	28 9f       	mul	r18, r24
    28d2:	f0 01       	movw	r30, r0
    28d4:	29 9f       	mul	r18, r25
    28d6:	f0 0d       	add	r31, r0
    28d8:	11 24       	eor	r1, r1
    28da:	e0 5a       	subi	r30, 0xA0	; 160
    28dc:	fe 4f       	sbci	r31, 0xFE	; 254
    28de:	80 81       	ld	r24, Z
    28e0:	8f 70       	andi	r24, 0x0F	; 15
    28e2:	80 61       	ori	r24, 0x10	; 16
    28e4:	80 83       	st	Z, r24
            process_action(&tapping_key);
    28e6:	8b e8       	ldi	r24, 0x8B	; 139
    28e8:	91 e0       	ldi	r25, 0x01	; 1
    28ea:	0e 94 09 11 	call	0x2212	; 0x2212 <process_action>
            debug_waiting_buffer();
    28ee:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <debug_waiting_buffer>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    28f2:	01 96       	adiw	r24, 0x01	; 1
    28f4:	87 70       	andi	r24, 0x07	; 7
    28f6:	be cf       	rjmp	.-132    	; 0x2874 <waiting_buffer_scan_tap+0x30>
    28f8:	08 95       	ret

000028fa <process_tapping>:
{
    28fa:	cf 92       	push	r12
    28fc:	df 92       	push	r13
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	62 97       	sbiw	r28, 0x12	; 18
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    291c:	85 e0       	ldi	r24, 0x05	; 5
    291e:	f8 01       	movw	r30, r16
    2920:	de 01       	movw	r26, r28
    2922:	1d 96       	adiw	r26, 0x0d	; 13
    2924:	01 90       	ld	r0, Z+
    2926:	0d 92       	st	X+, r0
    2928:	8a 95       	dec	r24
    292a:	e1 f7       	brne	.-8      	; 0x2924 <process_tapping+0x2a>
    292c:	d8 01       	movw	r26, r16
    292e:	4c 91       	ld	r20, X
    2930:	11 96       	adiw	r26, 0x01	; 1
    2932:	5c 91       	ld	r21, X
    2934:	11 97       	sbiw	r26, 0x01	; 1
    2936:	12 96       	adiw	r26, 0x02	; 2
    2938:	6c 91       	ld	r22, X
    293a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <tapping_key+0x3>
    293e:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <tapping_key+0x4>
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	09 f4       	brne	.+2      	; 0x2948 <process_tapping+0x4e>
    2946:	75 c1       	rjmp	.+746    	; 0x2c32 <process_tapping+0x338>
    2948:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <tapping_key>
    294c:	70 91 8c 01 	lds	r23, 0x018C	; 0x80018c <tapping_key+0x1>
    2950:	7f 3f       	cpi	r23, 0xFF	; 255
    2952:	19 f4       	brne	.+6      	; 0x295a <process_tapping+0x60>
    if (IS_TAPPING_PRESSED()) {
    2954:	3f 3f       	cpi	r19, 0xFF	; 255
    2956:	09 f4       	brne	.+2      	; 0x295a <process_tapping+0x60>
    2958:	6c c1       	rjmp	.+728    	; 0x2c32 <process_tapping+0x338>
    keyevent_t event = keyp->event;
    295a:	f8 01       	movw	r30, r16
    295c:	c3 80       	ldd	r12, Z+3	; 0x03
    295e:	d4 80       	ldd	r13, Z+4	; 0x04
    if (IS_TAPPING_PRESSED()) {
    2960:	e0 90 8d 01 	lds	r14, 0x018D	; 0x80018d <tapping_key+0x2>
    2964:	ee 20       	and	r14, r14
    2966:	09 f4       	brne	.+2      	; 0x296a <process_tapping+0x70>
    2968:	be c0       	rjmp	.+380    	; 0x2ae6 <process_tapping+0x1ec>
    296a:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <tapping_key+0x5>
        if (WITHIN_TAPPING_TERM(event)) {
    296e:	c8 16       	cp	r12, r24
    2970:	d9 06       	cpc	r13, r25
    2972:	28 f0       	brcs	.+10     	; 0x297e <process_tapping+0x84>
    2974:	d6 01       	movw	r26, r12
    2976:	a8 1b       	sub	r26, r24
    2978:	b9 0b       	sbc	r27, r25
    297a:	cd 01       	movw	r24, r26
    297c:	04 c0       	rjmp	.+8      	; 0x2986 <process_tapping+0x8c>
    297e:	80 95       	com	r24
    2980:	90 95       	com	r25
    2982:	8c 0d       	add	r24, r12
    2984:	9d 1d       	adc	r25, r13
    2986:	ff 24       	eor	r15, r15
    2988:	f3 94       	inc	r15
    298a:	88 3c       	cpi	r24, 0xC8	; 200
    298c:	91 05       	cpc	r25, r1
    298e:	78 f0       	brcs	.+30     	; 0x29ae <process_tapping+0xb4>
    2990:	f1 2c       	mov	r15, r1
            if (tapping_key.tap.count == 0) {
    2992:	20 7f       	andi	r18, 0xF0	; 240
    2994:	09 f0       	breq	.+2      	; 0x2998 <process_tapping+0x9e>
    2996:	c4 c0       	rjmp	.+392    	; 0x2b20 <process_tapping+0x226>
                debug_event(event); debug("\n");
    2998:	7c 2d       	mov	r23, r12
    299a:	d9 8a       	std	Y+17, r13	; 0x11
    299c:	c8 8a       	std	Y+16, r12	; 0x10
    299e:	89 89       	ldd	r24, Y+17	; 0x11
    29a0:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <debug_event>
                process_action(&tapping_key);
    29a4:	8b e8       	ldi	r24, 0x8B	; 139
    29a6:	91 e0       	ldi	r25, 0x01	; 1
    29a8:	0e 94 09 11 	call	0x2212	; 0x2212 <process_action>
    29ac:	af c0       	rjmp	.+350    	; 0x2b0c <process_tapping+0x212>
            if (tapping_key.tap.count == 0) {
    29ae:	82 2f       	mov	r24, r18
    29b0:	80 7f       	andi	r24, 0xF0	; 240
    29b2:	09 f0       	breq	.+2      	; 0x29b6 <process_tapping+0xbc>
    29b4:	45 c0       	rjmp	.+138    	; 0x2a40 <process_tapping+0x146>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    29b6:	57 13       	cpse	r21, r23
    29b8:	13 c0       	rjmp	.+38     	; 0x29e0 <process_tapping+0xe6>
    29ba:	43 13       	cpse	r20, r19
    29bc:	11 c0       	rjmp	.+34     	; 0x29e0 <process_tapping+0xe6>
    29be:	61 11       	cpse	r22, r1
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <process_tapping+0xe6>
                    tapping_key.tap.count = 1;
    29c2:	2f 70       	andi	r18, 0x0F	; 15
    29c4:	20 61       	ori	r18, 0x10	; 16
    29c6:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <tapping_key+0x5>
                    debug_tapping_key();
    29ca:	0e 94 14 14 	call	0x2828	; 0x2828 <debug_tapping_key>
                    process_action(&tapping_key);
    29ce:	8b e8       	ldi	r24, 0x8B	; 139
    29d0:	91 e0       	ldi	r25, 0x01	; 1
    29d2:	0e 94 09 11 	call	0x2212	; 0x2212 <process_action>
                    keyp->tap = tapping_key.tap;
    29d6:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tapping_key+0x5>
    29da:	f8 01       	movw	r30, r16
    29dc:	85 83       	std	Z+5, r24	; 0x05
    29de:	2e c0       	rjmp	.+92     	; 0x2a3c <process_tapping+0x142>
    29e0:	cd 28       	or	r12, r13
    29e2:	19 f1       	breq	.+70     	; 0x2a2a <process_tapping+0x130>
    29e4:	5f 3f       	cpi	r21, 0xFF	; 255
    29e6:	11 f4       	brne	.+4      	; 0x29ec <process_tapping+0xf2>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    29e8:	4f 3f       	cpi	r20, 0xFF	; 255
    29ea:	f9 f0       	breq	.+62     	; 0x2a2a <process_tapping+0x130>
    29ec:	f6 2e       	mov	r15, r22
    29ee:	61 11       	cpse	r22, r1
    29f0:	1c c0       	rjmp	.+56     	; 0x2a2a <process_tapping+0x130>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    29f2:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <waiting_buffer_tail>
    29f6:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    29fa:	36 e0       	ldi	r19, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    29fc:	82 17       	cp	r24, r18
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <process_tapping+0x108>
    2a00:	5b c0       	rjmp	.+182    	; 0x2ab8 <process_tapping+0x1be>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	38 9f       	mul	r19, r24
    2a06:	f0 01       	movw	r30, r0
    2a08:	39 9f       	mul	r19, r25
    2a0a:	f0 0d       	add	r31, r0
    2a0c:	11 24       	eor	r1, r1
    2a0e:	e5 5a       	subi	r30, 0xA5	; 165
    2a10:	fe 4f       	sbci	r31, 0xFE	; 254
    2a12:	71 81       	ldd	r23, Z+1	; 0x01
    2a14:	57 13       	cpse	r21, r23
    2a16:	06 c0       	rjmp	.+12     	; 0x2a24 <process_tapping+0x12a>
    2a18:	70 81       	ld	r23, Z
    2a1a:	47 13       	cpse	r20, r23
    2a1c:	03 c0       	rjmp	.+6      	; 0x2a24 <process_tapping+0x12a>
    2a1e:	72 81       	ldd	r23, Z+2	; 0x02
    2a20:	71 11       	cpse	r23, r1
    2a22:	03 c0       	rjmp	.+6      	; 0x2a2a <process_tapping+0x130>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a24:	01 96       	adiw	r24, 0x01	; 1
    2a26:	87 70       	andi	r24, 0x07	; 7
    2a28:	e9 cf       	rjmp	.-46     	; 0x29fc <process_tapping+0x102>
                    if (event.pressed) {
    2a2a:	f6 2e       	mov	r15, r22
    2a2c:	66 23       	and	r22, r22
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <process_tapping+0x138>
    2a30:	1c c1       	rjmp	.+568    	; 0x2c6a <process_tapping+0x370>
                        tapping_key.tap.interrupted = true;
    2a32:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tapping_key+0x5>
    2a36:	81 60       	ori	r24, 0x01	; 1
    2a38:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tapping_key+0x5>
                    return false;
    2a3c:	f1 2c       	mov	r15, r1
    2a3e:	15 c1       	rjmp	.+554    	; 0x2c6a <process_tapping+0x370>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2a40:	57 13       	cpse	r21, r23
    2a42:	09 c0       	rjmp	.+18     	; 0x2a56 <process_tapping+0x15c>
    2a44:	43 13       	cpse	r20, r19
    2a46:	07 c0       	rjmp	.+14     	; 0x2a56 <process_tapping+0x15c>
    2a48:	61 11       	cpse	r22, r1
    2a4a:	05 c0       	rjmp	.+10     	; 0x2a56 <process_tapping+0x15c>
                    keyp->tap = tapping_key.tap;
    2a4c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tapping_key+0x5>
    2a50:	f8 01       	movw	r30, r16
    2a52:	85 83       	std	Z+5, r24	; 0x05
    2a54:	c8 c0       	rjmp	.+400    	; 0x2be6 <process_tapping+0x2ec>
                else if (is_tap_key(event.key) && event.pressed) {
    2a56:	4d 87       	std	Y+13, r20	; 0x0d
    2a58:	5e 87       	std	Y+14, r21	; 0x0e
    2a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5e:	6a 8b       	std	Y+18, r22	; 0x12
    2a60:	0e 94 bb 13 	call	0x2776	; 0x2776 <is_tap_key>
    2a64:	6a 89       	ldd	r22, Y+18	; 0x12
    2a66:	88 23       	and	r24, r24
    2a68:	d1 f1       	breq	.+116    	; 0x2ade <process_tapping+0x1e4>
    2a6a:	66 23       	and	r22, r22
    2a6c:	c1 f1       	breq	.+112    	; 0x2ade <process_tapping+0x1e4>
                    if (tapping_key.tap.count > 1) {
    2a6e:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <tapping_key+0x5>
    2a72:	82 2f       	mov	r24, r18
    2a74:	82 95       	swap	r24
    2a76:	8f 70       	andi	r24, 0x0F	; 15
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	02 97       	sbiw	r24, 0x02	; 2
    2a7c:	74 f0       	brlt	.+28     	; 0x2a9a <process_tapping+0x1a0>
                        process_action(&(keyrecord_t){
    2a7e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <tapping_key>
    2a82:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <tapping_key+0x1>
    2a86:	98 87       	std	Y+8, r25	; 0x08
    2a88:	8f 83       	std	Y+7, r24	; 0x07
    2a8a:	19 86       	std	Y+9, r1	; 0x09
    2a8c:	db 86       	std	Y+11, r13	; 0x0b
    2a8e:	ca 86       	std	Y+10, r12	; 0x0a
    2a90:	2c 87       	std	Y+12, r18	; 0x0c
    2a92:	ce 01       	movw	r24, r28
    2a94:	07 96       	adiw	r24, 0x07	; 7
    2a96:	0e 94 09 11 	call	0x2212	; 0x2212 <process_action>
                    tapping_key = *keyp;
    2a9a:	86 e0       	ldi	r24, 0x06	; 6
    2a9c:	f8 01       	movw	r30, r16
    2a9e:	ab e8       	ldi	r26, 0x8B	; 139
    2aa0:	b1 e0       	ldi	r27, 0x01	; 1
    2aa2:	01 90       	ld	r0, Z+
    2aa4:	0d 92       	st	X+, r0
    2aa6:	8a 95       	dec	r24
    2aa8:	e1 f7       	brne	.-8      	; 0x2aa2 <process_tapping+0x1a8>
                    waiting_buffer_scan_tap();
    2aaa:	0e 94 22 14 	call	0x2844	; 0x2844 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    2aae:	0e 94 14 14 	call	0x2828	; 0x2828 <debug_tapping_key>
                    return true;
    2ab2:	ff 24       	eor	r15, r15
    2ab4:	f3 94       	inc	r15
    2ab6:	d9 c0       	rjmp	.+434    	; 0x2c6a <process_tapping+0x370>
                    action_t action = layer_switch_get_action(event.key);
    2ab8:	4d 87       	std	Y+13, r20	; 0x0d
    2aba:	5e 87       	std	Y+14, r21	; 0x0e
    2abc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2abe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac0:	0e 94 9f 18 	call	0x313e	; 0x313e <layer_switch_get_action>
                    switch (action.kind.id) {
    2ac4:	29 2f       	mov	r18, r25
    2ac6:	22 95       	swap	r18
    2ac8:	2f 70       	andi	r18, 0x0F	; 15
    2aca:	22 30       	cpi	r18, 0x02	; 2
    2acc:	08 f0       	brcs	.+2      	; 0x2ad0 <process_tapping+0x1d6>
    2ace:	c1 c0       	rjmp	.+386    	; 0x2c52 <process_tapping+0x358>
                            if (action.key.mods && !action.key.code) return false;
    2ad0:	9f 70       	andi	r25, 0x0F	; 15
    2ad2:	09 f0       	breq	.+2      	; 0x2ad6 <process_tapping+0x1dc>
    2ad4:	bb c0       	rjmp	.+374    	; 0x2c4c <process_tapping+0x352>
                            if (IS_MOD(action.key.code)) return false;
    2ad6:	80 5e       	subi	r24, 0xE0	; 224
    2ad8:	88 30       	cpi	r24, 0x08	; 8
    2ada:	08 f4       	brcc	.+2      	; 0x2ade <process_tapping+0x1e4>
    2adc:	c6 c0       	rjmp	.+396    	; 0x2c6a <process_tapping+0x370>
                    process_action(keyp);
    2ade:	c8 01       	movw	r24, r16
    2ae0:	0e 94 09 11 	call	0x2212	; 0x2212 <process_action>
    2ae4:	e6 cf       	rjmp	.-52     	; 0x2ab2 <process_tapping+0x1b8>
        if (WITHIN_TAPPING_TERM(event)) {
    2ae6:	c8 16       	cp	r12, r24
    2ae8:	d9 06       	cpc	r13, r25
    2aea:	08 f4       	brcc	.+2      	; 0x2aee <process_tapping+0x1f4>
    2aec:	53 c0       	rjmp	.+166    	; 0x2b94 <process_tapping+0x29a>
    2aee:	f6 01       	movw	r30, r12
    2af0:	e8 1b       	sub	r30, r24
    2af2:	f9 0b       	sbc	r31, r25
    2af4:	cf 01       	movw	r24, r30
    2af6:	88 3c       	cpi	r24, 0xC8	; 200
    2af8:	91 05       	cpc	r25, r1
    2afa:	08 f4       	brcc	.+2      	; 0x2afe <process_tapping+0x204>
    2afc:	50 c0       	rjmp	.+160    	; 0x2b9e <process_tapping+0x2a4>
    2afe:	f1 2c       	mov	r15, r1
            debug_event(event); debug("\n");
    2b00:	7c 2d       	mov	r23, r12
    2b02:	d9 8a       	std	Y+17, r13	; 0x11
    2b04:	c8 8a       	std	Y+16, r12	; 0x10
    2b06:	89 89       	ldd	r24, Y+17	; 0x11
    2b08:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <debug_event>
                tapping_key = (keyrecord_t){};
    2b0c:	eb e8       	ldi	r30, 0x8B	; 139
    2b0e:	f1 e0       	ldi	r31, 0x01	; 1
    2b10:	86 e0       	ldi	r24, 0x06	; 6
    2b12:	df 01       	movw	r26, r30
    2b14:	1d 92       	st	X+, r1
    2b16:	8a 95       	dec	r24
    2b18:	e9 f7       	brne	.-6      	; 0x2b14 <process_tapping+0x21a>
                debug_tapping_key();
    2b1a:	0e 94 14 14 	call	0x2828	; 0x2828 <debug_tapping_key>
                return false;
    2b1e:	a5 c0       	rjmp	.+330    	; 0x2c6a <process_tapping+0x370>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2b20:	57 13       	cpse	r21, r23
    2b22:	14 c0       	rjmp	.+40     	; 0x2b4c <process_tapping+0x252>
    2b24:	43 13       	cpse	r20, r19
    2b26:	12 c0       	rjmp	.+36     	; 0x2b4c <process_tapping+0x252>
    2b28:	61 11       	cpse	r22, r1
    2b2a:	10 c0       	rjmp	.+32     	; 0x2b4c <process_tapping+0x252>
                    keyp->tap = tapping_key.tap;
    2b2c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tapping_key+0x5>
    2b30:	f8 01       	movw	r30, r16
    2b32:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    2b34:	c8 01       	movw	r24, r16
    2b36:	0e 94 09 11 	call	0x2212	; 0x2212 <process_action>
                    tapping_key = (keyrecord_t){};
    2b3a:	86 e0       	ldi	r24, 0x06	; 6
    2b3c:	eb e8       	ldi	r30, 0x8B	; 139
    2b3e:	f1 e0       	ldi	r31, 0x01	; 1
    2b40:	df 01       	movw	r26, r30
    2b42:	1d 92       	st	X+, r1
    2b44:	8a 95       	dec	r24
    2b46:	e9 f7       	brne	.-6      	; 0x2b42 <process_tapping+0x248>
                    return true;
    2b48:	fe 2c       	mov	r15, r14
    2b4a:	8f c0       	rjmp	.+286    	; 0x2c6a <process_tapping+0x370>
                else if (is_tap_key(event.key) && event.pressed) {
    2b4c:	4d 87       	std	Y+13, r20	; 0x0d
    2b4e:	5e 87       	std	Y+14, r21	; 0x0e
    2b50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b54:	6a 8b       	std	Y+18, r22	; 0x12
    2b56:	0e 94 bb 13 	call	0x2776	; 0x2776 <is_tap_key>
    2b5a:	6a 89       	ldd	r22, Y+18	; 0x12
    2b5c:	88 23       	and	r24, r24
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <process_tapping+0x268>
    2b60:	be cf       	rjmp	.-132    	; 0x2ade <process_tapping+0x1e4>
    2b62:	66 23       	and	r22, r22
    2b64:	09 f4       	brne	.+2      	; 0x2b68 <process_tapping+0x26e>
    2b66:	bb cf       	rjmp	.-138    	; 0x2ade <process_tapping+0x1e4>
                    if (tapping_key.tap.count > 1) {
    2b68:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <tapping_key+0x5>
    2b6c:	82 2f       	mov	r24, r18
    2b6e:	82 95       	swap	r24
    2b70:	8f 70       	andi	r24, 0x0F	; 15
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	02 97       	sbiw	r24, 0x02	; 2
    2b76:	0c f4       	brge	.+2      	; 0x2b7a <process_tapping+0x280>
    2b78:	90 cf       	rjmp	.-224    	; 0x2a9a <process_tapping+0x1a0>
                        process_action(&(keyrecord_t){
    2b7a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <tapping_key>
    2b7e:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <tapping_key+0x1>
    2b82:	9a 83       	std	Y+2, r25	; 0x02
    2b84:	89 83       	std	Y+1, r24	; 0x01
    2b86:	1b 82       	std	Y+3, r1	; 0x03
    2b88:	dd 82       	std	Y+5, r13	; 0x05
    2b8a:	cc 82       	std	Y+4, r12	; 0x04
    2b8c:	2e 83       	std	Y+6, r18	; 0x06
    2b8e:	ce 01       	movw	r24, r28
    2b90:	01 96       	adiw	r24, 0x01	; 1
    2b92:	81 cf       	rjmp	.-254    	; 0x2a96 <process_tapping+0x19c>
        if (WITHIN_TAPPING_TERM(event)) {
    2b94:	80 95       	com	r24
    2b96:	90 95       	com	r25
    2b98:	8c 0d       	add	r24, r12
    2b9a:	9d 1d       	adc	r25, r13
    2b9c:	ac cf       	rjmp	.-168    	; 0x2af6 <process_tapping+0x1fc>
            if (event.pressed) {
    2b9e:	f6 2e       	mov	r15, r22
    2ba0:	66 23       	and	r22, r22
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <process_tapping+0x2ac>
    2ba4:	9c cf       	rjmp	.-200    	; 0x2ade <process_tapping+0x1e4>
                if (IS_TAPPING_KEY(event.key)) {
    2ba6:	57 13       	cpse	r21, r23
    2ba8:	33 c0       	rjmp	.+102    	; 0x2c10 <process_tapping+0x316>
    2baa:	43 13       	cpse	r20, r19
    2bac:	31 c0       	rjmp	.+98     	; 0x2c10 <process_tapping+0x316>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2bae:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <tapping_key+0x5>
    2bb2:	20 fd       	sbrc	r18, 0
    2bb4:	24 c0       	rjmp	.+72     	; 0x2bfe <process_tapping+0x304>
    2bb6:	82 2f       	mov	r24, r18
    2bb8:	82 95       	swap	r24
    2bba:	8f 70       	andi	r24, 0x0F	; 15
    2bbc:	48 2f       	mov	r20, r24
    2bbe:	50 e0       	ldi	r21, 0x00	; 0
    2bc0:	41 15       	cp	r20, r1
    2bc2:	51 05       	cpc	r21, r1
    2bc4:	e1 f0       	breq	.+56     	; 0x2bfe <process_tapping+0x304>
                        keyp->tap = tapping_key.tap;
    2bc6:	d8 01       	movw	r26, r16
    2bc8:	15 96       	adiw	r26, 0x05	; 5
    2bca:	2c 93       	st	X, r18
    2bcc:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2bce:	4f 30       	cpi	r20, 0x0F	; 15
    2bd0:	51 05       	cpc	r21, r1
    2bd2:	49 f0       	breq	.+18     	; 0x2be6 <process_tapping+0x2ec>
    2bd4:	8f 5f       	subi	r24, 0xFF	; 255
    2bd6:	98 2f       	mov	r25, r24
    2bd8:	92 95       	swap	r25
    2bda:	90 7f       	andi	r25, 0xF0	; 240
    2bdc:	82 2f       	mov	r24, r18
    2bde:	8f 70       	andi	r24, 0x0F	; 15
    2be0:	89 2b       	or	r24, r25
    2be2:	15 96       	adiw	r26, 0x05	; 5
    2be4:	8c 93       	st	X, r24
                        process_action(keyp);
    2be6:	c8 01       	movw	r24, r16
    2be8:	0e 94 09 11 	call	0x2212	; 0x2212 <process_action>
                        tapping_key = *keyp;
    2bec:	86 e0       	ldi	r24, 0x06	; 6
    2bee:	f8 01       	movw	r30, r16
    2bf0:	ab e8       	ldi	r26, 0x8B	; 139
    2bf2:	b1 e0       	ldi	r27, 0x01	; 1
    2bf4:	01 90       	ld	r0, Z+
    2bf6:	0d 92       	st	X+, r0
    2bf8:	8a 95       	dec	r24
    2bfa:	e1 f7       	brne	.-8      	; 0x2bf4 <process_tapping+0x2fa>
    2bfc:	8e cf       	rjmp	.-228    	; 0x2b1a <process_tapping+0x220>
                        tapping_key = *keyp;
    2bfe:	86 e0       	ldi	r24, 0x06	; 6
    2c00:	f8 01       	movw	r30, r16
    2c02:	ab e8       	ldi	r26, 0x8B	; 139
    2c04:	b1 e0       	ldi	r27, 0x01	; 1
    2c06:	01 90       	ld	r0, Z+
    2c08:	0d 92       	st	X+, r0
    2c0a:	8a 95       	dec	r24
    2c0c:	e1 f7       	brne	.-8      	; 0x2c06 <process_tapping+0x30c>
                        return true;
    2c0e:	2d c0       	rjmp	.+90     	; 0x2c6a <process_tapping+0x370>
                } else if (is_tap_key(event.key)) {
    2c10:	4d 87       	std	Y+13, r20	; 0x0d
    2c12:	5e 87       	std	Y+14, r21	; 0x0e
    2c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c18:	0e 94 bb 13 	call	0x2776	; 0x2776 <is_tap_key>
    2c1c:	81 11       	cpse	r24, r1
    2c1e:	3d cf       	rjmp	.-390    	; 0x2a9a <process_tapping+0x1a0>
                    tapping_key.tap.interrupted = true;
    2c20:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tapping_key+0x5>
    2c24:	81 60       	ori	r24, 0x01	; 1
    2c26:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tapping_key+0x5>
                    process_action(keyp);
    2c2a:	c8 01       	movw	r24, r16
    2c2c:	0e 94 09 11 	call	0x2212	; 0x2212 <process_action>
                    return true;
    2c30:	1c c0       	rjmp	.+56     	; 0x2c6a <process_tapping+0x370>
        if (event.pressed && is_tap_key(event.key)) {
    2c32:	66 23       	and	r22, r22
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <process_tapping+0x33e>
    2c36:	53 cf       	rjmp	.-346    	; 0x2ade <process_tapping+0x1e4>
    2c38:	4d 87       	std	Y+13, r20	; 0x0d
    2c3a:	5e 87       	std	Y+14, r21	; 0x0e
    2c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c40:	0e 94 bb 13 	call	0x2776	; 0x2776 <is_tap_key>
    2c44:	88 23       	and	r24, r24
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <process_tapping+0x350>
    2c48:	4a cf       	rjmp	.-364    	; 0x2ade <process_tapping+0x1e4>
    2c4a:	27 cf       	rjmp	.-434    	; 0x2a9a <process_tapping+0x1a0>
                            if (action.key.mods && !action.key.code) return false;
    2c4c:	81 11       	cpse	r24, r1
    2c4e:	43 cf       	rjmp	.-378    	; 0x2ad6 <process_tapping+0x1dc>
    2c50:	0c c0       	rjmp	.+24     	; 0x2c6a <process_tapping+0x370>
                    switch (action.kind.id) {
    2c52:	24 30       	cpi	r18, 0x04	; 4
    2c54:	08 f0       	brcs	.+2      	; 0x2c58 <process_tapping+0x35e>
    2c56:	43 cf       	rjmp	.-378    	; 0x2ade <process_tapping+0x1e4>
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2c58:	9f 70       	andi	r25, 0x0F	; 15
    2c5a:	09 f4       	brne	.+2      	; 0x2c5e <process_tapping+0x364>
    2c5c:	3c cf       	rjmp	.-392    	; 0x2ad6 <process_tapping+0x1dc>
    2c5e:	d8 01       	movw	r26, r16
    2c60:	15 96       	adiw	r26, 0x05	; 5
    2c62:	9c 91       	ld	r25, X
    2c64:	90 7f       	andi	r25, 0xF0	; 240
    2c66:	09 f0       	breq	.+2      	; 0x2c6a <process_tapping+0x370>
    2c68:	36 cf       	rjmp	.-404    	; 0x2ad6 <process_tapping+0x1dc>
}
    2c6a:	8f 2d       	mov	r24, r15
    2c6c:	62 96       	adiw	r28, 0x12	; 18
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	df 91       	pop	r29
    2c7a:	cf 91       	pop	r28
    2c7c:	1f 91       	pop	r17
    2c7e:	0f 91       	pop	r16
    2c80:	ff 90       	pop	r15
    2c82:	ef 90       	pop	r14
    2c84:	df 90       	pop	r13
    2c86:	cf 90       	pop	r12
    2c88:	08 95       	ret

00002c8a <action_tapping_process>:
{
    2c8a:	1f 93       	push	r17
    2c8c:	cf 93       	push	r28
    2c8e:	df 93       	push	r29
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	2c 97       	sbiw	r28, 0x0c	; 12
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	4f 83       	std	Y+7, r20	; 0x07
    2ca2:	58 87       	std	Y+8, r21	; 0x08
    2ca4:	69 87       	std	Y+9, r22	; 0x09
    2ca6:	7a 87       	std	Y+10, r23	; 0x0a
    2ca8:	8b 87       	std	Y+11, r24	; 0x0b
    2caa:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    2cac:	ce 01       	movw	r24, r28
    2cae:	07 96       	adiw	r24, 0x07	; 7
    2cb0:	0e 94 7d 14 	call	0x28fa	; 0x28fa <process_tapping>
    2cb4:	88 23       	and	r24, r24
    2cb6:	71 f0       	breq	.+28     	; 0x2cd4 <action_tapping_process+0x4a>
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2cb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cba:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cbc:	89 2b       	or	r24, r25
    2cbe:	09 f4       	brne	.+2      	; 0x2cc2 <action_tapping_process+0x38>
    2cc0:	41 c0       	rjmp	.+130    	; 0x2d44 <action_tapping_process+0xba>
    2cc2:	88 85       	ldd	r24, Y+8	; 0x08
    2cc4:	8f 3f       	cpi	r24, 0xFF	; 255
    2cc6:	09 f0       	breq	.+2      	; 0x2cca <action_tapping_process+0x40>
    2cc8:	65 c0       	rjmp	.+202    	; 0x2d94 <action_tapping_process+0x10a>
    2cca:	8f 81       	ldd	r24, Y+7	; 0x07
    2ccc:	8f 3f       	cpi	r24, 0xFF	; 255
    2cce:	09 f0       	breq	.+2      	; 0x2cd2 <action_tapping_process+0x48>
    2cd0:	61 c0       	rjmp	.+194    	; 0x2d94 <action_tapping_process+0x10a>
    2cd2:	38 c0       	rjmp	.+112    	; 0x2d44 <action_tapping_process+0xba>
    2cd4:	86 e0       	ldi	r24, 0x06	; 6
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	37 96       	adiw	r30, 0x07	; 7
    2cda:	de 01       	movw	r26, r28
    2cdc:	11 96       	adiw	r26, 0x01	; 1
    2cde:	01 90       	ld	r0, Z+
    2ce0:	0d 92       	st	X+, r0
    2ce2:	8a 95       	dec	r24
    2ce4:	e1 f7       	brne	.-8      	; 0x2cde <action_tapping_process+0x54>
    2ce6:	6a 85       	ldd	r22, Y+10	; 0x0a
    2ce8:	7b 85       	ldd	r23, Y+11	; 0x0b
    2cea:	61 15       	cp	r22, r1
    2cec:	71 05       	cpc	r23, r1
    2cee:	51 f1       	breq	.+84     	; 0x2d44 <action_tapping_process+0xba>
    2cf0:	ff 81       	ldd	r31, Y+7	; 0x07
    2cf2:	e8 85       	ldd	r30, Y+8	; 0x08
    2cf4:	ef 3f       	cpi	r30, 0xFF	; 255
    2cf6:	11 f4       	brne	.+4      	; 0x2cfc <action_tapping_process+0x72>
    2cf8:	ff 3f       	cpi	r31, 0xFF	; 255
    2cfa:	21 f1       	breq	.+72     	; 0x2d44 <action_tapping_process+0xba>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    2cfc:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <waiting_buffer_head>
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	c9 01       	movw	r24, r18
    2d04:	01 96       	adiw	r24, 0x01	; 1
    2d06:	87 70       	andi	r24, 0x07	; 7
    2d08:	99 27       	eor	r25, r25
    2d0a:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <waiting_buffer_tail>
    2d0e:	50 e0       	ldi	r21, 0x00	; 0
    2d10:	84 17       	cp	r24, r20
    2d12:	95 07       	cpc	r25, r21
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <action_tapping_process+0x8e>
    2d16:	47 c0       	rjmp	.+142    	; 0x2da6 <action_tapping_process+0x11c>
    waiting_buffer[waiting_buffer_head] = record;
    2d18:	f9 83       	std	Y+1, r31	; 0x01
    2d1a:	ea 83       	std	Y+2, r30	; 0x02
    2d1c:	7d 83       	std	Y+5, r23	; 0x05
    2d1e:	6c 83       	std	Y+4, r22	; 0x04
    2d20:	96 e0       	ldi	r25, 0x06	; 6
    2d22:	92 9f       	mul	r25, r18
    2d24:	d0 01       	movw	r26, r0
    2d26:	93 9f       	mul	r25, r19
    2d28:	b0 0d       	add	r27, r0
    2d2a:	11 24       	eor	r1, r1
    2d2c:	a5 5a       	subi	r26, 0xA5	; 165
    2d2e:	be 4f       	sbci	r27, 0xFE	; 254
    2d30:	fe 01       	movw	r30, r28
    2d32:	31 96       	adiw	r30, 0x01	; 1
    2d34:	01 90       	ld	r0, Z+
    2d36:	0d 92       	st	X+, r0
    2d38:	9a 95       	dec	r25
    2d3a:	e1 f7       	brne	.-8      	; 0x2d34 <action_tapping_process+0xaa>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    2d3c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <waiting_buffer_head>
    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    2d40:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <debug_waiting_buffer>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2d44:	16 e0       	ldi	r17, 0x06	; 6
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2d46:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <waiting_buffer_tail>
    2d4a:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <waiting_buffer_head>
    2d4e:	89 17       	cp	r24, r25
    2d50:	b9 f1       	breq	.+110    	; 0x2dc0 <action_tapping_process+0x136>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2d52:	18 9f       	mul	r17, r24
    2d54:	c0 01       	movw	r24, r0
    2d56:	11 24       	eor	r1, r1
    2d58:	85 5a       	subi	r24, 0xA5	; 165
    2d5a:	9e 4f       	sbci	r25, 0xFE	; 254
    2d5c:	0e 94 7d 14 	call	0x28fa	; 0x28fa <process_tapping>
    2d60:	88 23       	and	r24, r24
    2d62:	71 f1       	breq	.+92     	; 0x2dc0 <action_tapping_process+0x136>
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    2d64:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <waiting_buffer_tail>
    2d68:	1e 9f       	mul	r17, r30
    2d6a:	f0 01       	movw	r30, r0
    2d6c:	11 24       	eor	r1, r1
    2d6e:	e5 5a       	subi	r30, 0xA5	; 165
    2d70:	fe 4f       	sbci	r31, 0xFE	; 254
    2d72:	40 81       	ld	r20, Z
    2d74:	51 81       	ldd	r21, Z+1	; 0x01
    2d76:	62 81       	ldd	r22, Z+2	; 0x02
    2d78:	73 81       	ldd	r23, Z+3	; 0x03
    2d7a:	84 81       	ldd	r24, Z+4	; 0x04
    2d7c:	95 81       	ldd	r25, Z+5	; 0x05
    2d7e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <debug_record>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2d82:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <waiting_buffer_tail>
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	01 96       	adiw	r24, 0x01	; 1
    2d8a:	87 70       	andi	r24, 0x07	; 7
    2d8c:	99 27       	eor	r25, r25
    2d8e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <waiting_buffer_tail>
    2d92:	d9 cf       	rjmp	.-78     	; 0x2d46 <action_tapping_process+0xbc>
            debug("processed: "); debug_record(record); debug("\n");
    2d94:	4f 81       	ldd	r20, Y+7	; 0x07
    2d96:	58 85       	ldd	r21, Y+8	; 0x08
    2d98:	69 85       	ldd	r22, Y+9	; 0x09
    2d9a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2da0:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <debug_record>
    2da4:	cf cf       	rjmp	.-98     	; 0x2d44 <action_tapping_process+0xba>
            clear_keyboard();
    2da6:	0e 94 b7 13 	call	0x276e	; 0x276e <clear_keyboard>
    waiting_buffer_head = 0;
    2daa:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <waiting_buffer_head>
    waiting_buffer_tail = 0;
    2dae:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <waiting_buffer_tail>
            tapping_key = (keyrecord_t){};
    2db2:	eb e8       	ldi	r30, 0x8B	; 139
    2db4:	f1 e0       	ldi	r31, 0x01	; 1
    2db6:	86 e0       	ldi	r24, 0x06	; 6
    2db8:	df 01       	movw	r26, r30
    2dba:	1d 92       	st	X+, r1
    2dbc:	8a 95       	dec	r24
    2dbe:	e9 f7       	brne	.-6      	; 0x2dba <action_tapping_process+0x130>
}
    2dc0:	2c 96       	adiw	r28, 0x0c	; 12
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	df 91       	pop	r29
    2dce:	cf 91       	pop	r28
    2dd0:	1f 91       	pop	r17
    2dd2:	08 95       	ret

00002dd4 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = pgm_read_byte(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	8c 01       	movw	r16, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    2de2:	89 2b       	or	r24, r25
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <action_macro_play+0x14>
    2de6:	6a c0       	rjmp	.+212    	; 0x2ebc <action_macro_play+0xe8>
    2de8:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    2dea:	ee 24       	eor	r14, r14
    2dec:	e3 94       	inc	r14
        switch (MACRO_READ()) {
    2dee:	e8 01       	movw	r28, r16
    2df0:	21 96       	adiw	r28, 0x01	; 1
    2df2:	f8 01       	movw	r30, r16
    2df4:	84 91       	lpm	r24, Z
    2df6:	84 37       	cpi	r24, 0x74	; 116
    2df8:	40 f4       	brcc	.+16     	; 0x2e0a <action_macro_play+0x36>
    2dfa:	84 30       	cpi	r24, 0x04	; 4
    2dfc:	08 f0       	brcs	.+2      	; 0x2e00 <action_macro_play+0x2c>
    2dfe:	4f c0       	rjmp	.+158    	; 0x2e9e <action_macro_play+0xca>
    2e00:	81 30       	cpi	r24, 0x01	; 1
    2e02:	81 f0       	breq	.+32     	; 0x2e24 <action_macro_play+0x50>
    2e04:	82 30       	cpi	r24, 0x02	; 2
    2e06:	19 f1       	breq	.+70     	; 0x2e4e <action_macro_play+0x7a>
    2e08:	59 c0       	rjmp	.+178    	; 0x2ebc <action_macro_play+0xe8>
    2e0a:	85 37       	cpi	r24, 0x75	; 117
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <action_macro_play+0x3c>
    2e0e:	42 c0       	rjmp	.+132    	; 0x2e94 <action_macro_play+0xc0>
    2e10:	98 f1       	brcs	.+102    	; 0x2e78 <action_macro_play+0xa4>
    2e12:	9c e7       	ldi	r25, 0x7C	; 124
    2e14:	98 0f       	add	r25, r24
    2e16:	90 37       	cpi	r25, 0x70	; 112
    2e18:	08 f0       	brcs	.+2      	; 0x2e1c <action_macro_play+0x48>
    2e1a:	50 c0       	rjmp	.+160    	; 0x2ebc <action_macro_play+0xe8>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    2e1c:	8f 77       	andi	r24, 0x7F	; 127
    2e1e:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <unregister_code>
    2e22:	3f c0       	rjmp	.+126    	; 0x2ea2 <action_macro_play+0xce>
                MACRO_READ();
    2e24:	0e 5f       	subi	r16, 0xFE	; 254
    2e26:	1f 4f       	sbci	r17, 0xFF	; 255
    2e28:	fe 01       	movw	r30, r28
    2e2a:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    2e2c:	90 e2       	ldi	r25, 0x20	; 32
    2e2e:	98 0f       	add	r25, r24
    2e30:	98 30       	cpi	r25, 0x08	; 8
    2e32:	50 f4       	brcc	.+20     	; 0x2e48 <action_macro_play+0x74>
                    add_weak_mods(MOD_BIT(macro));
    2e34:	87 70       	andi	r24, 0x07	; 7
    2e36:	fe 2d       	mov	r31, r14
    2e38:	01 c0       	rjmp	.+2      	; 0x2e3c <action_macro_play+0x68>
    2e3a:	ff 0f       	add	r31, r31
    2e3c:	8a 95       	dec	r24
    2e3e:	ea f7       	brpl	.-6      	; 0x2e3a <action_macro_play+0x66>
    2e40:	8f 2f       	mov	r24, r31
    2e42:	0e 94 8b 19 	call	0x3316	; 0x3316 <add_weak_mods>
    2e46:	2e c0       	rjmp	.+92     	; 0x2ea4 <action_macro_play+0xd0>
                    register_code(macro);
    2e48:	0e 94 34 10 	call	0x2068	; 0x2068 <register_code>
    2e4c:	2b c0       	rjmp	.+86     	; 0x2ea4 <action_macro_play+0xd0>
                MACRO_READ();
    2e4e:	0e 5f       	subi	r16, 0xFE	; 254
    2e50:	1f 4f       	sbci	r17, 0xFF	; 255
    2e52:	fe 01       	movw	r30, r28
    2e54:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    2e56:	90 e2       	ldi	r25, 0x20	; 32
    2e58:	98 0f       	add	r25, r24
    2e5a:	98 30       	cpi	r25, 0x08	; 8
    2e5c:	50 f4       	brcc	.+20     	; 0x2e72 <action_macro_play+0x9e>
                    del_weak_mods(MOD_BIT(macro));
    2e5e:	87 70       	andi	r24, 0x07	; 7
    2e60:	fe 2d       	mov	r31, r14
    2e62:	01 c0       	rjmp	.+2      	; 0x2e66 <action_macro_play+0x92>
    2e64:	ff 0f       	add	r31, r31
    2e66:	8a 95       	dec	r24
    2e68:	ea f7       	brpl	.-6      	; 0x2e64 <action_macro_play+0x90>
    2e6a:	8f 2f       	mov	r24, r31
    2e6c:	0e 94 91 19 	call	0x3322	; 0x3322 <del_weak_mods>
    2e70:	19 c0       	rjmp	.+50     	; 0x2ea4 <action_macro_play+0xd0>
                    unregister_code(macro);
    2e72:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <unregister_code>
    2e76:	16 c0       	rjmp	.+44     	; 0x2ea4 <action_macro_play+0xd0>
                MACRO_READ();
    2e78:	0e 5f       	subi	r16, 0xFE	; 254
    2e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	c4 91       	lpm	r28, Z
                { uint8_t ms = macro; while (ms--) _delay_ms(1); }
    2e80:	cc 23       	and	r28, r28
    2e82:	81 f0       	breq	.+32     	; 0x2ea4 <action_macro_play+0xd0>
    2e84:	8f e9       	ldi	r24, 0x9F	; 159
    2e86:	9f e0       	ldi	r25, 0x0F	; 15
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	f1 f7       	brne	.-4      	; 0x2e88 <action_macro_play+0xb4>
    2e8c:	00 c0       	rjmp	.+0      	; 0x2e8e <action_macro_play+0xba>
    2e8e:	00 00       	nop
    2e90:	c1 50       	subi	r28, 0x01	; 1
    2e92:	f6 cf       	rjmp	.-20     	; 0x2e80 <action_macro_play+0xac>
                interval = MACRO_READ();
    2e94:	0e 5f       	subi	r16, 0xFE	; 254
    2e96:	1f 4f       	sbci	r17, 0xFF	; 255
    2e98:	fe 01       	movw	r30, r28
    2e9a:	f4 90       	lpm	r15, Z
                break;
    2e9c:	03 c0       	rjmp	.+6      	; 0x2ea4 <action_macro_play+0xd0>
                register_code(macro);
    2e9e:	0e 94 34 10 	call	0x2068	; 0x2068 <register_code>
        switch (MACRO_READ()) {
    2ea2:	8e 01       	movw	r16, r28
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) _delay_ms(1); }
    2ea4:	8f 2d       	mov	r24, r15
    2ea6:	88 23       	and	r24, r24
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <action_macro_play+0xd8>
    2eaa:	a1 cf       	rjmp	.-190    	; 0x2dee <action_macro_play+0x1a>
    2eac:	ef e9       	ldi	r30, 0x9F	; 159
    2eae:	ff e0       	ldi	r31, 0x0F	; 15
    2eb0:	31 97       	sbiw	r30, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <action_macro_play+0xdc>
    2eb4:	00 c0       	rjmp	.+0      	; 0x2eb6 <action_macro_play+0xe2>
    2eb6:	00 00       	nop
    2eb8:	81 50       	subi	r24, 0x01	; 1
    2eba:	f5 cf       	rjmp	.-22     	; 0x2ea6 <action_macro_play+0xd2>
    }
}
    2ebc:	df 91       	pop	r29
    2ebe:	cf 91       	pop	r28
    2ec0:	1f 91       	pop	r17
    2ec2:	0f 91       	pop	r16
    2ec4:	ff 90       	pop	r15
    2ec6:	ef 90       	pop	r14
    2ec8:	08 95       	ret

00002eca <default_layer_debug>:
    2eca:	08 95       	ret

00002ecc <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2ecc:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <default_layer_state>
    2ed0:	70 93 96 01 	sts	0x0196, r23	; 0x800196 <default_layer_state+0x1>
    2ed4:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <default_layer_state+0x2>
    2ed8:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <default_layer_state+0x3>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2edc:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <clear_keyboard_but_mods>

00002ee0 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    2ee0:	0f 93       	push	r16
    2ee2:	1f 93       	push	r17
    default_layer_state = state;
    2ee4:	00 91 95 01 	lds	r16, 0x0195	; 0x800195 <default_layer_state>
    2ee8:	10 91 96 01 	lds	r17, 0x0196	; 0x800196 <default_layer_state+0x1>
    2eec:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <default_layer_state+0x2>
    2ef0:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <default_layer_state+0x3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	80 2b       	or	r24, r16
    2efa:	91 2b       	or	r25, r17
    2efc:	a2 2b       	or	r26, r18
    2efe:	b3 2b       	or	r27, r19
    2f00:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <default_layer_state>
    2f04:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <default_layer_state+0x1>
    2f08:	a0 93 97 01 	sts	0x0197, r26	; 0x800197 <default_layer_state+0x2>
    2f0c:	b0 93 98 01 	sts	0x0198, r27	; 0x800198 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state | state);
}
    2f10:	1f 91       	pop	r17
    2f12:	0f 91       	pop	r16
    clear_keyboard_but_mods(); // To avoid stuck keys
    2f14:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <clear_keyboard_but_mods>

00002f18 <default_layer_and>:
void default_layer_and(uint32_t state)
{
    2f18:	0f 93       	push	r16
    2f1a:	1f 93       	push	r17
    default_layer_state = state;
    2f1c:	00 91 95 01 	lds	r16, 0x0195	; 0x800195 <default_layer_state>
    2f20:	10 91 96 01 	lds	r17, 0x0196	; 0x800196 <default_layer_state+0x1>
    2f24:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <default_layer_state+0x2>
    2f28:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <default_layer_state+0x3>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	80 23       	and	r24, r16
    2f32:	91 23       	and	r25, r17
    2f34:	a2 23       	and	r26, r18
    2f36:	b3 23       	and	r27, r19
    2f38:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <default_layer_state>
    2f3c:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <default_layer_state+0x1>
    2f40:	a0 93 97 01 	sts	0x0197, r26	; 0x800197 <default_layer_state+0x2>
    2f44:	b0 93 98 01 	sts	0x0198, r27	; 0x800198 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state & state);
}
    2f48:	1f 91       	pop	r17
    2f4a:	0f 91       	pop	r16
    clear_keyboard_but_mods(); // To avoid stuck keys
    2f4c:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <clear_keyboard_but_mods>

00002f50 <default_layer_xor>:
void default_layer_xor(uint32_t state)
{
    2f50:	0f 93       	push	r16
    2f52:	1f 93       	push	r17
    default_layer_state = state;
    2f54:	00 91 95 01 	lds	r16, 0x0195	; 0x800195 <default_layer_state>
    2f58:	10 91 96 01 	lds	r17, 0x0196	; 0x800196 <default_layer_state+0x1>
    2f5c:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <default_layer_state+0x2>
    2f60:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <default_layer_state+0x3>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	80 27       	eor	r24, r16
    2f6a:	91 27       	eor	r25, r17
    2f6c:	a2 27       	eor	r26, r18
    2f6e:	b3 27       	eor	r27, r19
    2f70:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <default_layer_state>
    2f74:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <default_layer_state+0x1>
    2f78:	a0 93 97 01 	sts	0x0197, r26	; 0x800197 <default_layer_state+0x2>
    2f7c:	b0 93 98 01 	sts	0x0198, r27	; 0x800198 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state ^ state);
}
    2f80:	1f 91       	pop	r17
    2f82:	0f 91       	pop	r16
    clear_keyboard_but_mods(); // To avoid stuck keys
    2f84:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <clear_keyboard_but_mods>

00002f88 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2f88:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <layer_state>
    2f8c:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <layer_state+0x1>
    2f90:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <layer_state+0x2>
    2f94:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <layer_state+0x3>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2f98:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <clear_keyboard_but_mods>

00002f9c <layer_move>:
    layer_state = state;
    2f9c:	41 e0       	ldi	r20, 0x01	; 1
    2f9e:	50 e0       	ldi	r21, 0x00	; 0
    2fa0:	60 e0       	ldi	r22, 0x00	; 0
    2fa2:	70 e0       	ldi	r23, 0x00	; 0
    2fa4:	04 c0       	rjmp	.+8      	; 0x2fae <layer_move+0x12>
    2fa6:	44 0f       	add	r20, r20
    2fa8:	55 1f       	adc	r21, r21
    2faa:	66 1f       	adc	r22, r22
    2fac:	77 1f       	adc	r23, r23
    2fae:	8a 95       	dec	r24
    2fb0:	d2 f7       	brpl	.-12     	; 0x2fa6 <layer_move+0xa>
    2fb2:	40 93 91 01 	sts	0x0191, r20	; 0x800191 <layer_state>
    2fb6:	50 93 92 01 	sts	0x0192, r21	; 0x800192 <layer_state+0x1>
    2fba:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <layer_state+0x2>
    2fbe:	70 93 94 01 	sts	0x0194, r23	; 0x800194 <layer_state+0x3>
    clear_keyboard_but_mods(); // To avoid stuck keys
    2fc2:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <clear_keyboard_but_mods>

00002fc6 <layer_on>:
    layer_state = state;
    2fc6:	41 e0       	ldi	r20, 0x01	; 1
    2fc8:	50 e0       	ldi	r21, 0x00	; 0
    2fca:	60 e0       	ldi	r22, 0x00	; 0
    2fcc:	70 e0       	ldi	r23, 0x00	; 0
    2fce:	04 c0       	rjmp	.+8      	; 0x2fd8 <layer_on+0x12>
    2fd0:	44 0f       	add	r20, r20
    2fd2:	55 1f       	adc	r21, r21
    2fd4:	66 1f       	adc	r22, r22
    2fd6:	77 1f       	adc	r23, r23
    2fd8:	8a 95       	dec	r24
    2fda:	d2 f7       	brpl	.-12     	; 0x2fd0 <layer_on+0xa>
    2fdc:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <layer_state>
    2fe0:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <layer_state+0x1>
    2fe4:	a0 91 93 01 	lds	r26, 0x0193	; 0x800193 <layer_state+0x2>
    2fe8:	b0 91 94 01 	lds	r27, 0x0194	; 0x800194 <layer_state+0x3>
    2fec:	48 2b       	or	r20, r24
    2fee:	59 2b       	or	r21, r25
    2ff0:	6a 2b       	or	r22, r26
    2ff2:	7b 2b       	or	r23, r27
    2ff4:	40 93 91 01 	sts	0x0191, r20	; 0x800191 <layer_state>
    2ff8:	50 93 92 01 	sts	0x0192, r21	; 0x800192 <layer_state+0x1>
    2ffc:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <layer_state+0x2>
    3000:	70 93 94 01 	sts	0x0194, r23	; 0x800194 <layer_state+0x3>
    clear_keyboard_but_mods(); // To avoid stuck keys
    3004:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <clear_keyboard_but_mods>

00003008 <layer_off>:
    layer_state = state;
    3008:	41 e0       	ldi	r20, 0x01	; 1
    300a:	50 e0       	ldi	r21, 0x00	; 0
    300c:	60 e0       	ldi	r22, 0x00	; 0
    300e:	70 e0       	ldi	r23, 0x00	; 0
    3010:	04 c0       	rjmp	.+8      	; 0x301a <layer_off+0x12>
    3012:	44 0f       	add	r20, r20
    3014:	55 1f       	adc	r21, r21
    3016:	66 1f       	adc	r22, r22
    3018:	77 1f       	adc	r23, r23
    301a:	8a 95       	dec	r24
    301c:	d2 f7       	brpl	.-12     	; 0x3012 <layer_off+0xa>
    301e:	40 95       	com	r20
    3020:	50 95       	com	r21
    3022:	60 95       	com	r22
    3024:	70 95       	com	r23
    3026:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <layer_state>
    302a:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <layer_state+0x1>
    302e:	a0 91 93 01 	lds	r26, 0x0193	; 0x800193 <layer_state+0x2>
    3032:	b0 91 94 01 	lds	r27, 0x0194	; 0x800194 <layer_state+0x3>
    3036:	48 23       	and	r20, r24
    3038:	59 23       	and	r21, r25
    303a:	6a 23       	and	r22, r26
    303c:	7b 23       	and	r23, r27
    303e:	40 93 91 01 	sts	0x0191, r20	; 0x800191 <layer_state>
    3042:	50 93 92 01 	sts	0x0192, r21	; 0x800192 <layer_state+0x1>
    3046:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <layer_state+0x2>
    304a:	70 93 94 01 	sts	0x0194, r23	; 0x800194 <layer_state+0x3>
    clear_keyboard_but_mods(); // To avoid stuck keys
    304e:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <clear_keyboard_but_mods>

00003052 <layer_invert>:
    layer_state = state;
    3052:	41 e0       	ldi	r20, 0x01	; 1
    3054:	50 e0       	ldi	r21, 0x00	; 0
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	04 c0       	rjmp	.+8      	; 0x3064 <layer_invert+0x12>
    305c:	44 0f       	add	r20, r20
    305e:	55 1f       	adc	r21, r21
    3060:	66 1f       	adc	r22, r22
    3062:	77 1f       	adc	r23, r23
    3064:	8a 95       	dec	r24
    3066:	d2 f7       	brpl	.-12     	; 0x305c <layer_invert+0xa>
    3068:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <layer_state>
    306c:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <layer_state+0x1>
    3070:	a0 91 93 01 	lds	r26, 0x0193	; 0x800193 <layer_state+0x2>
    3074:	b0 91 94 01 	lds	r27, 0x0194	; 0x800194 <layer_state+0x3>
    3078:	48 27       	eor	r20, r24
    307a:	59 27       	eor	r21, r25
    307c:	6a 27       	eor	r22, r26
    307e:	7b 27       	eor	r23, r27
    3080:	40 93 91 01 	sts	0x0191, r20	; 0x800191 <layer_state>
    3084:	50 93 92 01 	sts	0x0192, r21	; 0x800192 <layer_state+0x1>
    3088:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <layer_state+0x2>
    308c:	70 93 94 01 	sts	0x0194, r23	; 0x800194 <layer_state+0x3>
    clear_keyboard_but_mods(); // To avoid stuck keys
    3090:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <clear_keyboard_but_mods>

00003094 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    3094:	0f 93       	push	r16
    3096:	1f 93       	push	r17
    layer_state = state;
    3098:	00 91 91 01 	lds	r16, 0x0191	; 0x800191 <layer_state>
    309c:	10 91 92 01 	lds	r17, 0x0192	; 0x800192 <layer_state+0x1>
    30a0:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <layer_state+0x2>
    30a4:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <layer_state+0x3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	80 2b       	or	r24, r16
    30ae:	91 2b       	or	r25, r17
    30b0:	a2 2b       	or	r26, r18
    30b2:	b3 2b       	or	r27, r19
    30b4:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <layer_state>
    30b8:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <layer_state+0x1>
    30bc:	a0 93 93 01 	sts	0x0193, r26	; 0x800193 <layer_state+0x2>
    30c0:	b0 93 94 01 	sts	0x0194, r27	; 0x800194 <layer_state+0x3>
    layer_state_set(layer_state | state);
}
    30c4:	1f 91       	pop	r17
    30c6:	0f 91       	pop	r16
    clear_keyboard_but_mods(); // To avoid stuck keys
    30c8:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <clear_keyboard_but_mods>

000030cc <layer_and>:
void layer_and(uint32_t state)
{
    30cc:	0f 93       	push	r16
    30ce:	1f 93       	push	r17
    layer_state = state;
    30d0:	00 91 91 01 	lds	r16, 0x0191	; 0x800191 <layer_state>
    30d4:	10 91 92 01 	lds	r17, 0x0192	; 0x800192 <layer_state+0x1>
    30d8:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <layer_state+0x2>
    30dc:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <layer_state+0x3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	80 23       	and	r24, r16
    30e6:	91 23       	and	r25, r17
    30e8:	a2 23       	and	r26, r18
    30ea:	b3 23       	and	r27, r19
    30ec:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <layer_state>
    30f0:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <layer_state+0x1>
    30f4:	a0 93 93 01 	sts	0x0193, r26	; 0x800193 <layer_state+0x2>
    30f8:	b0 93 94 01 	sts	0x0194, r27	; 0x800194 <layer_state+0x3>
    layer_state_set(layer_state & state);
}
    30fc:	1f 91       	pop	r17
    30fe:	0f 91       	pop	r16
    clear_keyboard_but_mods(); // To avoid stuck keys
    3100:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <clear_keyboard_but_mods>

00003104 <layer_xor>:
void layer_xor(uint32_t state)
{
    3104:	0f 93       	push	r16
    3106:	1f 93       	push	r17
    layer_state = state;
    3108:	00 91 91 01 	lds	r16, 0x0191	; 0x800191 <layer_state>
    310c:	10 91 92 01 	lds	r17, 0x0192	; 0x800192 <layer_state+0x1>
    3110:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <layer_state+0x2>
    3114:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <layer_state+0x3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	80 27       	eor	r24, r16
    311e:	91 27       	eor	r25, r17
    3120:	a2 27       	eor	r26, r18
    3122:	b3 27       	eor	r27, r19
    3124:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <layer_state>
    3128:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <layer_state+0x1>
    312c:	a0 93 93 01 	sts	0x0193, r26	; 0x800193 <layer_state+0x2>
    3130:	b0 93 94 01 	sts	0x0194, r27	; 0x800194 <layer_state+0x3>
    layer_state_set(layer_state ^ state);
}
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    clear_keyboard_but_mods(); // To avoid stuck keys
    3138:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <clear_keyboard_but_mods>

0000313c <layer_debug>:

void layer_debug(void)
{
    313c:	08 95       	ret

0000313e <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(key_t key)
{
    313e:	cf 92       	push	r12
    3140:	df 92       	push	r13
    3142:	ef 92       	push	r14
    3144:	ff 92       	push	r15
    3146:	0f 93       	push	r16
    3148:	1f 93       	push	r17
    314a:	cf 93       	push	r28
    314c:	df 93       	push	r29
    314e:	8c 01       	movw	r16, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3150:	c0 90 91 01 	lds	r12, 0x0191	; 0x800191 <layer_state>
    3154:	d0 90 92 01 	lds	r13, 0x0192	; 0x800192 <layer_state+0x1>
    3158:	e0 90 93 01 	lds	r14, 0x0193	; 0x800193 <layer_state+0x2>
    315c:	f0 90 94 01 	lds	r15, 0x0194	; 0x800194 <layer_state+0x3>
    3160:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <default_layer_state>
    3164:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <default_layer_state+0x1>
    3168:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <default_layer_state+0x2>
    316c:	b0 91 98 01 	lds	r27, 0x0198	; 0x800198 <default_layer_state+0x3>
    3170:	c8 2a       	or	r12, r24
    3172:	d9 2a       	or	r13, r25
    3174:	ea 2a       	or	r14, r26
    3176:	fb 2a       	or	r15, r27
    3178:	cf e1       	ldi	r28, 0x1F	; 31
    317a:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    317c:	d7 01       	movw	r26, r14
    317e:	c6 01       	movw	r24, r12
    3180:	0c 2e       	mov	r0, r28
    3182:	04 c0       	rjmp	.+8      	; 0x318c <layer_switch_get_action+0x4e>
    3184:	b6 95       	lsr	r27
    3186:	a7 95       	ror	r26
    3188:	97 95       	ror	r25
    318a:	87 95       	ror	r24
    318c:	0a 94       	dec	r0
    318e:	d2 f7       	brpl	.-12     	; 0x3184 <layer_switch_get_action+0x46>
    3190:	80 ff       	sbrs	r24, 0
    3192:	07 c0       	rjmp	.+14     	; 0x31a2 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3194:	b8 01       	movw	r22, r16
    3196:	8c 2f       	mov	r24, r28
    3198:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    319c:	81 30       	cpi	r24, 0x01	; 1
    319e:	91 05       	cpc	r25, r1
    31a0:	31 f4       	brne	.+12     	; 0x31ae <layer_switch_get_action+0x70>
    31a2:	21 97       	sbiw	r28, 0x01	; 1
    31a4:	58 f7       	brcc	.-42     	; 0x317c <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    31a6:	b8 01       	movw	r22, r16
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    31ae:	df 91       	pop	r29
    31b0:	cf 91       	pop	r28
    31b2:	1f 91       	pop	r17
    31b4:	0f 91       	pop	r16
    31b6:	ff 90       	pop	r15
    31b8:	ef 90       	pop	r14
    31ba:	df 90       	pop	r13
    31bc:	cf 90       	pop	r12
    31be:	08 95       	ret

000031c0 <add_key>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
    31c0:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <keyboard_nkro>
    31c4:	99 23       	and	r25, r25
    31c6:	59 f1       	breq	.+86     	; 0x321e <add_key+0x5e>
    31c8:	98 2f       	mov	r25, r24
    31ca:	96 95       	lsr	r25
    31cc:	96 95       	lsr	r25
    31ce:	96 95       	lsr	r25
    31d0:	9f 30       	cpi	r25, 0x0F	; 15
    31d2:	a0 f4       	brcc	.+40     	; 0x31fc <add_key+0x3c>
    31d4:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <keyboard_report>
    31d8:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <keyboard_report+0x1>
    31dc:	e9 0f       	add	r30, r25
    31de:	f1 1d       	adc	r31, r1
    31e0:	87 70       	andi	r24, 0x07	; 7
    31e2:	21 e0       	ldi	r18, 0x01	; 1
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	a9 01       	movw	r20, r18
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <add_key+0x2e>
    31ea:	44 0f       	add	r20, r20
    31ec:	55 1f       	adc	r21, r21
    31ee:	8a 95       	dec	r24
    31f0:	e2 f7       	brpl	.-8      	; 0x31ea <add_key+0x2a>
    31f2:	ca 01       	movw	r24, r20
    31f4:	91 81       	ldd	r25, Z+1	; 0x01
    31f6:	89 2b       	or	r24, r25
    31f8:	81 83       	std	Z+1, r24	; 0x01
    31fa:	08 95       	ret
    31fc:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <debug_config>
    3200:	90 ff       	sbrs	r25, 0
    3202:	29 c0       	rjmp	.+82     	; 0x3256 <add_key+0x96>
    3204:	1f 92       	push	r1
    3206:	8f 93       	push	r24
    3208:	88 ef       	ldi	r24, 0xF8	; 248
    320a:	93 e0       	ldi	r25, 0x03	; 3
    320c:	9f 93       	push	r25
    320e:	8f 93       	push	r24
    3210:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__xprintf>
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	08 95       	ret
    321e:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <keyboard_report>
    3222:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <keyboard_report+0x1>
    3226:	f9 01       	movw	r30, r18
    3228:	32 96       	adiw	r30, 0x02	; 2
    322a:	9f ef       	ldi	r25, 0xFF	; 255
    322c:	40 e0       	ldi	r20, 0x00	; 0
    322e:	51 91       	ld	r21, Z+
    3230:	85 17       	cp	r24, r21
    3232:	89 f0       	breq	.+34     	; 0x3256 <add_key+0x96>
    3234:	9f 3f       	cpi	r25, 0xFF	; 255
    3236:	19 f4       	brne	.+6      	; 0x323e <add_key+0x7e>
    3238:	51 11       	cpse	r21, r1
    323a:	01 c0       	rjmp	.+2      	; 0x323e <add_key+0x7e>
    323c:	94 2f       	mov	r25, r20
    323e:	4f 5f       	subi	r20, 0xFF	; 255
    3240:	4e 30       	cpi	r20, 0x0E	; 14
    3242:	a9 f7       	brne	.-22     	; 0x322e <add_key+0x6e>
    3244:	9f 3f       	cpi	r25, 0xFF	; 255
    3246:	39 f0       	breq	.+14     	; 0x3256 <add_key+0x96>
    3248:	f9 01       	movw	r30, r18
    324a:	e9 0f       	add	r30, r25
    324c:	f1 1d       	adc	r31, r1
    324e:	97 fd       	sbrc	r25, 7
    3250:	fa 95       	dec	r31
    3252:	82 83       	std	Z+2, r24	; 0x02
    3254:	08 95       	ret
    3256:	08 95       	ret

00003258 <del_key>:
    3258:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <keyboard_nkro>
    325c:	99 23       	and	r25, r25
    325e:	61 f1       	breq	.+88     	; 0x32b8 <del_key+0x60>
    3260:	98 2f       	mov	r25, r24
    3262:	96 95       	lsr	r25
    3264:	96 95       	lsr	r25
    3266:	96 95       	lsr	r25
    3268:	9f 30       	cpi	r25, 0x0F	; 15
    326a:	a8 f4       	brcc	.+42     	; 0x3296 <del_key+0x3e>
    326c:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <keyboard_report>
    3270:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <keyboard_report+0x1>
    3274:	e9 0f       	add	r30, r25
    3276:	f1 1d       	adc	r31, r1
    3278:	87 70       	andi	r24, 0x07	; 7
    327a:	21 e0       	ldi	r18, 0x01	; 1
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	a9 01       	movw	r20, r18
    3280:	02 c0       	rjmp	.+4      	; 0x3286 <del_key+0x2e>
    3282:	44 0f       	add	r20, r20
    3284:	55 1f       	adc	r21, r21
    3286:	8a 95       	dec	r24
    3288:	e2 f7       	brpl	.-8      	; 0x3282 <del_key+0x2a>
    328a:	ca 01       	movw	r24, r20
    328c:	80 95       	com	r24
    328e:	91 81       	ldd	r25, Z+1	; 0x01
    3290:	89 23       	and	r24, r25
    3292:	81 83       	std	Z+1, r24	; 0x01
    3294:	08 95       	ret
    3296:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <debug_config>
    329a:	90 ff       	sbrs	r25, 0
    329c:	1d c0       	rjmp	.+58     	; 0x32d8 <del_key+0x80>
    329e:	1f 92       	push	r1
    32a0:	8f 93       	push	r24
    32a2:	8a ed       	ldi	r24, 0xDA	; 218
    32a4:	93 e0       	ldi	r25, 0x03	; 3
    32a6:	9f 93       	push	r25
    32a8:	8f 93       	push	r24
    32aa:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__xprintf>
    32ae:	0f 90       	pop	r0
    32b0:	0f 90       	pop	r0
    32b2:	0f 90       	pop	r0
    32b4:	0f 90       	pop	r0
    32b6:	08 95       	ret
    32b8:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <keyboard_report>
    32bc:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <keyboard_report+0x1>
    32c0:	f9 01       	movw	r30, r18
    32c2:	32 96       	adiw	r30, 0x02	; 2
    32c4:	20 5f       	subi	r18, 0xF0	; 240
    32c6:	3f 4f       	sbci	r19, 0xFF	; 255
    32c8:	90 81       	ld	r25, Z
    32ca:	89 13       	cpse	r24, r25
    32cc:	01 c0       	rjmp	.+2      	; 0x32d0 <del_key+0x78>
    32ce:	10 82       	st	Z, r1
    32d0:	31 96       	adiw	r30, 0x01	; 1
    32d2:	e2 17       	cp	r30, r18
    32d4:	f3 07       	cpc	r31, r19
    32d6:	c1 f7       	brne	.-16     	; 0x32c8 <del_key+0x70>
    32d8:	08 95       	ret

000032da <clear_keys>:
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <keyboard_report>
    32e2:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <keyboard_report+0x1>
    32e6:	e8 0f       	add	r30, r24
    32e8:	f9 1f       	adc	r31, r25
    32ea:	10 82       	st	Z, r1
    32ec:	01 96       	adiw	r24, 0x01	; 1
    32ee:	80 31       	cpi	r24, 0x10	; 16
    32f0:	91 05       	cpc	r25, r1
    32f2:	a9 f7       	brne	.-22     	; 0x32de <clear_keys+0x4>
    32f4:	08 95       	ret

000032f6 <add_mods>:
    32f6:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <real_mods>
    32fa:	89 2b       	or	r24, r25
    32fc:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <real_mods>
    3300:	08 95       	ret

00003302 <del_mods>:
    3302:	80 95       	com	r24
    3304:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <real_mods>
    3308:	89 23       	and	r24, r25
    330a:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <real_mods>
    330e:	08 95       	ret

00003310 <clear_mods>:
    3310:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <real_mods>
    3314:	08 95       	ret

00003316 <add_weak_mods>:
    3316:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <weak_mods>
    331a:	89 2b       	or	r24, r25
    331c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <weak_mods>
    3320:	08 95       	ret

00003322 <del_weak_mods>:
    3322:	80 95       	com	r24
    3324:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <weak_mods>
    3328:	89 23       	and	r24, r25
    332a:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <weak_mods>
    332e:	08 95       	ret

00003330 <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    3330:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <weak_mods>
    3334:	08 95       	ret

00003336 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3336:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <oneshot_mods>
    333a:	08 95       	ret

0000333c <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    333c:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <oneshot_mods>
    3340:	08 95       	ret

00003342 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3342:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <keyboard_report>
    3346:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <keyboard_report+0x1>
    334a:	fc 01       	movw	r30, r24
    334c:	31 96       	adiw	r30, 0x01	; 1
    334e:	9c 01       	movw	r18, r24
    3350:	20 5f       	subi	r18, 0xF0	; 240
    3352:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t cnt = 0;
    3354:	80 e0       	ldi	r24, 0x00	; 0
        if (keyboard_report->raw[i])
    3356:	91 91       	ld	r25, Z+
    3358:	91 11       	cpse	r25, r1
            cnt++;
    335a:	8f 5f       	subi	r24, 0xFF	; 255
    for (uint8_t i = 1; i < REPORT_SIZE; i++) {
    335c:	e2 17       	cp	r30, r18
    335e:	f3 07       	cpc	r31, r19
    3360:	d1 f7       	brne	.-12     	; 0x3356 <has_anykey+0x14>
    }
    return cnt;
}
    3362:	08 95       	ret

00003364 <send_keyboard_report>:
    keyboard_report->mods  = real_mods;
    3364:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <keyboard_report>
    3368:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <keyboard_report+0x1>
    336c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <real_mods>
    3370:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3372:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <keyboard_report>
    3376:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <keyboard_report+0x1>
    337a:	90 81       	ld	r25, Z
    337c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <weak_mods>
    3380:	89 2b       	or	r24, r25
    3382:	80 83       	st	Z, r24
    if (oneshot_mods) {
    3384:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <oneshot_mods>
    3388:	88 23       	and	r24, r24
    338a:	61 f0       	breq	.+24     	; 0x33a4 <send_keyboard_report+0x40>
        keyboard_report->mods |= oneshot_mods;
    338c:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <keyboard_report>
    3390:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <keyboard_report+0x1>
    3394:	90 81       	ld	r25, Z
    3396:	89 2b       	or	r24, r25
    3398:	80 83       	st	Z, r24
        if (has_anykey()) {
    339a:	0e 94 a1 19 	call	0x3342	; 0x3342 <has_anykey>
    339e:	81 11       	cpse	r24, r1
    oneshot_mods = 0;
    33a0:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <oneshot_mods>
    host_keyboard_send(keyboard_report);
    33a4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <keyboard_report>
    33a8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <keyboard_report+0x1>
    33ac:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <host_keyboard_send>

000033b0 <action_for_key>:

uint16_t actionmap_key_to_action(uint8_t layer, key_t key);

/* converts key to action */
action_t action_for_key(uint8_t layer, key_t key) {
  uint16_t keycode = actionmap_key_to_action(layer, key);
    33b0:	0e 94 62 05 	call	0xac4	; 0xac4 <actionmap_key_to_action>
    33b4:	9c 01       	movw	r18, r24
  if(keycode >= KC_FN0 && keycode <= KC_FN31) {
    33b6:	80 5c       	subi	r24, 0xC0	; 192
    33b8:	91 09       	sbc	r25, r1
    33ba:	80 97       	sbiw	r24, 0x20	; 32
    33bc:	20 f4       	brcc	.+8      	; 0x33c6 <action_for_key+0x16>
    return keymap_fn_to_action(keycode);
    33be:	82 2f       	mov	r24, r18
    33c0:	0e 94 75 05 	call	0xaea	; 0xaea <keymap_fn_to_action>
    33c4:	08 95       	ret
  } else {
    action_t action;
    action.key.code = (uint8_t)keycode;
    action.key.mods = (keycode >> 8) & 0x1f;

    return action;
    33c6:	c9 01       	movw	r24, r18
    33c8:	9f 70       	andi	r25, 0x0F	; 15
  }
}
    33ca:	08 95       	ret

000033cc <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	08 95       	ret

000033d2 <timer_init>:
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
}
    33d2:	82 e0       	ldi	r24, 0x02	; 2
    33d4:	84 bd       	out	0x24, r24	; 36
    33d6:	93 e0       	ldi	r25, 0x03	; 3
    33d8:	95 bd       	out	0x25, r25	; 37
    33da:	9a ef       	ldi	r25, 0xFA	; 250
    33dc:	97 bd       	out	0x27, r25	; 39
    33de:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    33e2:	08 95       	ret

000033e4 <timer_read>:
    33e4:	2f b7       	in	r18, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <timer_count>
    33ec:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <timer_count+0x1>
    33f0:	a0 91 ae 01 	lds	r26, 0x01AE	; 0x8001ae <timer_count+0x2>
    33f4:	b0 91 af 01 	lds	r27, 0x01AF	; 0x8001af <timer_count+0x3>
    33f8:	2f bf       	out	0x3f, r18	; 63
    33fa:	08 95       	ret

000033fc <__vector_21>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    33fc:	1f 92       	push	r1
    33fe:	0f 92       	push	r0
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	0f 92       	push	r0
    3404:	11 24       	eor	r1, r1
    3406:	8f 93       	push	r24
    3408:	9f 93       	push	r25
    340a:	af 93       	push	r26
    340c:	bf 93       	push	r27
    timer_count++;
    340e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <timer_count>
    3412:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <timer_count+0x1>
    3416:	a0 91 ae 01 	lds	r26, 0x01AE	; 0x8001ae <timer_count+0x2>
    341a:	b0 91 af 01 	lds	r27, 0x01AF	; 0x8001af <timer_count+0x3>
    341e:	01 96       	adiw	r24, 0x01	; 1
    3420:	a1 1d       	adc	r26, r1
    3422:	b1 1d       	adc	r27, r1
    3424:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <timer_count>
    3428:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <timer_count+0x1>
    342c:	a0 93 ae 01 	sts	0x01AE, r26	; 0x8001ae <timer_count+0x2>
    3430:	b0 93 af 01 	sts	0x01AF, r27	; 0x8001af <timer_count+0x3>
}
    3434:	bf 91       	pop	r27
    3436:	af 91       	pop	r26
    3438:	9f 91       	pop	r25
    343a:	8f 91       	pop	r24
    343c:	0f 90       	pop	r0
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	0f 90       	pop	r0
    3442:	1f 90       	pop	r1
    3444:	18 95       	reti

00003446 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3446:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <xfunc_out+0x1>
    344a:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <xfunc_out>
    344e:	08 95       	ret

00003450 <bootloader_jump>:
    USB_Disable();
    3450:	0e 94 44 0a 	call	0x1488	; 0x1488 <USB_Disable>
    cli();
    3454:	f8 94       	cli
    3456:	2f ef       	ldi	r18, 0xFF	; 255
    3458:	87 ea       	ldi	r24, 0xA7	; 167
    345a:	91 e6       	ldi	r25, 0x61	; 97
    345c:	21 50       	subi	r18, 0x01	; 1
    345e:	80 40       	sbci	r24, 0x00	; 0
    3460:	90 40       	sbci	r25, 0x00	; 0
    3462:	e1 f7       	brne	.-8      	; 0x345c <bootloader_jump+0xc>
    3464:	00 c0       	rjmp	.+0      	; 0x3466 <bootloader_jump+0x16>
    3466:	00 00       	nop
    reset_key = BOOTLOADER_RESET_KEY;
    3468:	87 e0       	ldi	r24, 0x07	; 7
    346a:	90 eb       	ldi	r25, 0xB0	; 176
    346c:	dc 01       	movw	r26, r24
    346e:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <__bss_end>
    3472:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <__bss_end+0x1>
    3476:	a0 93 c5 01 	sts	0x01C5, r26	; 0x8001c5 <__bss_end+0x2>
    347a:	b0 93 c6 01 	sts	0x01C6, r27	; 0x8001c6 <__bss_end+0x3>
		__asm__ __volatile__ (
    347e:	9c e0       	ldi	r25, 0x0C	; 12
    3480:	88 e1       	ldi	r24, 0x18	; 24
    3482:	0f b6       	in	r0, 0x3f	; 63
    3484:	f8 94       	cli
    3486:	a8 95       	wdr
    3488:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3492:	ff cf       	rjmp	.-2      	; 0x3492 <bootloader_jump+0x42>

00003494 <suspend_power_down>:
#include "action.h"
#include "backlight.h"


void suspend_power_down(void)
{
    3494:	08 95       	ret

00003496 <suspend_wakeup_condition>:
    wdt_disable();
#endif
}

bool suspend_wakeup_condition(void)
{
    3496:	cf 93       	push	r28
    matrix_scan();
    3498:	0e 94 ca 05 	call	0xb94	; 0xb94 <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    349c:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    349e:	8c 2f       	mov	r24, r28
    34a0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <matrix_get_row>
    34a4:	89 2b       	or	r24, r25
    34a6:	29 f4       	brne	.+10     	; 0x34b2 <suspend_wakeup_condition+0x1c>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    34a8:	cf 5f       	subi	r28, 0xFF	; 255
    34aa:	c4 30       	cpi	r28, 0x04	; 4
    34ac:	c1 f7       	brne	.-16     	; 0x349e <suspend_wakeup_condition+0x8>
    }
    return false;
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	01 c0       	rjmp	.+2      	; 0x34b4 <suspend_wakeup_condition+0x1e>
        if (matrix_get_row(r)) return true;
    34b2:	81 e0       	ldi	r24, 0x01	; 1
}
    34b4:	cf 91       	pop	r28
    34b6:	08 95       	ret

000034b8 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    34b8:	0c 94 b7 13 	jmp	0x276e	; 0x276e <clear_keyboard>

000034bc <biton32>:
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}

uint8_t biton32(uint32_t bits)
{
    34bc:	cf 92       	push	r12
    34be:	df 92       	push	r13
    34c0:	ef 92       	push	r14
    34c2:	ff 92       	push	r15
    uint8_t n = 0;
    if (bits >>16) { bits >>=16; n +=16;}
    34c4:	6c 01       	movw	r12, r24
    34c6:	ee 24       	eor	r14, r14
    34c8:	ff 24       	eor	r15, r15
    34ca:	c1 14       	cp	r12, r1
    34cc:	d1 04       	cpc	r13, r1
    34ce:	e1 04       	cpc	r14, r1
    34d0:	f1 04       	cpc	r15, r1
    34d2:	21 f0       	breq	.+8      	; 0x34dc <biton32+0x20>
    34d4:	c7 01       	movw	r24, r14
    34d6:	b6 01       	movw	r22, r12
    34d8:	20 e1       	ldi	r18, 0x10	; 16
    34da:	01 c0       	rjmp	.+2      	; 0x34de <biton32+0x22>
    uint8_t n = 0;
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    if (bits >> 8) { bits >>= 8; n += 8;}
    34de:	c7 2e       	mov	r12, r23
    34e0:	d8 2e       	mov	r13, r24
    34e2:	e9 2e       	mov	r14, r25
    34e4:	ff 24       	eor	r15, r15
    34e6:	c1 14       	cp	r12, r1
    34e8:	d1 04       	cpc	r13, r1
    34ea:	e1 04       	cpc	r14, r1
    34ec:	f1 04       	cpc	r15, r1
    34ee:	19 f0       	breq	.+6      	; 0x34f6 <biton32+0x3a>
    34f0:	28 5f       	subi	r18, 0xF8	; 248
    34f2:	c7 01       	movw	r24, r14
    34f4:	b6 01       	movw	r22, r12
    if (bits >> 4) { bits >>= 4; n += 4;}
    34f6:	6b 01       	movw	r12, r22
    34f8:	7c 01       	movw	r14, r24
    34fa:	54 e0       	ldi	r21, 0x04	; 4
    34fc:	f6 94       	lsr	r15
    34fe:	e7 94       	ror	r14
    3500:	d7 94       	ror	r13
    3502:	c7 94       	ror	r12
    3504:	5a 95       	dec	r21
    3506:	d1 f7       	brne	.-12     	; 0x34fc <biton32+0x40>
    3508:	c1 14       	cp	r12, r1
    350a:	d1 04       	cpc	r13, r1
    350c:	e1 04       	cpc	r14, r1
    350e:	f1 04       	cpc	r15, r1
    3510:	19 f0       	breq	.+6      	; 0x3518 <biton32+0x5c>
    3512:	2c 5f       	subi	r18, 0xFC	; 252
    3514:	c7 01       	movw	r24, r14
    3516:	b6 01       	movw	r22, r12
    if (bits >> 2) { bits >>= 2; n += 2;}
    3518:	6b 01       	movw	r12, r22
    351a:	7c 01       	movw	r14, r24
    351c:	42 e0       	ldi	r20, 0x02	; 2
    351e:	f6 94       	lsr	r15
    3520:	e7 94       	ror	r14
    3522:	d7 94       	ror	r13
    3524:	c7 94       	ror	r12
    3526:	4a 95       	dec	r20
    3528:	d1 f7       	brne	.-12     	; 0x351e <biton32+0x62>
    352a:	c1 14       	cp	r12, r1
    352c:	d1 04       	cpc	r13, r1
    352e:	e1 04       	cpc	r14, r1
    3530:	f1 04       	cpc	r15, r1
    3532:	19 f0       	breq	.+6      	; 0x353a <biton32+0x7e>
    3534:	2e 5f       	subi	r18, 0xFE	; 254
    3536:	c7 01       	movw	r24, r14
    3538:	b6 01       	movw	r22, r12
    if (bits >> 1) { bits >>= 1; n += 1;}
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	b6 95       	lsr	r27
    3540:	a7 95       	ror	r26
    3542:	97 95       	ror	r25
    3544:	87 95       	ror	r24
    3546:	89 2b       	or	r24, r25
    3548:	8a 2b       	or	r24, r26
    354a:	8b 2b       	or	r24, r27
    354c:	09 f0       	breq	.+2      	; 0x3550 <biton32+0x94>
    354e:	2f 5f       	subi	r18, 0xFF	; 255
    return n;
}
    3550:	82 2f       	mov	r24, r18
    3552:	ff 90       	pop	r15
    3554:	ef 90       	pop	r14
    3556:	df 90       	pop	r13
    3558:	cf 90       	pop	r12
    355a:	08 95       	ret

0000355c <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    355c:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    355e:	98 2f       	mov	r25, r24
    3560:	93 73       	andi	r25, 0x33	; 51
    3562:	44 e0       	ldi	r20, 0x04	; 4
    3564:	94 9f       	mul	r25, r20
    3566:	90 01       	movw	r18, r0
    3568:	11 24       	eor	r1, r1
    356a:	8c 7c       	andi	r24, 0xCC	; 204
    356c:	86 95       	lsr	r24
    356e:	86 95       	lsr	r24
    3570:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3572:	82 2f       	mov	r24, r18
    3574:	85 75       	andi	r24, 0x55	; 85
    3576:	88 0f       	add	r24, r24
    3578:	2a 7a       	andi	r18, 0xAA	; 170
    357a:	26 95       	lsr	r18
    return bits;
}
    357c:	82 2b       	or	r24, r18
    357e:	08 95       	ret

00003580 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3580:	1f 93       	push	r17
    3582:	cf 93       	push	r28
    3584:	df 93       	push	r29
    3586:	1f 92       	push	r1
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    358c:	99 83       	std	Y+1, r25	; 0x01
    358e:	0e 94 ae 1a 	call	0x355c	; 0x355c <bitrev>
    3592:	18 2f       	mov	r17, r24
    3594:	99 81       	ldd	r25, Y+1	; 0x01
    3596:	89 2f       	mov	r24, r25
    3598:	0e 94 ae 1a 	call	0x355c	; 0x355c <bitrev>
    return bits;
    359c:	21 2f       	mov	r18, r17
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	32 2f       	mov	r19, r18
    35a2:	22 27       	eor	r18, r18
}
    35a4:	a9 01       	movw	r20, r18
    35a6:	48 2b       	or	r20, r24
    35a8:	ca 01       	movw	r24, r20
    35aa:	0f 90       	pop	r0
    35ac:	df 91       	pop	r29
    35ae:	cf 91       	pop	r28
    35b0:	1f 91       	pop	r17
    35b2:	08 95       	ret

000035b4 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    35b4:	cf 93       	push	r28
    35b6:	c8 2f       	mov	r28, r24
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    35b8:	8d e3       	ldi	r24, 0x3D	; 61
    35ba:	94 e0       	ldi	r25, 0x04	; 4
    35bc:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    35c0:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <default_layer_state>
    35c4:	70 91 96 01 	lds	r23, 0x0196	; 0x800196 <default_layer_state+0x1>
    35c8:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <default_layer_state+0x2>
    35cc:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <default_layer_state+0x3>
    35d0:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <biton32>
    35d4:	1f 92       	push	r1
    35d6:	8f 93       	push	r24
    35d8:	8a e3       	ldi	r24, 0x3A	; 58
    35da:	94 e0       	ldi	r25, 0x04	; 4
    35dc:	9f 93       	push	r25
    35de:	8f 93       	push	r24
    35e0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__xprintf>
    print(" to "); print_dec(layer); print("\n");
    35e4:	85 e3       	ldi	r24, 0x35	; 53
    35e6:	94 e0       	ldi	r25, 0x04	; 4
    35e8:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    35ec:	1f 92       	push	r1
    35ee:	cf 93       	push	r28
    35f0:	82 e3       	ldi	r24, 0x32	; 50
    35f2:	94 e0       	ldi	r25, 0x04	; 4
    35f4:	9f 93       	push	r25
    35f6:	8f 93       	push	r24
    35f8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__xprintf>
    35fc:	80 e3       	ldi	r24, 0x30	; 48
    35fe:	94 e0       	ldi	r25, 0x04	; 4
    3600:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    default_layer_set(1UL<<layer);
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	a0 e0       	ldi	r26, 0x00	; 0
    360a:	b0 e0       	ldi	r27, 0x00	; 0
    360c:	bc 01       	movw	r22, r24
    360e:	cd 01       	movw	r24, r26
    3610:	04 c0       	rjmp	.+8      	; 0x361a <switch_default_layer+0x66>
    3612:	66 0f       	add	r22, r22
    3614:	77 1f       	adc	r23, r23
    3616:	88 1f       	adc	r24, r24
    3618:	99 1f       	adc	r25, r25
    361a:	ca 95       	dec	r28
    361c:	d2 f7       	brpl	.-12     	; 0x3612 <switch_default_layer+0x5e>
    361e:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <default_layer_set>
    clear_keyboard();
    3622:	8d b7       	in	r24, 0x3d	; 61
    3624:	9e b7       	in	r25, 0x3e	; 62
    3626:	08 96       	adiw	r24, 0x08	; 8
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	9e bf       	out	0x3e, r25	; 62
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	8d bf       	out	0x3d, r24	; 61
}
    3632:	cf 91       	pop	r28
    clear_keyboard();
    3634:	0c 94 b7 13 	jmp	0x276e	; 0x276e <clear_keyboard>

00003638 <command_extra>:
}
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	08 95       	ret

0000363c <command_proc>:
{
    363c:	cf 93       	push	r28
    363e:	c8 2f       	mov	r28, r24
    switch (state) {
    3640:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <state>
    3644:	88 23       	and	r24, r24
    3646:	21 f0       	breq	.+8      	; 0x3650 <command_proc+0x14>
    3648:	81 30       	cpi	r24, 0x01	; 1
    364a:	09 f4       	brne	.+2      	; 0x364e <command_proc+0x12>
    364c:	97 c1       	rjmp	.+814    	; 0x397c <command_proc+0x340>
    364e:	b8 c1       	rjmp	.+880    	; 0x39c0 <command_proc+0x384>
            if (!IS_COMMAND())
    3650:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <keyboard_report>
    3654:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <keyboard_report+0x1>
    3658:	80 81       	ld	r24, Z
    365a:	82 32       	cpi	r24, 0x22	; 34
    365c:	09 f0       	breq	.+2      	; 0x3660 <command_proc+0x24>
    365e:	b2 c1       	rjmp	.+868    	; 0x39c4 <command_proc+0x388>
            return (command_extra(code) || command_common(code));
    3660:	8c 2f       	mov	r24, r28
    3662:	0e 94 1c 1b 	call	0x3638	; 0x3638 <command_extra>
    3666:	81 11       	cpse	r24, r1
    3668:	af c1       	rjmp	.+862    	; 0x39c8 <command_proc+0x38c>
    switch (code) {
    366a:	cb 31       	cpi	r28, 0x1B	; 27
    366c:	09 f4       	brne	.+2      	; 0x3670 <command_proc+0x34>
    366e:	fa c0       	rjmp	.+500    	; 0x3864 <command_proc+0x228>
    3670:	08 f0       	brcs	.+2      	; 0x3674 <command_proc+0x38>
    3672:	51 c0       	rjmp	.+162    	; 0x3716 <command_proc+0xda>
    3674:	c0 31       	cpi	r28, 0x10	; 16
    3676:	09 f4       	brne	.+2      	; 0x367a <command_proc+0x3e>
    3678:	1b c1       	rjmp	.+566    	; 0x38b0 <command_proc+0x274>
    367a:	40 f5       	brcc	.+80     	; 0x36cc <command_proc+0x90>
    367c:	c7 30       	cpi	r28, 0x07	; 7
    367e:	09 f4       	brne	.+2      	; 0x3682 <command_proc+0x46>
    3680:	e1 c0       	rjmp	.+450    	; 0x3844 <command_proc+0x208>
    3682:	e8 f4       	brcc	.+58     	; 0x36be <command_proc+0x82>
    3684:	c6 30       	cpi	r28, 0x06	; 6
    3686:	09 f0       	breq	.+2      	; 0x368a <command_proc+0x4e>
    3688:	72 c1       	rjmp	.+740    	; 0x396e <command_proc+0x332>
            debug_matrix   = false;
    368a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
            debug_enable   = false;
    368e:	81 7f       	andi	r24, 0xF1	; 241
    3690:	8e 7f       	andi	r24, 0xFE	; 254
    3692:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <debug_config>
    print("\n\n----- Console Help -----\n");
    3696:	81 e6       	ldi	r24, 0x61	; 97
    3698:	94 e0       	ldi	r25, 0x04	; 4
    369a:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("ESC/q:	quit\n");
    369e:	84 e5       	ldi	r24, 0x54	; 84
    36a0:	94 e0       	ldi	r25, 0x04	; 4
    36a2:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
            print("\nEnter Console Mode\n");
    36a6:	83 ea       	ldi	r24, 0xA3	; 163
    36a8:	98 e0       	ldi	r25, 0x08	; 8
    36aa:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
            print("C> ");
    36ae:	8f e9       	ldi	r24, 0x9F	; 159
    36b0:	98 e0       	ldi	r25, 0x08	; 8
    36b2:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
            state = CONSOLE;
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
    36bc:	85 c1       	rjmp	.+778    	; 0x39c8 <command_proc+0x38c>
    switch (code) {
    36be:	cb 30       	cpi	r28, 0x0B	; 11
    36c0:	09 f4       	brne	.+2      	; 0x36c4 <command_proc+0x88>
    36c2:	75 c0       	rjmp	.+234    	; 0x37ae <command_proc+0x172>
    36c4:	ce 30       	cpi	r28, 0x0E	; 14
    36c6:	09 f4       	brne	.+2      	; 0x36ca <command_proc+0x8e>
    36c8:	e0 c0       	rjmp	.+448    	; 0x388a <command_proc+0x24e>
    36ca:	51 c1       	rjmp	.+674    	; 0x396e <command_proc+0x332>
    36cc:	c6 31       	cpi	r28, 0x16	; 22
    36ce:	09 f4       	brne	.+2      	; 0x36d2 <command_proc+0x96>
    36d0:	22 c1       	rjmp	.+580    	; 0x3916 <command_proc+0x2da>
    36d2:	20 f4       	brcc	.+8      	; 0x36dc <command_proc+0xa0>
    36d4:	c1 31       	cpi	r28, 0x11	; 17
    36d6:	09 f4       	brne	.+2      	; 0x36da <command_proc+0x9e>
    36d8:	31 c1       	rjmp	.+610    	; 0x393c <command_proc+0x300>
    36da:	49 c1       	rjmp	.+658    	; 0x396e <command_proc+0x332>
    36dc:	c7 31       	cpi	r28, 0x17	; 23
    36de:	09 f4       	brne	.+2      	; 0x36e2 <command_proc+0xa6>
    36e0:	01 c1       	rjmp	.+514    	; 0x38e4 <command_proc+0x2a8>
    36e2:	c9 31       	cpi	r28, 0x19	; 25
    36e4:	09 f0       	breq	.+2      	; 0x36e8 <command_proc+0xac>
    36e6:	43 c1       	rjmp	.+646    	; 0x396e <command_proc+0x332>
            print("\n\n----- Version -----\n");
    36e8:	8f e9       	ldi	r24, 0x9F	; 159
    36ea:	97 e0       	ldi	r25, 0x07	; 7
    36ec:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    36f0:	87 e7       	ldi	r24, 0x77	; 119
    36f2:	97 e0       	ldi	r25, 0x07	; 7
    36f4:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    36f8:	81 e4       	ldi	r24, 0x41	; 65
    36fa:	97 e0       	ldi	r25, 0x07	; 7
    36fc:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    3700:	84 e1       	ldi	r24, 0x14	; 20
    3702:	97 e0       	ldi	r25, 0x07	; 7
    3704:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
            print("OPTIONS:"
    3708:	8b ee       	ldi	r24, 0xEB	; 235
    370a:	96 e0       	ldi	r25, 0x06	; 6
    370c:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__) 
    3710:	80 ec       	ldi	r24, 0xC0	; 192
    3712:	96 e0       	ldi	r25, 0x06	; 6
    3714:	22 c1       	rjmp	.+580    	; 0x395a <command_proc+0x31e>
    switch (code) {
    3716:	c5 33       	cpi	r28, 0x35	; 53
    3718:	09 f4       	brne	.+2      	; 0x371c <command_proc+0xe0>
    371a:	22 c1       	rjmp	.+580    	; 0x3960 <command_proc+0x324>
    371c:	68 f4       	brcc	.+26     	; 0x3738 <command_proc+0xfc>
    371e:	c7 32       	cpi	r28, 0x27	; 39
    3720:	09 f4       	brne	.+2      	; 0x3724 <command_proc+0xe8>
    3722:	1e c1       	rjmp	.+572    	; 0x3960 <command_proc+0x324>
    3724:	28 f4       	brcc	.+10     	; 0x3730 <command_proc+0xf4>
    3726:	ce 31       	cpi	r28, 0x1E	; 30
    3728:	08 f4       	brcc	.+2      	; 0x372c <command_proc+0xf0>
    372a:	21 c1       	rjmp	.+578    	; 0x396e <command_proc+0x332>
            switch_default_layer((code - KC_1) + 1);
    372c:	83 ee       	ldi	r24, 0xE3	; 227
    372e:	1b c1       	rjmp	.+566    	; 0x3966 <command_proc+0x32a>
    switch (code) {
    3730:	c9 32       	cpi	r28, 0x29	; 41
    3732:	09 f4       	brne	.+2      	; 0x3736 <command_proc+0xfa>
    3734:	15 c1       	rjmp	.+554    	; 0x3960 <command_proc+0x324>
    3736:	1b c1       	rjmp	.+566    	; 0x396e <command_proc+0x332>
    3738:	c6 34       	cpi	r28, 0x46	; 70
    373a:	40 f4       	brcc	.+16     	; 0x374c <command_proc+0x110>
    373c:	ca 33       	cpi	r28, 0x3A	; 58
    373e:	08 f0       	brcs	.+2      	; 0x3742 <command_proc+0x106>
    3740:	11 c1       	rjmp	.+546    	; 0x3964 <command_proc+0x328>
    3742:	c8 33       	cpi	r28, 0x38	; 56
    3744:	a1 f1       	breq	.+104    	; 0x37ae <command_proc+0x172>
    3746:	c9 33       	cpi	r28, 0x39	; 57
    3748:	c1 f0       	breq	.+48     	; 0x377a <command_proc+0x13e>
    374a:	11 c1       	rjmp	.+546    	; 0x396e <command_proc+0x332>
    374c:	c8 34       	cpi	r28, 0x48	; 72
    374e:	09 f0       	breq	.+2      	; 0x3752 <command_proc+0x116>
    3750:	0e c1       	rjmp	.+540    	; 0x396e <command_proc+0x332>
            clear_keyboard();
    3752:	0e 94 b7 13 	call	0x276e	; 0x276e <clear_keyboard>
            print("\n\nJump to bootloader... ");
    3756:	86 e8       	ldi	r24, 0x86	; 134
    3758:	98 e0       	ldi	r25, 0x08	; 8
    375a:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    375e:	2f ef       	ldi	r18, 0xFF	; 255
    3760:	83 ed       	ldi	r24, 0xD3	; 211
    3762:	90 e3       	ldi	r25, 0x30	; 48
    3764:	21 50       	subi	r18, 0x01	; 1
    3766:	80 40       	sbci	r24, 0x00	; 0
    3768:	90 40       	sbci	r25, 0x00	; 0
    376a:	e1 f7       	brne	.-8      	; 0x3764 <command_proc+0x128>
    376c:	00 c0       	rjmp	.+0      	; 0x376e <command_proc+0x132>
    376e:	00 00       	nop
            bootloader_jump(); // not return
    3770:	0e 94 28 1a 	call	0x3450	; 0x3450 <bootloader_jump>
            print("not supported.\n");
    3774:	86 e7       	ldi	r24, 0x76	; 118
    3776:	98 e0       	ldi	r25, 0x08	; 8
    3778:	f0 c0       	rjmp	.+480    	; 0x395a <command_proc+0x31e>
            if (host_get_driver()) {
    377a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <host_get_driver>
    377e:	89 2b       	or	r24, r25
    3780:	69 f0       	breq	.+26     	; 0x379c <command_proc+0x160>
                host_driver = host_get_driver();
    3782:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <host_get_driver>
    3786:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <host_driver.4905+0x1>
    378a:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <host_driver.4905>
                host_set_driver(0);
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <host_set_driver>
                print("Locked.\n");
    3796:	83 ec       	ldi	r24, 0xC3	; 195
    3798:	98 e0       	ldi	r25, 0x08	; 8
    379a:	df c0       	rjmp	.+446    	; 0x395a <command_proc+0x31e>
                host_set_driver(host_driver);
    379c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <host_driver.4905>
    37a0:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <host_driver.4905+0x1>
    37a4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <host_set_driver>
                print("Unlocked.\n");
    37a8:	88 eb       	ldi	r24, 0xB8	; 184
    37aa:	98 e0       	ldi	r25, 0x08	; 8
    37ac:	d6 c0       	rjmp	.+428    	; 0x395a <command_proc+0x31e>
    print("\n\n----- Command Help -----\n");
    37ae:	8f e3       	ldi	r24, 0x3F	; 63
    37b0:	96 e0       	ldi	r25, 0x06	; 6
    37b2:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("c:	enter console mode\n");
    37b6:	88 e2       	ldi	r24, 0x28	; 40
    37b8:	96 e0       	ldi	r25, 0x06	; 6
    37ba:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("d:	toggle debug enable\n");
    37be:	80 e1       	ldi	r24, 0x10	; 16
    37c0:	96 e0       	ldi	r25, 0x06	; 6
    37c2:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("x:	toggle matrix debug\n");
    37c6:	88 ef       	ldi	r24, 0xF8	; 248
    37c8:	95 e0       	ldi	r25, 0x05	; 5
    37ca:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("k:	toggle keyboard debug\n");
    37ce:	8e ed       	ldi	r24, 0xDE	; 222
    37d0:	95 e0       	ldi	r25, 0x05	; 5
    37d2:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("m:	toggle mouse debug\n");
    37d6:	87 ec       	ldi	r24, 0xC7	; 199
    37d8:	95 e0       	ldi	r25, 0x05	; 5
    37da:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("v:	print device version & info\n");
    37de:	87 ea       	ldi	r24, 0xA7	; 167
    37e0:	95 e0       	ldi	r25, 0x05	; 5
    37e2:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("t:	print timer count\n");
    37e6:	81 e9       	ldi	r24, 0x91	; 145
    37e8:	95 e0       	ldi	r25, 0x05	; 5
    37ea:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("s:	print status\n");
    37ee:	80 e8       	ldi	r24, 0x80	; 128
    37f0:	95 e0       	ldi	r25, 0x05	; 5
    37f2:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("e:	print eeprom config\n");
    37f6:	88 e6       	ldi	r24, 0x68	; 104
    37f8:	95 e0       	ldi	r25, 0x05	; 5
    37fa:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("n:	toggle NKRO\n");
    37fe:	88 e5       	ldi	r24, 0x58	; 88
    3800:	95 e0       	ldi	r25, 0x05	; 5
    3802:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("0/F10:	switch to Layer0 \n");
    3806:	8e e3       	ldi	r24, 0x3E	; 62
    3808:	95 e0       	ldi	r25, 0x05	; 5
    380a:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("1/F1:	switch to Layer1 \n");
    380e:	85 e2       	ldi	r24, 0x25	; 37
    3810:	95 e0       	ldi	r25, 0x05	; 5
    3812:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("2/F2:	switch to Layer2 \n");
    3816:	8c e0       	ldi	r24, 0x0C	; 12
    3818:	95 e0       	ldi	r25, 0x05	; 5
    381a:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("3/F3:	switch to Layer3 \n");
    381e:	83 ef       	ldi	r24, 0xF3	; 243
    3820:	94 e0       	ldi	r25, 0x04	; 4
    3822:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("4/F4:	switch to Layer4 \n");
    3826:	8a ed       	ldi	r24, 0xDA	; 218
    3828:	94 e0       	ldi	r25, 0x04	; 4
    382a:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("PScr:	power down/remote wake-up\n");
    382e:	89 eb       	ldi	r24, 0xB9	; 185
    3830:	94 e0       	ldi	r25, 0x04	; 4
    3832:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("Caps:	Lock Keyboard(Child Proof)\n");
    3836:	87 e9       	ldi	r24, 0x97	; 151
    3838:	94 e0       	ldi	r25, 0x04	; 4
    383a:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("Paus:	jump to bootloader\n");
    383e:	8d e7       	ldi	r24, 0x7D	; 125
    3840:	94 e0       	ldi	r25, 0x04	; 4
    3842:	8b c0       	rjmp	.+278    	; 0x395a <command_proc+0x31e>
            if (debug_enable) {
    3844:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
    3848:	80 ff       	sbrs	r24, 0
    384a:	09 c0       	rjmp	.+18     	; 0x385e <command_proc+0x222>
                print("\nDEBUG: disabled.\n");
    384c:	83 e6       	ldi	r24, 0x63	; 99
    384e:	98 e0       	ldi	r25, 0x08	; 8
    3850:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
                debug_matrix   = false;
    3854:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
                debug_enable   = false;
    3858:	81 7f       	andi	r24, 0xF1	; 241
    385a:	8e 7f       	andi	r24, 0xFE	; 254
    385c:	3d c0       	rjmp	.+122    	; 0x38d8 <command_proc+0x29c>
                print("\nDEBUG: enabled.\n");
    385e:	81 e5       	ldi	r24, 0x51	; 81
    3860:	98 e0       	ldi	r25, 0x08	; 8
    3862:	35 c0       	rjmp	.+106    	; 0x38ce <command_proc+0x292>
            debug_matrix = !debug_matrix;
    3864:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
    3868:	81 fb       	bst	r24, 1
    386a:	22 27       	eor	r18, r18
    386c:	20 f9       	bld	r18, 0
    386e:	91 e0       	ldi	r25, 0x01	; 1
    3870:	92 27       	eor	r25, r18
    3872:	90 fb       	bst	r25, 0
    3874:	81 f9       	bld	r24, 1
    3876:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <debug_config>
            if (debug_matrix) {
    387a:	99 23       	and	r25, r25
    387c:	19 f0       	breq	.+6      	; 0x3884 <command_proc+0x248>
                print("\nDEBUG: matrix enabled.\n");
    387e:	88 e3       	ldi	r24, 0x38	; 56
    3880:	98 e0       	ldi	r25, 0x08	; 8
    3882:	25 c0       	rjmp	.+74     	; 0x38ce <command_proc+0x292>
                print("\nDEBUG: matrix disabled.\n");
    3884:	8e e1       	ldi	r24, 0x1E	; 30
    3886:	98 e0       	ldi	r25, 0x08	; 8
    3888:	68 c0       	rjmp	.+208    	; 0x395a <command_proc+0x31e>
            debug_keyboard = !debug_keyboard;
    388a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
    388e:	82 fb       	bst	r24, 2
    3890:	22 27       	eor	r18, r18
    3892:	20 f9       	bld	r18, 0
    3894:	91 e0       	ldi	r25, 0x01	; 1
    3896:	92 27       	eor	r25, r18
    3898:	90 fb       	bst	r25, 0
    389a:	82 f9       	bld	r24, 2
    389c:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <debug_config>
            if (debug_keyboard) {
    38a0:	99 23       	and	r25, r25
    38a2:	19 f0       	breq	.+6      	; 0x38aa <command_proc+0x26e>
                print("\nDEBUG: keyboard enabled.\n");
    38a4:	83 e0       	ldi	r24, 0x03	; 3
    38a6:	98 e0       	ldi	r25, 0x08	; 8
    38a8:	12 c0       	rjmp	.+36     	; 0x38ce <command_proc+0x292>
                print("\nDEBUG: keyboard disabled.\n");
    38aa:	87 ee       	ldi	r24, 0xE7	; 231
    38ac:	97 e0       	ldi	r25, 0x07	; 7
    38ae:	55 c0       	rjmp	.+170    	; 0x395a <command_proc+0x31e>
            debug_mouse = !debug_mouse;
    38b0:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
    38b4:	83 fb       	bst	r24, 3
    38b6:	22 27       	eor	r18, r18
    38b8:	20 f9       	bld	r18, 0
    38ba:	91 e0       	ldi	r25, 0x01	; 1
    38bc:	92 27       	eor	r25, r18
    38be:	90 fb       	bst	r25, 0
    38c0:	83 f9       	bld	r24, 3
    38c2:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <debug_config>
            if (debug_mouse) {
    38c6:	99 23       	and	r25, r25
    38c8:	51 f0       	breq	.+20     	; 0x38de <command_proc+0x2a2>
                print("\nDEBUG: mouse enabled.\n");
    38ca:	8f ec       	ldi	r24, 0xCF	; 207
    38cc:	97 e0       	ldi	r25, 0x07	; 7
    38ce:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
                debug_enable = true;
    38d2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <debug_config>
    38d6:	81 60       	ori	r24, 0x01	; 1
    38d8:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <debug_config>
    38dc:	75 c0       	rjmp	.+234    	; 0x39c8 <command_proc+0x38c>
                print("\nDEBUG: mouse disabled.\n");
    38de:	86 eb       	ldi	r24, 0xB6	; 182
    38e0:	97 e0       	ldi	r25, 0x07	; 7
    38e2:	3b c0       	rjmp	.+118    	; 0x395a <command_proc+0x31e>
            print_val_hex32(timer_count);
    38e4:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <timer_count>
    38e8:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <timer_count+0x1>
    38ec:	a0 91 ae 01 	lds	r26, 0x01AE	; 0x8001ae <timer_count+0x2>
    38f0:	b0 91 af 01 	lds	r27, 0x01AF	; 0x8001af <timer_count+0x3>
    38f4:	bf 93       	push	r27
    38f6:	af 93       	push	r26
    38f8:	9f 93       	push	r25
    38fa:	8f 93       	push	r24
    38fc:	8c ea       	ldi	r24, 0xAC	; 172
    38fe:	96 e0       	ldi	r25, 0x06	; 6
    3900:	9f 93       	push	r25
    3902:	8f 93       	push	r24
    3904:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__xprintf>
    3908:	0f 90       	pop	r0
    390a:	0f 90       	pop	r0
    390c:	0f 90       	pop	r0
    390e:	0f 90       	pop	r0
    3910:	0f 90       	pop	r0
    3912:	0f 90       	pop	r0
    3914:	59 c0       	rjmp	.+178    	; 0x39c8 <command_proc+0x38c>
            print("\n\n----- Status -----\n");
    3916:	86 e9       	ldi	r24, 0x96	; 150
    3918:	96 e0       	ldi	r25, 0x06	; 6
    391a:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
            print_val_hex8(host_keyboard_leds());
    391e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <host_keyboard_leds>
    3922:	1f 92       	push	r1
    3924:	8f 93       	push	r24
    3926:	8c e7       	ldi	r24, 0x7C	; 124
    3928:	96 e0       	ldi	r25, 0x06	; 6
    392a:	9f 93       	push	r25
    392c:	8f 93       	push	r24
    392e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__xprintf>
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	46 c0       	rjmp	.+140    	; 0x39c8 <command_proc+0x38c>
            clear_keyboard(); //Prevents stuck keys.
    393c:	0e 94 b7 13 	call	0x276e	; 0x276e <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    3940:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <keyboard_nkro>
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	89 27       	eor	r24, r25
    3948:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <keyboard_nkro>
            if (keyboard_nkro)
    394c:	88 23       	and	r24, r24
    394e:	19 f0       	breq	.+6      	; 0x3956 <command_proc+0x31a>
                print("NKRO: enabled\n");
    3950:	8d e6       	ldi	r24, 0x6D	; 109
    3952:	96 e0       	ldi	r25, 0x06	; 6
    3954:	02 c0       	rjmp	.+4      	; 0x395a <command_proc+0x31e>
                print("NKRO: disabled\n");
    3956:	8d e5       	ldi	r24, 0x5D	; 93
    3958:	96 e0       	ldi	r25, 0x06	; 6
    395a:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    395e:	34 c0       	rjmp	.+104    	; 0x39c8 <command_proc+0x38c>
            switch_default_layer(0);
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	02 c0       	rjmp	.+4      	; 0x3968 <command_proc+0x32c>
            switch_default_layer((code - KC_F1) + 1);
    3964:	87 ec       	ldi	r24, 0xC7	; 199
    3966:	8c 0f       	add	r24, r28
    3968:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <switch_default_layer>
    396c:	2d c0       	rjmp	.+90     	; 0x39c8 <command_proc+0x38c>
            print("?");
    396e:	8b e5       	ldi	r24, 0x5B	; 91
    3970:	96 e0       	ldi	r25, 0x06	; 6
    3972:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
            return (command_extra(code) || command_common(code));
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	81 70       	andi	r24, 0x01	; 1
    397a:	28 c0       	rjmp	.+80     	; 0x39cc <command_proc+0x390>
    switch (code) {
    397c:	c4 31       	cpi	r28, 0x14	; 20
    397e:	99 f0       	breq	.+38     	; 0x39a6 <command_proc+0x36a>
    3980:	18 f4       	brcc	.+6      	; 0x3988 <command_proc+0x34c>
    3982:	cb 30       	cpi	r28, 0x0B	; 11
    3984:	29 f0       	breq	.+10     	; 0x3990 <command_proc+0x354>
    3986:	16 c0       	rjmp	.+44     	; 0x39b4 <command_proc+0x378>
    3988:	c9 32       	cpi	r28, 0x29	; 41
    398a:	69 f0       	breq	.+26     	; 0x39a6 <command_proc+0x36a>
    398c:	c8 33       	cpi	r28, 0x38	; 56
    398e:	91 f4       	brne	.+36     	; 0x39b4 <command_proc+0x378>
    print("\n\n----- Console Help -----\n");
    3990:	81 e6       	ldi	r24, 0x61	; 97
    3992:	94 e0       	ldi	r25, 0x04	; 4
    3994:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("ESC/q:	quit\n");
    3998:	84 e5       	ldi	r24, 0x54	; 84
    399a:	94 e0       	ldi	r25, 0x04	; 4
    399c:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    print("C> ");
    39a0:	8c e2       	ldi	r24, 0x2C	; 44
    39a2:	94 e0       	ldi	r25, 0x04	; 4
    39a4:	09 c0       	rjmp	.+18     	; 0x39b8 <command_proc+0x37c>
            print("\nQuit Console Mode\n");
    39a6:	88 e1       	ldi	r24, 0x18	; 24
    39a8:	94 e0       	ldi	r25, 0x04	; 4
    39aa:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
            state = ONESHOT;
    39ae:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <state>
    39b2:	04 c0       	rjmp	.+8      	; 0x39bc <command_proc+0x380>
            print("?");
    39b4:	86 e1       	ldi	r24, 0x16	; 22
    39b6:	94 e0       	ldi	r25, 0x04	; 4
    39b8:	0e 94 bb 04 	call	0x976	; 0x976 <xputs>
    return true;
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	06 c0       	rjmp	.+12     	; 0x39cc <command_proc+0x390>
            state = ONESHOT;
    39c0:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <state>
                return false;
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	02 c0       	rjmp	.+4      	; 0x39cc <command_proc+0x390>
            return (command_extra(code) || command_common(code));
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	d6 cf       	rjmp	.-84     	; 0x3978 <command_proc+0x33c>
}
    39cc:	cf 91       	pop	r28
    39ce:	08 95       	ret

000039d0 <__tablejump2__>:
    39d0:	ee 0f       	add	r30, r30
    39d2:	ff 1f       	adc	r31, r31
    39d4:	05 90       	lpm	r0, Z+
    39d6:	f4 91       	lpm	r31, Z
    39d8:	e0 2d       	mov	r30, r0
    39da:	09 94       	ijmp

000039dc <_exit>:
    39dc:	f8 94       	cli

000039de <__stop_program>:
    39de:	ff cf       	rjmp	.-2      	; 0x39de <__stop_program>
