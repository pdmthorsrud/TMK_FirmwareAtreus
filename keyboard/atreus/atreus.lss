
atreus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00003a14  00003aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  00800126  00800126  00003ace  2**0
                  ALLOC
  3 .noinit       00000004  008001c3  008001c3  00003ace  2**0
                  ALLOC
  4 .stab         0000111c  00000000  00000000  00003ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000010e  00000000  00000000  00004bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00004cfa  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000880  00000000  00000000  00004d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000e654  00000000  00000000  0000558b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003a8d  00000000  00000000  00013bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004641  00000000  00000000  0001766c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000016e4  00000000  00000000  0001bcb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000042df  00000000  00000000  0001d394  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000074d4  00000000  00000000  00021673  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b68  00000000  00000000  00028b47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
       0:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__ctors_end>
       4:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
       8:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
       c:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      10:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      14:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      18:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
	uint8_t ErrorCode;

	while (*BytesRem)
      1c:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      20:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      24:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
      28:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__vector_10>
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
      2c:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__vector_11>
      30:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      34:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      38:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      3c:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      40:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
			{
				*CurrConfigLoc = PrevDescLoc;
      44:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
				*BytesRem      = PrevBytesRem;
      48:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      4c:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
      50:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      54:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__vector_21>
      58:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      5c:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      60:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      64:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      68:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      70:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      74:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      78:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      7c:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      80:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      84:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      88:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      8c:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      90:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      94:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      98:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      a0:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      a4:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>
      a8:	0c 94 aa 04 	jmp	0x954	; 0x954 <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      ac:	46 0d       	add	r20, r6
      ae:	68 0d       	add	r22, r8
      b0:	63 0e       	add	r6, r19
      b2:	68 0d       	add	r22, r8
      b4:	63 0e       	add	r6, r19
      b6:	aa 0d       	add	r26, r10
      b8:	ce 0d       	add	r28, r14
      ba:	63 0e       	add	r6, r19
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      bc:	23 0e       	add	r2, r19
      be:	37 0e       	add	r3, r23
      c0:	30 11       	cpse	r19, r0
      c2:	30 11       	cpse	r19, r0
      c4:	5e 11       	cpse	r21, r14
      c6:	5e 11       	cpse	r21, r14
      c8:	7d 13       	cpse	r23, r29
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      ca:	7d 13       	cpse	r23, r29
      cc:	7d 13       	cpse	r23, r29
      ce:	7d 13       	cpse	r23, r29
      d0:	c1 11       	cpse	r28, r1
      d2:	7d 13       	cpse	r23, r29
      d4:	b8 12       	cpse	r11, r24
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d6:	b8 12       	cpse	r11, r24
      d8:	55 13       	cpse	r21, r21
      da:	7d 13       	cpse	r23, r29
      dc:	7d 13       	cpse	r23, r29
	{
		uint8_t  HIDReportItem  = *ReportData;
      de:	6a 13       	cpse	r22, r26

000000e0 <fn_actions>:
      e0:	f1 a1 04 85 1b 81 00 f0                             ........

000000e8 <keymaps>:
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	14 00 1a 00 08 00 15 00 17 00 00 00 1c 00 18 00     ................
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
      f8:	0c 00 12 00 13 00 04 00 16 00 07 00 09 00 0a 00     ................
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
     108:	00 00 0b 00 0d 00 0e 00 0f 00 33 00 1d 00 1b 00     ..........3.....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     118:	06 00 19 00 05 00 e0 00 11 00 10 00 36 00 37 00     ............6.7.
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     128:	38 00 29 00 2b 00 e3 00 e1 00 2c 00 e2 00 2a 00     8.).+.....,...*.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	c0 00 2d 00 34 00 28 00 1e 02 1f 02 52 00 2f 02     ..-.4.(.....R./.
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     148:	30 02 00 00 4b 00 24 00 25 00 26 00 25 02 20 02     0...K.$.%.&.%. .
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     158:	50 00 51 00 4f 00 21 02 00 00 4e 00 21 00 22 00     P.Q.O.!...N.!.".
				ReportSize     -= 2;
				ReportData     += 2;
     168:	23 00 2e 02 2f 00 30 00 26 02 27 02 24 02 e0 00     #.../.0.&.'.$...
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     178:	35 00 1e 00 1f 00 20 00 31 00 c1 00 49 02 e3 00     5..... .1...I...
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     188:	e1 00 2a 00 e2 00 2c 00 c0 00 37 00 27 00 2e 00     ..*...,...7.'...
     198:	49 00 4a 00 52 00 4d 00 4b 00 00 00 52 00 40 00     I.J.R.M.K...R.@.
     1a8:	41 00 42 00 43 00 4c 00 50 00 51 00 4f 00 4e 00     A.B.C.L.P.Q.O.N.
     1b8:	00 00 51 00 3d 00 3e 00 3f 00 44 00 00 00 80 00     ..Q.=.>.?.D.....
     1c8:	00 00 00 00 c3 00 e0 00 00 00 3a 00 3b 00 3c 00     ..........:.;.<.
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d8:	45 00 00 00 81 00 e3 00 e1 00 2a 00 e2 00 2c 00     E.........*...,.
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	c2 00 46 00 47 00 48 00                             ..F.G.H.

000001f0 <__c.4556>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f0:	6e 6f 74 20 73 75 70 70 6f 72 74 65 64 2e 0a 00     not supported...

00000200 <__c.4553>:
     200:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
     210:	61 64 65 72 2e 2e 2e 20 00                          ader... .

00000219 <__c.1924>:
     219:	0a 00                                               ..

0000021b <__c.1922>:
     21b:	25 30 31 36 62 00                                   %016b.

00000221 <__c.1920>:
     221:	3a 20 00                                            : .

00000224 <__c.1918>:
     224:	25 30 32 58 00                                      %02X.

00000229 <__c.1915>:
     229:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     239:	42 43 44 45 46 0a 00                                BCDEF..

00000240 <__c.1893>:
     240:	0a 00                                               ..

00000242 <__c.1891>:
     242:	25 30 32 58 00                                      %02X.

00000247 <__c.1889>:
     247:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000251 <__c.4679>:
     251:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     261:	00                                                  .

00000262 <__c.4677>:
     262:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
     272:	00                                                  .

00000273 <ProductString>:
     273:	0e 03 41 00 74 00 72 00 65 00 75 00 73 00 00 00     ..A.t.r.e.u.s...

00000283 <ManufacturerString>:
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     283:	18 03 74 00 65 00 63 00 68 00 6e 00 6f 00 6d 00     ..t.e.c.h.n.o.m.
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     293:	61 00 6e 00 63 00 79 00 00 00                       a.n.c.y...

0000029d <LanguageString>:
     29d:	04 03 09 04                                         ....

000002a1 <ConfigurationDescriptor>:
				break;
     2a1:	09 02 5b 00 03 01 00 a0 32 09 04 00 00 01 03 01     ..[.....2.......
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b1:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c1:	00 01 09 04 01 00 02 03 00 00 00 09 21 11 01 00     ............!...
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2d1:	01 22 20 00 07 05 82 03 20 00 01 07 05 03 03 20     ." ..... ...... 
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2e1:	00 01 09 04 02 00 01 03 00 00 00 09 21 11 01 00     ............!...
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f1:	01 22 39 00 07 05 84 03 10 00 01                    ."9........

000002fc <DeviceDescriptor>:
     2fc:	12 01 10 01 00 00 00 08 c0 16 7c 04 24 00 01 02     ..........|.$...
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     30c:	00 01                                               ..

0000030e <NKROReport>:
     30e:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     31e:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     32e:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	25 01 95 78 75 01 81 02 c0                          %..xu....

00000347 <ConsoleReport>:
     347:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     357:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

00000367 <KeyboardReport>:
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     367:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
					}
				}

				ParserData->UsingReportIDs = true;
     377:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     387:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     397:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000003a6 <__c.4365>:
     3a6:	0a 00                                               ..

000003a8 <__c.4360>:
     3a8:	25 30 32 58 20 00                                   %02X .

000003ae <__c.4357>:
     3ae:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	20 00                                                .

000003c0 <__c.4644>:
     3c0:	0a 00                                               ..

000003c2 <__c.4642>:
     3c2:	25 30 32 58 00                                      %02X.

000003c7 <__c.4640>:
     3c7:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3d7:	3a 20 00                                            : .

000003da <__c.4505>:
     3da:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3ea:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000003f8 <__c.4500>:
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f8:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000416 <__c.4834>:
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     416:	3f 00                                               ?.

00000418 <__c.4831>:
     418:	0a 51 75 69 74 20 43 6f 6e 73 6f 6c 65 20 4d 6f     .Quit Console Mo

				if (UsageListSize)
     428:	64 65 0a 00                                         de..

0000042c <__c.4836>:
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42c:	43 3e 20 00                                         C> .

00000430 <__c.4862>:
     430:	0a 00                                               ..

00000432 <__c.4860>:
     432:	25 75 00                                            %u.

00000435 <__c.4858>:
     435:	20 74 6f 20 00                                       to .

0000043a <__c.4856>:
     43a:	25 75 00                                            %u.

0000043d <__c.4854>:
     43d:	73 77 69 74 63 68 5f 64 65 66 61 75 6c 74 5f 6c     switch_default_l

					for (uint8_t i = 0; i < UsageListSize; i++)
     44d:	61 79 65 72 3a 20 00                                ayer: .

00000454 <__c.4821>:
     454:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

00000461 <__c.4819>:
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     461:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6e 73 6f 6c 65 20     ..----- Console 
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     471:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

0000047d <__c.4738>:
     47d:	50 61 75 73 3a 09 6a 75 6d 70 20 74 6f 20 62 6f     Paus:.jump to bo
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48d:	6f 74 6c 6f 61 64 65 72 0a 00                       otloader..

00000497 <__c.4736>:
     497:	43 61 70 73 3a 09 4c 6f 63 6b 20 4b 65 79 62 6f     Caps:.Lock Keybo
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4a7:	61 72 64 28 43 68 69 6c 64 20 50 72 6f 6f 66 29     ard(Child Proof)
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4b7:	0a 00                                               ..

000004b9 <__c.4734>:
     4b9:	50 53 63 72 3a 09 70 6f 77 65 72 20 64 6f 77 6e     PScr:.power down
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c9:	2f 72 65 6d 6f 74 65 20 77 61 6b 65 2d 75 70 0a     /remote wake-up.
     4d9:	00                                                  .

000004da <__c.4732>:
     4da:	34 2f 46 34 3a 09 73 77 69 74 63 68 20 74 6f 20     4/F4:.switch to 
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4ea:	4c 61 79 65 72 34 20 0a 00                          Layer4 ..

000004f3 <__c.4730>:
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f3:	33 2f 46 33 3a 09 73 77 69 74 63 68 20 74 6f 20     3/F3:.switch to 
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     503:	4c 61 79 65 72 33 20 0a 00                          Layer3 ..

0000050c <__c.4728>:
					NewReportItem.CollectionPath = CurrCollectionPath;
     50c:	32 2f 46 32 3a 09 73 77 69 74 63 68 20 74 6f 20     2/F2:.switch to 
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
     51c:	4c 61 79 65 72 32 20 0a 00                          Layer2 ..

00000525 <__c.4726>:
     525:	31 2f 46 31 3a 09 73 77 69 74 63 68 20 74 6f 20     1/F1:.switch to 
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     535:	4c 61 79 65 72 31 20 0a 00                          Layer1 ..

0000053e <__c.4724>:

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];
     53e:	30 2f 46 31 30 3a 09 73 77 69 74 63 68 20 74 6f     0/F10:.switch to

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     54e:	20 4c 61 79 65 72 30 20 0a 00                        Layer0 ..

00000558 <__c.4722>:
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     558:	6e 3a 09 74 6f 67 67 6c 65 20 4e 4b 52 4f 0a 00     n:.toggle NKRO..

00000568 <__c.4720>:
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     568:	65 3a 09 70 72 69 6e 74 20 65 65 70 72 6f 6d 20     e:.print eeprom 
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     578:	63 6f 6e 66 69 67 0a 00                             config..

00000580 <__c.4718>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     580:	73 3a 09 70 72 69 6e 74 20 73 74 61 74 75 73 0a     s:.print status.
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     590:	00                                                  .

00000591 <__c.4716>:
     591:	74 3a 09 70 72 69 6e 74 20 74 69 6d 65 72 20 63     t:.print timer c
     5a1:	6f 75 6e 74 0a 00                                   ount..

000005a7 <__c.4714>:
     5a7:	76 3a 09 70 72 69 6e 74 20 64 65 76 69 63 65 20     v:.print device 

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5b7:	76 65 72 73 69 6f 6e 20 26 20 69 6e 66 6f 0a 00     version & info..

000005c7 <__c.4712>:

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5c7:	6d 3a 09 74 6f 67 67 6c 65 20 6d 6f 75 73 65 20     m:.toggle mouse 
     5d7:	64 65 62 75 67 0a 00                                debug..

000005de <__c.4710>:
     5de:	6b 3a 09 74 6f 67 67 6c 65 20 6b 65 79 62 6f 61     k:.toggle keyboa
     5ee:	72 64 20 64 65 62 75 67 0a 00                       rd debug..

000005f8 <__c.4708>:

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f8:	78 3a 09 74 6f 67 67 6c 65 20 6d 61 74 72 69 78     x:.toggle matrix
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     608:	20 64 65 62 75 67 0a 00                              debug..

00000610 <__c.4706>:
     610:	64 3a 09 74 6f 67 67 6c 65 20 64 65 62 75 67 20     d:.toggle debug 
     620:	65 6e 61 62 6c 65 0a 00                             enable..

00000628 <__c.4704>:
     628:	63 3a 09 65 6e 74 65 72 20 63 6f 6e 73 6f 6c 65     c:.enter console
     638:	20 6d 6f 64 65 0a 00                                 mode..

0000063f <__c.4702>:
     63f:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6d 6d 61 6e 64 20     ..----- Command 
     64f:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

0000065b <__c.4814>:
     65b:	3f 00                                               ?.

0000065d <__c.4806>:
     65d:	4e 4b 52 4f 3a 20 64 69 73 61 62 6c 65 64 0a 00     NKRO: disabled..

0000066d <__c.4804>:
     66d:	4e 4b 52 4f 3a 20 65 6e 61 62 6c 65 64 0a 00        NKRO: enabled..

0000067c <__c.4801>:
     67c:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
					  ParserData->TotalReportItems++;
     68c:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000696 <__c.4799>:
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     696:	0a 0a 2d 2d 2d 2d 2d 20 53 74 61 74 75 73 20 2d     ..----- Status -
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6a6:	2d 2d 2d 2d 0a 00                                   ----..

000006ac <__c.4796>:
     6ac:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6bc:	6c 58 0a 00                                         lX..

000006c0 <__c.4793>:

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c0:	47 43 43 3a 20 34 2e 38 2e 32 20 41 56 52 2d 4c     GCC: 4.8.2 AVR-L
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d0:	49 42 43 3a 20 31 2e 38 2e 30 20 41 56 52 5f 41     IBC: 1.8.0 AVR_A
}
     6e0:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

000006eb <__c.4791>:
     6eb:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 43 4f     OPTIONS: LUFA CO
     6fb:	4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44 20 4e 4b     NSOLE COMMAND NK
     70b:	52 4f 20 34 30 39 36 0a 00                          RO 4096..

00000714 <__c.4789>:
     714:	42 55 49 4c 44 3a 20 38 34 61 65 63 37 34 2d 64     BUILD: 84aec74-d
     724:	69 72 74 79 20 28 30 30 3a 31 35 3a 32 35 20 41     irty (00:15:25 A
     734:	75 67 20 20 37 20 32 30 31 36 29 0a 00              ug  7 2016)..

00000741 <__c.4787>:
     741:	56 49 44 3a 20 30 78 31 36 43 30 28 74 65 63 68     VID: 0x16C0(tech
     751:	6e 6f 6d 61 6e 63 79 29 20 50 49 44 3a 20 30 78     nomancy) PID: 0x
     761:	30 34 37 43 28 41 74 72 65 75 73 29 20 56 45 52     047C(Atreus) VER
     771:	3a 20 33 36 0a 00                                   : 36..

00000777 <__c.4785>:
     777:	44 45 53 43 3a 20 54 4d 4b 20 6b 65 79 62 6f 61     DESC: TMK keyboa
     787:	72 64 20 66 69 72 6d 77 61 72 65 20 66 6f 72 20     rd firmware for 
     797:	41 74 72 65 75 73 0a 00                             Atreus..

0000079f <__c.4783>:
     79f:	0a 0a 2d 2d 2d 2d 2d 20 56 65 72 73 69 6f 6e 20     ..----- Version 
     7af:	2d 2d 2d 2d 2d 0a 00                                -----..

000007b6 <__c.4780>:
     7b6:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 64 69     .DEBUG: mouse di
     7c6:	73 61 62 6c 65 64 2e 0a 00                          sabled...

000007cf <__c.4778>:
     7cf:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 65 6e     .DEBUG: mouse en
     7df:	61 62 6c 65 64 2e 0a 00                             abled...

000007e7 <__c.4775>:
     7e7:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     7f7:	20 64 69 73 61 62 6c 65 64 2e 0a 00                  disabled...

00000803 <__c.4773>:
     803:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     813:	20 65 6e 61 62 6c 65 64 2e 0a 00                     enabled...

0000081e <__c.4770>:
     81e:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 64     .DEBUG: matrix d
     82e:	69 73 61 62 6c 65 64 2e 0a 00                       isabled...

00000838 <__c.4768>:
     838:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 65     .DEBUG: matrix e
     848:	6e 61 62 6c 65 64 2e 0a 00                          nabled...

00000851 <__c.4765>:
     851:	0a 44 45 42 55 47 3a 20 65 6e 61 62 6c 65 64 2e     .DEBUG: enabled.
     861:	0a 00                                               ..

00000863 <__c.4763>:
     863:	0a 44 45 42 55 47 3a 20 64 69 73 61 62 6c 65 64     .DEBUG: disabled
     873:	2e 0a 00                                            ...

00000876 <__c.4760>:
     876:	6e 6f 74 20 73 75 70 70 6f 72 74 65 64 2e 0a 00     not supported...

00000886 <__c.4758>:
     886:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
     896:	61 64 65 72 2e 2e 2e 20 00                          ader... .

0000089f <__c.4755>:
     89f:	43 3e 20 00                                         C> .

000008a3 <__c.4753>:
     8a3:	0a 45 6e 74 65 72 20 43 6f 6e 73 6f 6c 65 20 4d     .Enter Console M
     8b3:	6f 64 65 0a 00                                      ode..

000008b8 <__c.4747>:
     8b8:	55 6e 6c 6f 63 6b 65 64 2e 0a 00                    Unlocked...

000008c3 <__c.4745>:
     8c3:	4c 6f 63 6b 65 64 2e 0a 00                          Locked...

000008cc <__ctors_end>:
     8cc:	11 24       	eor	r1, r1
     8ce:	1f be       	out	0x3f, r1	; 63
     8d0:	cf ef       	ldi	r28, 0xFF	; 255
     8d2:	da e0       	ldi	r29, 0x0A	; 10
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	cd bf       	out	0x3d, r28	; 61

000008d8 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     8d8:	04 b6       	in	r0, 0x34	; 52
     8da:	03 fe       	sbrs	r0, 3
     8dc:	24 c0       	rjmp	.+72     	; 0x926 <__do_copy_data>
     8de:	80 91 c3 01 	lds	r24, 0x01C3
     8e2:	90 91 c4 01 	lds	r25, 0x01C4
     8e6:	a0 91 c5 01 	lds	r26, 0x01C5
     8ea:	b0 91 c6 01 	lds	r27, 0x01C6
     8ee:	87 30       	cpi	r24, 0x07	; 7
     8f0:	90 4b       	sbci	r25, 0xB0	; 176
     8f2:	a7 40       	sbci	r26, 0x07	; 7
     8f4:	b0 4b       	sbci	r27, 0xB0	; 176
     8f6:	b9 f4       	brne	.+46     	; 0x926 <__do_copy_data>
        reset_key = 0;
     8f8:	10 92 c3 01 	sts	0x01C3, r1
     8fc:	10 92 c4 01 	sts	0x01C4, r1
     900:	10 92 c5 01 	sts	0x01C5, r1
     904:	10 92 c6 01 	sts	0x01C6, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     908:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     90a:	84 b7       	in	r24, 0x34	; 52
     90c:	87 7f       	andi	r24, 0xF7	; 247
     90e:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     910:	88 e1       	ldi	r24, 0x18	; 24
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	80 93 60 00 	sts	0x0060, r24
     91a:	10 92 60 00 	sts	0x0060, r1
     91e:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     920:	e0 e0       	ldi	r30, 0x00	; 0
     922:	f8 e3       	ldi	r31, 0x38	; 56
     924:	09 95       	icall

00000926 <__do_copy_data>:
     926:	11 e0       	ldi	r17, 0x01	; 1
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b1 e0       	ldi	r27, 0x01	; 1
     92c:	e4 e1       	ldi	r30, 0x14	; 20
     92e:	fa e3       	ldi	r31, 0x3A	; 58
     930:	02 c0       	rjmp	.+4      	; 0x936 <__do_copy_data+0x10>
     932:	05 90       	lpm	r0, Z+
     934:	0d 92       	st	X+, r0
     936:	a6 32       	cpi	r26, 0x26	; 38
     938:	b1 07       	cpc	r27, r17
     93a:	d9 f7       	brne	.-10     	; 0x932 <__do_copy_data+0xc>

0000093c <__do_clear_bss>:
     93c:	11 e0       	ldi	r17, 0x01	; 1
     93e:	a6 e2       	ldi	r26, 0x26	; 38
     940:	b1 e0       	ldi	r27, 0x01	; 1
     942:	01 c0       	rjmp	.+2      	; 0x946 <.do_clear_bss_start>

00000944 <.do_clear_bss_loop>:
     944:	1d 92       	st	X+, r1

00000946 <.do_clear_bss_start>:
     946:	a3 3c       	cpi	r26, 0xC3	; 195
     948:	b1 07       	cpc	r27, r17
     94a:	e1 f7       	brne	.-8      	; 0x944 <.do_clear_bss_loop>
     94c:	0e 94 05 09 	call	0x120a	; 0x120a <main>
     950:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <_exit>

00000954 <__bad_interrupt>:
     954:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000958 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     958:	ff 93       	push	r31
	push	ZL
     95a:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     95c:	e0 91 b0 01 	lds	r30, 0x01B0
	lds	ZH, xfunc_out+1	;/
     960:	f0 91 b1 01 	lds	r31, 0x01B1
	sbiw	ZL, 0		;Skip if null
     964:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     966:	09 f0       	breq	.+2      	; 0x96a <xputc+0x12>
	icall
     968:	09 95       	icall
2:	pop	ZL
     96a:	ef 91       	pop	r30
	pop	ZH
     96c:	ff 91       	pop	r31
	ret
     96e:	08 95       	ret

00000970 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     970:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     972:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     974:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     976:	11 f0       	breq	.+4      	; 0x97c <xputs+0xc>
	rcall	xputc
     978:	ef df       	rcall	.-34     	; 0x958 <xputc>
	rjmp	1b
     97a:	fb cf       	rjmp	.-10     	; 0x972 <xputs+0x2>
2:	ret
     97c:	08 95       	ret

0000097e <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     97e:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     980:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     982:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     984:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     986:	0c c0       	rjmp	.+24     	; 0x9a0 <xitoa+0x22>
	neg	r20		;
     988:	41 95       	neg	r20
	sbrs	r25, 7		;
     98a:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     98c:	09 c0       	rjmp	.+18     	; 0x9a0 <xitoa+0x22>
	ldi	r30, '-'	;
     98e:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     990:	60 95       	com	r22
	com	r23		;
     992:	70 95       	com	r23
	com	r24		;
     994:	80 95       	com	r24
	com	r25		;
     996:	90 95       	com	r25
	adc	r22, r1		;
     998:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     99a:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     99c:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     99e:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     9a0:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <xitoa+0x2a>
	neg	r18		;
     9a4:	21 95       	neg	r18
	ldi	r19, '0'	;/
     9a6:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     9a8:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     9aa:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     9ac:	66 0f       	add	r22, r22
	rol	r23		;
     9ae:	77 1f       	adc	r23, r23
	rol	r24		;
     9b0:	88 1f       	adc	r24, r24
	rol	r25		;
     9b2:	99 1f       	adc	r25, r25
	rol	r26		;
     9b4:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     9b6:	a4 17       	cp	r26, r20
	brcs	3f		;
     9b8:	10 f0       	brcs	.+4      	; 0x9be <xitoa+0x40>
	sub	r26, r20	;
     9ba:	a4 1b       	sub	r26, r20
	inc	r22		;
     9bc:	63 95       	inc	r22
3:	dec	r21		;
     9be:	5a 95       	dec	r21
	brne	2b		;/
     9c0:	a9 f7       	brne	.-22     	; 0x9ac <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     9c2:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     9c4:	08 f0       	brcs	.+2      	; 0x9c8 <xitoa+0x4a>
	subi	r26, -7		;
     9c6:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     9c8:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     9ca:	af 93       	push	r26
	inc	r31		;/
     9cc:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     9ce:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     9d0:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     9d2:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     9d4:	91 05       	cpc	r25, r1
	brne	1b		;/
     9d6:	41 f7       	brne	.-48     	; 0x9a8 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     9d8:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     9da:	11 f4       	brne	.+4      	; 0x9e0 <xitoa+0x62>
	push	r30		;
     9dc:	ef 93       	push	r30
	inc	r31		;/
     9de:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     9e0:	f2 17       	cp	r31, r18
	brcc	6f		;
     9e2:	18 f4       	brcc	.+6      	; 0x9ea <xitoa+0x6c>
	push	r19		;
     9e4:	3f 93       	push	r19
	inc	r31		;
     9e6:	f3 95       	inc	r31
	rjmp	5b		;/
     9e8:	fb cf       	rjmp	.-10     	; 0x9e0 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     9ea:	8f 91       	pop	r24
	rcall	xputc		;
     9ec:	b5 df       	rcall	.-150    	; 0x958 <xputc>
	dec	r31		;
     9ee:	fa 95       	dec	r31
	brne	6b		;/
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <xitoa+0x6c>

	ret
     9f2:	08 95       	ret

000009f4 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     9f4:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     9f6:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     9f8:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     9fa:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     9fc:	21 f0       	breq	.+8      	; 0xa06 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     9fe:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     a00:	19 f0       	breq	.+6      	; 0xa08 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     a02:	aa df       	rcall	.-172    	; 0x958 <xputc>
	rjmp	0b		;/
     a04:	f9 cf       	rjmp	.-14     	; 0x9f8 <xvprintf+0x4>
90:	ret
     a06:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     a08:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     a0a:	e8 94       	clt
	_LPMI	r21		;Get flags
     a0c:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     a0e:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     a10:	c1 f3       	breq	.-16     	; 0xa02 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     a12:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     a14:	11 f4       	brne	.+4      	; 0xa1a <xvprintf+0x26>
	set			;/
     a16:	68 94       	set
22:	_LPMI	r21		;Get width
     a18:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     a1a:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     a1c:	48 f4       	brcc	.+18     	; 0xa30 <xvprintf+0x3c>
	subi	r21, '0'	;
     a1e:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     a20:	90 f3       	brcs	.-28     	; 0xa06 <xvprintf+0x12>
	lsl	r18		;
     a22:	22 0f       	add	r18, r18
	mov	r0, r18		;
     a24:	02 2e       	mov	r0, r18
	lsl	r18		;
     a26:	22 0f       	add	r18, r18
	lsl	r18		;
     a28:	22 0f       	add	r18, r18
	add	r18, r0		;
     a2a:	20 0d       	add	r18, r0
	add	r18, r21	;
     a2c:	25 0f       	add	r18, r21
	rjmp	22b		;/
     a2e:	f4 cf       	rjmp	.-24     	; 0xa18 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     a30:	0e f4       	brtc	.+2      	; 0xa34 <xvprintf+0x40>
	neg	r18		;
     a32:	21 95       	neg	r18
25:	ld	r24, Y+		;
     a34:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     a36:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     a38:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     a3a:	19 f3       	breq	.-58     	; 0xa02 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     a3c:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     a3e:	29 f1       	breq	.+74     	; 0xa8a <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     a40:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     a42:	59 f1       	breq	.+86     	; 0xa9a <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     a44:	bc 01       	movw	r22, r24
	clr	r24		;
     a46:	88 27       	eor	r24, r24
	clr	r25		;
     a48:	99 27       	eor	r25, r25
	clt			;/
     a4a:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     a4c:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     a4e:	21 f4       	brne	.+8      	; 0xa58 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     a50:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     a52:	99 91       	ld	r25, Y+
	set			;
     a54:	68 94       	set
	_LPMI	r21		;/
     a56:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     a58:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     a5a:	39 f4       	brne	.+14     	; 0xa6a <xvprintf+0x76>
	ldi	r20, -10	;
     a5c:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     a5e:	7e f0       	brts	.+30     	; 0xa7e <xvprintf+0x8a>
	sbrs	r23, 7		;
     a60:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     a62:	0d c0       	rjmp	.+26     	; 0xa7e <xvprintf+0x8a>
	ldi	r24, -1		;
     a64:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     a66:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     a68:	0a c0       	rjmp	.+20     	; 0xa7e <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     a6a:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     a6c:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     a6e:	39 f0       	breq	.+14     	; 0xa7e <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     a70:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     a72:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     a74:	21 f0       	breq	.+8      	; 0xa7e <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     a76:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     a78:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     a7a:	09 f0       	breq	.+2      	; 0xa7e <xvprintf+0x8a>
	ret			;abort
     a7c:	08 95       	ret
40:	push	ZH		;Output the value
     a7e:	ff 93       	push	r31
	push	ZL		;
     a80:	ef 93       	push	r30
	rcall	xitoa		;
     a82:	7d df       	rcall	.-262    	; 0x97e <xitoa>
42:	pop	ZL		;
     a84:	ef 91       	pop	r30
	pop	ZH		;
     a86:	ff 91       	pop	r31
	rjmp	0b		;/
     a88:	b7 cf       	rjmp	.-146    	; 0x9f8 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     a8a:	ff 93       	push	r31
	push	ZL
     a8c:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     a8e:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     a90:	81 91       	ld	r24, Z+
	cpi	r24, 0
     a92:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     a94:	b9 f3       	breq	.-18     	; 0xa84 <xvprintf+0x90>
	rcall	xputc
     a96:	60 df       	rcall	.-320    	; 0x958 <xputc>
	rjmp	51b
     a98:	fb cf       	rjmp	.-10     	; 0xa90 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     a9a:	ff 93       	push	r31
	push	ZL
     a9c:	ef 93       	push	r30
	rcall	xputs
     a9e:	68 df       	rcall	.-304    	; 0x970 <xputs>
	rjmp	42b
     aa0:	f1 cf       	rjmp	.-30     	; 0xa84 <xvprintf+0x90>

00000aa2 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     aa2:	df 93       	push	r29
	push	YL
     aa4:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     aa6:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     aa8:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     aaa:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     aac:	a3 df       	rcall	.-186    	; 0x9f4 <xvprintf>
	pop	YL
     aae:	cf 91       	pop	r28
	pop	YH
     ab0:	df 91       	pop	r29
	ret
     ab2:	08 95       	ret

00000ab4 <action_function>:
  [3] = ACTION_FUNCTION(BOOTLOADER)
};

void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
  if (id == BOOTLOADER) {
     ab4:	61 11       	cpse	r22, r1
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <action_function+0x8>
    bootloader();
     ab8:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <bootloader>
     abc:	08 95       	ret

00000abe <actionmap_key_to_action>:
#include "keymap_common.h"

/* translates key to keycode */
uint16_t actionmap_key_to_action(uint8_t layer, key_t key)
{
    return pgm_read_word(&keymaps[(layer)][(key.row)][(key.col)]);
     abe:	9b e0       	ldi	r25, 0x0B	; 11
     ac0:	79 9f       	mul	r23, r25
     ac2:	f0 01       	movw	r30, r0
     ac4:	11 24       	eor	r1, r1
     ac6:	9c e2       	ldi	r25, 0x2C	; 44
     ac8:	89 9f       	mul	r24, r25
     aca:	e0 0d       	add	r30, r0
     acc:	f1 1d       	adc	r31, r1
     ace:	11 24       	eor	r1, r1
     ad0:	e6 0f       	add	r30, r22
     ad2:	f1 1d       	adc	r31, r1
     ad4:	ee 0f       	add	r30, r30
     ad6:	ff 1f       	adc	r31, r31
     ad8:	e8 51       	subi	r30, 0x18	; 24
     ada:	ff 4f       	sbci	r31, 0xFF	; 255
}
     adc:	85 91       	lpm	r24, Z+
     ade:	94 91       	lpm	r25, Z
     ae0:	08 95       	ret

00000ae2 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     ae2:	e8 2f       	mov	r30, r24
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	ee 0f       	add	r30, r30
     ae8:	ff 1f       	adc	r31, r31
     aea:	e0 5a       	subi	r30, 0xA0	; 160
     aec:	f0 40       	sbci	r31, 0x00	; 0
}
     aee:	85 91       	lpm	r24, Z+
     af0:	94 91       	lpm	r25, Z
     af2:	08 95       	ret

00000af4 <bootloader>:

void bootloader() {
  clear_keyboard();
     af4:	0e 94 92 13 	call	0x2724	; 0x2724 <clear_keyboard>
  print("\n\nJump to bootloader... ");
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b00:	2f ef       	ldi	r18, 0xFF	; 255
     b02:	84 e3       	ldi	r24, 0x34	; 52
     b04:	9c e0       	ldi	r25, 0x0C	; 12
     b06:	21 50       	subi	r18, 0x01	; 1
     b08:	80 40       	sbci	r24, 0x00	; 0
     b0a:	90 40       	sbci	r25, 0x00	; 0
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <__stack+0x7>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <__stack+0x11>
     b10:	00 00       	nop
  TIMSK0 = 0; TIMSK1 = 0; TIMSK3 = 0; TIMSK4 = 0; UCSR1B = 0; TWCR = 0;
  DDRB = 0; DDRC = 0; DDRD = 0; DDRE = 0; DDRF = 0; TWCR = 0;
  PORTB = 0; PORTC = 0; PORTD = 0; PORTE = 0; PORTF = 0;
  asm volatile("jmp 0x7E00");
#else
  *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
     b12:	87 e7       	ldi	r24, 0x77	; 119
     b14:	97 e7       	ldi	r25, 0x77	; 119
     b16:	90 93 01 08 	sts	0x0801, r25
     b1a:	80 93 00 08 	sts	0x0800, r24
  bootloader_jump();
     b1e:	0e 94 41 1a 	call	0x3482	; 0x3482 <bootloader_jump>
  print("not supported.\n");
     b22:	80 ef       	ldi	r24, 0xF0	; 240
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0c 94 b8 04 	jmp	0x970	; 0x970 <xputs>

00000b2a <unselect_rows>:
 * pin: D0  D1  D2  D3    (teensy2)
 */
static void unselect_rows(void)
{
  // Hi-Z(DDR:0, PORT:0) to unselect
  DDRD  &= ~0b00001111;
     b2a:	8a b1       	in	r24, 0x0a	; 10
     b2c:	80 7f       	andi	r24, 0xF0	; 240
     b2e:	8a b9       	out	0x0a, r24	; 10
  PORTD &= ~0b00001111;
     b30:	8b b1       	in	r24, 0x0b	; 11
     b32:	80 7f       	andi	r24, 0xF0	; 240
     b34:	8b b9       	out	0x0b, r24	; 11
     b36:	08 95       	ret

00000b38 <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     b38:	0e 94 95 05 	call	0xb2a	; 0xb2a <unselect_rows>
 * pin: B7  D6  F7  F6  B6  D4  E6  B4  B5  C6  D7
 */
static void  init_cols(void)
{
  // Input with pull-up(DDR:0, PORT:1)
  DDRF  &= ~(1<<4 | 1<<5 | 1<<6);
     b3c:	80 b3       	in	r24, 0x10	; 16
     b3e:	8f 78       	andi	r24, 0x8F	; 143
     b40:	80 bb       	out	0x10, r24	; 16
  PORTF |=  (1<<4 | 1<<5 | 1<<6);
     b42:	81 b3       	in	r24, 0x11	; 17
     b44:	80 67       	ori	r24, 0x70	; 112
     b46:	81 bb       	out	0x11, r24	; 17
  DDRB  &= ~(1<<0 | 1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
     b48:	84 b1       	in	r24, 0x04	; 4
     b4a:	14 b8       	out	0x04, r1	; 4
  PORTB |=  (1<<0 | 1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
     b4c:	85 b1       	in	r24, 0x05	; 5
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	85 b9       	out	0x05, r24	; 5
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     b52:	10 92 2f 01 	sts	0x012F, r1
     b56:	10 92 2e 01 	sts	0x012E, r1
        matrix_debouncing[i] = 0;
     b5a:	10 92 27 01 	sts	0x0127, r1
     b5e:	10 92 26 01 	sts	0x0126, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     b62:	10 92 31 01 	sts	0x0131, r1
     b66:	10 92 30 01 	sts	0x0130, r1
        matrix_debouncing[i] = 0;
     b6a:	10 92 29 01 	sts	0x0129, r1
     b6e:	10 92 28 01 	sts	0x0128, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     b72:	10 92 33 01 	sts	0x0133, r1
     b76:	10 92 32 01 	sts	0x0132, r1
        matrix_debouncing[i] = 0;
     b7a:	10 92 2b 01 	sts	0x012B, r1
     b7e:	10 92 2a 01 	sts	0x012A, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     b82:	10 92 35 01 	sts	0x0135, r1
     b86:	10 92 34 01 	sts	0x0134, r1
        matrix_debouncing[i] = 0;
     b8a:	10 92 2d 01 	sts	0x012D, r1
     b8e:	10 92 2c 01 	sts	0x012C, r1
     b92:	08 95       	ret

00000b94 <matrix_scan>:
    }
}

uint8_t matrix_scan(void)
{
     b94:	bf 92       	push	r11
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	c6 e2       	ldi	r28, 0x26	; 38
     ba8:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     baa:	d1 2c       	mov	r13, r1
           (PINB&(1<<3) ? 0 : (1<<7)) |
           (PINB&(1<<2) ? 0 : (1<<8)) |
           (PINB&(1<<1) ? 0 : (1<<9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) ;
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     bac:	cc 24       	eor	r12, r12
     bae:	c3 94       	inc	r12
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
     bb0:	65 e0       	ldi	r22, 0x05	; 5
     bb2:	b6 2e       	mov	r11, r22
        _delay_us(50);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     bb4:	72 e4       	ldi	r23, 0x42	; 66
     bb6:	e7 2e       	mov	r14, r23
     bb8:	72 e0       	ldi	r23, 0x02	; 2
     bba:	f7 2e       	mov	r15, r23
#endif

static void select_row(uint8_t row)
{
  // Output low(DDR:1, PORT:0) to select
  switch (row) {
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	d8 16       	cp	r13, r24
     bc0:	61 f0       	breq	.+24     	; 0xbda <matrix_scan+0x46>
     bc2:	93 e0       	ldi	r25, 0x03	; 3
     bc4:	d9 16       	cp	r13, r25
     bc6:	61 f0       	breq	.+24     	; 0xbe0 <matrix_scan+0x4c>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	d8 16       	cp	r13, r24
     bcc:	19 f0       	breq	.+6      	; 0xbd4 <matrix_scan+0x40>
      case 0:
          DDRD  |= (1<<0);
     bce:	50 9a       	sbi	0x0a, 0	; 10
          PORTD &= ~(1<<0);
     bd0:	58 98       	cbi	0x0b, 0	; 11
     bd2:	08 c0       	rjmp	.+16     	; 0xbe4 <matrix_scan+0x50>
          break;
      case 1:
          DDRD  |= (1<<1);
     bd4:	51 9a       	sbi	0x0a, 1	; 10
          PORTD &= ~(1<<1);
     bd6:	59 98       	cbi	0x0b, 1	; 11
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <matrix_scan+0x50>
          break;
      case 2:
          DDRD  |= (1<<2);
     bda:	52 9a       	sbi	0x0a, 2	; 10
          PORTD &= ~(1<<2);
     bdc:	5a 98       	cbi	0x0b, 2	; 11
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <matrix_scan+0x50>
          break;
      case 3:
          DDRD  |= (1<<3);
     be0:	53 9a       	sbi	0x0a, 3	; 10
          PORTD &= ~(1<<3);
     be2:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     be4:	87 ec       	ldi	r24, 0xC7	; 199
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <matrix_scan+0x54>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <matrix_scan+0x5a>
     bee:	00 00       	nop
           (PINB&(1<<3) ? 0 : (1<<7)) |
           (PINB&(1<<2) ? 0 : (1<<8)) |
           (PINB&(1<<1) ? 0 : (1<<9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) ;
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     bf0:	8f b1       	in	r24, 0x0f	; 15
     bf2:	82 95       	swap	r24
     bf4:	86 95       	lsr	r24
     bf6:	86 95       	lsr	r24
     bf8:	83 70       	andi	r24, 0x03	; 3
     bfa:	8c 25       	eor	r24, r12
     bfc:	08 2f       	mov	r16, r24
     bfe:	01 70       	andi	r16, 0x01	; 1
     c00:	10 e0       	ldi	r17, 0x00	; 0
           (PINF&(1<<5) ? 0 : (1<<1)) |
     c02:	7d 9b       	sbis	0x0f, 5	; 15
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <matrix_scan+0x78>
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <matrix_scan+0x7c>
     c0c:	22 e0       	ldi	r18, 0x02	; 2
     c0e:	30 e0       	ldi	r19, 0x00	; 0
           (PINB&(1<<3) ? 0 : (1<<7)) |
           (PINB&(1<<2) ? 0 : (1<<8)) |
           (PINB&(1<<1) ? 0 : (1<<9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) ;
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
     c10:	20 2b       	or	r18, r16
     c12:	31 2b       	or	r19, r17
           (PINF&(1<<5) ? 0 : (1<<1)) |
           (PINF&(1<<4) ? 0 : (1<<2)) |
     c14:	7c 9b       	sbis	0x0f, 4	; 15
     c16:	03 c0       	rjmp	.+6      	; 0xc1e <matrix_scan+0x8a>
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <matrix_scan+0x8e>
     c1e:	84 e0       	ldi	r24, 0x04	; 4
     c20:	90 e0       	ldi	r25, 0x00	; 0
           (PINB&(1<<2) ? 0 : (1<<8)) |
           (PINB&(1<<1) ? 0 : (1<<9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) ;
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<5) ? 0 : (1<<1)) |
     c22:	28 2b       	or	r18, r24
     c24:	39 2b       	or	r19, r25
           (PINF&(1<<4) ? 0 : (1<<2)) |
           (PINB&(1<<7) ? 0 : (1<<3)) |
     c26:	83 b1       	in	r24, 0x03	; 3
     c28:	99 27       	eor	r25, r25
     c2a:	87 fd       	sbrc	r24, 7
     c2c:	90 95       	com	r25
     c2e:	80 95       	com	r24
     c30:	90 95       	com	r25
     c32:	88 27       	eor	r24, r24
     c34:	99 0f       	add	r25, r25
     c36:	88 1f       	adc	r24, r24
     c38:	99 27       	eor	r25, r25
     c3a:	53 e0       	ldi	r21, 0x03	; 3
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	5a 95       	dec	r21
     c42:	e1 f7       	brne	.-8      	; 0xc3c <matrix_scan+0xa8>
           (PINB&(1<<1) ? 0 : (1<<9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) ;
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<5) ? 0 : (1<<1)) |
           (PINF&(1<<4) ? 0 : (1<<2)) |
     c44:	28 2b       	or	r18, r24
     c46:	39 2b       	or	r19, r25
           (PINB&(1<<7) ? 0 : (1<<3)) |
           (PINB&(1<<6) ? 0 : (1<<4)) |
     c48:	1e 9b       	sbis	0x03, 6	; 3
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <matrix_scan+0xbe>
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <matrix_scan+0xc2>
     c52:	40 e1       	ldi	r20, 0x10	; 16
     c54:	50 e0       	ldi	r21, 0x00	; 0
           (PINB&(1<<0) ? 0 : (1<<10)) ;
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<5) ? 0 : (1<<1)) |
           (PINF&(1<<4) ? 0 : (1<<2)) |
           (PINB&(1<<7) ? 0 : (1<<3)) |
     c56:	24 2b       	or	r18, r20
     c58:	35 2b       	or	r19, r21
           (PINB&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<5) ? 0 : (1<<5)) |
     c5a:	1d 9b       	sbis	0x03, 5	; 3
     c5c:	03 c0       	rjmp	.+6      	; 0xc64 <matrix_scan+0xd0>
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <matrix_scan+0xd4>
     c64:	40 e2       	ldi	r20, 0x20	; 32
     c66:	50 e0       	ldi	r21, 0x00	; 0
#else
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<5) ? 0 : (1<<1)) |
           (PINF&(1<<4) ? 0 : (1<<2)) |
           (PINB&(1<<7) ? 0 : (1<<3)) |
           (PINB&(1<<6) ? 0 : (1<<4)) |
     c68:	42 2b       	or	r20, r18
     c6a:	53 2b       	or	r21, r19
           (PINB&(1<<5) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
     c6c:	1c 9b       	sbis	0x03, 4	; 3
     c6e:	03 c0       	rjmp	.+6      	; 0xc76 <matrix_scan+0xe2>
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <matrix_scan+0xe6>
     c76:	80 e4       	ldi	r24, 0x40	; 64
     c78:	90 e0       	ldi	r25, 0x00	; 0
    return (PINF&(1<<6) ? 0 : (1<<0)) |
           (PINF&(1<<5) ? 0 : (1<<1)) |
           (PINF&(1<<4) ? 0 : (1<<2)) |
           (PINB&(1<<7) ? 0 : (1<<3)) |
           (PINB&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<5) ? 0 : (1<<5)) |
     c7a:	84 2b       	or	r24, r20
     c7c:	95 2b       	or	r25, r21
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<3) ? 0 : (1<<7)) |
     c7e:	1b 9b       	sbis	0x03, 3	; 3
     c80:	03 c0       	rjmp	.+6      	; 0xc88 <matrix_scan+0xf4>
     c82:	e0 e0       	ldi	r30, 0x00	; 0
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <matrix_scan+0xf8>
     c88:	e0 e8       	ldi	r30, 0x80	; 128
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
           (PINF&(1<<5) ? 0 : (1<<1)) |
           (PINF&(1<<4) ? 0 : (1<<2)) |
           (PINB&(1<<7) ? 0 : (1<<3)) |
           (PINB&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<5) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
     c8c:	8e 2b       	or	r24, r30
     c8e:	9f 2b       	or	r25, r31
           (PINB&(1<<3) ? 0 : (1<<7)) |
           (PINB&(1<<2) ? 0 : (1<<8)) |
     c90:	1a 9b       	sbis	0x03, 2	; 3
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <matrix_scan+0x106>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <matrix_scan+0x10a>
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	71 e0       	ldi	r23, 0x01	; 1
           (PINF&(1<<4) ? 0 : (1<<2)) |
           (PINB&(1<<7) ? 0 : (1<<3)) |
           (PINB&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<5) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<3) ? 0 : (1<<7)) |
     c9e:	86 2b       	or	r24, r22
     ca0:	97 2b       	or	r25, r23
           (PINB&(1<<2) ? 0 : (1<<8)) |
           (PINB&(1<<1) ? 0 : (1<<9)) |
     ca2:	19 9b       	sbis	0x03, 1	; 3
     ca4:	03 c0       	rjmp	.+6      	; 0xcac <matrix_scan+0x118>
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <matrix_scan+0x11c>
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	52 e0       	ldi	r21, 0x02	; 2
           (PINB&(1<<7) ? 0 : (1<<3)) |
           (PINB&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<5) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<3) ? 0 : (1<<7)) |
           (PINB&(1<<2) ? 0 : (1<<8)) |
     cb0:	84 2b       	or	r24, r20
     cb2:	95 2b       	or	r25, r21
           (PINB&(1<<1) ? 0 : (1<<9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) ;
     cb4:	18 9b       	sbis	0x03, 0	; 3
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <matrix_scan+0x12a>
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <matrix_scan+0x12e>
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	54 e0       	ldi	r21, 0x04	; 4
           (PINB&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<5) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<3) ? 0 : (1<<7)) |
           (PINB&(1<<2) ? 0 : (1<<8)) |
           (PINB&(1<<1) ? 0 : (1<<9)) |
     cc2:	84 2b       	or	r24, r20
     cc4:	95 2b       	or	r25, r21
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(50);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
     cc6:	28 81       	ld	r18, Y
     cc8:	39 81       	ldd	r19, Y+1	; 0x01
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	41 f1       	breq	.+80     	; 0xd20 <matrix_scan+0x18c>
            matrix_debouncing[i] = cols;
     cd0:	99 83       	std	Y+1, r25	; 0x01
     cd2:	88 83       	st	Y, r24
            if (debouncing) {
     cd4:	80 91 08 01 	lds	r24, 0x0108
     cd8:	88 23       	and	r24, r24
     cda:	01 f1       	breq	.+64     	; 0xd1c <matrix_scan+0x188>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     cdc:	80 91 b5 01 	lds	r24, 0x01B5
     ce0:	80 ff       	sbrs	r24, 0
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <matrix_scan+0x158>
     ce4:	87 e4       	ldi	r24, 0x47	; 71
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
     cec:	80 91 b5 01 	lds	r24, 0x01B5
     cf0:	80 ff       	sbrs	r24, 0
     cf2:	0c c0       	rjmp	.+24     	; 0xd0c <matrix_scan+0x178>
     cf4:	80 91 08 01 	lds	r24, 0x0108
     cf8:	1f 92       	push	r1
     cfa:	8f 93       	push	r24
     cfc:	ff 92       	push	r15
     cfe:	ef 92       	push	r14
     d00:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__xprintf>
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	80 91 b5 01 	lds	r24, 0x01B5
     d10:	80 ff       	sbrs	r24, 0
     d12:	04 c0       	rjmp	.+8      	; 0xd1c <matrix_scan+0x188>
     d14:	80 e4       	ldi	r24, 0x40	; 64
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
            }
            debouncing = DEBOUNCE;
     d1c:	b0 92 08 01 	sts	0x0108, r11
        }
        unselect_rows();
     d20:	0e 94 95 05 	call	0xb2a	; 0xb2a <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     d24:	d3 94       	inc	r13
     d26:	22 96       	adiw	r28, 0x02	; 2
     d28:	94 e0       	ldi	r25, 0x04	; 4
     d2a:	d9 12       	cpse	r13, r25
     d2c:	47 cf       	rjmp	.-370    	; 0xbbc <matrix_scan+0x28>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
     d2e:	80 91 08 01 	lds	r24, 0x0108
     d32:	88 23       	and	r24, r24
     d34:	61 f1       	breq	.+88     	; 0xd8e <matrix_scan+0x1fa>
        if (--debouncing) {
     d36:	81 50       	subi	r24, 0x01	; 1
     d38:	80 93 08 01 	sts	0x0108, r24
     d3c:	88 23       	and	r24, r24
     d3e:	39 f0       	breq	.+14     	; 0xd4e <matrix_scan+0x1ba>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d40:	8f e9       	ldi	r24, 0x9F	; 159
     d42:	9f e0       	ldi	r25, 0x0F	; 15
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <matrix_scan+0x1b0>
     d48:	00 c0       	rjmp	.+0      	; 0xd4a <matrix_scan+0x1b6>
     d4a:	00 00       	nop
     d4c:	20 c0       	rjmp	.+64     	; 0xd8e <matrix_scan+0x1fa>
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
     d4e:	80 91 26 01 	lds	r24, 0x0126
     d52:	90 91 27 01 	lds	r25, 0x0127
     d56:	90 93 2f 01 	sts	0x012F, r25
     d5a:	80 93 2e 01 	sts	0x012E, r24
     d5e:	80 91 28 01 	lds	r24, 0x0128
     d62:	90 91 29 01 	lds	r25, 0x0129
     d66:	90 93 31 01 	sts	0x0131, r25
     d6a:	80 93 30 01 	sts	0x0130, r24
     d6e:	80 91 2a 01 	lds	r24, 0x012A
     d72:	90 91 2b 01 	lds	r25, 0x012B
     d76:	90 93 33 01 	sts	0x0133, r25
     d7a:	80 93 32 01 	sts	0x0132, r24
     d7e:	80 91 2c 01 	lds	r24, 0x012C
     d82:	90 91 2d 01 	lds	r25, 0x012D
     d86:	90 93 35 01 	sts	0x0135, r25
     d8a:	80 93 34 01 	sts	0x0134, r24
            }
        }
    }

    return 1;
}
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	cf 90       	pop	r12
     da0:	bf 90       	pop	r11
     da2:	08 95       	ret

00000da4 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     da4:	e8 2f       	mov	r30, r24
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	ee 0f       	add	r30, r30
     daa:	ff 1f       	adc	r31, r31
     dac:	e2 5d       	subi	r30, 0xD2	; 210
     dae:	fe 4f       	sbci	r31, 0xFE	; 254
}
     db0:	80 81       	ld	r24, Z
     db2:	91 81       	ldd	r25, Z+1	; 0x01
     db4:	08 95       	ret

00000db6 <matrix_print>:

void matrix_print(void)
{
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
     dc6:	89 e2       	ldi	r24, 0x29	; 41
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
     dce:	ce e2       	ldi	r28, 0x2E	; 46
     dd0:	ec 2e       	mov	r14, r28
     dd2:	c1 e0       	ldi	r28, 0x01	; 1
     dd4:	fc 2e       	mov	r15, r28
     dd6:	c0 e0       	ldi	r28, 0x00	; 0
     dd8:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
     dda:	14 e2       	ldi	r17, 0x24	; 36
     ddc:	c1 2e       	mov	r12, r17
     dde:	12 e0       	ldi	r17, 0x02	; 2
     de0:	d1 2e       	mov	r13, r17
        pbin_reverse16(matrix_get_row(row));
     de2:	0b e1       	ldi	r16, 0x1B	; 27
     de4:	12 e0       	ldi	r17, 0x02	; 2

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	df 92       	push	r13
     dec:	cf 92       	push	r12
     dee:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__xprintf>
     df2:	81 e2       	ldi	r24, 0x21	; 33
     df4:	92 e0       	ldi	r25, 0x02	; 2
     df6:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
        pbin_reverse16(matrix_get_row(row));
     dfa:	f7 01       	movw	r30, r14
     dfc:	81 91       	ld	r24, Z+
     dfe:	91 91       	ld	r25, Z+
     e00:	7f 01       	movw	r14, r30
     e02:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <bitrev16>
     e06:	9f 93       	push	r25
     e08:	8f 93       	push	r24
     e0a:	1f 93       	push	r17
     e0c:	0f 93       	push	r16
     e0e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__xprintf>
        print("\n");
     e12:	89 e1       	ldi	r24, 0x19	; 25
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
     e1a:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
     e1c:	8d b7       	in	r24, 0x3d	; 61
     e1e:	9e b7       	in	r25, 0x3e	; 62
     e20:	08 96       	adiw	r24, 0x08	; 8
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	9e bf       	out	0x3e, r25	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	8d bf       	out	0x3d, r24	; 61
     e2c:	c4 30       	cpi	r28, 0x04	; 4
     e2e:	d1 05       	cpc	r29, r1
     e30:	d1 f6       	brne	.-76     	; 0xde6 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	cf 90       	pop	r12
     e42:	08 95       	ret

00000e44 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
     e44:	81 ff       	sbrs	r24, 1
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <led_set+0x8>
        // output low
        DDRD |= (1<<5);
     e48:	55 9a       	sbi	0x0a, 5	; 10
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <led_set+0xa>
        PORTD &= ~(1<<5);
    } else {
        // Hi-Z
        DDRD &= ~(1<<5);
     e4c:	55 98       	cbi	0x0a, 5	; 10
        PORTD &= ~(1<<5);
     e4e:	5d 98       	cbi	0x0b, 5	; 11
     e50:	08 95       	ret

00000e52 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     e52:	80 91 47 01 	lds	r24, 0x0147
     e56:	08 95       	ret

00000e58 <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
     e58:	08 95       	ret

00000e5a <sendchar>:
{
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     e5a:	90 91 ba 01 	lds	r25, 0x01BA
     e5e:	94 30       	cpi	r25, 0x04	; 4
     e60:	09 f0       	breq	.+2      	; 0xe64 <sendchar+0xa>
     e62:	5a c0       	rjmp	.+180    	; 0xf18 <sendchar+0xbe>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e64:	90 91 e9 00 	lds	r25, 0x00E9
     e68:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e6a:	20 91 ec 00 	lds	r18, 0x00EC
     e6e:	20 ff       	sbrs	r18, 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <sendchar+0x1c>
     e72:	20 e8       	ldi	r18, 0x80	; 128
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <sendchar+0x1e>
     e76:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e78:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e7a:	22 e0       	ldi	r18, 0x02	; 2
     e7c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e80:	20 91 eb 00 	lds	r18, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     e84:	20 ff       	sbrs	r18, 0
     e86:	29 c0       	rjmp	.+82     	; 0xeda <sendchar+0x80>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     e88:	20 91 ee 00 	lds	r18, 0x00EE
     e8c:	27 ff       	sbrs	r18, 7
     e8e:	25 c0       	rjmp	.+74     	; 0xeda <sendchar+0x80>
        Endpoint_SelectEndpoint(ep);
        return -1;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
     e90:	20 91 36 01 	lds	r18, 0x0136
     e94:	22 23       	and	r18, r18
     e96:	21 f0       	breq	.+8      	; 0xea0 <sendchar+0x46>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e98:	20 91 e8 00 	lds	r18, 0x00E8
     e9c:	25 ff       	sbrs	r18, 5
     e9e:	1d c0       	rjmp	.+58     	; 0xeda <sendchar+0x80>
        Endpoint_SelectEndpoint(ep);
        return - 1;
    }

    timeouted = false;
     ea0:	10 92 36 01 	sts	0x0136, r1
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     ea4:	20 91 e4 00 	lds	r18, 0x00E4
     ea8:	30 91 e5 00 	lds	r19, 0x00E5

    uint8_t timeout = SEND_TIMEOUT;
    uint16_t prevFN = USB_Device_GetFrameNumber();
    while (!Endpoint_IsReadWriteAllowed()) {
     eac:	66 e0       	ldi	r22, 0x06	; 6
     eae:	07 c0       	rjmp	.+14     	; 0xebe <sendchar+0x64>
     eb0:	40 91 e4 00 	lds	r20, 0x00E4
     eb4:	50 91 e5 00 	lds	r21, 0x00E5
        }
        if (Endpoint_IsStalled()) {
            Endpoint_SelectEndpoint(ep);
            return -1;
        }
        if (prevFN != USB_Device_GetFrameNumber()) {
     eb8:	24 17       	cp	r18, r20
     eba:	35 07       	cpc	r19, r21
     ebc:	91 f4       	brne	.+36     	; 0xee2 <sendchar+0x88>
     ebe:	40 91 e8 00 	lds	r20, 0x00E8

    timeouted = false;

    uint8_t timeout = SEND_TIMEOUT;
    uint16_t prevFN = USB_Device_GetFrameNumber();
    while (!Endpoint_IsReadWriteAllowed()) {
     ec2:	45 fd       	sbrc	r20, 5
     ec4:	19 c0       	rjmp	.+50     	; 0xef8 <sendchar+0x9e>
        switch (USB_DeviceState) {
     ec6:	40 91 ba 01 	lds	r20, 0x01BA
     eca:	44 23       	and	r20, r20
     ecc:	29 f1       	breq	.+74     	; 0xf18 <sendchar+0xbe>
     ece:	45 30       	cpi	r20, 0x05	; 5
     ed0:	19 f1       	breq	.+70     	; 0xf18 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ed2:	40 91 eb 00 	lds	r20, 0x00EB
        case DEVICE_STATE_Unattached:
        case DEVICE_STATE_Suspended:
            return -1;
        }
        if (Endpoint_IsStalled()) {
     ed6:	45 ff       	sbrs	r20, 5
     ed8:	eb cf       	rjmp	.-42     	; 0xeb0 <sendchar+0x56>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eda:	9f 70       	andi	r25, 0x0F	; 15
     edc:	90 93 e9 00 	sts	0x00E9, r25
     ee0:	1b c0       	rjmp	.+54     	; 0xf18 <sendchar+0xbe>
     ee2:	61 50       	subi	r22, 0x01	; 1
            Endpoint_SelectEndpoint(ep);
            return -1;
        }
        if (prevFN != USB_Device_GetFrameNumber()) {
            if (!(timeout--)) {
     ee4:	21 f4       	brne	.+8      	; 0xeee <sendchar+0x94>
                timeouted = true;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	80 93 36 01 	sts	0x0136, r24
     eec:	f6 cf       	rjmp	.-20     	; 0xeda <sendchar+0x80>
     eee:	20 91 e4 00 	lds	r18, 0x00E4
     ef2:	30 91 e5 00 	lds	r19, 0x00E5
     ef6:	e3 cf       	rjmp	.-58     	; 0xebe <sendchar+0x64>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ef8:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     efc:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed())
     f00:	85 fd       	sbrc	r24, 5
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <sendchar+0xb4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f04:	80 91 e8 00 	lds	r24, 0x00E8
     f08:	8e 77       	andi	r24, 0x7E	; 126
     f0a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f0e:	9f 70       	andi	r25, 0x0F	; 15
     f10:	90 93 e9 00 	sts	0x00E9, r25
        Endpoint_ClearIN();

    Endpoint_SelectEndpoint(ep);
    return 0;
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	08 95       	ret
    uint16_t prevFN = USB_Device_GetFrameNumber();
    while (!Endpoint_IsReadWriteAllowed()) {
        switch (USB_DeviceState) {
        case DEVICE_STATE_Unattached:
        case DEVICE_STATE_Suspended:
            return -1;
     f18:	8f ef       	ldi	r24, 0xFF	; 255
    if (!Endpoint_IsReadWriteAllowed())
        Endpoint_ClearIN();

    Endpoint_SelectEndpoint(ep);
    return 0;
}
     f1a:	08 95       	ret

00000f1c <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	00 d0       	rcall	.+0      	; 0xf22 <send_consumer+0x6>
     f22:	1f 92       	push	r1
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 0;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     f28:	20 91 ba 01 	lds	r18, 0x01BA
     f2c:	24 30       	cpi	r18, 0x04	; 4
     f2e:	d9 f4       	brne	.+54     	; 0xf66 <send_consumer+0x4a>
        return;

    report_extra_t r = {
     f30:	23 e0       	ldi	r18, 0x03	; 3
     f32:	29 83       	std	Y+1, r18	; 0x01
     f34:	9b 83       	std	Y+3, r25	; 0x03
     f36:	8a 83       	std	Y+2, r24	; 0x02
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	80 93 e9 00 	sts	0x00E9, r24
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    uint8_t timeout = 0;
     f3e:	80 e0       	ldi	r24, 0x00	; 0
    report_extra_t r = {
        .report_id = REPORT_ID_CONSUMER,
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
    while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
     f40:	81 50       	subi	r24, 0x01	; 1
     f42:	21 f0       	breq	.+8      	; 0xf4c <send_consumer+0x30>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f44:	90 91 e8 00 	lds	r25, 0x00E8
     f48:	95 ff       	sbrs	r25, 5
     f4a:	fa cf       	rjmp	.-12     	; 0xf40 <send_consumer+0x24>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	63 e0       	ldi	r22, 0x03	; 3
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	ce 01       	movw	r24, r28
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f5c:	80 91 e8 00 	lds	r24, 0x00E8
     f60:	8e 77       	andi	r24, 0x7E	; 126
     f62:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	00 d0       	rcall	.+0      	; 0xf78 <send_system+0x6>
     f78:	1f 92       	push	r1
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 0;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     f7e:	20 91 ba 01 	lds	r18, 0x01BA
     f82:	24 30       	cpi	r18, 0x04	; 4
     f84:	d9 f4       	brne	.+54     	; 0xfbc <send_system+0x4a>
        return;

    report_extra_t r = {
     f86:	22 e0       	ldi	r18, 0x02	; 2
     f88:	29 83       	std	Y+1, r18	; 0x01
     f8a:	9b 83       	std	Y+3, r25	; 0x03
     f8c:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 e9 00 	sts	0x00E9, r24
#endif
}

static void send_system(uint16_t data)
{
    uint8_t timeout = 0;
     f94:	80 e0       	ldi	r24, 0x00	; 0
    report_extra_t r = {
        .report_id = REPORT_ID_SYSTEM,
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
    while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
     f96:	81 50       	subi	r24, 0x01	; 1
     f98:	21 f0       	breq	.+8      	; 0xfa2 <send_system+0x30>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f9a:	90 91 e8 00 	lds	r25, 0x00E8
     f9e:	95 ff       	sbrs	r25, 5
     fa0:	fa cf       	rjmp	.-12     	; 0xf96 <send_system+0x24>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	63 e0       	ldi	r22, 0x03	; 3
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	ce 01       	movw	r24, r28
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fb2:	80 91 e8 00 	lds	r24, 0x00E8
     fb6:	8e 77       	andi	r24, 0x7E	; 126
     fb8:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	ec 01       	movw	r28, r24
    uint8_t timeout = 0;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     fce:	80 91 ba 01 	lds	r24, 0x01BA
     fd2:	84 30       	cpi	r24, 0x04	; 4
     fd4:	49 f5       	brne	.+82     	; 0x1028 <send_keyboard+0x60>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
     fd6:	90 91 49 01 	lds	r25, 0x0149
     fda:	91 11       	cpse	r25, r1
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <send_keyboard+0x18>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	80 93 e9 00 	sts	0x00E9, r24
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
     fe4:	80 e0       	ldi	r24, 0x00	; 0
    {
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
    }

    /* Check if Keyboard Endpoint Ready for Read/Write */
    while (--timeout && !Endpoint_IsReadWriteAllowed()) ;
     fe6:	81 50       	subi	r24, 0x01	; 1
     fe8:	21 f0       	breq	.+8      	; 0xff2 <send_keyboard+0x2a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fea:	90 91 e8 00 	lds	r25, 0x00E8
     fee:	95 ff       	sbrs	r25, 5
     ff0:	fa cf       	rjmp	.-12     	; 0xfe6 <send_keyboard+0x1e>

    /* Write Keyboard Report Data */
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
     ff2:	80 91 49 01 	lds	r24, 0x0149
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
     ff6:	40 e0       	ldi	r20, 0x00	; 0
     ff8:	50 e0       	ldi	r21, 0x00	; 0
    /* Check if Keyboard Endpoint Ready for Read/Write */
    while (--timeout && !Endpoint_IsReadWriteAllowed()) ;

    /* Write Keyboard Report Data */
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
     ffa:	88 23       	and	r24, r24
     ffc:	19 f0       	breq	.+6      	; 0x1004 <send_keyboard+0x3c>
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
     ffe:	60 e1       	ldi	r22, 0x10	; 16
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <send_keyboard+0x40>
    }
    else
#endif
    {
        /* boot mode */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1004:	68 e0       	ldi	r22, 0x08	; 8
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	ce 01       	movw	r24, r28
    100a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    100e:	80 91 e8 00 	lds	r24, 0x00E8
    1012:	8e 77       	andi	r24, 0x7E	; 126
    1014:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1018:	80 e1       	ldi	r24, 0x10	; 16
    101a:	fe 01       	movw	r30, r28
    101c:	a7 e3       	ldi	r26, 0x37	; 55
    101e:	b1 e0       	ldi	r27, 0x01	; 1
    1020:	01 90       	ld	r0, Z+
    1022:	0d 92       	st	X+, r0
    1024:	8a 95       	dec	r24
    1026:	e1 f7       	brne	.-8      	; 0x1020 <send_keyboard+0x58>
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <EVENT_USB_Device_Connect>:
 * 1) EVENT_USB_Device_Suspend
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    102e:	08 95       	ret

00001030 <EVENT_USB_Device_Disconnect>:
}

void EVENT_USB_Device_Disconnect(void)
{
    1030:	08 95       	ret

00001032 <EVENT_USB_Device_Reset>:
}

void EVENT_USB_Device_Reset(void)
{
    1032:	08 95       	ret

00001034 <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    1034:	08 95       	ret

00001036 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    suspend_wakeup_init();
    1036:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <suspend_wakeup_init>

0000103a <EVENT_USB_Device_StartOfFrame>:
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    103a:	80 91 ba 01 	lds	r24, 0x01BA
    103e:	84 30       	cpi	r24, 0x04	; 4
    1040:	49 f5       	brne	.+82     	; 0x1094 <EVENT_USB_Device_StartOfFrame+0x5a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1042:	80 91 e9 00 	lds	r24, 0x00E9
    1046:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1048:	90 91 ec 00 	lds	r25, 0x00EC
    104c:	90 ff       	sbrs	r25, 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <EVENT_USB_Device_StartOfFrame+0x1a>
    1050:	90 e8       	ldi	r25, 0x80	; 128
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <EVENT_USB_Device_StartOfFrame+0x1c>
    1054:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1056:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    105e:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1062:	80 ff       	sbrs	r24, 0
    1064:	14 c0       	rjmp	.+40     	; 0x108e <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1066:	80 91 ee 00 	lds	r24, 0x00EE
    106a:	87 ff       	sbrs	r24, 7
    106c:	10 c0       	rjmp	.+32     	; 0x108e <EVENT_USB_Device_StartOfFrame+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    106e:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1072:	85 ff       	sbrs	r24, 5
    1074:	03 c0       	rjmp	.+6      	; 0x107c <EVENT_USB_Device_StartOfFrame+0x42>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1076:	10 92 f1 00 	sts	0x00F1, r1
    107a:	f9 cf       	rjmp	.-14     	; 0x106e <EVENT_USB_Device_StartOfFrame+0x34>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    107c:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1080:	80 ff       	sbrs	r24, 0
    1082:	05 c0       	rjmp	.+10     	; 0x108e <EVENT_USB_Device_StartOfFrame+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1084:	80 91 e8 00 	lds	r24, 0x00E8
    1088:	8e 77       	andi	r24, 0x7E	; 126
    108a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    108e:	9f 70       	andi	r25, 0x0F	; 15
    1090:	90 93 e9 00 	sts	0x00E9, r25
    1094:	08 95       	ret

00001096 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1096:	42 e0       	ldi	r20, 0x02	; 2
    1098:	61 ec       	ldi	r22, 0xC1	; 193
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	0e 94 bc 09 	call	0x1378	; 0x1378 <Endpoint_ConfigureEndpoint_Prv>
    10a0:	46 e2       	ldi	r20, 0x26	; 38
    10a2:	61 ec       	ldi	r22, 0xC1	; 193
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	0e 94 bc 09 	call	0x1378	; 0x1378 <Endpoint_ConfigureEndpoint_Prv>
    10aa:	42 e2       	ldi	r20, 0x22	; 34
    10ac:	60 ec       	ldi	r22, 0xC0	; 192
    10ae:	83 e0       	ldi	r24, 0x03	; 3
    10b0:	0e 94 bc 09 	call	0x1378	; 0x1378 <Endpoint_ConfigureEndpoint_Prv>
    10b4:	42 e1       	ldi	r20, 0x12	; 18
    10b6:	61 ec       	ldi	r22, 0xC1	; 193
    10b8:	84 e0       	ldi	r24, 0x04	; 4
    10ba:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <Endpoint_ConfigureEndpoint_Prv>

000010be <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    10be:	80 91 bc 01 	lds	r24, 0x01BC
    10c2:	83 30       	cpi	r24, 0x03	; 3
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <EVENT_USB_Device_ControlRequest+0xa>
    10c6:	53 c0       	rjmp	.+166    	; 0x116e <EVENT_USB_Device_ControlRequest+0xb0>
    10c8:	30 f4       	brcc	.+12     	; 0x10d6 <EVENT_USB_Device_ControlRequest+0x18>
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	71 f0       	breq	.+28     	; 0x10ea <EVENT_USB_Device_ControlRequest+0x2c>
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <EVENT_USB_Device_ControlRequest+0x16>
    10d2:	82 c0       	rjmp	.+260    	; 0x11d8 <EVENT_USB_Device_ControlRequest+0x11a>
    10d4:	08 95       	ret
    10d6:	8a 30       	cpi	r24, 0x0A	; 10
    10d8:	09 f4       	brne	.+2      	; 0x10dc <EVENT_USB_Device_ControlRequest+0x1e>
    10da:	6e c0       	rjmp	.+220    	; 0x11b8 <EVENT_USB_Device_ControlRequest+0xfa>
    10dc:	8b 30       	cpi	r24, 0x0B	; 11
    10de:	09 f4       	brne	.+2      	; 0x10e2 <EVENT_USB_Device_ControlRequest+0x24>
    10e0:	57 c0       	rjmp	.+174    	; 0x1190 <EVENT_USB_Device_ControlRequest+0xd2>
    10e2:	89 30       	cpi	r24, 0x09	; 9
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <EVENT_USB_Device_ControlRequest+0x2a>
    10e6:	90 c0       	rjmp	.+288    	; 0x1208 <EVENT_USB_Device_ControlRequest+0x14a>
    10e8:	20 c0       	rjmp	.+64     	; 0x112a <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    10ea:	80 91 bb 01 	lds	r24, 0x01BB
    10ee:	81 3a       	cpi	r24, 0xA1	; 161
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <EVENT_USB_Device_ControlRequest+0x36>
    10f2:	8a c0       	rjmp	.+276    	; 0x1208 <EVENT_USB_Device_ControlRequest+0x14a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10f4:	80 91 e8 00 	lds	r24, 0x00E8
    10f8:	87 7f       	andi	r24, 0xF7	; 247
    10fa:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    10fe:	80 91 bf 01 	lds	r24, 0x01BF
    1102:	90 91 c0 01 	lds	r25, 0x01C0
    1106:	89 2b       	or	r24, r25
    1108:	21 f0       	breq	.+8      	; 0x1112 <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    110a:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    1112:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1114:	87 e3       	ldi	r24, 0x37	; 55
    1116:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	0e 94 46 0c 	call	0x188c	; 0x188c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    111e:	80 91 e8 00 	lds	r24, 0x00E8
    1122:	8b 77       	andi	r24, 0x7B	; 123
    1124:	80 93 e8 00 	sts	0x00E8, r24
    1128:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    112a:	80 91 bb 01 	lds	r24, 0x01BB
    112e:	81 32       	cpi	r24, 0x21	; 33
    1130:	09 f0       	breq	.+2      	; 0x1134 <EVENT_USB_Device_ControlRequest+0x76>
    1132:	6a c0       	rjmp	.+212    	; 0x1208 <EVENT_USB_Device_ControlRequest+0x14a>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1134:	80 91 bf 01 	lds	r24, 0x01BF
    1138:	90 91 c0 01 	lds	r25, 0x01C0
    113c:	89 2b       	or	r24, r25
    113e:	09 f0       	breq	.+2      	; 0x1142 <EVENT_USB_Device_ControlRequest+0x84>
    1140:	63 c0       	rjmp	.+198    	; 0x1208 <EVENT_USB_Device_ControlRequest+0x14a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1142:	80 91 e8 00 	lds	r24, 0x00E8
    1146:	87 7f       	andi	r24, 0xF7	; 247
    1148:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    114c:	80 91 e8 00 	lds	r24, 0x00E8
                case KEYBOARD_INTERFACE:
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1150:	82 fd       	sbrc	r24, 2
    1152:	05 c0       	rjmp	.+10     	; 0x115e <EVENT_USB_Device_ControlRequest+0xa0>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1154:	80 91 ba 01 	lds	r24, 0x01BA
    1158:	81 11       	cpse	r24, r1
    115a:	f8 cf       	rjmp	.-16     	; 0x114c <EVENT_USB_Device_ControlRequest+0x8e>
    115c:	55 c0       	rjmp	.+170    	; 0x1208 <EVENT_USB_Device_ControlRequest+0x14a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    115e:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1162:	80 93 47 01 	sts	0x0147, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1166:	80 91 e8 00 	lds	r24, 0x00E8
    116a:	8b 77       	andi	r24, 0x7B	; 123
    116c:	49 c0       	rjmp	.+146    	; 0x1200 <EVENT_USB_Device_ControlRequest+0x142>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    116e:	80 91 bb 01 	lds	r24, 0x01BB
    1172:	81 3a       	cpi	r24, 0xA1	; 161
    1174:	09 f0       	breq	.+2      	; 0x1178 <EVENT_USB_Device_ControlRequest+0xba>
    1176:	48 c0       	rjmp	.+144    	; 0x1208 <EVENT_USB_Device_ControlRequest+0x14a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1178:	80 91 e8 00 	lds	r24, 0x00E8
    117c:	87 7f       	andi	r24, 0xF7	; 247
    117e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1182:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1186:	80 ff       	sbrs	r24, 0
    1188:	fc cf       	rjmp	.-8      	; 0x1182 <EVENT_USB_Device_ControlRequest+0xc4>
                Endpoint_Write_8(protocol_report);
    118a:	80 91 13 01 	lds	r24, 0x0113
    118e:	33 c0       	rjmp	.+102    	; 0x11f6 <EVENT_USB_Device_ControlRequest+0x138>
                Endpoint_ClearStatusStage();
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1190:	80 91 bb 01 	lds	r24, 0x01BB
    1194:	81 32       	cpi	r24, 0x21	; 33
    1196:	c1 f5       	brne	.+112    	; 0x1208 <EVENT_USB_Device_ControlRequest+0x14a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1198:	80 91 e8 00 	lds	r24, 0x00E8
    119c:	87 7f       	andi	r24, 0xF7	; 247
    119e:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    11a2:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Endpoint_ClearStatusStage>

                protocol_report = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    11a6:	90 91 bd 01 	lds	r25, 0x01BD
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	91 11       	cpse	r25, r1
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <EVENT_USB_Device_ControlRequest+0xf4>
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	80 93 13 01 	sts	0x0113, r24
    11b6:	08 95       	ret
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    11b8:	80 91 bb 01 	lds	r24, 0x01BB
    11bc:	81 32       	cpi	r24, 0x21	; 33
    11be:	21 f5       	brne	.+72     	; 0x1208 <EVENT_USB_Device_ControlRequest+0x14a>
    11c0:	80 91 e8 00 	lds	r24, 0x00E8
    11c4:	87 7f       	andi	r24, 0xF7	; 247
    11c6:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    11ca:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Endpoint_ClearStatusStage>

                idle_duration = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    11ce:	80 91 be 01 	lds	r24, 0x01BE
    11d2:	80 93 48 01 	sts	0x0148, r24
    11d6:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11d8:	80 91 bb 01 	lds	r24, 0x01BB
    11dc:	81 3a       	cpi	r24, 0xA1	; 161
    11de:	a1 f4       	brne	.+40     	; 0x1208 <EVENT_USB_Device_ControlRequest+0x14a>
    11e0:	80 91 e8 00 	lds	r24, 0x00E8
    11e4:	87 7f       	andi	r24, 0xF7	; 247
    11e6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11ea:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    11ee:	80 ff       	sbrs	r24, 0
    11f0:	fc cf       	rjmp	.-8      	; 0x11ea <EVENT_USB_Device_ControlRequest+0x12c>
                Endpoint_Write_8(idle_duration);
    11f2:	80 91 48 01 	lds	r24, 0x0148
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11f6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11fa:	80 91 e8 00 	lds	r24, 0x00E8
    11fe:	8e 77       	andi	r24, 0x7E	; 126
    1200:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1204:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <Endpoint_ClearStatusStage>
    1208:	08 95       	ret

0000120a <main>:
 * main
 ******************************************************************************/
static void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    120a:	84 b7       	in	r24, 0x34	; 52
    120c:	87 7f       	andi	r24, 0xF7	; 247
    120e:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1210:	88 e1       	ldi	r24, 0x18	; 24
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	80 93 60 00 	sts	0x0060, r24
    121a:	10 92 60 00 	sts	0x0060, r1
    121e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	80 e8       	ldi	r24, 0x80	; 128
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	80 93 61 00 	sts	0x0061, r24
    122c:	90 93 61 00 	sts	0x0061, r25
    1230:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1232:	0e 94 42 0a 	call	0x1484	; 0x1484 <USB_Disable>

    USB_Init();
    1236:	0e 94 c9 0a 	call	0x1592	; 0x1592 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    123a:	80 91 e2 00 	lds	r24, 0x00E2
    123e:	84 60       	ori	r24, 0x04	; 4
    1240:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1244:	8d e2       	ldi	r24, 0x2D	; 45
    1246:	97 e0       	ldi	r25, 0x07	; 7
    1248:	0e 94 3c 1a 	call	0x3478	; 0x3478 <print_set_sendchar>

int main(void)  __attribute__ ((weak));
int main(void)
{
    SetupHardware();
    sei();
    124c:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    124e:	80 91 ba 01 	lds	r24, 0x01BA
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	e1 f7       	brne	.-8      	; 0x124e <main+0x44>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1256:	82 e6       	ldi	r24, 0x62	; 98
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>

    /* init modules */
    keyboard_init();
    125e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <keyboard_init>
    host_set_driver(&lufa_driver);
    1262:	89 e0       	ldi	r24, 0x09	; 9
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    126a:	81 e5       	ldi	r24, 0x51	; 81
    126c:	92 e0       	ldi	r25, 0x02	; 2
    126e:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1272:	80 91 ba 01 	lds	r24, 0x01BA
    1276:	85 30       	cpi	r24, 0x05	; 5
    1278:	69 f4       	brne	.+26     	; 0x1294 <main+0x8a>
            suspend_power_down();
    127a:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    127e:	80 91 b8 01 	lds	r24, 0x01B8
    1282:	88 23       	and	r24, r24
    1284:	b1 f3       	breq	.-20     	; 0x1272 <main+0x68>
    1286:	0e 94 65 1a 	call	0x34ca	; 0x34ca <suspend_wakeup_condition>
    128a:	88 23       	and	r24, r24
    128c:	91 f3       	breq	.-28     	; 0x1272 <main+0x68>
                    USB_Device_SendRemoteWakeup();
    128e:	0e 94 a6 09 	call	0x134c	; 0x134c <USB_Device_SendRemoteWakeup>
    1292:	ef cf       	rjmp	.-34     	; 0x1272 <main+0x68>
            }
        }

        keyboard_task();
    1294:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1298:	ec cf       	rjmp	.-40     	; 0x1272 <main+0x68>

0000129a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    129a:	29 2f       	mov	r18, r25
    129c:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    129e:	23 30       	cpi	r18, 0x03	; 3
    12a0:	31 05       	cpc	r19, r1
    12a2:	a9 f0       	breq	.+42     	; 0x12ce <CALLBACK_USB_GetDescriptor+0x34>
    12a4:	6c f4       	brge	.+26     	; 0x12c0 <CALLBACK_USB_GetDescriptor+0x26>
    12a6:	21 30       	cpi	r18, 0x01	; 1
    12a8:	31 05       	cpc	r19, r1
    12aa:	09 f4       	brne	.+2      	; 0x12ae <CALLBACK_USB_GetDescriptor+0x14>
    12ac:	42 c0       	rjmp	.+132    	; 0x1332 <CALLBACK_USB_GetDescriptor+0x98>
    12ae:	22 30       	cpi	r18, 0x02	; 2
    12b0:	31 05       	cpc	r19, r1
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <CALLBACK_USB_GetDescriptor+0x1c>
    12b4:	43 c0       	rjmp	.+134    	; 0x133c <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    12b6:	8b e5       	ldi	r24, 0x5B	; 91
    12b8:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    12ba:	21 ea       	ldi	r18, 0xA1	; 161
    12bc:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    12be:	42 c0       	rjmp	.+132    	; 0x1344 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    12c0:	21 32       	cpi	r18, 0x21	; 33
    12c2:	31 05       	cpc	r19, r1
    12c4:	c9 f0       	breq	.+50     	; 0x12f8 <CALLBACK_USB_GetDescriptor+0x5e>
    12c6:	22 32       	cpi	r18, 0x22	; 34
    12c8:	31 05       	cpc	r19, r1
    12ca:	19 f1       	breq	.+70     	; 0x1312 <CALLBACK_USB_GetDescriptor+0x78>
    12cc:	37 c0       	rjmp	.+110    	; 0x133c <CALLBACK_USB_GetDescriptor+0xa2>
    12ce:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	91 05       	cpc	r25, r1
    12d4:	41 f0       	breq	.+16     	; 0x12e6 <CALLBACK_USB_GetDescriptor+0x4c>
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	91 05       	cpc	r25, r1
    12da:	41 f0       	breq	.+16     	; 0x12ec <CALLBACK_USB_GetDescriptor+0x52>
    12dc:	89 2b       	or	r24, r25
    12de:	71 f5       	brne	.+92     	; 0x133c <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    12e0:	ed e9       	ldi	r30, 0x9D	; 157
    12e2:	f2 e0       	ldi	r31, 0x02	; 2
    12e4:	05 c0       	rjmp	.+10     	; 0x12f0 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    12e6:	e3 e8       	ldi	r30, 0x83	; 131
    12e8:	f2 e0       	ldi	r31, 0x02	; 2
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    12ec:	e3 e7       	ldi	r30, 0x73	; 115
    12ee:	f2 e0       	ldi	r31, 0x02	; 2
    12f0:	84 91       	lpm	r24, Z
    12f2:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    12f4:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    12f6:	26 c0       	rjmp	.+76     	; 0x1344 <CALLBACK_USB_GetDescriptor+0xaa>
    12f8:	63 30       	cpi	r22, 0x03	; 3
    12fa:	00 f5       	brcc	.+64     	; 0x133c <CALLBACK_USB_GetDescriptor+0xa2>
    12fc:	e6 2f       	mov	r30, r22
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	ee 0f       	add	r30, r30
    1302:	ff 1f       	adc	r31, r31
    1304:	e0 5e       	subi	r30, 0xE0	; 224
    1306:	fe 4f       	sbci	r31, 0xFE	; 254
    1308:	20 81       	ld	r18, Z
    130a:	31 81       	ldd	r19, Z+1	; 0x01
    130c:	89 e0       	ldi	r24, 0x09	; 9
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	19 c0       	rjmp	.+50     	; 0x1344 <CALLBACK_USB_GetDescriptor+0xaa>
    1312:	63 30       	cpi	r22, 0x03	; 3
    1314:	98 f4       	brcc	.+38     	; 0x133c <CALLBACK_USB_GetDescriptor+0xa2>
    1316:	e6 2f       	mov	r30, r22
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	df 01       	movw	r26, r30
    131c:	aa 0f       	add	r26, r26
    131e:	bb 1f       	adc	r27, r27
    1320:	a6 5e       	subi	r26, 0xE6	; 230
    1322:	be 4f       	sbci	r27, 0xFE	; 254
    1324:	2d 91       	ld	r18, X+
    1326:	3c 91       	ld	r19, X
    1328:	e9 5e       	subi	r30, 0xE9	; 233
    132a:	fe 4f       	sbci	r31, 0xFE	; 254
    132c:	80 81       	ld	r24, Z
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	09 c0       	rjmp	.+18     	; 0x1344 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1332:	82 e1       	ldi	r24, 0x12	; 18
    1334:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1336:	2c ef       	ldi	r18, 0xFC	; 252
    1338:	32 e0       	ldi	r19, 0x02	; 2
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <CALLBACK_USB_GetDescriptor+0xaa>
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1344:	fa 01       	movw	r30, r20
    1346:	31 83       	std	Z+1, r19	; 0x01
    1348:	20 83       	st	Z, r18
    return Size;
}
    134a:	08 95       	ret

0000134c <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    134c:	80 e1       	ldi	r24, 0x10	; 16
    134e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1350:	82 e1       	ldi	r24, 0x12	; 18
    1352:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1354:	09 b4       	in	r0, 0x29	; 41
    1356:	00 fe       	sbrs	r0, 0
    1358:	fd cf       	rjmp	.-6      	; 0x1354 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    135a:	80 91 d8 00 	lds	r24, 0x00D8
    135e:	8f 7d       	andi	r24, 0xDF	; 223
    1360:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1364:	80 91 e0 00 	lds	r24, 0x00E0
    1368:	82 60       	ori	r24, 0x02	; 2
    136a:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    136e:	80 91 e0 00 	lds	r24, 0x00E0
    1372:	81 fd       	sbrc	r24, 1
    1374:	fc cf       	rjmp	.-8      	; 0x136e <USB_Device_SendRemoteWakeup+0x22>
}
    1376:	08 95       	ret

00001378 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1378:	98 2f       	mov	r25, r24
    137a:	97 30       	cpi	r25, 0x07	; 7
    137c:	58 f5       	brcc	.+86     	; 0x13d4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    137e:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1382:	98 17       	cp	r25, r24
    1384:	39 f0       	breq	.+14     	; 0x1394 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1386:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    138a:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    138e:	50 91 f0 00 	lds	r21, 0x00F0
    1392:	03 c0       	rjmp	.+6      	; 0x139a <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1394:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1396:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1398:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    139a:	21 ff       	sbrs	r18, 1
    139c:	19 c0       	rjmp	.+50     	; 0x13d0 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    139e:	30 91 eb 00 	lds	r19, 0x00EB
    13a2:	3e 7f       	andi	r19, 0xFE	; 254
    13a4:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    13a8:	30 91 ed 00 	lds	r19, 0x00ED
    13ac:	3d 7f       	andi	r19, 0xFD	; 253
    13ae:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    13b2:	30 91 eb 00 	lds	r19, 0x00EB
    13b6:	31 60       	ori	r19, 0x01	; 1
    13b8:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    13bc:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    13c0:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    13c4:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    13c8:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    13cc:	27 ff       	sbrs	r18, 7
    13ce:	07 c0       	rjmp	.+14     	; 0x13de <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    13d0:	9f 5f       	subi	r25, 0xFF	; 255
    13d2:	d3 cf       	rjmp	.-90     	; 0x137a <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13d4:	8f 70       	andi	r24, 0x0F	; 15
    13d6:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    13de:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    13e0:	08 95       	ret

000013e2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    13e2:	80 91 bb 01 	lds	r24, 0x01BB
    13e6:	87 fd       	sbrc	r24, 7
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13ea:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    13ee:	80 ff       	sbrs	r24, 0
    13f0:	0e c0       	rjmp	.+28     	; 0x140e <Endpoint_ClearStatusStage+0x2c>
    13f2:	12 c0       	rjmp	.+36     	; 0x1418 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13f4:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    13f8:	82 fd       	sbrc	r24, 2
    13fa:	05 c0       	rjmp	.+10     	; 0x1406 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    13fc:	80 91 ba 01 	lds	r24, 0x01BA
    1400:	81 11       	cpse	r24, r1
    1402:	f8 cf       	rjmp	.-16     	; 0x13f4 <Endpoint_ClearStatusStage+0x12>
    1404:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1406:	80 91 e8 00 	lds	r24, 0x00E8
    140a:	8b 77       	andi	r24, 0x7B	; 123
    140c:	08 c0       	rjmp	.+16     	; 0x141e <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    140e:	80 91 ba 01 	lds	r24, 0x01BA
    1412:	81 11       	cpse	r24, r1
    1414:	ea cf       	rjmp	.-44     	; 0x13ea <Endpoint_ClearStatusStage+0x8>
    1416:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1418:	80 91 e8 00 	lds	r24, 0x00E8
    141c:	8e 77       	andi	r24, 0x7E	; 126
    141e:	80 93 e8 00 	sts	0x00E8, r24
    1422:	08 95       	ret

00001424 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1424:	80 91 e4 00 	lds	r24, 0x00E4
    1428:	90 91 e5 00 	lds	r25, 0x00E5
    142c:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    142e:	20 91 ec 00 	lds	r18, 0x00EC
    1432:	20 ff       	sbrs	r18, 0
    1434:	21 c0       	rjmp	.+66     	; 0x1478 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1436:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    143a:	20 fd       	sbrc	r18, 0
    143c:	21 c0       	rjmp	.+66     	; 0x1480 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    143e:	20 91 ba 01 	lds	r18, 0x01BA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1442:	22 23       	and	r18, r18
    1444:	89 f0       	breq	.+34     	; 0x1468 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1446:	25 30       	cpi	r18, 0x05	; 5
    1448:	89 f0       	breq	.+34     	; 0x146c <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    144a:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    144e:	25 fd       	sbrc	r18, 5
    1450:	0f c0       	rjmp	.+30     	; 0x1470 <Endpoint_WaitUntilReady+0x4c>
    1452:	20 91 e4 00 	lds	r18, 0x00E4
    1456:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    145a:	28 17       	cp	r18, r24
    145c:	39 07       	cpc	r19, r25
    145e:	39 f3       	breq	.-50     	; 0x142e <Endpoint_WaitUntilReady+0xa>
    1460:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1462:	41 f0       	breq	.+16     	; 0x1474 <Endpoint_WaitUntilReady+0x50>
    1464:	c9 01       	movw	r24, r18
    1466:	e3 cf       	rjmp	.-58     	; 0x142e <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    146c:	83 e0       	ldi	r24, 0x03	; 3
    146e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1474:	84 e0       	ldi	r24, 0x04	; 4
    1476:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1478:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    147c:	22 ff       	sbrs	r18, 2
    147e:	df cf       	rjmp	.-66     	; 0x143e <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	08 95       	ret

00001484 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1484:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1488:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    148c:	e0 ee       	ldi	r30, 0xE0	; 224
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	81 60       	ori	r24, 0x01	; 1
    1494:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1496:	e8 ed       	ldi	r30, 0xD8	; 216
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8f 77       	andi	r24, 0x7F	; 127
    149e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    14a0:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    14a2:	a7 ed       	ldi	r26, 0xD7	; 215
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	8c 91       	ld	r24, X
    14a8:	8e 7f       	andi	r24, 0xFE	; 254
    14aa:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    14ac:	80 81       	ld	r24, Z
    14ae:	8f 7e       	andi	r24, 0xEF	; 239
    14b0:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    14b2:	10 92 b9 01 	sts	0x01B9, r1
    14b6:	08 95       	ret

000014b8 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	00 d0       	rcall	.+0      	; 0x14be <USB_ResetInterface+0x6>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    14c2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    14c6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    14ca:	80 91 d8 00 	lds	r24, 0x00D8
    14ce:	8f 77       	andi	r24, 0x7F	; 127
    14d0:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    14d4:	80 91 d8 00 	lds	r24, 0x00D8
    14d8:	80 68       	ori	r24, 0x80	; 128
    14da:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    14de:	80 91 d8 00 	lds	r24, 0x00D8
    14e2:	8f 7d       	andi	r24, 0xDF	; 223
    14e4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    14e8:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    14ea:	10 92 ba 01 	sts	0x01BA, r1
	USB_Device_ConfigurationNumber  = 0;
    14ee:	10 92 b6 01 	sts	0x01B6, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    14f2:	10 92 b8 01 	sts	0x01B8, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    14f6:	10 92 b7 01 	sts	0x01B7, r1
		  USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
		else
		  USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
	}
	#else
	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr) != NO_DESCRIPTOR)
    14fa:	ae 01       	movw	r20, r28
    14fc:	4f 5f       	subi	r20, 0xFF	; 255
    14fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	0e 94 4d 09 	call	0x129a	; 0x129a <CALLBACK_USB_GetDescriptor>
    150a:	89 2b       	or	r24, r25
    150c:	31 f0       	breq	.+12     	; 0x151a <USB_ResetInterface+0x62>
		#if defined(USE_RAM_DESCRIPTORS)
		USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
		#elif defined(USE_EEPROM_DESCRIPTORS)
		USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
		#else
		USB_Device_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
    150e:	e9 81       	ldd	r30, Y+1	; 0x01
    1510:	fa 81       	ldd	r31, Y+2	; 0x02
    1512:	37 96       	adiw	r30, 0x07	; 7
    1514:	e4 91       	lpm	r30, Z
    1516:	e0 93 14 01 	sts	0x0114, r30
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    151a:	80 91 e0 00 	lds	r24, 0x00E0
    151e:	8b 7f       	andi	r24, 0xFB	; 251
    1520:	80 93 e0 00 	sts	0x00E0, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1524:	80 91 d8 00 	lds	r24, 0x00D8
    1528:	81 60       	ori	r24, 0x01	; 1
    152a:	80 93 d8 00 	sts	0x00D8, r24
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUSTI);
	#endif

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    152e:	20 91 14 01 	lds	r18, 0x0114
    1532:	30 e0       	ldi	r19, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1534:	88 e0       	ldi	r24, 0x08	; 8
    1536:	90 e0       	ldi	r25, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1538:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    153a:	82 17       	cp	r24, r18
    153c:	93 07       	cpc	r25, r19
    153e:	20 f4       	brcc	.+8      	; 0x1548 <USB_ResetInterface+0x90>
				{
					MaskVal++;
    1540:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	f9 cf       	rjmp	.-14     	; 0x153a <USB_ResetInterface+0x82>
				}

				return (MaskVal << EPSIZE0);
    1548:	42 95       	swap	r20
    154a:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    154c:	42 60       	ori	r20, 0x02	; 2
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	0e 94 bc 09 	call	0x1378	; 0x1378 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1556:	80 91 e1 00 	lds	r24, 0x00E1
    155a:	8e 7f       	andi	r24, 0xFE	; 254
    155c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1560:	80 91 e2 00 	lds	r24, 0x00E2
    1564:	81 60       	ori	r24, 0x01	; 1
    1566:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    156a:	80 91 e2 00 	lds	r24, 0x00E2
    156e:	88 60       	ori	r24, 0x08	; 8
    1570:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1574:	80 91 e0 00 	lds	r24, 0x00E0
    1578:	8e 7f       	andi	r24, 0xFE	; 254
    157a:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    157e:	80 91 d8 00 	lds	r24, 0x00D8
    1582:	80 61       	ori	r24, 0x10	; 16
    1584:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret

00001592 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1592:	e7 ed       	ldi	r30, 0xD7	; 215
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	81 60       	ori	r24, 0x01	; 1
    159a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    159c:	84 e0       	ldi	r24, 0x04	; 4
    159e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 b9 01 	sts	0x01B9, r24

	USB_ResetInterface();
    15a6:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <USB_ResetInterface>

000015aa <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    15aa:	e8 ed       	ldi	r30, 0xD8	; 216
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	8e 7f       	andi	r24, 0xFE	; 254
    15b2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    15b4:	10 92 e2 00 	sts	0x00E2, r1
    15b8:	08 95       	ret

000015ba <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    15ba:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    15be:	10 92 e1 00 	sts	0x00E1, r1
    15c2:	08 95       	ret

000015c4 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    15c4:	1f 92       	push	r1
    15c6:	0f 92       	push	r0
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	0f 92       	push	r0
    15cc:	11 24       	eor	r1, r1
    15ce:	2f 93       	push	r18
    15d0:	3f 93       	push	r19
    15d2:	4f 93       	push	r20
    15d4:	5f 93       	push	r21
    15d6:	6f 93       	push	r22
    15d8:	7f 93       	push	r23
    15da:	8f 93       	push	r24
    15dc:	9f 93       	push	r25
    15de:	af 93       	push	r26
    15e0:	bf 93       	push	r27
    15e2:	ef 93       	push	r30
    15e4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    15e6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    15ea:	82 ff       	sbrs	r24, 2
    15ec:	0b c0       	rjmp	.+22     	; 0x1604 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    15ee:	80 91 e2 00 	lds	r24, 0x00E2
    15f2:	82 ff       	sbrs	r24, 2
    15f4:	07 c0       	rjmp	.+14     	; 0x1604 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    15f6:	80 91 e1 00 	lds	r24, 0x00E1
    15fa:	8b 7f       	andi	r24, 0xFB	; 251
    15fc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1600:	0e 94 1d 08 	call	0x103a	; 0x103a <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1604:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1608:	80 ff       	sbrs	r24, 0
    160a:	1f c0       	rjmp	.+62     	; 0x164a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    160c:	80 91 d8 00 	lds	r24, 0x00D8
    1610:	80 ff       	sbrs	r24, 0
    1612:	1b c0       	rjmp	.+54     	; 0x164a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1614:	80 91 da 00 	lds	r24, 0x00DA
    1618:	8e 7f       	andi	r24, 0xFE	; 254
    161a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    161e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1622:	80 ff       	sbrs	r24, 0
    1624:	0d c0       	rjmp	.+26     	; 0x1640 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1626:	80 e1       	ldi	r24, 0x10	; 16
    1628:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    162a:	82 e1       	ldi	r24, 0x12	; 18
    162c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    162e:	09 b4       	in	r0, 0x29	; 41
    1630:	00 fe       	sbrs	r0, 0
    1632:	fd cf       	rjmp	.-6      	; 0x162e <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	80 93 ba 01 	sts	0x01BA, r24
			EVENT_USB_Device_Connect();
    163a:	0e 94 17 08 	call	0x102e	; 0x102e <EVENT_USB_Device_Connect>
    163e:	05 c0       	rjmp	.+10     	; 0x164a <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1640:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1642:	10 92 ba 01 	sts	0x01BA, r1
			EVENT_USB_Device_Disconnect();
    1646:	0e 94 18 08 	call	0x1030	; 0x1030 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    164a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    164e:	80 ff       	sbrs	r24, 0
    1650:	19 c0       	rjmp	.+50     	; 0x1684 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1652:	80 91 e2 00 	lds	r24, 0x00E2
    1656:	80 ff       	sbrs	r24, 0
    1658:	15 c0       	rjmp	.+42     	; 0x1684 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    165a:	80 91 e2 00 	lds	r24, 0x00E2
    165e:	8e 7f       	andi	r24, 0xFE	; 254
    1660:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1664:	80 91 e2 00 	lds	r24, 0x00E2
    1668:	80 61       	ori	r24, 0x10	; 16
    166a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    166e:	80 91 d8 00 	lds	r24, 0x00D8
    1672:	80 62       	ori	r24, 0x20	; 32
    1674:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1678:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    167a:	85 e0       	ldi	r24, 0x05	; 5
    167c:	80 93 ba 01 	sts	0x01BA, r24
		EVENT_USB_Device_Suspend();
    1680:	0e 94 1a 08 	call	0x1034	; 0x1034 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1684:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1688:	84 ff       	sbrs	r24, 4
    168a:	2e c0       	rjmp	.+92     	; 0x16e8 <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    168c:	80 91 e2 00 	lds	r24, 0x00E2
    1690:	84 ff       	sbrs	r24, 4
    1692:	2a c0       	rjmp	.+84     	; 0x16e8 <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1694:	80 e1       	ldi	r24, 0x10	; 16
    1696:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1698:	82 e1       	ldi	r24, 0x12	; 18
    169a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    169c:	09 b4       	in	r0, 0x29	; 41
    169e:	00 fe       	sbrs	r0, 0
    16a0:	fd cf       	rjmp	.-6      	; 0x169c <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    16a2:	80 91 d8 00 	lds	r24, 0x00D8
    16a6:	8f 7d       	andi	r24, 0xDF	; 223
    16a8:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    16ac:	80 91 e1 00 	lds	r24, 0x00E1
    16b0:	8f 7e       	andi	r24, 0xEF	; 239
    16b2:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    16b6:	80 91 e2 00 	lds	r24, 0x00E2
    16ba:	8f 7e       	andi	r24, 0xEF	; 239
    16bc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    16c0:	80 91 e2 00 	lds	r24, 0x00E2
    16c4:	81 60       	ori	r24, 0x01	; 1
    16c6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    16ca:	80 91 b6 01 	lds	r24, 0x01B6
    16ce:	81 11       	cpse	r24, r1
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    16d2:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    16d6:	87 ff       	sbrs	r24, 7
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <__vector_10+0x11a>
    16da:	84 e0       	ldi	r24, 0x04	; 4
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <__vector_10+0x11c>
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	80 93 ba 01 	sts	0x01BA, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    16e4:	0e 94 1b 08 	call	0x1036	; 0x1036 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    16e8:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    16ec:	83 ff       	sbrs	r24, 3
    16ee:	38 c0       	rjmp	.+112    	; 0x1760 <__vector_10+0x19c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    16f0:	80 91 e2 00 	lds	r24, 0x00E2
    16f4:	83 ff       	sbrs	r24, 3
    16f6:	34 c0       	rjmp	.+104    	; 0x1760 <__vector_10+0x19c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    16f8:	80 91 e1 00 	lds	r24, 0x00E1
    16fc:	87 7f       	andi	r24, 0xF7	; 247
    16fe:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1702:	82 e0       	ldi	r24, 0x02	; 2
    1704:	80 93 ba 01 	sts	0x01BA, r24
		USB_Device_ConfigurationNumber = 0;
    1708:	10 92 b6 01 	sts	0x01B6, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    170c:	80 91 e1 00 	lds	r24, 0x00E1
    1710:	8e 7f       	andi	r24, 0xFE	; 254
    1712:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1716:	80 91 e2 00 	lds	r24, 0x00E2
    171a:	8e 7f       	andi	r24, 0xFE	; 254
    171c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1720:	80 91 e2 00 	lds	r24, 0x00E2
    1724:	80 61       	ori	r24, 0x10	; 16
    1726:	80 93 e2 00 	sts	0x00E2, r24

		USB_INT_Clear(USB_INT_SUSPI);
		USB_INT_Disable(USB_INT_SUSPI);
		USB_INT_Enable(USB_INT_WAKEUPI);

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    172a:	20 91 14 01 	lds	r18, 0x0114
    172e:	30 e0       	ldi	r19, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1730:	88 e0       	ldi	r24, 0x08	; 8
    1732:	90 e0       	ldi	r25, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1734:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1736:	82 17       	cp	r24, r18
    1738:	93 07       	cpc	r25, r19
    173a:	20 f4       	brcc	.+8      	; 0x1744 <__vector_10+0x180>
				{
					MaskVal++;
    173c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	f9 cf       	rjmp	.-14     	; 0x1736 <__vector_10+0x172>
				}

				return (MaskVal << EPSIZE0);
    1744:	42 95       	swap	r20
    1746:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1748:	42 60       	ori	r20, 0x02	; 2
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	0e 94 bc 09 	call	0x1378	; 0x1378 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1752:	80 91 f0 00 	lds	r24, 0x00F0
    1756:	88 60       	ori	r24, 0x08	; 8
    1758:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    175c:	0e 94 19 08 	call	0x1032	; 0x1032 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1760:	ff 91       	pop	r31
    1762:	ef 91       	pop	r30
    1764:	bf 91       	pop	r27
    1766:	af 91       	pop	r26
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	7f 91       	pop	r23
    176e:	6f 91       	pop	r22
    1770:	5f 91       	pop	r21
    1772:	4f 91       	pop	r20
    1774:	3f 91       	pop	r19
    1776:	2f 91       	pop	r18
    1778:	0f 90       	pop	r0
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	0f 90       	pop	r0
    177e:	1f 90       	pop	r1
    1780:	18 95       	reti

00001782 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1782:	1f 92       	push	r1
    1784:	0f 92       	push	r0
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	0f 92       	push	r0
    178a:	11 24       	eor	r1, r1
    178c:	2f 93       	push	r18
    178e:	3f 93       	push	r19
    1790:	4f 93       	push	r20
    1792:	5f 93       	push	r21
    1794:	6f 93       	push	r22
    1796:	7f 93       	push	r23
    1798:	8f 93       	push	r24
    179a:	9f 93       	push	r25
    179c:	af 93       	push	r26
    179e:	bf 93       	push	r27
    17a0:	cf 93       	push	r28
    17a2:	ef 93       	push	r30
    17a4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    17a6:	c0 91 e9 00 	lds	r28, 0x00E9
    17aa:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    17ac:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17b0:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    17b4:	80 91 f0 00 	lds	r24, 0x00F0
    17b8:	87 7f       	andi	r24, 0xF7	; 247
    17ba:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    17be:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    17c0:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <USB_Device_ProcessControlRequest>
    17c4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    17c8:	80 91 f0 00 	lds	r24, 0x00F0
    17cc:	88 60       	ori	r24, 0x08	; 8
    17ce:	80 93 f0 00 	sts	0x00F0, r24
    17d2:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    17d6:	ff 91       	pop	r31
    17d8:	ef 91       	pop	r30
    17da:	cf 91       	pop	r28
    17dc:	bf 91       	pop	r27
    17de:	af 91       	pop	r26
    17e0:	9f 91       	pop	r25
    17e2:	8f 91       	pop	r24
    17e4:	7f 91       	pop	r23
    17e6:	6f 91       	pop	r22
    17e8:	5f 91       	pop	r21
    17ea:	4f 91       	pop	r20
    17ec:	3f 91       	pop	r19
    17ee:	2f 91       	pop	r18
    17f0:	0f 90       	pop	r0
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	0f 90       	pop	r0
    17f6:	1f 90       	pop	r1
    17f8:	18 95       	reti

000017fa <Endpoint_Write_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    17fa:	cf 92       	push	r12
    17fc:	df 92       	push	r13
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	7c 01       	movw	r14, r24
    180c:	8b 01       	movw	r16, r22
    180e:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1810:	0e 94 12 0a 	call	0x1424	; 0x1424 <Endpoint_WaitUntilReady>
    1814:	81 11       	cpse	r24, r1
    1816:	31 c0       	rjmp	.+98     	; 0x187a <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1818:	20 97       	sbiw	r28, 0x00	; 0
    181a:	31 f0       	breq	.+12     	; 0x1828 <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    181c:	88 81       	ld	r24, Y
    181e:	99 81       	ldd	r25, Y+1	; 0x01
    1820:	08 1b       	sub	r16, r24
    1822:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1824:	e8 0e       	add	r14, r24
    1826:	f9 1e       	adc	r15, r25
// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1828:	c1 2c       	mov	r12, r1
    182a:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    182c:	01 15       	cp	r16, r1
    182e:	11 05       	cpc	r17, r1
    1830:	19 f1       	breq	.+70     	; 0x1878 <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1832:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1836:	85 fd       	sbrc	r24, 5
    1838:	14 c0       	rjmp	.+40     	; 0x1862 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    183a:	80 91 e8 00 	lds	r24, 0x00E8
    183e:	8e 77       	andi	r24, 0x7E	; 126
    1840:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1844:	20 97       	sbiw	r28, 0x00	; 0
    1846:	41 f0       	breq	.+16     	; 0x1858 <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    1848:	88 81       	ld	r24, Y
    184a:	99 81       	ldd	r25, Y+1	; 0x01
    184c:	8c 0d       	add	r24, r12
    184e:	9d 1d       	adc	r25, r13
    1850:	99 83       	std	Y+1, r25	; 0x01
    1852:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1854:	85 e0       	ldi	r24, 0x05	; 5
    1856:	11 c0       	rjmp	.+34     	; 0x187a <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1858:	0e 94 12 0a 	call	0x1424	; 0x1424 <Endpoint_WaitUntilReady>
    185c:	88 23       	and	r24, r24
    185e:	31 f3       	breq	.-52     	; 0x182c <Endpoint_Write_Stream_LE+0x32>
    1860:	0c c0       	rjmp	.+24     	; 0x187a <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1862:	f7 01       	movw	r30, r14
    1864:	81 91       	ld	r24, Z+
    1866:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1868:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    186c:	01 50       	subi	r16, 0x01	; 1
    186e:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1870:	ff ef       	ldi	r31, 0xFF	; 255
    1872:	cf 1a       	sub	r12, r31
    1874:	df 0a       	sbc	r13, r31
    1876:	da cf       	rjmp	.-76     	; 0x182c <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1878:	80 e0       	ldi	r24, 0x00	; 0
}
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	df 90       	pop	r13
    1888:	cf 90       	pop	r12
    188a:	08 95       	ret

0000188c <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    188c:	20 91 c1 01 	lds	r18, 0x01C1
    1890:	30 91 c2 01 	lds	r19, 0x01C2
    1894:	26 17       	cp	r18, r22
    1896:	37 07       	cpc	r19, r23
    1898:	48 f0       	brcs	.+18     	; 0x18ac <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    189a:	61 15       	cp	r22, r1
    189c:	71 05       	cpc	r23, r1
    189e:	39 f4       	brne	.+14     	; 0x18ae <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18a0:	20 91 e8 00 	lds	r18, 0x00E8
    18a4:	2e 77       	andi	r18, 0x7E	; 126
    18a6:	20 93 e8 00 	sts	0x00E8, r18
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <Endpoint_Write_Control_Stream_LE+0x22>
    18ac:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18ae:	40 e0       	ldi	r20, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18b0:	61 15       	cp	r22, r1
    18b2:	71 05       	cpc	r23, r1
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <Endpoint_Write_Control_Stream_LE+0x2c>
    18b6:	44 c0       	rjmp	.+136    	; 0x1940 <Endpoint_Write_Control_Stream_LE+0xb4>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18b8:	20 91 ba 01 	lds	r18, 0x01BA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18bc:	22 23       	and	r18, r18
    18be:	09 f4       	brne	.+2      	; 0x18c2 <Endpoint_Write_Control_Stream_LE+0x36>
    18c0:	4b c0       	rjmp	.+150    	; 0x1958 <Endpoint_Write_Control_Stream_LE+0xcc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18c2:	25 30       	cpi	r18, 0x05	; 5
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <Endpoint_Write_Control_Stream_LE+0x3c>
    18c6:	4a c0       	rjmp	.+148    	; 0x195c <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18c8:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18cc:	23 fd       	sbrc	r18, 3
    18ce:	42 c0       	rjmp	.+132    	; 0x1954 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18d0:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18d4:	22 ff       	sbrs	r18, 2
    18d6:	06 c0       	rjmp	.+12     	; 0x18e4 <Endpoint_Write_Control_Stream_LE+0x58>
    18d8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    18dc:	82 ff       	sbrs	r24, 2
    18de:	33 c0       	rjmp	.+102    	; 0x1946 <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18e4:	20 91 e8 00 	lds	r18, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    18e8:	20 ff       	sbrs	r18, 0
    18ea:	e2 cf       	rjmp	.-60     	; 0x18b0 <Endpoint_Write_Control_Stream_LE+0x24>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    18ec:	40 91 f3 00 	lds	r20, 0x00F3
    18f0:	20 91 f2 00 	lds	r18, 0x00F2
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	34 2b       	or	r19, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18f8:	fc 01       	movw	r30, r24
    18fa:	28 1b       	sub	r18, r24
    18fc:	39 0b       	sbc	r19, r25
    18fe:	cf 01       	movw	r24, r30
    1900:	82 0f       	add	r24, r18
    1902:	93 1f       	adc	r25, r19
    1904:	a0 91 14 01 	lds	r26, 0x0114
    1908:	61 15       	cp	r22, r1
    190a:	71 05       	cpc	r23, r1
    190c:	59 f0       	breq	.+22     	; 0x1924 <Endpoint_Write_Control_Stream_LE+0x98>
    190e:	4a 2f       	mov	r20, r26
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	84 17       	cp	r24, r20
    1914:	95 07       	cpc	r25, r21
    1916:	30 f4       	brcc	.+12     	; 0x1924 <Endpoint_Write_Control_Stream_LE+0x98>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1918:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    191a:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    191e:	61 50       	subi	r22, 0x01	; 1
    1920:	71 09       	sbc	r23, r1
    1922:	ed cf       	rjmp	.-38     	; 0x18fe <Endpoint_Write_Control_Stream_LE+0x72>
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1924:	2a 2f       	mov	r18, r26
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	41 e0       	ldi	r20, 0x01	; 1
    192a:	82 17       	cp	r24, r18
    192c:	93 07       	cpc	r25, r19
    192e:	09 f0       	breq	.+2      	; 0x1932 <Endpoint_Write_Control_Stream_LE+0xa6>
    1930:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1932:	80 91 e8 00 	lds	r24, 0x00E8
    1936:	8e 77       	andi	r24, 0x7E	; 126
    1938:	80 93 e8 00 	sts	0x00E8, r24
    193c:	cf 01       	movw	r24, r30
    193e:	b8 cf       	rjmp	.-144    	; 0x18b0 <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1940:	41 11       	cpse	r20, r1
    1942:	ba cf       	rjmp	.-140    	; 0x18b8 <Endpoint_Write_Control_Stream_LE+0x2c>
    1944:	c9 cf       	rjmp	.-110    	; 0x18d8 <Endpoint_Write_Control_Stream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1946:	80 91 ba 01 	lds	r24, 0x01BA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    194a:	88 23       	and	r24, r24
    194c:	29 f0       	breq	.+10     	; 0x1958 <Endpoint_Write_Control_Stream_LE+0xcc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    194e:	85 30       	cpi	r24, 0x05	; 5
    1950:	19 f6       	brne	.-122    	; 0x18d8 <Endpoint_Write_Control_Stream_LE+0x4c>
    1952:	04 c0       	rjmp	.+8      	; 0x195c <Endpoint_Write_Control_Stream_LE+0xd0>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1958:	82 e0       	ldi	r24, 0x02	; 2
    195a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    195c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    195e:	08 95       	ret

00001960 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1960:	20 91 c1 01 	lds	r18, 0x01C1
    1964:	30 91 c2 01 	lds	r19, 0x01C2
    1968:	26 17       	cp	r18, r22
    196a:	37 07       	cpc	r19, r23
    196c:	48 f0       	brcs	.+18     	; 0x1980 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    196e:	61 15       	cp	r22, r1
    1970:	71 05       	cpc	r23, r1
    1972:	39 f4       	brne	.+14     	; 0x1982 <Endpoint_Write_Control_PStream_LE+0x22>
    1974:	20 91 e8 00 	lds	r18, 0x00E8
    1978:	2e 77       	andi	r18, 0x7E	; 126
    197a:	20 93 e8 00 	sts	0x00E8, r18
    197e:	01 c0       	rjmp	.+2      	; 0x1982 <Endpoint_Write_Control_PStream_LE+0x22>
    1980:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1982:	40 e0       	ldi	r20, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1984:	61 15       	cp	r22, r1
    1986:	71 05       	cpc	r23, r1
    1988:	09 f4       	brne	.+2      	; 0x198c <Endpoint_Write_Control_PStream_LE+0x2c>
    198a:	45 c0       	rjmp	.+138    	; 0x1a16 <Endpoint_Write_Control_PStream_LE+0xb6>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    198c:	20 91 ba 01 	lds	r18, 0x01BA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1990:	22 23       	and	r18, r18
    1992:	09 f4       	brne	.+2      	; 0x1996 <Endpoint_Write_Control_PStream_LE+0x36>
    1994:	4d c0       	rjmp	.+154    	; 0x1a30 <Endpoint_Write_Control_PStream_LE+0xd0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1996:	25 30       	cpi	r18, 0x05	; 5
    1998:	09 f4       	brne	.+2      	; 0x199c <Endpoint_Write_Control_PStream_LE+0x3c>
    199a:	4c c0       	rjmp	.+152    	; 0x1a34 <Endpoint_Write_Control_PStream_LE+0xd4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    199c:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19a0:	23 fd       	sbrc	r18, 3
    19a2:	44 c0       	rjmp	.+136    	; 0x1a2c <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19a4:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    19a8:	22 ff       	sbrs	r18, 2
    19aa:	06 c0       	rjmp	.+12     	; 0x19b8 <Endpoint_Write_Control_PStream_LE+0x58>
    19ac:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19b0:	82 ff       	sbrs	r24, 2
    19b2:	34 c0       	rjmp	.+104    	; 0x1a1c <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19b8:	20 91 e8 00 	lds	r18, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    19bc:	20 ff       	sbrs	r18, 0
    19be:	e2 cf       	rjmp	.-60     	; 0x1984 <Endpoint_Write_Control_PStream_LE+0x24>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    19c0:	40 91 f3 00 	lds	r20, 0x00F3
    19c4:	20 91 f2 00 	lds	r18, 0x00F2
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	34 2b       	or	r19, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19cc:	fc 01       	movw	r30, r24
    19ce:	28 1b       	sub	r18, r24
    19d0:	39 0b       	sbc	r19, r25
    19d2:	c9 01       	movw	r24, r18
    19d4:	8e 0f       	add	r24, r30
    19d6:	9f 1f       	adc	r25, r31
    19d8:	a0 91 14 01 	lds	r26, 0x0114
    19dc:	61 15       	cp	r22, r1
    19de:	71 05       	cpc	r23, r1
    19e0:	61 f0       	breq	.+24     	; 0x19fa <Endpoint_Write_Control_PStream_LE+0x9a>
    19e2:	4a 2f       	mov	r20, r26
    19e4:	50 e0       	ldi	r21, 0x00	; 0
    19e6:	84 17       	cp	r24, r20
    19e8:	95 07       	cpc	r25, r21
    19ea:	38 f4       	brcc	.+14     	; 0x19fa <Endpoint_Write_Control_PStream_LE+0x9a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    19ec:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19ee:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    19f2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    19f4:	61 50       	subi	r22, 0x01	; 1
    19f6:	71 09       	sbc	r23, r1
    19f8:	ec cf       	rjmp	.-40     	; 0x19d2 <Endpoint_Write_Control_PStream_LE+0x72>
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    19fa:	2a 2f       	mov	r18, r26
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	41 e0       	ldi	r20, 0x01	; 1
    1a00:	82 17       	cp	r24, r18
    1a02:	93 07       	cpc	r25, r19
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <Endpoint_Write_Control_PStream_LE+0xa8>
    1a06:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a08:	80 91 e8 00 	lds	r24, 0x00E8
    1a0c:	8e 77       	andi	r24, 0x7E	; 126
    1a0e:	80 93 e8 00 	sts	0x00E8, r24
    1a12:	cf 01       	movw	r24, r30
    1a14:	b7 cf       	rjmp	.-146    	; 0x1984 <Endpoint_Write_Control_PStream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a16:	41 11       	cpse	r20, r1
    1a18:	b9 cf       	rjmp	.-142    	; 0x198c <Endpoint_Write_Control_PStream_LE+0x2c>
    1a1a:	c8 cf       	rjmp	.-112    	; 0x19ac <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a1c:	80 91 ba 01 	lds	r24, 0x01BA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a20:	88 23       	and	r24, r24
    1a22:	31 f0       	breq	.+12     	; 0x1a30 <Endpoint_Write_Control_PStream_LE+0xd0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a24:	85 30       	cpi	r24, 0x05	; 5
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <Endpoint_Write_Control_PStream_LE+0xca>
    1a28:	c1 cf       	rjmp	.-126    	; 0x19ac <Endpoint_Write_Control_PStream_LE+0x4c>
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <Endpoint_Write_Control_PStream_LE+0xd4>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a34:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a36:	08 95       	ret

00001a38 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	aa 97       	sbiw	r28, 0x2a	; 42
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	eb eb       	ldi	r30, 0xBB	; 187
    1a52:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1a54:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1a58:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1a5a:	21 e0       	ldi	r18, 0x01	; 1
    1a5c:	e3 3c       	cpi	r30, 0xC3	; 195
    1a5e:	f2 07       	cpc	r31, r18
    1a60:	c9 f7       	brne	.-14     	; 0x1a54 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1a62:	0e 94 5f 08 	call	0x10be	; 0x10be <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a66:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1a6a:	83 ff       	sbrs	r24, 3
    1a6c:	2c c1       	rjmp	.+600    	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1a6e:	20 91 bb 01 	lds	r18, 0x01BB

		switch (USB_ControlRequest.bRequest)
    1a72:	30 91 bc 01 	lds	r19, 0x01BC
    1a76:	83 2f       	mov	r24, r19
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	8a 30       	cpi	r24, 0x0A	; 10
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	08 f0       	brcs	.+2      	; 0x1a82 <USB_Device_ProcessControlRequest+0x4a>
    1a80:	22 c1       	rjmp	.+580    	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
    1a82:	fc 01       	movw	r30, r24
    1a84:	ea 5a       	subi	r30, 0xAA	; 170
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1a8c:	20 38       	cpi	r18, 0x80	; 128
    1a8e:	81 f0       	breq	.+32     	; 0x1ab0 <USB_Device_ProcessControlRequest+0x78>
    1a90:	22 38       	cpi	r18, 0x82	; 130
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <USB_Device_ProcessControlRequest+0x5e>
    1a94:	18 c1       	rjmp	.+560    	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a96:	80 91 bf 01 	lds	r24, 0x01BF
    1a9a:	8f 70       	andi	r24, 0x0F	; 15
    1a9c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1aa0:	80 91 eb 00 	lds	r24, 0x00EB
    1aa4:	85 fb       	bst	r24, 5
    1aa6:	88 27       	eor	r24, r24
    1aa8:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1aaa:	10 92 e9 00 	sts	0x00E9, r1
    1aae:	06 c0       	rjmp	.+12     	; 0x1abc <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1ab0:	80 91 b7 01 	lds	r24, 0x01B7
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1ab4:	90 91 b8 01 	lds	r25, 0x01B8
    1ab8:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1aba:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1abc:	90 91 e8 00 	lds	r25, 0x00E8
    1ac0:	97 7f       	andi	r25, 0xF7	; 247
    1ac2:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1ac6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1aca:	10 92 f1 00 	sts	0x00F1, r1
    1ace:	c7 c0       	rjmp	.+398    	; 0x1c5e <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ad0:	82 2f       	mov	r24, r18
    1ad2:	8d 7f       	andi	r24, 0xFD	; 253
    1ad4:	09 f0       	breq	.+2      	; 0x1ad8 <USB_Device_ProcessControlRequest+0xa0>
    1ad6:	f7 c0       	rjmp	.+494    	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1ad8:	22 23       	and	r18, r18
    1ada:	19 f0       	breq	.+6      	; 0x1ae2 <USB_Device_ProcessControlRequest+0xaa>
    1adc:	22 30       	cpi	r18, 0x02	; 2
    1ade:	61 f0       	breq	.+24     	; 0x1af8 <USB_Device_ProcessControlRequest+0xc0>
    1ae0:	f2 c0       	rjmp	.+484    	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1ae2:	80 91 bd 01 	lds	r24, 0x01BD
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	09 f0       	breq	.+2      	; 0x1aec <USB_Device_ProcessControlRequest+0xb4>
    1aea:	ed c0       	rjmp	.+474    	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1aec:	33 30       	cpi	r19, 0x03	; 3
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <USB_Device_ProcessControlRequest+0xba>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	80 93 b8 01 	sts	0x01B8, r24
    1af6:	28 c0       	rjmp	.+80     	; 0x1b48 <USB_Device_ProcessControlRequest+0x110>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1af8:	80 91 bd 01 	lds	r24, 0x01BD
    1afc:	81 11       	cpse	r24, r1
    1afe:	24 c0       	rjmp	.+72     	; 0x1b48 <USB_Device_ProcessControlRequest+0x110>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1b00:	20 91 bf 01 	lds	r18, 0x01BF
    1b04:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <USB_Device_ProcessControlRequest+0xd2>
    1b08:	de c0       	rjmp	.+444    	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b0a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1b0e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1b12:	80 ff       	sbrs	r24, 0
    1b14:	19 c0       	rjmp	.+50     	; 0x1b48 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b16:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1b1a:	33 30       	cpi	r19, 0x03	; 3
    1b1c:	11 f4       	brne	.+4      	; 0x1b22 <USB_Device_ProcessControlRequest+0xea>
    1b1e:	80 62       	ori	r24, 0x20	; 32
    1b20:	11 c0       	rjmp	.+34     	; 0x1b44 <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1b22:	80 61       	ori	r24, 0x10	; 16
    1b24:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	02 2e       	mov	r0, r18
    1b2e:	01 c0       	rjmp	.+2      	; 0x1b32 <USB_Device_ProcessControlRequest+0xfa>
    1b30:	88 0f       	add	r24, r24
    1b32:	0a 94       	dec	r0
    1b34:	ea f7       	brpl	.-6      	; 0x1b30 <USB_Device_ProcessControlRequest+0xf8>
    1b36:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1b3a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1b3e:	80 91 eb 00 	lds	r24, 0x00EB
    1b42:	88 60       	ori	r24, 0x08	; 8
    1b44:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b48:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b4c:	80 91 e8 00 	lds	r24, 0x00E8
    1b50:	87 7f       	andi	r24, 0xF7	; 247
    1b52:	88 c0       	rjmp	.+272    	; 0x1c64 <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1b54:	21 11       	cpse	r18, r1
    1b56:	b7 c0       	rjmp	.+366    	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1b58:	10 91 bd 01 	lds	r17, 0x01BD
    1b5c:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1b5e:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1b60:	f8 94       	cli
    1b62:	80 91 e8 00 	lds	r24, 0x00E8
    1b66:	87 7f       	andi	r24, 0xF7	; 247
    1b68:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1b6c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b70:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1b74:	80 ff       	sbrs	r24, 0
    1b76:	fc cf       	rjmp	.-8      	; 0x1b70 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1b78:	80 91 e3 00 	lds	r24, 0x00E3
    1b7c:	80 78       	andi	r24, 0x80	; 128
    1b7e:	81 2b       	or	r24, r17

				UDADDR = Temp;
    1b80:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    1b84:	80 68       	ori	r24, 0x80	; 128
    1b86:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1b8a:	11 23       	and	r17, r17
    1b8c:	11 f0       	breq	.+4      	; 0x1b92 <USB_Device_ProcessControlRequest+0x15a>
    1b8e:	83 e0       	ldi	r24, 0x03	; 3
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <USB_Device_ProcessControlRequest+0x15c>
    1b92:	82 e0       	ldi	r24, 0x02	; 2
    1b94:	80 93 ba 01 	sts	0x01BA, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1b98:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    1b9a:	95 c0       	rjmp	.+298    	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b9c:	20 58       	subi	r18, 0x80	; 128
    1b9e:	22 30       	cpi	r18, 0x02	; 2
    1ba0:	08 f0       	brcs	.+2      	; 0x1ba4 <USB_Device_ProcessControlRequest+0x16c>
    1ba2:	91 c0       	rjmp	.+290    	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1ba4:	80 91 bd 01 	lds	r24, 0x01BD
    1ba8:	90 91 be 01 	lds	r25, 0x01BE
    1bac:	8c 3d       	cpi	r24, 0xDC	; 220
    1bae:	23 e0       	ldi	r18, 0x03	; 3
    1bb0:	92 07       	cpc	r25, r18
    1bb2:	79 f5       	brne	.+94     	; 0x1c12 <USB_Device_ProcessControlRequest+0x1da>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1bb4:	83 e0       	ldi	r24, 0x03	; 3
    1bb6:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1bb8:	8a e2       	ldi	r24, 0x2A	; 42
    1bba:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1bbc:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1bbe:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1bc0:	de 01       	movw	r26, r28
    1bc2:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1bc6:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1bc8:	51 e2       	ldi	r21, 0x21	; 33
    1bca:	e3 2f       	mov	r30, r19
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	50 93 57 00 	sts	0x0057, r21
    1bd2:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1bd4:	20 ff       	sbrs	r18, 0
    1bd6:	03 c0       	rjmp	.+6      	; 0x1bde <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
    1bd8:	e2 95       	swap	r30
    1bda:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1bdc:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1bde:	ef 70       	andi	r30, 0x0F	; 15
    1be0:	8e 2f       	mov	r24, r30
    1be2:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1be4:	ea 30       	cpi	r30, 0x0A	; 10
    1be6:	10 f0       	brcs	.+4      	; 0x1bec <USB_Device_ProcessControlRequest+0x1b4>
    1be8:	c7 96       	adiw	r24, 0x37	; 55
    1bea:	01 c0       	rjmp	.+2      	; 0x1bee <USB_Device_ProcessControlRequest+0x1b6>
    1bec:	c0 96       	adiw	r24, 0x30	; 48
    1bee:	8d 93       	st	X+, r24
    1bf0:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1bf2:	2f 5f       	subi	r18, 0xFF	; 255
    1bf4:	24 31       	cpi	r18, 0x14	; 20
    1bf6:	49 f7       	brne	.-46     	; 0x1bca <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1bf8:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1bfa:	80 91 e8 00 	lds	r24, 0x00E8
    1bfe:	87 7f       	andi	r24, 0xF7	; 247
    1c00:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1c04:	6a e2       	ldi	r22, 0x2A	; 42
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	ce 01       	movw	r24, r28
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	0e 94 46 0c 	call	0x188c	; 0x188c <Endpoint_Write_Control_Stream_LE>
    1c10:	14 c0       	rjmp	.+40     	; 0x1c3a <USB_Device_ProcessControlRequest+0x202>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1c12:	ae 01       	movw	r20, r28
    1c14:	4f 5f       	subi	r20, 0xFF	; 255
    1c16:	5f 4f       	sbci	r21, 0xFF	; 255
    1c18:	60 91 bf 01 	lds	r22, 0x01BF
    1c1c:	0e 94 4d 09 	call	0x129a	; 0x129a <CALLBACK_USB_GetDescriptor>
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <USB_Device_ProcessControlRequest+0x1ee>
    1c24:	50 c0       	rjmp	.+160    	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
    1c26:	20 91 e8 00 	lds	r18, 0x00E8
    1c2a:	27 7f       	andi	r18, 0xF7	; 247
    1c2c:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1c30:	bc 01       	movw	r22, r24
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	9a 81       	ldd	r25, Y+2	; 0x02
    1c36:	0e 94 b0 0c 	call	0x1960	; 0x1960 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c3a:	80 91 e8 00 	lds	r24, 0x00E8
    1c3e:	8b 77       	andi	r24, 0x7B	; 123
    1c40:	80 93 e8 00 	sts	0x00E8, r24
    1c44:	40 c0       	rjmp	.+128    	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1c46:	20 38       	cpi	r18, 0x80	; 128
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <USB_Device_ProcessControlRequest+0x214>
    1c4a:	3d c0       	rjmp	.+122    	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c4c:	80 91 e8 00 	lds	r24, 0x00E8
    1c50:	87 7f       	andi	r24, 0xF7	; 247
    1c52:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1c56:	80 91 b6 01 	lds	r24, 0x01B6
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c5a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c5e:	80 91 e8 00 	lds	r24, 0x00E8
    1c62:	8e 77       	andi	r24, 0x7E	; 126
    1c64:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1c68:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Endpoint_ClearStatusStage>
    1c6c:	2c c0       	rjmp	.+88     	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1c6e:	21 11       	cpse	r18, r1
    1c70:	2a c0       	rjmp	.+84     	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
		#else
			uint8_t MemoryAddressSpace;
		#endif
	#endif

	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DevDescriptorPtr
    1c72:	ae 01       	movw	r20, r28
    1c74:	4f 5f       	subi	r20, 0xFF	; 255
    1c76:	5f 4f       	sbci	r21, 0xFF	; 255
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	0e 94 4d 09 	call	0x129a	; 0x129a <CALLBACK_USB_GetDescriptor>
    1c82:	89 2b       	or	r24, r25
    1c84:	01 f1       	breq	.+64     	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
	}

	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	if (MemoryAddressSpace == MEMSPACE_FLASH)
	{
		if (((uint8_t)USB_ControlRequest.wValue > pgm_read_byte(&DevDescriptorPtr->NumberOfConfigurations)))
    1c86:	e9 81       	ldd	r30, Y+1	; 0x01
    1c88:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8a:	71 96       	adiw	r30, 0x11	; 17
    1c8c:	e4 91       	lpm	r30, Z
    1c8e:	90 91 bd 01 	lds	r25, 0x01BD
    1c92:	e9 17       	cp	r30, r25
    1c94:	c0 f0       	brcs	.+48     	; 0x1cc6 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c96:	80 91 e8 00 	lds	r24, 0x00E8
    1c9a:	87 7f       	andi	r24, 0xF7	; 247
    1c9c:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1ca0:	90 93 b6 01 	sts	0x01B6, r25

	Endpoint_ClearStatusStage();
    1ca4:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1ca8:	80 91 b6 01 	lds	r24, 0x01B6
    1cac:	81 11       	cpse	r24, r1
    1cae:	04 c0       	rjmp	.+8      	; 0x1cb8 <USB_Device_ProcessControlRequest+0x280>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1cb0:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1cb4:	87 ff       	sbrs	r24, 7
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <USB_Device_ProcessControlRequest+0x284>
    1cb8:	84 e0       	ldi	r24, 0x04	; 4
    1cba:	01 c0       	rjmp	.+2      	; 0x1cbe <USB_Device_ProcessControlRequest+0x286>
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	80 93 ba 01 	sts	0x01BA, r24

	EVENT_USB_Device_ConfigurationChanged();
    1cc2:	0e 94 4b 08 	call	0x1096	; 0x1096 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1cc6:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1cca:	83 ff       	sbrs	r24, 3
    1ccc:	0a c0       	rjmp	.+20     	; 0x1ce2 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1cce:	80 91 eb 00 	lds	r24, 0x00EB
    1cd2:	80 62       	ori	r24, 0x20	; 32
    1cd4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1cd8:	80 91 e8 00 	lds	r24, 0x00E8
    1cdc:	87 7f       	andi	r24, 0xF7	; 247
    1cde:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1ce2:	aa 96       	adiw	r28, 0x2a	; 42
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	1f 91       	pop	r17
    1cf4:	0f 91       	pop	r16
    1cf6:	08 95       	ret

00001cf8 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1cf8:	90 93 4f 01 	sts	0x014F, r25
    1cfc:	80 93 4e 01 	sts	0x014E, r24
    1d00:	08 95       	ret

00001d02 <host_get_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    1d02:	80 91 4e 01 	lds	r24, 0x014E
    1d06:	90 91 4f 01 	lds	r25, 0x014F
    1d0a:	08 95       	ret

00001d0c <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1d0c:	e0 91 4e 01 	lds	r30, 0x014E
    1d10:	f0 91 4f 01 	lds	r31, 0x014F
    1d14:	30 97       	sbiw	r30, 0x00	; 0
    1d16:	21 f0       	breq	.+8      	; 0x1d20 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1d18:	01 90       	ld	r0, Z+
    1d1a:	f0 81       	ld	r31, Z
    1d1c:	e0 2d       	mov	r30, r0
    1d1e:	09 94       	ijmp
}
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	08 95       	ret

00001d24 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1d24:	ff 92       	push	r15
    1d26:	0f 93       	push	r16
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	8c 01       	movw	r16, r24
    if (!driver) return;
    1d30:	e0 91 4e 01 	lds	r30, 0x014E
    1d34:	f0 91 4f 01 	lds	r31, 0x014F
    1d38:	30 97       	sbiw	r30, 0x00	; 0
    1d3a:	99 f1       	breq	.+102    	; 0x1da2 <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    1d3c:	02 80       	ldd	r0, Z+2	; 0x02
    1d3e:	f3 81       	ldd	r31, Z+3	; 0x03
    1d40:	e0 2d       	mov	r30, r0
    1d42:	09 95       	icall

    if (debug_keyboard) {
    1d44:	80 91 b5 01 	lds	r24, 0x01B5
    1d48:	82 ff       	sbrs	r24, 2
    1d4a:	2b c0       	rjmp	.+86     	; 0x1da2 <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    1d4c:	80 ff       	sbrs	r24, 0
    1d4e:	04 c0       	rjmp	.+8      	; 0x1d58 <host_keyboard_send+0x34>
    1d50:	8e ea       	ldi	r24, 0xAE	; 174
    1d52:	93 e0       	ldi	r25, 0x03	; 3
    1d54:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    1d58:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1d5a:	80 e1       	ldi	r24, 0x10	; 16
    1d5c:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    1d5e:	08 ea       	ldi	r16, 0xA8	; 168
    1d60:	13 e0       	ldi	r17, 0x03	; 3
    1d62:	80 91 b5 01 	lds	r24, 0x01B5
    1d66:	80 ff       	sbrs	r24, 0
    1d68:	0b c0       	rjmp	.+22     	; 0x1d80 <host_keyboard_send+0x5c>
    1d6a:	88 81       	ld	r24, Y
    1d6c:	1f 92       	push	r1
    1d6e:	8f 93       	push	r24
    1d70:	1f 93       	push	r17
    1d72:	0f 93       	push	r16
    1d74:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__xprintf>
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	fa 94       	dec	r15
    1d82:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < REPORT_SIZE; i++) {
    1d84:	f1 10       	cpse	r15, r1
    1d86:	ed cf       	rjmp	.-38     	; 0x1d62 <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1d88:	80 91 b5 01 	lds	r24, 0x01B5
    1d8c:	80 ff       	sbrs	r24, 0
    1d8e:	09 c0       	rjmp	.+18     	; 0x1da2 <host_keyboard_send+0x7e>
    1d90:	86 ea       	ldi	r24, 0xA6	; 166
    1d92:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1d9e:	0c 94 b8 04 	jmp	0x970	; 0x970 <xputs>
    }
}
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	ff 90       	pop	r15
    1dac:	08 95       	ret

00001dae <host_system_send>:
    (*driver->send_mouse)(report);
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    1dae:	20 91 4c 01 	lds	r18, 0x014C
    1db2:	30 91 4d 01 	lds	r19, 0x014D
    1db6:	82 17       	cp	r24, r18
    1db8:	93 07       	cpc	r25, r19
    1dba:	71 f0       	breq	.+28     	; 0x1dd8 <host_system_send+0x2a>
    last_system_report = report;
    1dbc:	90 93 4d 01 	sts	0x014D, r25
    1dc0:	80 93 4c 01 	sts	0x014C, r24

    if (!driver) return;
    1dc4:	e0 91 4e 01 	lds	r30, 0x014E
    1dc8:	f0 91 4f 01 	lds	r31, 0x014F
    1dcc:	30 97       	sbiw	r30, 0x00	; 0
    1dce:	21 f0       	breq	.+8      	; 0x1dd8 <host_system_send+0x2a>
    (*driver->send_system)(report);
    1dd0:	06 80       	ldd	r0, Z+6	; 0x06
    1dd2:	f7 81       	ldd	r31, Z+7	; 0x07
    1dd4:	e0 2d       	mov	r30, r0
    1dd6:	09 94       	ijmp
    1dd8:	08 95       	ret

00001dda <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    1dda:	20 91 4a 01 	lds	r18, 0x014A
    1dde:	30 91 4b 01 	lds	r19, 0x014B
    1de2:	82 17       	cp	r24, r18
    1de4:	93 07       	cpc	r25, r19
    1de6:	71 f0       	breq	.+28     	; 0x1e04 <host_consumer_send+0x2a>
    last_consumer_report = report;
    1de8:	90 93 4b 01 	sts	0x014B, r25
    1dec:	80 93 4a 01 	sts	0x014A, r24

    if (!driver) return;
    1df0:	e0 91 4e 01 	lds	r30, 0x014E
    1df4:	f0 91 4f 01 	lds	r31, 0x014F
    1df8:	30 97       	sbiw	r30, 0x00	; 0
    1dfa:	21 f0       	breq	.+8      	; 0x1e04 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    1dfc:	00 84       	ldd	r0, Z+8	; 0x08
    1dfe:	f1 85       	ldd	r31, Z+9	; 0x09
    1e00:	e0 2d       	mov	r30, r0
    1e02:	09 94       	ijmp
    1e04:	08 95       	ret

00001e06 <keyboard_init>:
#endif


void keyboard_init(void)
{
    timer_init();
    1e06:	0e 94 02 1a 	call	0x3404	; 0x3404 <timer_init>
    matrix_init();
    1e0a:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <matrix_init>

00001e0e <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    1e0e:	cf 93       	push	r28
    1e10:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    1e12:	80 91 b5 01 	lds	r24, 0x01B5
    1e16:	82 ff       	sbrs	r24, 2
    1e18:	1e c0       	rjmp	.+60     	; 0x1e56 <keyboard_set_leds+0x48>
    1e1a:	80 ff       	sbrs	r24, 0
    1e1c:	04 c0       	rjmp	.+8      	; 0x1e26 <keyboard_set_leds+0x18>
    1e1e:	87 ec       	ldi	r24, 0xC7	; 199
    1e20:	93 e0       	ldi	r25, 0x03	; 3
    1e22:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    1e26:	80 91 b5 01 	lds	r24, 0x01B5
    1e2a:	80 ff       	sbrs	r24, 0
    1e2c:	0c c0       	rjmp	.+24     	; 0x1e46 <keyboard_set_leds+0x38>
    1e2e:	1f 92       	push	r1
    1e30:	cf 93       	push	r28
    1e32:	22 ec       	ldi	r18, 0xC2	; 194
    1e34:	33 e0       	ldi	r19, 0x03	; 3
    1e36:	3f 93       	push	r19
    1e38:	2f 93       	push	r18
    1e3a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__xprintf>
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	80 91 b5 01 	lds	r24, 0x01B5
    1e4a:	80 ff       	sbrs	r24, 0
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <keyboard_set_leds+0x48>
    1e4e:	80 ec       	ldi	r24, 0xC0	; 192
    1e50:	93 e0       	ldi	r25, 0x03	; 3
    1e52:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    led_set(leds);
    1e56:	8c 2f       	mov	r24, r28
}
    1e58:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    1e5a:	0c 94 22 07 	jmp	0xe44	; 0xe44 <led_set>

00001e5e <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1e5e:	5f 92       	push	r5
    1e60:	6f 92       	push	r6
    1e62:	7f 92       	push	r7
    1e64:	8f 92       	push	r8
    1e66:	9f 92       	push	r9
    1e68:	af 92       	push	r10
    1e6a:	bf 92       	push	r11
    1e6c:	cf 92       	push	r12
    1e6e:	df 92       	push	r13
    1e70:	ef 92       	push	r14
    1e72:	ff 92       	push	r15
    1e74:	0f 93       	push	r16
    1e76:	1f 93       	push	r17
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	2a 97       	sbiw	r28, 0x0a	; 10
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1e8c:	0e 94 ca 05 	call	0xb94	; 0xb94 <matrix_scan>
    1e90:	91 e5       	ldi	r25, 0x51	; 81
    1e92:	c9 2e       	mov	r12, r25
    1e94:	91 e0       	ldi	r25, 0x01	; 1
    1e96:	d9 2e       	mov	r13, r25
    1e98:	00 e0       	ldi	r16, 0x00	; 0
    1e9a:	10 e0       	ldi	r17, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1e9c:	aa 24       	eor	r10, r10
    1e9e:	a3 94       	inc	r10
    1ea0:	b1 2c       	mov	r11, r1
    1ea2:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    1ea4:	80 2f       	mov	r24, r16
    1ea6:	0e 94 d2 06 	call	0xda4	; 0xda4 <matrix_get_row>
    1eaa:	3c 01       	movw	r6, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    1eac:	f6 01       	movw	r30, r12
    1eae:	e1 90       	ld	r14, Z+
    1eb0:	f1 90       	ld	r15, Z+
    1eb2:	6f 01       	movw	r12, r30
    1eb4:	e8 26       	eor	r14, r24
    1eb6:	f9 26       	eor	r15, r25
        if (matrix_change) {
    1eb8:	e1 14       	cp	r14, r1
    1eba:	f1 04       	cpc	r15, r1
    1ebc:	b1 f4       	brne	.+44     	; 0x1eea <keyboard_task+0x8c>
    1ebe:	0f 5f       	subi	r16, 0xFF	; 255
    1ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1ec2:	04 30       	cpi	r16, 0x04	; 4
    1ec4:	11 05       	cpc	r17, r1
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <keyboard_task+0x44>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    1ec8:	8f ef       	ldi	r24, 0xFF	; 255
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	8a 83       	std	Y+2, r24	; 0x02
    1ece:	1b 82       	std	Y+3, r1	; 0x03
    1ed0:	0e 94 0b 1a 	call	0x3416	; 0x3416 <timer_read>
    1ed4:	81 60       	ori	r24, 0x01	; 1
    1ed6:	78 2f       	mov	r23, r24
    1ed8:	9d 83       	std	Y+5, r25	; 0x05
    1eda:	8c 83       	std	Y+4, r24	; 0x04
    1edc:	49 81       	ldd	r20, Y+1	; 0x01
    1ede:	5a 81       	ldd	r21, Y+2	; 0x02
    1ee0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee4:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <action_exec>
    1ee8:	3a c0       	rjmp	.+116    	; 0x1f5e <keyboard_task+0x100>
    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
        matrix_change = matrix_row ^ matrix_prev[r];
        if (matrix_change) {
            if (debug_matrix) matrix_print();
    1eea:	80 91 b5 01 	lds	r24, 0x01B5
    1eee:	81 fd       	sbrc	r24, 1
    1ef0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <matrix_print>
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1ef8:	45 01       	movw	r8, r10
    1efa:	02 2e       	mov	r0, r18
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <keyboard_task+0xa4>
    1efe:	88 0c       	add	r8, r8
    1f00:	99 1c       	adc	r9, r9
    1f02:	0a 94       	dec	r0
    1f04:	e2 f7       	brpl	.-8      	; 0x1efe <keyboard_task+0xa0>
    1f06:	c4 01       	movw	r24, r8
    1f08:	8e 21       	and	r24, r14
    1f0a:	9f 21       	and	r25, r15
    1f0c:	89 2b       	or	r24, r25
    1f0e:	09 f1       	breq	.+66     	; 0x1f52 <keyboard_task+0xf4>
                    action_exec((keyevent_t){
    1f10:	2e 83       	std	Y+6, r18	; 0x06
    1f12:	5f 82       	std	Y+7, r5	; 0x07
                        .key = (key_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    1f14:	68 20       	and	r6, r8
    1f16:	79 20       	and	r7, r9
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	67 28       	or	r6, r7
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <keyboard_task+0xc2>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    1f20:	88 87       	std	Y+8, r24	; 0x08
                        .key = (key_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    1f22:	0e 94 0b 1a 	call	0x3416	; 0x3416 <timer_read>
    1f26:	81 60       	ori	r24, 0x01	; 1
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    1f28:	78 2f       	mov	r23, r24
    1f2a:	9a 87       	std	Y+10, r25	; 0x0a
    1f2c:	89 87       	std	Y+9, r24	; 0x09
    1f2e:	4e 81       	ldd	r20, Y+6	; 0x06
    1f30:	5f 81       	ldd	r21, Y+7	; 0x07
    1f32:	68 85       	ldd	r22, Y+8	; 0x08
    1f34:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f36:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <action_exec>
                        .key = (key_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	ef 5a       	subi	r30, 0xAF	; 175
    1f42:	fe 4f       	sbci	r31, 0xFE	; 254
    1f44:	80 81       	ld	r24, Z
    1f46:	91 81       	ldd	r25, Z+1	; 0x01
    1f48:	88 25       	eor	r24, r8
    1f4a:	99 25       	eor	r25, r9
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    1f50:	06 c0       	rjmp	.+12     	; 0x1f5e <keyboard_task+0x100>
    1f52:	2f 5f       	subi	r18, 0xFF	; 255
    1f54:	3f 4f       	sbci	r19, 0xFF	; 255
            if (has_ghost_in_row(r)) {
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    1f56:	2b 30       	cpi	r18, 0x0B	; 11
    1f58:	31 05       	cpc	r19, r1
    1f5a:	71 f6       	brne	.-100    	; 0x1ef8 <keyboard_task+0x9a>
    1f5c:	b0 cf       	rjmp	.-160    	; 0x1ebe <keyboard_task+0x60>
#ifdef PS2_MOUSE_ENABLE
    ps2_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    1f5e:	10 91 50 01 	lds	r17, 0x0150
    1f62:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <host_keyboard_leds>
    1f66:	18 17       	cp	r17, r24
    1f68:	d9 f0       	breq	.+54     	; 0x1fa0 <keyboard_task+0x142>
        led_status = host_keyboard_leds();
    1f6a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <host_keyboard_leds>
    1f6e:	80 93 50 01 	sts	0x0150, r24
        keyboard_set_leds(led_status);
    }
}
    1f72:	2a 96       	adiw	r28, 0x0a	; 10
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	ef 90       	pop	r14
    1f8a:	df 90       	pop	r13
    1f8c:	cf 90       	pop	r12
    1f8e:	bf 90       	pop	r11
    1f90:	af 90       	pop	r10
    1f92:	9f 90       	pop	r9
    1f94:	8f 90       	pop	r8
    1f96:	7f 90       	pop	r7
    1f98:	6f 90       	pop	r6
    1f9a:	5f 90       	pop	r5
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    1f9c:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <keyboard_set_leds>
    }
}
    1fa0:	2a 96       	adiw	r28, 0x0a	; 10
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	1f 91       	pop	r17
    1fb2:	0f 91       	pop	r16
    1fb4:	ff 90       	pop	r15
    1fb6:	ef 90       	pop	r14
    1fb8:	df 90       	pop	r13
    1fba:	cf 90       	pop	r12
    1fbc:	bf 90       	pop	r11
    1fbe:	af 90       	pop	r10
    1fc0:	9f 90       	pop	r9
    1fc2:	8f 90       	pop	r8
    1fc4:	7f 90       	pop	r7
    1fc6:	6f 90       	pop	r6
    1fc8:	5f 90       	pop	r5
    1fca:	08 95       	ret

00001fcc <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	2b 97       	sbiw	r28, 0x0b	; 11
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	4f 83       	std	Y+7, r20	; 0x07
    1fe2:	58 87       	std	Y+8, r21	; 0x08
    1fe4:	69 87       	std	Y+9, r22	; 0x09
    1fe6:	7a 87       	std	Y+10, r23	; 0x0a
    1fe8:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    1fea:	de 01       	movw	r26, r28
    1fec:	11 96       	adiw	r26, 0x01	; 1
    1fee:	86 e0       	ldi	r24, 0x06	; 6
    1ff0:	fd 01       	movw	r30, r26
    1ff2:	11 92       	st	Z+, r1
    1ff4:	8a 95       	dec	r24
    1ff6:	e9 f7       	brne	.-6      	; 0x1ff2 <action_exec+0x26>
    1ff8:	85 e0       	ldi	r24, 0x05	; 5
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	37 96       	adiw	r30, 0x07	; 7
    1ffe:	01 90       	ld	r0, Z+
    2000:	0d 92       	st	X+, r0
    2002:	8a 95       	dec	r24
    2004:	e1 f7       	brne	.-8      	; 0x1ffe <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2006:	49 81       	ldd	r20, Y+1	; 0x01
    2008:	5a 81       	ldd	r21, Y+2	; 0x02
    200a:	6b 81       	ldd	r22, Y+3	; 0x03
    200c:	7c 81       	ldd	r23, Y+4	; 0x04
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2016:	2b 96       	adiw	r28, 0x0b	; 11
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	08 95       	ret

00002028 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2028:	cf 93       	push	r28
    202a:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    202c:	88 23       	and	r24, r24
    202e:	09 f4       	brne	.+2      	; 0x2032 <register_code+0xa>
    2030:	98 c0       	rjmp	.+304    	; 0x2162 <register_code+0x13a>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2032:	8c ef       	ldi	r24, 0xFC	; 252
    2034:	8c 0f       	add	r24, r28
    2036:	81 3a       	cpi	r24, 0xA1	; 161
    2038:	48 f4       	brcc	.+18     	; 0x204c <register_code+0x24>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    203a:	8c 2f       	mov	r24, r28
    203c:	0e 94 39 1b 	call	0x3672	; 0x3672 <command_proc>
    2040:	81 11       	cpse	r24, r1
    2042:	8f c0       	rjmp	.+286    	; 0x2162 <register_code+0x13a>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2044:	8c 2f       	mov	r24, r28
    2046:	0e 94 f7 18 	call	0x31ee	; 0x31ee <add_key>
    204a:	0c c0       	rjmp	.+24     	; 0x2064 <register_code+0x3c>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    204c:	80 e2       	ldi	r24, 0x20	; 32
    204e:	8c 0f       	add	r24, r28
    2050:	88 30       	cpi	r24, 0x08	; 8
    2052:	58 f4       	brcc	.+22     	; 0x206a <register_code+0x42>
        add_mods(MOD_BIT(code));
    2054:	c7 70       	andi	r28, 0x07	; 7
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	01 c0       	rjmp	.+2      	; 0x205c <register_code+0x34>
    205a:	88 0f       	add	r24, r24
    205c:	ca 95       	dec	r28
    205e:	ea f7       	brpl	.-6      	; 0x205a <register_code+0x32>
    2060:	0e 94 92 19 	call	0x3324	; 0x3324 <add_mods>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2064:	cf 91       	pop	r28
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    2066:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    206a:	8b e5       	ldi	r24, 0x5B	; 91
    206c:	8c 0f       	add	r24, r28
    206e:	83 30       	cpi	r24, 0x03	; 3
    2070:	78 f4       	brcc	.+30     	; 0x2090 <register_code+0x68>
        host_system_send(KEYCODE2SYSTEM(code));
    2072:	c5 3a       	cpi	r28, 0xA5	; 165
    2074:	29 f0       	breq	.+10     	; 0x2080 <register_code+0x58>
    2076:	c6 3a       	cpi	r28, 0xA6	; 166
    2078:	31 f4       	brne	.+12     	; 0x2086 <register_code+0x5e>
    207a:	82 e8       	ldi	r24, 0x82	; 130
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	05 c0       	rjmp	.+10     	; 0x208a <register_code+0x62>
    2080:	81 e8       	ldi	r24, 0x81	; 129
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	02 c0       	rjmp	.+4      	; 0x208a <register_code+0x62>
    2086:	83 e8       	ldi	r24, 0x83	; 131
    2088:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    208a:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    208c:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2090:	88 e5       	ldi	r24, 0x58	; 88
    2092:	8c 0f       	add	r24, r28
    2094:	83 31       	cpi	r24, 0x13	; 19
    2096:	08 f0       	brcs	.+2      	; 0x209a <register_code+0x72>
    2098:	64 c0       	rjmp	.+200    	; 0x2162 <register_code+0x13a>
        host_consumer_send(KEYCODE2CONSUMER(code));
    209a:	c8 3a       	cpi	r28, 0xA8	; 168
    209c:	39 f1       	breq	.+78     	; 0x20ec <register_code+0xc4>
    209e:	c9 3a       	cpi	r28, 0xA9	; 169
    20a0:	41 f1       	breq	.+80     	; 0x20f2 <register_code+0xca>
    20a2:	ca 3a       	cpi	r28, 0xAA	; 170
    20a4:	49 f1       	breq	.+82     	; 0x20f8 <register_code+0xd0>
    20a6:	cb 3a       	cpi	r28, 0xAB	; 171
    20a8:	51 f1       	breq	.+84     	; 0x20fe <register_code+0xd6>
    20aa:	cc 3a       	cpi	r28, 0xAC	; 172
    20ac:	59 f1       	breq	.+86     	; 0x2104 <register_code+0xdc>
    20ae:	cd 3a       	cpi	r28, 0xAD	; 173
    20b0:	61 f1       	breq	.+88     	; 0x210a <register_code+0xe2>
    20b2:	c0 3b       	cpi	r28, 0xB0	; 176
    20b4:	69 f1       	breq	.+90     	; 0x2110 <register_code+0xe8>
    20b6:	ce 3a       	cpi	r28, 0xAE	; 174
    20b8:	71 f1       	breq	.+92     	; 0x2116 <register_code+0xee>
    20ba:	cf 3a       	cpi	r28, 0xAF	; 175
    20bc:	79 f1       	breq	.+94     	; 0x211c <register_code+0xf4>
    20be:	c1 3b       	cpi	r28, 0xB1	; 177
    20c0:	81 f1       	breq	.+96     	; 0x2122 <register_code+0xfa>
    20c2:	c2 3b       	cpi	r28, 0xB2	; 178
    20c4:	89 f1       	breq	.+98     	; 0x2128 <register_code+0x100>
    20c6:	c3 3b       	cpi	r28, 0xB3	; 179
    20c8:	91 f1       	breq	.+100    	; 0x212e <register_code+0x106>
    20ca:	c4 3b       	cpi	r28, 0xB4	; 180
    20cc:	99 f1       	breq	.+102    	; 0x2134 <register_code+0x10c>
    20ce:	c5 3b       	cpi	r28, 0xB5	; 181
    20d0:	a1 f1       	breq	.+104    	; 0x213a <register_code+0x112>
    20d2:	c6 3b       	cpi	r28, 0xB6	; 182
    20d4:	a9 f1       	breq	.+106    	; 0x2140 <register_code+0x118>
    20d6:	c7 3b       	cpi	r28, 0xB7	; 183
    20d8:	b1 f1       	breq	.+108    	; 0x2146 <register_code+0x11e>
    20da:	c8 3b       	cpi	r28, 0xB8	; 184
    20dc:	b9 f1       	breq	.+110    	; 0x214c <register_code+0x124>
    20de:	c9 3b       	cpi	r28, 0xB9	; 185
    20e0:	c1 f1       	breq	.+112    	; 0x2152 <register_code+0x12a>
    20e2:	ca 3b       	cpi	r28, 0xBA	; 186
    20e4:	c9 f5       	brne	.+114    	; 0x2158 <register_code+0x130>
    20e6:	8a e2       	ldi	r24, 0x2A	; 42
    20e8:	92 e0       	ldi	r25, 0x02	; 2
    20ea:	38 c0       	rjmp	.+112    	; 0x215c <register_code+0x134>
    20ec:	82 ee       	ldi	r24, 0xE2	; 226
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	35 c0       	rjmp	.+106    	; 0x215c <register_code+0x134>
    20f2:	89 ee       	ldi	r24, 0xE9	; 233
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	32 c0       	rjmp	.+100    	; 0x215c <register_code+0x134>
    20f8:	8a ee       	ldi	r24, 0xEA	; 234
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	2f c0       	rjmp	.+94     	; 0x215c <register_code+0x134>
    20fe:	85 eb       	ldi	r24, 0xB5	; 181
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	2c c0       	rjmp	.+88     	; 0x215c <register_code+0x134>
    2104:	86 eb       	ldi	r24, 0xB6	; 182
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	29 c0       	rjmp	.+82     	; 0x215c <register_code+0x134>
    210a:	87 eb       	ldi	r24, 0xB7	; 183
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	26 c0       	rjmp	.+76     	; 0x215c <register_code+0x134>
    2110:	8c ec       	ldi	r24, 0xCC	; 204
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	23 c0       	rjmp	.+70     	; 0x215c <register_code+0x134>
    2116:	8d ec       	ldi	r24, 0xCD	; 205
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	20 c0       	rjmp	.+64     	; 0x215c <register_code+0x134>
    211c:	83 e8       	ldi	r24, 0x83	; 131
    211e:	91 e0       	ldi	r25, 0x01	; 1
    2120:	1d c0       	rjmp	.+58     	; 0x215c <register_code+0x134>
    2122:	8a e8       	ldi	r24, 0x8A	; 138
    2124:	91 e0       	ldi	r25, 0x01	; 1
    2126:	1a c0       	rjmp	.+52     	; 0x215c <register_code+0x134>
    2128:	82 e9       	ldi	r24, 0x92	; 146
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	17 c0       	rjmp	.+46     	; 0x215c <register_code+0x134>
    212e:	84 e9       	ldi	r24, 0x94	; 148
    2130:	91 e0       	ldi	r25, 0x01	; 1
    2132:	14 c0       	rjmp	.+40     	; 0x215c <register_code+0x134>
    2134:	81 e2       	ldi	r24, 0x21	; 33
    2136:	92 e0       	ldi	r25, 0x02	; 2
    2138:	11 c0       	rjmp	.+34     	; 0x215c <register_code+0x134>
    213a:	83 e2       	ldi	r24, 0x23	; 35
    213c:	92 e0       	ldi	r25, 0x02	; 2
    213e:	0e c0       	rjmp	.+28     	; 0x215c <register_code+0x134>
    2140:	84 e2       	ldi	r24, 0x24	; 36
    2142:	92 e0       	ldi	r25, 0x02	; 2
    2144:	0b c0       	rjmp	.+22     	; 0x215c <register_code+0x134>
    2146:	85 e2       	ldi	r24, 0x25	; 37
    2148:	92 e0       	ldi	r25, 0x02	; 2
    214a:	08 c0       	rjmp	.+16     	; 0x215c <register_code+0x134>
    214c:	86 e2       	ldi	r24, 0x26	; 38
    214e:	92 e0       	ldi	r25, 0x02	; 2
    2150:	05 c0       	rjmp	.+10     	; 0x215c <register_code+0x134>
    2152:	87 e2       	ldi	r24, 0x27	; 39
    2154:	92 e0       	ldi	r25, 0x02	; 2
    2156:	02 c0       	rjmp	.+4      	; 0x215c <register_code+0x134>
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    215c:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    215e:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <host_consumer_send>
    }
}
    2162:	cf 91       	pop	r28
    2164:	08 95       	ret

00002166 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2166:	88 23       	and	r24, r24
    2168:	29 f1       	breq	.+74     	; 0x21b4 <unregister_code+0x4e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    216a:	9c ef       	ldi	r25, 0xFC	; 252
    216c:	98 0f       	add	r25, r24
    216e:	91 3a       	cpi	r25, 0xA1	; 161
    2170:	18 f4       	brcc	.+6      	; 0x2178 <unregister_code+0x12>
        del_key(code);
    2172:	0e 94 44 19 	call	0x3288	; 0x3288 <del_key>
    2176:	0d c0       	rjmp	.+26     	; 0x2192 <unregister_code+0x2c>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2178:	90 e2       	ldi	r25, 0x20	; 32
    217a:	98 0f       	add	r25, r24
    217c:	98 30       	cpi	r25, 0x08	; 8
    217e:	58 f4       	brcc	.+22     	; 0x2196 <unregister_code+0x30>
        del_mods(MOD_BIT(code));
    2180:	87 70       	andi	r24, 0x07	; 7
    2182:	91 e0       	ldi	r25, 0x01	; 1
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <unregister_code+0x22>
    2186:	99 0f       	add	r25, r25
    2188:	8a 95       	dec	r24
    218a:	ea f7       	brpl	.-6      	; 0x2186 <unregister_code+0x20>
    218c:	89 2f       	mov	r24, r25
    218e:	0e 94 98 19 	call	0x3330	; 0x3330 <del_mods>
        send_keyboard_report();
    2192:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    2196:	9b e5       	ldi	r25, 0x5B	; 91
    2198:	98 0f       	add	r25, r24
    219a:	93 30       	cpi	r25, 0x03	; 3
    219c:	20 f4       	brcc	.+8      	; 0x21a6 <unregister_code+0x40>
        host_system_send(0);
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <host_system_send>
    }
    else if IS_CONSUMER(code) {
    21a6:	88 5a       	subi	r24, 0xA8	; 168
    21a8:	83 31       	cpi	r24, 0x13	; 19
    21aa:	20 f4       	brcc	.+8      	; 0x21b4 <unregister_code+0x4e>
        host_consumer_send(0);
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <host_consumer_send>
    21b4:	08 95       	ret

000021b6 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    21b6:	88 23       	and	r24, r24
    21b8:	21 f0       	breq	.+8      	; 0x21c2 <register_mods+0xc>
        add_mods(mods);
    21ba:	0e 94 92 19 	call	0x3324	; 0x3324 <add_mods>
        send_keyboard_report();
    21be:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <send_keyboard_report>
    21c2:	08 95       	ret

000021c4 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    21c4:	88 23       	and	r24, r24
    21c6:	21 f0       	breq	.+8      	; 0x21d0 <unregister_mods+0xc>
        del_mods(mods);
    21c8:	0e 94 98 19 	call	0x3330	; 0x3330 <del_mods>
        send_keyboard_report();
    21cc:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <send_keyboard_report>
    21d0:	08 95       	ret

000021d2 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    21d2:	cf 92       	push	r12
    21d4:	df 92       	push	r13
    21d6:	ef 92       	push	r14
    21d8:	ff 92       	push	r15
    21da:	0f 93       	push	r16
    21dc:	1f 93       	push	r17
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	28 97       	sbiw	r28, 0x08	; 8
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    21f4:	85 e0       	ldi	r24, 0x05	; 5
    21f6:	f8 01       	movw	r30, r16
    21f8:	de 01       	movw	r26, r28
    21fa:	11 96       	adiw	r26, 0x01	; 1
    21fc:	01 90       	ld	r0, Z+
    21fe:	0d 92       	st	X+, r0
    2200:	8a 95       	dec	r24
    2202:	e1 f7       	brne	.-8      	; 0x21fc <process_action+0x2a>
    2204:	f8 01       	movw	r30, r16
    2206:	40 81       	ld	r20, Z
    2208:	31 81       	ldd	r19, Z+1	; 0x01
    220a:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    220c:	25 81       	ldd	r18, Z+5	; 0x05
    220e:	22 95       	swap	r18
    2210:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2212:	83 81       	ldd	r24, Z+3	; 0x03
    2214:	94 81       	ldd	r25, Z+4	; 0x04
    2216:	89 2b       	or	r24, r25
    2218:	31 f0       	breq	.+12     	; 0x2226 <process_action+0x54>
    221a:	3f 3f       	cpi	r19, 0xFF	; 255
    221c:	31 f4       	brne	.+12     	; 0x222a <process_action+0x58>
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	4f 3f       	cpi	r20, 0xFF	; 255
    2222:	19 f4       	brne	.+6      	; 0x222a <process_action+0x58>
    2224:	03 c0       	rjmp	.+6      	; 0x222c <process_action+0x5a>
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	01 c0       	rjmp	.+2      	; 0x222c <process_action+0x5a>
    222a:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    222c:	80 fd       	sbrc	r24, 0
    222e:	65 c2       	rjmp	.+1226   	; 0x26fa <process_action+0x528>

    action_t action = layer_switch_get_action(event.key);
    2230:	49 83       	std	Y+1, r20	; 0x01
    2232:	3a 83       	std	Y+2, r19	; 0x02
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	2f 83       	std	Y+7, r18	; 0x07
    223a:	0e 94 b5 18 	call	0x316a	; 0x316a <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	88 87       	std	Y+8, r24	; 0x08
    2242:	0e 94 b4 18 	call	0x3168	; 0x3168 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2246:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    224a:	3e 81       	ldd	r19, Y+6	; 0x06
    224c:	e3 2f       	mov	r30, r19
    224e:	e2 95       	swap	r30
    2250:	ef 70       	andi	r30, 0x0F	; 15
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	e0 5a       	subi	r30, 0xA0	; 160
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	2f 81       	ldd	r18, Y+7	; 0x07
    225a:	68 85       	ldd	r22, Y+8	; 0x08
    225c:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2260:	93 2f       	mov	r25, r19
    2262:	90 7f       	andi	r25, 0xF0	; 240
    2264:	13 2f       	mov	r17, r19
    2266:	1f 70       	andi	r17, 0x0F	; 15
    2268:	99 23       	and	r25, r25
    226a:	11 f0       	breq	.+4      	; 0x2270 <process_action+0x9e>
    226c:	12 95       	swap	r17
    226e:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    2270:	ff 20       	and	r15, r15
    2272:	59 f0       	breq	.+22     	; 0x228a <process_action+0xb8>
                    if (mods) {
    2274:	11 23       	and	r17, r17
    2276:	09 f4       	brne	.+2      	; 0x227a <process_action+0xa8>
    2278:	f3 c1       	rjmp	.+998    	; 0x2660 <process_action+0x48e>
                        add_weak_mods(mods);
    227a:	81 2f       	mov	r24, r17
    227c:	68 87       	std	Y+8, r22	; 0x08
    227e:	0e 94 a2 19 	call	0x3344	; 0x3344 <add_weak_mods>
                        send_keyboard_report();
    2282:	0e 94 cb 19 	call	0x3396	; 0x3396 <send_keyboard_report>
    2286:	68 85       	ldd	r22, Y+8	; 0x08
    2288:	eb c1       	rjmp	.+982    	; 0x2660 <process_action+0x48e>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    228a:	86 2f       	mov	r24, r22
    228c:	0e 94 b3 10 	call	0x2166	; 0x2166 <unregister_code>
                    if (mods) {
    2290:	11 23       	and	r17, r17
    2292:	09 f4       	brne	.+2      	; 0x2296 <process_action+0xc4>
    2294:	32 c2       	rjmp	.+1124   	; 0x26fa <process_action+0x528>
                        del_weak_mods(mods);
    2296:	81 2f       	mov	r24, r17
    2298:	0e 94 a8 19 	call	0x3350	; 0x3350 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    229c:	28 96       	adiw	r28, 0x08	; 8
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	1f 91       	pop	r17
    22ae:	0f 91       	pop	r16
    22b0:	ff 90       	pop	r15
    22b2:	ef 90       	pop	r14
    22b4:	df 90       	pop	r13
    22b6:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    22b8:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    22bc:	93 2f       	mov	r25, r19
    22be:	90 7f       	andi	r25, 0xF0	; 240
    22c0:	83 2f       	mov	r24, r19
    22c2:	8f 70       	andi	r24, 0x0F	; 15
    22c4:	90 32       	cpi	r25, 0x20	; 32
    22c6:	11 f0       	breq	.+4      	; 0x22cc <process_action+0xfa>
    22c8:	82 95       	swap	r24
    22ca:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    22cc:	66 23       	and	r22, r22
    22ce:	19 f0       	breq	.+6      	; 0x22d6 <process_action+0x104>
    22d0:	61 30       	cpi	r22, 0x01	; 1
    22d2:	09 f1       	breq	.+66     	; 0x2316 <process_action+0x144>
    22d4:	2a c0       	rjmp	.+84     	; 0x232a <process_action+0x158>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    22d6:	ff 20       	and	r15, r15
    22d8:	a1 f0       	breq	.+40     	; 0x2302 <process_action+0x130>
                            if (tap_count == 0) {
    22da:	22 23       	and	r18, r18
    22dc:	81 f1       	breq	.+96     	; 0x233e <process_action+0x16c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    22de:	21 30       	cpi	r18, 0x01	; 1
    22e0:	71 f5       	brne	.+92     	; 0x233e <process_action+0x16c>
            break;
#endif
        default:
            break;
    }
}
    22e2:	28 96       	adiw	r28, 0x08	; 8
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    22fe:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2302:	22 23       	and	r18, r18
    2304:	19 f0       	breq	.+6      	; 0x230c <process_action+0x13a>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2306:	21 30       	cpi	r18, 0x01	; 1
    2308:	09 f4       	brne	.+2      	; 0x230c <process_action+0x13a>
    230a:	f7 c1       	rjmp	.+1006   	; 0x26fa <process_action+0x528>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    230c:	8e 83       	std	Y+6, r24	; 0x06
    230e:	0e 94 b5 19 	call	0x336a	; 0x336a <clear_oneshot_mods>
                                unregister_mods(mods);
    2312:	8e 81       	ldd	r24, Y+6	; 0x06
    2314:	26 c0       	rjmp	.+76     	; 0x2362 <process_action+0x190>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2316:	ff 20       	and	r15, r15
    2318:	21 f0       	breq	.+8      	; 0x2322 <process_action+0x150>
                            if (tap_count <= TAPPING_TOGGLE) {
    231a:	26 30       	cpi	r18, 0x06	; 6
    231c:	08 f0       	brcs	.+2      	; 0x2320 <process_action+0x14e>
    231e:	ed c1       	rjmp	.+986    	; 0x26fa <process_action+0x528>
    2320:	0e c0       	rjmp	.+28     	; 0x233e <process_action+0x16c>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2322:	25 30       	cpi	r18, 0x05	; 5
    2324:	08 f0       	brcs	.+2      	; 0x2328 <process_action+0x156>
    2326:	e9 c1       	rjmp	.+978    	; 0x26fa <process_action+0x528>
    2328:	1c c0       	rjmp	.+56     	; 0x2362 <process_action+0x190>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    232a:	ff 20       	and	r15, r15
    232c:	c1 f0       	breq	.+48     	; 0x235e <process_action+0x18c>
                            if (tap_count > 0) {
    232e:	22 23       	and	r18, r18
    2330:	31 f0       	breq	.+12     	; 0x233e <process_action+0x16c>
                                if (record->tap.interrupted) {
    2332:	f8 01       	movw	r30, r16
    2334:	95 81       	ldd	r25, Z+5	; 0x05
    2336:	90 ff       	sbrs	r25, 0
    2338:	93 c1       	rjmp	.+806    	; 0x2660 <process_action+0x48e>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    233a:	9f 70       	andi	r25, 0x0F	; 15
    233c:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    233e:	28 96       	adiw	r28, 0x08	; 8
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	ff 90       	pop	r15
    2354:	ef 90       	pop	r14
    2356:	df 90       	pop	r13
    2358:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    235a:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    235e:	21 11       	cpse	r18, r1
    2360:	93 c1       	rjmp	.+806    	; 0x2688 <process_action+0x4b6>
            break;
#endif
        default:
            break;
    }
}
    2362:	28 96       	adiw	r28, 0x08	; 8
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	cd bf       	out	0x3d, r28	; 61
    236e:	df 91       	pop	r29
    2370:	cf 91       	pop	r28
    2372:	1f 91       	pop	r17
    2374:	0f 91       	pop	r16
    2376:	ff 90       	pop	r15
    2378:	ef 90       	pop	r14
    237a:	df 90       	pop	r13
    237c:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    237e:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <unregister_mods>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2382:	93 2f       	mov	r25, r19
    2384:	93 70       	andi	r25, 0x03	; 3
    2386:	09 f0       	breq	.+2      	; 0x238a <process_action+0x1b8>
    2388:	76 c0       	rjmp	.+236    	; 0x2476 <process_action+0x2a4>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    238a:	f1 10       	cpse	r15, r1
    238c:	b6 c1       	rjmp	.+876    	; 0x26fa <process_action+0x528>
                    uint8_t shift = action.layer_bitop.part*4;
    238e:	26 2f       	mov	r18, r22
    2390:	22 95       	swap	r18
    2392:	26 95       	lsr	r18
    2394:	27 70       	andi	r18, 0x07	; 7
    2396:	22 0f       	add	r18, r18
    2398:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    239a:	86 2f       	mov	r24, r22
    239c:	8f 70       	andi	r24, 0x0F	; 15
    239e:	c8 2e       	mov	r12, r24
    23a0:	d1 2c       	mov	r13, r1
    23a2:	e1 2c       	mov	r14, r1
    23a4:	f1 2c       	mov	r15, r1
    23a6:	02 2e       	mov	r0, r18
    23a8:	04 c0       	rjmp	.+8      	; 0x23b2 <process_action+0x1e0>
    23aa:	cc 0c       	add	r12, r12
    23ac:	dd 1c       	adc	r13, r13
    23ae:	ee 1c       	adc	r14, r14
    23b0:	ff 1c       	adc	r15, r15
    23b2:	0a 94       	dec	r0
    23b4:	d2 f7       	brpl	.-12     	; 0x23aa <process_action+0x1d8>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    23b6:	64 ff       	sbrs	r22, 4
    23b8:	10 c0       	rjmp	.+32     	; 0x23da <process_action+0x208>
    23ba:	6f e0       	ldi	r22, 0x0F	; 15
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	04 c0       	rjmp	.+8      	; 0x23cc <process_action+0x1fa>
    23c4:	66 0f       	add	r22, r22
    23c6:	77 1f       	adc	r23, r23
    23c8:	88 1f       	adc	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	2a 95       	dec	r18
    23ce:	d2 f7       	brpl	.-12     	; 0x23c4 <process_action+0x1f2>
    23d0:	60 95       	com	r22
    23d2:	70 95       	com	r23
    23d4:	80 95       	com	r24
    23d6:	90 95       	com	r25
    23d8:	03 c0       	rjmp	.+6      	; 0x23e0 <process_action+0x20e>
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	70 e0       	ldi	r23, 0x00	; 0
    23de:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    23e0:	23 2f       	mov	r18, r19
    23e2:	26 95       	lsr	r18
    23e4:	26 95       	lsr	r18
    23e6:	23 70       	andi	r18, 0x03	; 3
    23e8:	42 2f       	mov	r20, r18
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	42 30       	cpi	r20, 0x02	; 2
    23ee:	51 05       	cpc	r21, r1
    23f0:	d1 f0       	breq	.+52     	; 0x2426 <process_action+0x254>
    23f2:	43 30       	cpi	r20, 0x03	; 3
    23f4:	51 05       	cpc	r21, r1
    23f6:	59 f1       	breq	.+86     	; 0x244e <process_action+0x27c>
    23f8:	6c 29       	or	r22, r12
    23fa:	7d 29       	or	r23, r13
    23fc:	8e 29       	or	r24, r14
    23fe:	9f 29       	or	r25, r15
    2400:	41 30       	cpi	r20, 0x01	; 1
    2402:	51 05       	cpc	r21, r1
    2404:	41 f1       	breq	.+80     	; 0x2456 <process_action+0x284>
            break;
#endif
        default:
            break;
    }
}
    2406:	28 96       	adiw	r28, 0x08	; 8
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	1f 91       	pop	r17
    2418:	0f 91       	pop	r16
    241a:	ff 90       	pop	r15
    241c:	ef 90       	pop	r14
    241e:	df 90       	pop	r13
    2420:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2422:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2426:	6c 29       	or	r22, r12
    2428:	7d 29       	or	r23, r13
    242a:	8e 29       	or	r24, r14
    242c:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    242e:	28 96       	adiw	r28, 0x08	; 8
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	1f 91       	pop	r17
    2440:	0f 91       	pop	r16
    2442:	ff 90       	pop	r15
    2444:	ef 90       	pop	r14
    2446:	df 90       	pop	r13
    2448:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    244a:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    244e:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <default_layer_and>
    2452:	c7 01       	movw	r24, r14
    2454:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2456:	28 96       	adiw	r28, 0x08	; 8
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	1f 91       	pop	r17
    2468:	0f 91       	pop	r16
    246a:	ff 90       	pop	r15
    246c:	ef 90       	pop	r14
    246e:	df 90       	pop	r13
    2470:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2472:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2476:	ff 20       	and	r15, r15
    2478:	19 f0       	breq	.+6      	; 0x2480 <process_action+0x2ae>
    247a:	93 2f       	mov	r25, r19
    247c:	91 70       	andi	r25, 0x01	; 1
    247e:	01 c0       	rjmp	.+2      	; 0x2482 <process_action+0x2b0>
    2480:	96 95       	lsr	r25
    2482:	99 23       	and	r25, r25
    2484:	09 f4       	brne	.+2      	; 0x2488 <process_action+0x2b6>
    2486:	39 c1       	rjmp	.+626    	; 0x26fa <process_action+0x528>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2488:	26 2f       	mov	r18, r22
    248a:	22 95       	swap	r18
    248c:	26 95       	lsr	r18
    248e:	27 70       	andi	r18, 0x07	; 7
    2490:	22 0f       	add	r18, r18
    2492:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2494:	86 2f       	mov	r24, r22
    2496:	8f 70       	andi	r24, 0x0F	; 15
    2498:	c8 2e       	mov	r12, r24
    249a:	d1 2c       	mov	r13, r1
    249c:	e1 2c       	mov	r14, r1
    249e:	f1 2c       	mov	r15, r1
    24a0:	02 2e       	mov	r0, r18
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac <process_action+0x2da>
    24a4:	cc 0c       	add	r12, r12
    24a6:	dd 1c       	adc	r13, r13
    24a8:	ee 1c       	adc	r14, r14
    24aa:	ff 1c       	adc	r15, r15
    24ac:	0a 94       	dec	r0
    24ae:	d2 f7       	brpl	.-12     	; 0x24a4 <process_action+0x2d2>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    24b0:	64 ff       	sbrs	r22, 4
    24b2:	10 c0       	rjmp	.+32     	; 0x24d4 <process_action+0x302>
    24b4:	6f e0       	ldi	r22, 0x0F	; 15
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	04 c0       	rjmp	.+8      	; 0x24c6 <process_action+0x2f4>
    24be:	66 0f       	add	r22, r22
    24c0:	77 1f       	adc	r23, r23
    24c2:	88 1f       	adc	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	2a 95       	dec	r18
    24c8:	d2 f7       	brpl	.-12     	; 0x24be <process_action+0x2ec>
    24ca:	60 95       	com	r22
    24cc:	70 95       	com	r23
    24ce:	80 95       	com	r24
    24d0:	90 95       	com	r25
    24d2:	03 c0       	rjmp	.+6      	; 0x24da <process_action+0x308>
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	70 e0       	ldi	r23, 0x00	; 0
    24d8:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    24da:	23 2f       	mov	r18, r19
    24dc:	26 95       	lsr	r18
    24de:	26 95       	lsr	r18
    24e0:	23 70       	andi	r18, 0x03	; 3
    24e2:	42 2f       	mov	r20, r18
    24e4:	50 e0       	ldi	r21, 0x00	; 0
    24e6:	42 30       	cpi	r20, 0x02	; 2
    24e8:	51 05       	cpc	r21, r1
    24ea:	d1 f0       	breq	.+52     	; 0x2520 <process_action+0x34e>
    24ec:	43 30       	cpi	r20, 0x03	; 3
    24ee:	51 05       	cpc	r21, r1
    24f0:	59 f1       	breq	.+86     	; 0x2548 <process_action+0x376>
    24f2:	6c 29       	or	r22, r12
    24f4:	7d 29       	or	r23, r13
    24f6:	8e 29       	or	r24, r14
    24f8:	9f 29       	or	r25, r15
    24fa:	41 30       	cpi	r20, 0x01	; 1
    24fc:	51 05       	cpc	r21, r1
    24fe:	41 f1       	breq	.+80     	; 0x2550 <process_action+0x37e>
            break;
#endif
        default:
            break;
    }
}
    2500:	28 96       	adiw	r28, 0x08	; 8
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	ff 90       	pop	r15
    2516:	ef 90       	pop	r14
    2518:	df 90       	pop	r13
    251a:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    251c:	0c 94 80 18 	jmp	0x3100	; 0x3100 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2520:	6c 29       	or	r22, r12
    2522:	7d 29       	or	r23, r13
    2524:	8e 29       	or	r24, r14
    2526:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2528:	28 96       	adiw	r28, 0x08	; 8
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	1f 91       	pop	r17
    253a:	0f 91       	pop	r16
    253c:	ff 90       	pop	r15
    253e:	ef 90       	pop	r14
    2540:	df 90       	pop	r13
    2542:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2544:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2548:	0e 94 80 18 	call	0x3100	; 0x3100 <layer_and>
    254c:	c7 01       	movw	r24, r14
    254e:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2550:	28 96       	adiw	r28, 0x08	; 8
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	de bf       	out	0x3e, r29	; 62
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	cd bf       	out	0x3d, r28	; 61
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	ff 90       	pop	r15
    2566:	ef 90       	pop	r14
    2568:	df 90       	pop	r13
    256a:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    256c:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2570:	61 3f       	cpi	r22, 0xF1	; 241
    2572:	29 f1       	breq	.+74     	; 0x25be <process_action+0x3ec>
    2574:	18 f4       	brcc	.+6      	; 0x257c <process_action+0x3aa>
    2576:	60 3f       	cpi	r22, 0xF0	; 240
    2578:	39 f0       	breq	.+14     	; 0x2588 <process_action+0x3b6>
    257a:	6d c0       	rjmp	.+218    	; 0x2656 <process_action+0x484>
    257c:	62 3f       	cpi	r22, 0xF2	; 242
    257e:	99 f1       	breq	.+102    	; 0x25e6 <process_action+0x414>
    2580:	63 3f       	cpi	r22, 0xF3	; 243
    2582:	09 f4       	brne	.+2      	; 0x2586 <process_action+0x3b4>
    2584:	44 c0       	rjmp	.+136    	; 0x260e <process_action+0x43c>
    2586:	67 c0       	rjmp	.+206    	; 0x2656 <process_action+0x484>
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2588:	ff 20       	and	r15, r15
    258a:	a9 f0       	breq	.+42     	; 0x25b6 <process_action+0x3e4>
                        if (tap_count < TAPPING_TOGGLE) {
    258c:	25 30       	cpi	r18, 0x05	; 5
    258e:	08 f0       	brcs	.+2      	; 0x2592 <process_action+0x3c0>
    2590:	b4 c0       	rjmp	.+360    	; 0x26fa <process_action+0x528>
                            layer_invert(action.layer_tap.val);
    2592:	83 2f       	mov	r24, r19
    2594:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2596:	28 96       	adiw	r28, 0x08	; 8
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	ff 90       	pop	r15
    25ac:	ef 90       	pop	r14
    25ae:	df 90       	pop	r13
    25b0:	cf 90       	pop	r12
            switch (action.layer_tap.code) {
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    25b2:	0c 94 45 18 	jmp	0x308a	; 0x308a <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    25b6:	26 30       	cpi	r18, 0x06	; 6
    25b8:	08 f0       	brcs	.+2      	; 0x25bc <process_action+0x3ea>
    25ba:	9f c0       	rjmp	.+318    	; 0x26fa <process_action+0x528>
    25bc:	ea cf       	rjmp	.-44     	; 0x2592 <process_action+0x3c0>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    25be:	ff 20       	and	r15, r15
    25c0:	a1 f0       	breq	.+40     	; 0x25ea <process_action+0x418>
    25c2:	83 2f       	mov	r24, r19
    25c4:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    25c6:	28 96       	adiw	r28, 0x08	; 8
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	1f 91       	pop	r17
    25d8:	0f 91       	pop	r16
    25da:	ff 90       	pop	r15
    25dc:	ef 90       	pop	r14
    25de:	df 90       	pop	r13
    25e0:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    25e2:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    25e6:	ff 20       	and	r15, r15
    25e8:	61 f3       	breq	.-40     	; 0x25c2 <process_action+0x3f0>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    25ea:	83 2f       	mov	r24, r19
    25ec:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    25ee:	28 96       	adiw	r28, 0x08	; 8
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	df 90       	pop	r13
    2608:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    260a:	0c 94 20 18 	jmp	0x3040	; 0x3040 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    260e:	ff 20       	and	r15, r15
    2610:	91 f0       	breq	.+36     	; 0x2636 <process_action+0x464>
    2612:	83 2f       	mov	r24, r19
    2614:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2616:	28 96       	adiw	r28, 0x08	; 8
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	df 91       	pop	r29
    2624:	cf 91       	pop	r28
    2626:	1f 91       	pop	r17
    2628:	0f 91       	pop	r16
    262a:	ff 90       	pop	r15
    262c:	ef 90       	pop	r14
    262e:	df 90       	pop	r13
    2630:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2632:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2636:	28 96       	adiw	r28, 0x08	; 8
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	df 91       	pop	r29
    2644:	cf 91       	pop	r28
    2646:	1f 91       	pop	r17
    2648:	0f 91       	pop	r16
    264a:	ff 90       	pop	r15
    264c:	ef 90       	pop	r14
    264e:	df 90       	pop	r13
    2650:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2652:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2656:	ff 20       	and	r15, r15
    2658:	a1 f0       	breq	.+40     	; 0x2682 <process_action+0x4b0>
                        if (tap_count > 0) {
    265a:	22 23       	and	r18, r18
    265c:	09 f4       	brne	.+2      	; 0x2660 <process_action+0x48e>
    265e:	b1 cf       	rjmp	.-158    	; 0x25c2 <process_action+0x3f0>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2660:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2662:	28 96       	adiw	r28, 0x08	; 8
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	1f 91       	pop	r17
    2674:	0f 91       	pop	r16
    2676:	ff 90       	pop	r15
    2678:	ef 90       	pop	r14
    267a:	df 90       	pop	r13
    267c:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    267e:	0c 94 14 10 	jmp	0x2028	; 0x2028 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2682:	22 23       	and	r18, r18
    2684:	09 f4       	brne	.+2      	; 0x2688 <process_action+0x4b6>
    2686:	b1 cf       	rjmp	.-158    	; 0x25ea <process_action+0x418>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2688:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    268a:	28 96       	adiw	r28, 0x08	; 8
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	ff 90       	pop	r15
    26a0:	ef 90       	pop	r14
    26a2:	df 90       	pop	r13
    26a4:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    26a6:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    26aa:	43 2f       	mov	r20, r19
    26ac:	4f 70       	andi	r20, 0x0F	; 15
    26ae:	c8 01       	movw	r24, r16
    26b0:	0e 94 ff 19 	call	0x33fe	; 0x33fe <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    26b4:	28 96       	adiw	r28, 0x08	; 8
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	1f 91       	pop	r17
    26c6:	0f 91       	pop	r16
    26c8:	ff 90       	pop	r15
    26ca:	ef 90       	pop	r14
    26cc:	df 90       	pop	r13
    26ce:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    26d0:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    26d4:	43 2f       	mov	r20, r19
    26d6:	4f 70       	andi	r20, 0x0F	; 15
    26d8:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    26da:	28 96       	adiw	r28, 0x08	; 8
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	1f 91       	pop	r17
    26ec:	0f 91       	pop	r16
    26ee:	ff 90       	pop	r15
    26f0:	ef 90       	pop	r14
    26f2:	df 90       	pop	r13
    26f4:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    26f6:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <action_function>
            break;
#endif
        default:
            break;
    }
}
    26fa:	28 96       	adiw	r28, 0x08	; 8
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	ff 90       	pop	r15
    2710:	ef 90       	pop	r14
    2712:	df 90       	pop	r13
    2714:	cf 90       	pop	r12
    2716:	08 95       	ret

00002718 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2718:	0e 94 af 19 	call	0x335e	; 0x335e <clear_weak_mods>
    clear_keys();
    271c:	0e 94 84 19 	call	0x3308	; 0x3308 <clear_keys>
    send_keyboard_report();
    2720:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <send_keyboard_report>

00002724 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2724:	0e 94 9f 19 	call	0x333e	; 0x333e <clear_mods>
    clear_keyboard_but_mods();
    2728:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <clear_keyboard_but_mods>

0000272c <is_tap_key>:
#endif
}

bool is_tap_key(key_t key)
{
    action_t action = layer_switch_get_action(key);
    272c:	0e 94 b5 18 	call	0x316a	; 0x316a <layer_switch_get_action>

    switch (action.kind.id) {
    2730:	29 2f       	mov	r18, r25
    2732:	22 95       	swap	r18
    2734:	2f 70       	andi	r18, 0x0F	; 15
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	2c 30       	cpi	r18, 0x0C	; 12
    273a:	31 05       	cpc	r19, r1
    273c:	4c f4       	brge	.+18     	; 0x2750 <is_tap_key+0x24>
    273e:	2a 30       	cpi	r18, 0x0A	; 10
    2740:	31 05       	cpc	r19, r1
    2742:	6c f4       	brge	.+26     	; 0x275e <is_tap_key+0x32>
    2744:	22 50       	subi	r18, 0x02	; 2
    2746:	31 09       	sbc	r19, r1
    2748:	22 30       	cpi	r18, 0x02	; 2
    274a:	31 05       	cpc	r19, r1
    274c:	70 f4       	brcc	.+28     	; 0x276a <is_tap_key+0x3e>
    274e:	07 c0       	rjmp	.+14     	; 0x275e <is_tap_key+0x32>
    2750:	2c 30       	cpi	r18, 0x0C	; 12
    2752:	31 05       	cpc	r19, r1
    2754:	31 f0       	breq	.+12     	; 0x2762 <is_tap_key+0x36>
    2756:	2f 30       	cpi	r18, 0x0F	; 15
    2758:	31 05       	cpc	r19, r1
    275a:	19 f0       	breq	.+6      	; 0x2762 <is_tap_key+0x36>
    275c:	06 c0       	rjmp	.+12     	; 0x276a <is_tap_key+0x3e>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            return true;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	08 95       	ret
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2762:	93 fb       	bst	r25, 3
    2764:	88 27       	eor	r24, r24
    2766:	80 f9       	bld	r24, 0
    2768:	08 95       	ret
            return false;
    }
    return false;
    276a:	80 e0       	ldi	r24, 0x00	; 0
}
    276c:	08 95       	ret

0000276e <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	00 d0       	rcall	.+0      	; 0x2774 <debug_event+0x6>
    2774:	00 d0       	rcall	.+0      	; 0x2776 <debug_event+0x8>
    2776:	1f 92       	push	r1
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	08 95       	ret

0000278c <debug_record>:

void debug_record(keyrecord_t record)
{
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	00 d0       	rcall	.+0      	; 0x2792 <debug_record+0x6>
    2792:	00 d0       	rcall	.+0      	; 0x2794 <debug_record+0x8>
    2794:	00 d0       	rcall	.+0      	; 0x2796 <debug_record+0xa>
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    279a:	26 96       	adiw	r28, 0x06	; 6
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	08 95       	ret

000027ac <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    27ac:	1f 93       	push	r17
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    27b2:	c0 91 59 01 	lds	r28, 0x0159
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    27b6:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    27b8:	80 91 5a 01 	lds	r24, 0x015A
    27bc:	c8 17       	cp	r28, r24
    27be:	99 f0       	breq	.+38     	; 0x27e6 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    27c0:	d0 e0       	ldi	r29, 0x00	; 0
    27c2:	1c 9f       	mul	r17, r28
    27c4:	f0 01       	movw	r30, r0
    27c6:	1d 9f       	mul	r17, r29
    27c8:	f0 0d       	add	r31, r0
    27ca:	11 24       	eor	r1, r1
    27cc:	e5 5a       	subi	r30, 0xA5	; 165
    27ce:	fe 4f       	sbci	r31, 0xFE	; 254
    27d0:	40 81       	ld	r20, Z
    27d2:	51 81       	ldd	r21, Z+1	; 0x01
    27d4:	62 81       	ldd	r22, Z+2	; 0x02
    27d6:	73 81       	ldd	r23, Z+3	; 0x03
    27d8:	84 81       	ldd	r24, Z+4	; 0x04
    27da:	95 81       	ldd	r25, Z+5	; 0x05
    27dc:	0e 94 c6 13 	call	0x278c	; 0x278c <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    27e0:	21 96       	adiw	r28, 0x01	; 1
    27e2:	c7 70       	andi	r28, 0x07	; 7
    27e4:	e9 cf       	rjmp	.-46     	; 0x27b8 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	1f 91       	pop	r17
    27ec:	08 95       	ret

000027ee <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    27ee:	40 91 8b 01 	lds	r20, 0x018B
    27f2:	50 91 8c 01 	lds	r21, 0x018C
    27f6:	60 91 8d 01 	lds	r22, 0x018D
    27fa:	70 91 8e 01 	lds	r23, 0x018E
    27fe:	80 91 8f 01 	lds	r24, 0x018F
    2802:	90 91 90 01 	lds	r25, 0x0190
    2806:	0c 94 c6 13 	jmp	0x278c	; 0x278c <debug_record>

0000280a <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    280a:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    280c:	80 91 90 01 	lds	r24, 0x0190
    2810:	82 95       	swap	r24
    2812:	8f 70       	andi	r24, 0x0F	; 15
    2814:	09 f0       	breq	.+2      	; 0x2818 <waiting_buffer_scan_tap+0xe>
    2816:	5f c0       	rjmp	.+190    	; 0x28d6 <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2818:	80 91 8d 01 	lds	r24, 0x018D
    281c:	88 23       	and	r24, r24
    281e:	09 f4       	brne	.+2      	; 0x2822 <waiting_buffer_scan_tap+0x18>
    2820:	5a c0       	rjmp	.+180    	; 0x28d6 <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2822:	20 91 59 01 	lds	r18, 0x0159
    2826:	a0 91 5a 01 	lds	r26, 0x015A
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    282a:	60 91 8b 01 	lds	r22, 0x018B
    282e:	70 91 8c 01 	lds	r23, 0x018C
    2832:	80 91 8e 01 	lds	r24, 0x018E
    2836:	90 91 8f 01 	lds	r25, 0x018F
    283a:	31 e0       	ldi	r19, 0x01	; 1
    283c:	6f 3f       	cpi	r22, 0xFF	; 255
    283e:	09 f0       	breq	.+2      	; 0x2842 <waiting_buffer_scan_tap+0x38>
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	b3 2f       	mov	r27, r19
    2844:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2846:	2a 17       	cp	r18, r26
    2848:	09 f4       	brne	.+2      	; 0x284c <waiting_buffer_scan_tap+0x42>
    284a:	45 c0       	rjmp	.+138    	; 0x28d6 <waiting_buffer_scan_tap+0xcc>
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	21 f0       	breq	.+8      	; 0x2858 <waiting_buffer_scan_tap+0x4e>
    2850:	7f 3f       	cpi	r23, 0xFF	; 255
    2852:	21 f4       	brne	.+8      	; 0x285c <waiting_buffer_scan_tap+0x52>
    2854:	4b 2f       	mov	r20, r27
    2856:	03 c0       	rjmp	.+6      	; 0x285e <waiting_buffer_scan_tap+0x54>
    2858:	41 e0       	ldi	r20, 0x01	; 1
    285a:	01 c0       	rjmp	.+2      	; 0x285e <waiting_buffer_scan_tap+0x54>
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2860:	40 fd       	sbrc	r20, 0
    2862:	35 c0       	rjmp	.+106    	; 0x28ce <waiting_buffer_scan_tap+0xc4>
    2864:	c2 9f       	mul	r28, r18
    2866:	f0 01       	movw	r30, r0
    2868:	c3 9f       	mul	r28, r19
    286a:	f0 0d       	add	r31, r0
    286c:	11 24       	eor	r1, r1
    286e:	e5 5a       	subi	r30, 0xA5	; 165
    2870:	fe 4f       	sbci	r31, 0xFE	; 254
    2872:	41 81       	ldd	r20, Z+1	; 0x01
    2874:	74 13       	cpse	r23, r20
    2876:	2b c0       	rjmp	.+86     	; 0x28ce <waiting_buffer_scan_tap+0xc4>
    2878:	40 81       	ld	r20, Z
    287a:	64 13       	cpse	r22, r20
    287c:	28 c0       	rjmp	.+80     	; 0x28ce <waiting_buffer_scan_tap+0xc4>
    287e:	42 81       	ldd	r20, Z+2	; 0x02
    2880:	41 11       	cpse	r20, r1
    2882:	25 c0       	rjmp	.+74     	; 0x28ce <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2884:	43 81       	ldd	r20, Z+3	; 0x03
    2886:	54 81       	ldd	r21, Z+4	; 0x04
    2888:	48 17       	cp	r20, r24
    288a:	59 07       	cpc	r21, r25
    288c:	10 f4       	brcc	.+4      	; 0x2892 <waiting_buffer_scan_tap+0x88>
    288e:	41 50       	subi	r20, 0x01	; 1
    2890:	51 09       	sbc	r21, r1
    2892:	48 1b       	sub	r20, r24
    2894:	59 0b       	sbc	r21, r25
    2896:	48 3c       	cpi	r20, 0xC8	; 200
    2898:	51 05       	cpc	r21, r1
    289a:	c8 f4       	brcc	.+50     	; 0x28ce <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    289c:	80 91 90 01 	lds	r24, 0x0190
    28a0:	8f 70       	andi	r24, 0x0F	; 15
    28a2:	80 61       	ori	r24, 0x10	; 16
    28a4:	80 93 90 01 	sts	0x0190, r24
            waiting_buffer[i].tap.count = 1;
    28a8:	86 e0       	ldi	r24, 0x06	; 6
    28aa:	82 9f       	mul	r24, r18
    28ac:	f0 01       	movw	r30, r0
    28ae:	83 9f       	mul	r24, r19
    28b0:	f0 0d       	add	r31, r0
    28b2:	11 24       	eor	r1, r1
    28b4:	e0 5a       	subi	r30, 0xA0	; 160
    28b6:	fe 4f       	sbci	r31, 0xFE	; 254
    28b8:	80 81       	ld	r24, Z
    28ba:	8f 70       	andi	r24, 0x0F	; 15
    28bc:	80 61       	ori	r24, 0x10	; 16
    28be:	80 83       	st	Z, r24
            process_action(&tapping_key);
    28c0:	8b e8       	ldi	r24, 0x8B	; 139
    28c2:	91 e0       	ldi	r25, 0x01	; 1
    28c4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    28c8:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    28ca:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    28ce:	2f 5f       	subi	r18, 0xFF	; 255
    28d0:	3f 4f       	sbci	r19, 0xFF	; 255
    28d2:	27 70       	andi	r18, 0x07	; 7
    28d4:	b8 cf       	rjmp	.-144    	; 0x2846 <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    28d6:	cf 91       	pop	r28
    28d8:	08 95       	ret

000028da <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    28da:	cf 92       	push	r12
    28dc:	df 92       	push	r13
    28de:	ef 92       	push	r14
    28e0:	ff 92       	push	r15
    28e2:	0f 93       	push	r16
    28e4:	1f 93       	push	r17
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	62 97       	sbiw	r28, 0x12	; 18
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    28fc:	85 e0       	ldi	r24, 0x05	; 5
    28fe:	f8 01       	movw	r30, r16
    2900:	de 01       	movw	r26, r28
    2902:	1d 96       	adiw	r26, 0x0d	; 13
    2904:	01 90       	ld	r0, Z+
    2906:	0d 92       	st	X+, r0
    2908:	8a 95       	dec	r24
    290a:	e1 f7       	brne	.-8      	; 0x2904 <process_tapping+0x2a>
    290c:	d8 01       	movw	r26, r16
    290e:	4c 91       	ld	r20, X
    2910:	11 96       	adiw	r26, 0x01	; 1
    2912:	5c 91       	ld	r21, X
    2914:	11 97       	sbiw	r26, 0x01	; 1
    2916:	12 96       	adiw	r26, 0x02	; 2
    2918:	6c 91       	ld	r22, X
    291a:	12 97       	sbiw	r26, 0x02	; 2
    291c:	13 96       	adiw	r26, 0x03	; 3
    291e:	ed 90       	ld	r14, X+
    2920:	fc 90       	ld	r15, X
    2922:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2924:	70 91 8b 01 	lds	r23, 0x018B
    2928:	e0 91 8c 01 	lds	r30, 0x018C
    292c:	20 91 8e 01 	lds	r18, 0x018E
    2930:	30 91 8f 01 	lds	r19, 0x018F
    2934:	21 15       	cp	r18, r1
    2936:	31 05       	cpc	r19, r1
    2938:	31 f0       	breq	.+12     	; 0x2946 <process_tapping+0x6c>
    293a:	ef 3f       	cpi	r30, 0xFF	; 255
    293c:	31 f4       	brne	.+12     	; 0x294a <process_tapping+0x70>
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	7f 3f       	cpi	r23, 0xFF	; 255
    2942:	19 f4       	brne	.+6      	; 0x294a <process_tapping+0x70>
    2944:	03 c0       	rjmp	.+6      	; 0x294c <process_tapping+0x72>
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	01 c0       	rjmp	.+2      	; 0x294c <process_tapping+0x72>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	b8 2f       	mov	r27, r24
    294e:	b1 70       	andi	r27, 0x01	; 1
    2950:	cb 2e       	mov	r12, r27
    2952:	80 fd       	sbrc	r24, 0
    2954:	6c c1       	rjmp	.+728    	; 0x2c2e <process_tapping+0x354>
    2956:	d0 90 8d 01 	lds	r13, 0x018D
    295a:	dd 20       	and	r13, r13
    295c:	09 f4       	brne	.+2      	; 0x2960 <process_tapping+0x86>
    295e:	f5 c0       	rjmp	.+490    	; 0x2b4a <process_tapping+0x270>
    2960:	f0 91 90 01 	lds	r31, 0x0190
        if (WITHIN_TAPPING_TERM(event)) {
    2964:	e2 16       	cp	r14, r18
    2966:	f3 06       	cpc	r15, r19
    2968:	38 f0       	brcs	.+14     	; 0x2978 <process_tapping+0x9e>
    296a:	c7 01       	movw	r24, r14
    296c:	82 1b       	sub	r24, r18
    296e:	93 0b       	sbc	r25, r19
    2970:	88 3c       	cpi	r24, 0xC8	; 200
    2972:	91 05       	cpc	r25, r1
    2974:	48 f0       	brcs	.+18     	; 0x2988 <process_tapping+0xae>
    2976:	9b c0       	rjmp	.+310    	; 0x2aae <process_tapping+0x1d4>
    2978:	20 95       	com	r18
    297a:	30 95       	com	r19
    297c:	2e 0d       	add	r18, r14
    297e:	3f 1d       	adc	r19, r15
    2980:	28 3c       	cpi	r18, 0xC8	; 200
    2982:	31 05       	cpc	r19, r1
    2984:	08 f0       	brcs	.+2      	; 0x2988 <process_tapping+0xae>
    2986:	93 c0       	rjmp	.+294    	; 0x2aae <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    2988:	8f 2f       	mov	r24, r31
    298a:	80 7f       	andi	r24, 0xF0	; 240
    298c:	09 f0       	breq	.+2      	; 0x2990 <process_tapping+0xb6>
    298e:	52 c0       	rjmp	.+164    	; 0x2a34 <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2990:	e5 13       	cpse	r30, r21
    2992:	14 c0       	rjmp	.+40     	; 0x29bc <process_tapping+0xe2>
    2994:	74 13       	cpse	r23, r20
    2996:	12 c0       	rjmp	.+36     	; 0x29bc <process_tapping+0xe2>
    2998:	d6 2e       	mov	r13, r22
    299a:	61 11       	cpse	r22, r1
    299c:	0f c0       	rjmp	.+30     	; 0x29bc <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    299e:	ff 70       	andi	r31, 0x0F	; 15
    29a0:	f0 61       	ori	r31, 0x10	; 16
    29a2:	f0 93 90 01 	sts	0x0190, r31
                    debug_tapping_key();
    29a6:	0e 94 f7 13 	call	0x27ee	; 0x27ee <debug_tapping_key>
                    process_action(&tapping_key);
    29aa:	8b e8       	ldi	r24, 0x8B	; 139
    29ac:	91 e0       	ldi	r25, 0x01	; 1
    29ae:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    29b2:	80 91 90 01 	lds	r24, 0x0190
    29b6:	f8 01       	movw	r30, r16
    29b8:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    29ba:	6c c1       	rjmp	.+728    	; 0x2c94 <process_tapping+0x3ba>
    29bc:	ef 28       	or	r14, r15
    29be:	31 f0       	breq	.+12     	; 0x29cc <process_tapping+0xf2>
    29c0:	5f 3f       	cpi	r21, 0xFF	; 255
    29c2:	31 f4       	brne	.+12     	; 0x29d0 <process_tapping+0xf6>
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	4f 3f       	cpi	r20, 0xFF	; 255
    29c8:	19 f4       	brne	.+6      	; 0x29d0 <process_tapping+0xf6>
    29ca:	03 c0       	rjmp	.+6      	; 0x29d2 <process_tapping+0xf8>
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	01 c0       	rjmp	.+2      	; 0x29d2 <process_tapping+0xf8>
    29d0:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    29d2:	80 fd       	sbrc	r24, 0
    29d4:	03 c0       	rjmp	.+6      	; 0x29dc <process_tapping+0x102>
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	86 27       	eor	r24, r22
    29da:	01 c0       	rjmp	.+2      	; 0x29de <process_tapping+0x104>
    29dc:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    29de:	f8 2f       	mov	r31, r24
    29e0:	f1 70       	andi	r31, 0x01	; 1
    29e2:	ff 2e       	mov	r15, r31
    29e4:	80 ff       	sbrs	r24, 0
    29e6:	1c c0       	rjmp	.+56     	; 0x2a20 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    29e8:	80 91 59 01 	lds	r24, 0x0159
    29ec:	20 91 5a 01 	lds	r18, 0x015A
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    29f0:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    29f2:	82 17       	cp	r24, r18
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <process_tapping+0x11e>
    29f6:	28 c1       	rjmp	.+592    	; 0x2c48 <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	38 9f       	mul	r19, r24
    29fc:	f0 01       	movw	r30, r0
    29fe:	39 9f       	mul	r19, r25
    2a00:	f0 0d       	add	r31, r0
    2a02:	11 24       	eor	r1, r1
    2a04:	e5 5a       	subi	r30, 0xA5	; 165
    2a06:	fe 4f       	sbci	r31, 0xFE	; 254
    2a08:	71 81       	ldd	r23, Z+1	; 0x01
    2a0a:	57 13       	cpse	r21, r23
    2a0c:	06 c0       	rjmp	.+12     	; 0x2a1a <process_tapping+0x140>
    2a0e:	70 81       	ld	r23, Z
    2a10:	47 13       	cpse	r20, r23
    2a12:	03 c0       	rjmp	.+6      	; 0x2a1a <process_tapping+0x140>
    2a14:	72 81       	ldd	r23, Z+2	; 0x02
    2a16:	67 13       	cpse	r22, r23
    2a18:	03 c0       	rjmp	.+6      	; 0x2a20 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	87 70       	andi	r24, 0x07	; 7
    2a1e:	e9 cf       	rjmp	.-46     	; 0x29f2 <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2a20:	d6 2e       	mov	r13, r22
    2a22:	66 23       	and	r22, r22
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <process_tapping+0x14e>
    2a26:	36 c1       	rjmp	.+620    	; 0x2c94 <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    2a28:	80 91 90 01 	lds	r24, 0x0190
    2a2c:	81 60       	ori	r24, 0x01	; 1
    2a2e:	80 93 90 01 	sts	0x0190, r24
    2a32:	53 c0       	rjmp	.+166    	; 0x2ada <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2a34:	e5 13       	cpse	r30, r21
    2a36:	08 c0       	rjmp	.+16     	; 0x2a48 <process_tapping+0x16e>
    2a38:	74 13       	cpse	r23, r20
    2a3a:	06 c0       	rjmp	.+12     	; 0x2a48 <process_tapping+0x16e>
    2a3c:	61 11       	cpse	r22, r1
    2a3e:	04 c0       	rjmp	.+8      	; 0x2a48 <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2a40:	d8 01       	movw	r26, r16
    2a42:	15 96       	adiw	r26, 0x05	; 5
    2a44:	fc 93       	st	X, r31
    2a46:	ae c0       	rjmp	.+348    	; 0x2ba4 <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2a48:	4d 87       	std	Y+13, r20	; 0x0d
    2a4a:	5e 87       	std	Y+14, r21	; 0x0e
    2a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a50:	6a 8b       	std	Y+18, r22	; 0x12
    2a52:	0e 94 96 13 	call	0x272c	; 0x272c <is_tap_key>
    2a56:	6a 89       	ldd	r22, Y+18	; 0x12
    2a58:	88 23       	and	r24, r24
    2a5a:	29 f1       	breq	.+74     	; 0x2aa6 <process_tapping+0x1cc>
    2a5c:	d6 2e       	mov	r13, r22
    2a5e:	66 23       	and	r22, r22
    2a60:	11 f1       	breq	.+68     	; 0x2aa6 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    2a62:	20 91 90 01 	lds	r18, 0x0190
    2a66:	82 2f       	mov	r24, r18
    2a68:	82 95       	swap	r24
    2a6a:	8f 70       	andi	r24, 0x0F	; 15
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	02 97       	sbiw	r24, 0x02	; 2
    2a70:	0c f4       	brge	.+2      	; 0x2a74 <process_tapping+0x19a>
    2a72:	60 c0       	rjmp	.+192    	; 0x2b34 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2a74:	80 91 8b 01 	lds	r24, 0x018B
    2a78:	90 91 8c 01 	lds	r25, 0x018C
    2a7c:	98 87       	std	Y+8, r25	; 0x08
    2a7e:	8f 83       	std	Y+7, r24	; 0x07
    2a80:	19 86       	std	Y+9, r1	; 0x09
    2a82:	fb 86       	std	Y+11, r15	; 0x0b
    2a84:	ea 86       	std	Y+10, r14	; 0x0a
    2a86:	2c 87       	std	Y+12, r18	; 0x0c
    2a88:	ce 01       	movw	r24, r28
    2a8a:	07 96       	adiw	r24, 0x07	; 7
    2a8c:	51 c0       	rjmp	.+162    	; 0x2b30 <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2a8e:	e5 17       	cp	r30, r21
    2a90:	31 f1       	breq	.+76     	; 0x2ade <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2a92:	4d 87       	std	Y+13, r20	; 0x0d
    2a94:	5e 87       	std	Y+14, r21	; 0x0e
    2a96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a9a:	6a 8b       	std	Y+18, r22	; 0x12
    2a9c:	0e 94 96 13 	call	0x272c	; 0x272c <is_tap_key>
    2aa0:	6a 89       	ldd	r22, Y+18	; 0x12
    2aa2:	81 11       	cpse	r24, r1
    2aa4:	2e c0       	rjmp	.+92     	; 0x2b02 <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    2aa6:	c8 01       	movw	r24, r16
    2aa8:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <process_action>
    2aac:	a4 c0       	rjmp	.+328    	; 0x2bf6 <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2aae:	8f 2f       	mov	r24, r31
    2ab0:	80 7f       	andi	r24, 0xF0	; 240
    2ab2:	69 f7       	brne	.-38     	; 0x2a8e <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2ab4:	7e 2d       	mov	r23, r14
    2ab6:	f9 8a       	std	Y+17, r15	; 0x11
    2ab8:	e8 8a       	std	Y+16, r14	; 0x10
    2aba:	89 89       	ldd	r24, Y+17	; 0x11
    2abc:	0e 94 b7 13 	call	0x276e	; 0x276e <debug_event>
                process_action(&tapping_key);
    2ac0:	8b e8       	ldi	r24, 0x8B	; 139
    2ac2:	91 e0       	ldi	r25, 0x01	; 1
    2ac4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <process_action>
                tapping_key = (keyrecord_t){};
    2ac8:	eb e8       	ldi	r30, 0x8B	; 139
    2aca:	f1 e0       	ldi	r31, 0x01	; 1
    2acc:	86 e0       	ldi	r24, 0x06	; 6
    2ace:	df 01       	movw	r26, r30
    2ad0:	1d 92       	st	X+, r1
    2ad2:	8a 95       	dec	r24
    2ad4:	e9 f7       	brne	.-6      	; 0x2ad0 <process_tapping+0x1f6>
                debug_tapping_key();
    2ad6:	0e 94 f7 13 	call	0x27ee	; 0x27ee <debug_tapping_key>
                return false;
    2ada:	d1 2c       	mov	r13, r1
    2adc:	db c0       	rjmp	.+438    	; 0x2c94 <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2ade:	74 13       	cpse	r23, r20
    2ae0:	d8 cf       	rjmp	.-80     	; 0x2a92 <process_tapping+0x1b8>
    2ae2:	61 11       	cpse	r22, r1
    2ae4:	d6 cf       	rjmp	.-84     	; 0x2a92 <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2ae6:	d8 01       	movw	r26, r16
    2ae8:	15 96       	adiw	r26, 0x05	; 5
    2aea:	fc 93       	st	X, r31
                    process_action(keyp);
    2aec:	c8 01       	movw	r24, r16
    2aee:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <process_action>
                    tapping_key = (keyrecord_t){};
    2af2:	eb e8       	ldi	r30, 0x8B	; 139
    2af4:	f1 e0       	ldi	r31, 0x01	; 1
    2af6:	86 e0       	ldi	r24, 0x06	; 6
    2af8:	df 01       	movw	r26, r30
    2afa:	1d 92       	st	X+, r1
    2afc:	8a 95       	dec	r24
    2afe:	e9 f7       	brne	.-6      	; 0x2afa <process_tapping+0x220>
                    return true;
    2b00:	c9 c0       	rjmp	.+402    	; 0x2c94 <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2b02:	d6 2e       	mov	r13, r22
    2b04:	66 23       	and	r22, r22
    2b06:	79 f2       	breq	.-98     	; 0x2aa6 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    2b08:	20 91 90 01 	lds	r18, 0x0190
    2b0c:	82 2f       	mov	r24, r18
    2b0e:	82 95       	swap	r24
    2b10:	8f 70       	andi	r24, 0x0F	; 15
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	02 97       	sbiw	r24, 0x02	; 2
    2b16:	74 f0       	brlt	.+28     	; 0x2b34 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2b18:	80 91 8b 01 	lds	r24, 0x018B
    2b1c:	90 91 8c 01 	lds	r25, 0x018C
    2b20:	9a 83       	std	Y+2, r25	; 0x02
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	1b 82       	std	Y+3, r1	; 0x03
    2b26:	fd 82       	std	Y+5, r15	; 0x05
    2b28:	ec 82       	std	Y+4, r14	; 0x04
    2b2a:	2e 83       	std	Y+6, r18	; 0x06
    2b2c:	ce 01       	movw	r24, r28
    2b2e:	01 96       	adiw	r24, 0x01	; 1
    2b30:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    2b34:	86 e0       	ldi	r24, 0x06	; 6
    2b36:	f8 01       	movw	r30, r16
    2b38:	ab e8       	ldi	r26, 0x8B	; 139
    2b3a:	b1 e0       	ldi	r27, 0x01	; 1
    2b3c:	01 90       	ld	r0, Z+
    2b3e:	0d 92       	st	X+, r0
    2b40:	8a 95       	dec	r24
    2b42:	e1 f7       	brne	.-8      	; 0x2b3c <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    2b44:	0e 94 05 14 	call	0x280a	; 0x280a <waiting_buffer_scan_tap>
    2b48:	6f c0       	rjmp	.+222    	; 0x2c28 <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2b4a:	e2 16       	cp	r14, r18
    2b4c:	f3 06       	cpc	r15, r19
    2b4e:	28 f0       	brcs	.+10     	; 0x2b5a <process_tapping+0x280>
    2b50:	c7 01       	movw	r24, r14
    2b52:	82 1b       	sub	r24, r18
    2b54:	93 0b       	sbc	r25, r19
    2b56:	9c 01       	movw	r18, r24
    2b58:	04 c0       	rjmp	.+8      	; 0x2b62 <process_tapping+0x288>
    2b5a:	20 95       	com	r18
    2b5c:	30 95       	com	r19
    2b5e:	2e 0d       	add	r18, r14
    2b60:	3f 1d       	adc	r19, r15
    2b62:	28 3c       	cpi	r18, 0xC8	; 200
    2b64:	31 05       	cpc	r19, r1
    2b66:	08 f0       	brcs	.+2      	; 0x2b6a <process_tapping+0x290>
    2b68:	52 c0       	rjmp	.+164    	; 0x2c0e <process_tapping+0x334>
            if (event.pressed) {
    2b6a:	d6 2e       	mov	r13, r22
    2b6c:	66 23       	and	r22, r22
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <process_tapping+0x298>
    2b70:	9a cf       	rjmp	.-204    	; 0x2aa6 <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    2b72:	e5 13       	cpse	r30, r21
    2b74:	2c c0       	rjmp	.+88     	; 0x2bce <process_tapping+0x2f4>
    2b76:	74 13       	cpse	r23, r20
    2b78:	2a c0       	rjmp	.+84     	; 0x2bce <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2b7a:	80 91 90 01 	lds	r24, 0x0190
    2b7e:	80 fd       	sbrc	r24, 0
    2b80:	1d c0       	rjmp	.+58     	; 0x2bbc <process_tapping+0x2e2>
    2b82:	98 2f       	mov	r25, r24
    2b84:	92 95       	swap	r25
    2b86:	9f 70       	andi	r25, 0x0F	; 15
    2b88:	c9 f0       	breq	.+50     	; 0x2bbc <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2b8a:	d8 01       	movw	r26, r16
    2b8c:	15 96       	adiw	r26, 0x05	; 5
    2b8e:	8c 93       	st	X, r24
    2b90:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2b92:	9f 30       	cpi	r25, 0x0F	; 15
    2b94:	39 f0       	breq	.+14     	; 0x2ba4 <process_tapping+0x2ca>
    2b96:	9f 5f       	subi	r25, 0xFF	; 255
    2b98:	92 95       	swap	r25
    2b9a:	90 7f       	andi	r25, 0xF0	; 240
    2b9c:	8f 70       	andi	r24, 0x0F	; 15
    2b9e:	89 2b       	or	r24, r25
    2ba0:	15 96       	adiw	r26, 0x05	; 5
    2ba2:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    2ba4:	c8 01       	movw	r24, r16
    2ba6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <process_action>
                        tapping_key = *keyp;
    2baa:	86 e0       	ldi	r24, 0x06	; 6
    2bac:	f8 01       	movw	r30, r16
    2bae:	ab e8       	ldi	r26, 0x8B	; 139
    2bb0:	b1 e0       	ldi	r27, 0x01	; 1
    2bb2:	01 90       	ld	r0, Z+
    2bb4:	0d 92       	st	X+, r0
    2bb6:	8a 95       	dec	r24
    2bb8:	e1 f7       	brne	.-8      	; 0x2bb2 <process_tapping+0x2d8>
    2bba:	36 c0       	rjmp	.+108    	; 0x2c28 <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2bbc:	86 e0       	ldi	r24, 0x06	; 6
    2bbe:	f8 01       	movw	r30, r16
    2bc0:	ab e8       	ldi	r26, 0x8B	; 139
    2bc2:	b1 e0       	ldi	r27, 0x01	; 1
    2bc4:	01 90       	ld	r0, Z+
    2bc6:	0d 92       	st	X+, r0
    2bc8:	8a 95       	dec	r24
    2bca:	e1 f7       	brne	.-8      	; 0x2bc4 <process_tapping+0x2ea>
                        return true;
    2bcc:	63 c0       	rjmp	.+198    	; 0x2c94 <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    2bce:	4d 87       	std	Y+13, r20	; 0x0d
    2bd0:	5e 87       	std	Y+14, r21	; 0x0e
    2bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd6:	0e 94 96 13 	call	0x272c	; 0x272c <is_tap_key>
    2bda:	88 23       	and	r24, r24
    2bdc:	79 f0       	breq	.+30     	; 0x2bfc <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    2bde:	86 e0       	ldi	r24, 0x06	; 6
    2be0:	f8 01       	movw	r30, r16
    2be2:	ab e8       	ldi	r26, 0x8B	; 139
    2be4:	b1 e0       	ldi	r27, 0x01	; 1
    2be6:	01 90       	ld	r0, Z+
    2be8:	0d 92       	st	X+, r0
    2bea:	8a 95       	dec	r24
    2bec:	e1 f7       	brne	.-8      	; 0x2be6 <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    2bee:	0e 94 05 14 	call	0x280a	; 0x280a <waiting_buffer_scan_tap>
                    debug_tapping_key();
    2bf2:	0e 94 f7 13 	call	0x27ee	; 0x27ee <debug_tapping_key>
                    return true;
    2bf6:	dd 24       	eor	r13, r13
    2bf8:	d3 94       	inc	r13
    2bfa:	4c c0       	rjmp	.+152    	; 0x2c94 <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    2bfc:	80 91 90 01 	lds	r24, 0x0190
    2c00:	81 60       	ori	r24, 0x01	; 1
    2c02:	80 93 90 01 	sts	0x0190, r24
                    process_action(keyp);
    2c06:	c8 01       	movw	r24, r16
    2c08:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <process_action>
                    return true;
    2c0c:	43 c0       	rjmp	.+134    	; 0x2c94 <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    2c0e:	7e 2d       	mov	r23, r14
    2c10:	f9 8a       	std	Y+17, r15	; 0x11
    2c12:	e8 8a       	std	Y+16, r14	; 0x10
    2c14:	89 89       	ldd	r24, Y+17	; 0x11
    2c16:	0e 94 b7 13 	call	0x276e	; 0x276e <debug_event>
            tapping_key = (keyrecord_t){};
    2c1a:	eb e8       	ldi	r30, 0x8B	; 139
    2c1c:	f1 e0       	ldi	r31, 0x01	; 1
    2c1e:	86 e0       	ldi	r24, 0x06	; 6
    2c20:	df 01       	movw	r26, r30
    2c22:	1d 92       	st	X+, r1
    2c24:	8a 95       	dec	r24
    2c26:	e9 f7       	brne	.-6      	; 0x2c22 <process_tapping+0x348>
            debug_tapping_key();
    2c28:	0e 94 f7 13 	call	0x27ee	; 0x27ee <debug_tapping_key>
            return false;
    2c2c:	33 c0       	rjmp	.+102    	; 0x2c94 <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    2c2e:	66 23       	and	r22, r22
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <process_tapping+0x35a>
    2c32:	39 cf       	rjmp	.-398    	; 0x2aa6 <process_tapping+0x1cc>
    2c34:	4d 87       	std	Y+13, r20	; 0x0d
    2c36:	5e 87       	std	Y+14, r21	; 0x0e
    2c38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3c:	0e 94 96 13 	call	0x272c	; 0x272c <is_tap_key>
    2c40:	88 23       	and	r24, r24
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <process_tapping+0x36c>
    2c44:	30 cf       	rjmp	.-416    	; 0x2aa6 <process_tapping+0x1cc>
    2c46:	cb cf       	rjmp	.-106    	; 0x2bde <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    2c48:	4d 87       	std	Y+13, r20	; 0x0d
    2c4a:	5e 87       	std	Y+14, r21	; 0x0e
    2c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c50:	0e 94 b5 18 	call	0x316a	; 0x316a <layer_switch_get_action>
                    switch (action.kind.id) {
    2c54:	29 2f       	mov	r18, r25
    2c56:	22 95       	swap	r18
    2c58:	2f 70       	andi	r18, 0x0F	; 15
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	22 30       	cpi	r18, 0x02	; 2
    2c5e:	31 05       	cpc	r19, r1
    2c60:	2c f4       	brge	.+10     	; 0x2c6c <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    2c62:	9f 70       	andi	r25, 0x0F	; 15
    2c64:	41 f0       	breq	.+16     	; 0x2c76 <process_tapping+0x39c>
    2c66:	81 11       	cpse	r24, r1
    2c68:	06 c0       	rjmp	.+12     	; 0x2c76 <process_tapping+0x39c>
    2c6a:	0c c0       	rjmp	.+24     	; 0x2c84 <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    2c6c:	24 30       	cpi	r18, 0x04	; 4
    2c6e:	31 05       	cpc	r19, r1
    2c70:	2c f4       	brge	.+10     	; 0x2c7c <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2c72:	9f 70       	andi	r25, 0x0F	; 15
    2c74:	49 f4       	brne	.+18     	; 0x2c88 <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    2c76:	80 5e       	subi	r24, 0xE0	; 224
    2c78:	88 30       	cpi	r24, 0x08	; 8
    2c7a:	20 f0       	brcs	.+8      	; 0x2c84 <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    2c7c:	c8 01       	movw	r24, r16
    2c7e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <process_action>
                    return true;
    2c82:	cf 2c       	mov	r12, r15
    2c84:	dc 2c       	mov	r13, r12
    2c86:	06 c0       	rjmp	.+12     	; 0x2c94 <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2c88:	d8 01       	movw	r26, r16
    2c8a:	15 96       	adiw	r26, 0x05	; 5
    2c8c:	9c 91       	ld	r25, X
    2c8e:	90 7f       	andi	r25, 0xF0	; 240
    2c90:	91 f7       	brne	.-28     	; 0x2c76 <process_tapping+0x39c>
    2c92:	f8 cf       	rjmp	.-16     	; 0x2c84 <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    2c94:	8d 2d       	mov	r24, r13
    2c96:	62 96       	adiw	r28, 0x12	; 18
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	cd bf       	out	0x3d, r28	; 61
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	ff 90       	pop	r15
    2cac:	ef 90       	pop	r14
    2cae:	df 90       	pop	r13
    2cb0:	cf 90       	pop	r12
    2cb2:	08 95       	ret

00002cb4 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    2cb4:	1f 93       	push	r17
    2cb6:	cf 93       	push	r28
    2cb8:	df 93       	push	r29
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	2c 97       	sbiw	r28, 0x0c	; 12
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	4f 83       	std	Y+7, r20	; 0x07
    2ccc:	58 87       	std	Y+8, r21	; 0x08
    2cce:	69 87       	std	Y+9, r22	; 0x09
    2cd0:	7a 87       	std	Y+10, r23	; 0x0a
    2cd2:	8b 87       	std	Y+11, r24	; 0x0b
    2cd4:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	07 96       	adiw	r24, 0x07	; 7
    2cda:	0e 94 6d 14 	call	0x28da	; 0x28da <process_tapping>
    2cde:	88 23       	and	r24, r24
    2ce0:	c1 f0       	breq	.+48     	; 0x2d12 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    2ce2:	2f 81       	ldd	r18, Y+7	; 0x07
    2ce4:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2ce6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ce8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cea:	89 2b       	or	r24, r25
    2cec:	31 f0       	breq	.+12     	; 0x2cfa <action_tapping_process+0x46>
    2cee:	3f 3f       	cpi	r19, 0xFF	; 255
    2cf0:	11 f0       	breq	.+4      	; 0x2cf6 <action_tapping_process+0x42>
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	03 c0       	rjmp	.+6      	; 0x2cfc <action_tapping_process+0x48>
    2cf6:	2f 3f       	cpi	r18, 0xFF	; 255
    2cf8:	e1 f7       	brne	.-8      	; 0x2cf2 <action_tapping_process+0x3e>
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	81 11       	cpse	r24, r1
    2cfe:	47 c0       	rjmp	.+142    	; 0x2d8e <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    2d00:	4f 81       	ldd	r20, Y+7	; 0x07
    2d02:	58 85       	ldd	r21, Y+8	; 0x08
    2d04:	69 85       	ldd	r22, Y+9	; 0x09
    2d06:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d08:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d0c:	0e 94 c6 13 	call	0x278c	; 0x278c <debug_record>
    2d10:	3e c0       	rjmp	.+124    	; 0x2d8e <action_tapping_process+0xda>
    2d12:	86 e0       	ldi	r24, 0x06	; 6
    2d14:	fe 01       	movw	r30, r28
    2d16:	37 96       	adiw	r30, 0x07	; 7
    2d18:	de 01       	movw	r26, r28
    2d1a:	11 96       	adiw	r26, 0x01	; 1
    2d1c:	01 90       	ld	r0, Z+
    2d1e:	0d 92       	st	X+, r0
    2d20:	8a 95       	dec	r24
    2d22:	e1 f7       	brne	.-8      	; 0x2d1c <action_tapping_process+0x68>
    2d24:	ff 81       	ldd	r31, Y+7	; 0x07
    2d26:	e8 85       	ldd	r30, Y+8	; 0x08
    2d28:	4a 85       	ldd	r20, Y+10	; 0x0a
    2d2a:	5b 85       	ldd	r21, Y+11	; 0x0b
    2d2c:	41 15       	cp	r20, r1
    2d2e:	51 05       	cpc	r21, r1
    2d30:	31 f0       	breq	.+12     	; 0x2d3e <action_tapping_process+0x8a>
    2d32:	ef 3f       	cpi	r30, 0xFF	; 255
    2d34:	31 f4       	brne	.+12     	; 0x2d42 <action_tapping_process+0x8e>
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	ff 3f       	cpi	r31, 0xFF	; 255
    2d3a:	19 f4       	brne	.+6      	; 0x2d42 <action_tapping_process+0x8e>
    2d3c:	03 c0       	rjmp	.+6      	; 0x2d44 <action_tapping_process+0x90>
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	01 c0       	rjmp	.+2      	; 0x2d44 <action_tapping_process+0x90>
    2d42:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    2d44:	80 fd       	sbrc	r24, 0
    2d46:	23 c0       	rjmp	.+70     	; 0x2d8e <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    2d48:	20 91 5a 01 	lds	r18, 0x015A
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	c9 01       	movw	r24, r18
    2d50:	01 96       	adiw	r24, 0x01	; 1
    2d52:	87 70       	andi	r24, 0x07	; 7
    2d54:	99 27       	eor	r25, r25
    2d56:	60 91 59 01 	lds	r22, 0x0159
    2d5a:	70 e0       	ldi	r23, 0x00	; 0
    2d5c:	86 17       	cp	r24, r22
    2d5e:	97 07       	cpc	r25, r23
    2d60:	f1 f1       	breq	.+124    	; 0x2dde <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    2d62:	f9 83       	std	Y+1, r31	; 0x01
    2d64:	ea 83       	std	Y+2, r30	; 0x02
    2d66:	5d 83       	std	Y+5, r21	; 0x05
    2d68:	4c 83       	std	Y+4, r20	; 0x04
    2d6a:	96 e0       	ldi	r25, 0x06	; 6
    2d6c:	92 9f       	mul	r25, r18
    2d6e:	d0 01       	movw	r26, r0
    2d70:	93 9f       	mul	r25, r19
    2d72:	b0 0d       	add	r27, r0
    2d74:	11 24       	eor	r1, r1
    2d76:	a5 5a       	subi	r26, 0xA5	; 165
    2d78:	be 4f       	sbci	r27, 0xFE	; 254
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	31 96       	adiw	r30, 0x01	; 1
    2d7e:	01 90       	ld	r0, Z+
    2d80:	0d 92       	st	X+, r0
    2d82:	9a 95       	dec	r25
    2d84:	e1 f7       	brne	.-8      	; 0x2d7e <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    2d86:	80 93 5a 01 	sts	0x015A, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    2d8a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2d8e:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2d90:	80 91 59 01 	lds	r24, 0x0159
    2d94:	90 91 5a 01 	lds	r25, 0x015A
    2d98:	89 17       	cp	r24, r25
    2d9a:	79 f1       	breq	.+94     	; 0x2dfa <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2d9c:	18 9f       	mul	r17, r24
    2d9e:	c0 01       	movw	r24, r0
    2da0:	11 24       	eor	r1, r1
    2da2:	85 5a       	subi	r24, 0xA5	; 165
    2da4:	9e 4f       	sbci	r25, 0xFE	; 254
    2da6:	0e 94 6d 14 	call	0x28da	; 0x28da <process_tapping>
    2daa:	88 23       	and	r24, r24
    2dac:	31 f1       	breq	.+76     	; 0x2dfa <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    2dae:	e0 91 59 01 	lds	r30, 0x0159
    2db2:	1e 9f       	mul	r17, r30
    2db4:	f0 01       	movw	r30, r0
    2db6:	11 24       	eor	r1, r1
    2db8:	e5 5a       	subi	r30, 0xA5	; 165
    2dba:	fe 4f       	sbci	r31, 0xFE	; 254
    2dbc:	40 81       	ld	r20, Z
    2dbe:	51 81       	ldd	r21, Z+1	; 0x01
    2dc0:	62 81       	ldd	r22, Z+2	; 0x02
    2dc2:	73 81       	ldd	r23, Z+3	; 0x03
    2dc4:	84 81       	ldd	r24, Z+4	; 0x04
    2dc6:	95 81       	ldd	r25, Z+5	; 0x05
    2dc8:	0e 94 c6 13 	call	0x278c	; 0x278c <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2dcc:	80 91 59 01 	lds	r24, 0x0159
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	87 70       	andi	r24, 0x07	; 7
    2dd6:	99 27       	eor	r25, r25
    2dd8:	80 93 59 01 	sts	0x0159, r24
    2ddc:	d9 cf       	rjmp	.-78     	; 0x2d90 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    2dde:	0e 94 92 13 	call	0x2724	; 0x2724 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    2de2:	10 92 5a 01 	sts	0x015A, r1
    waiting_buffer_tail = 0;
    2de6:	10 92 59 01 	sts	0x0159, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    2dea:	eb e8       	ldi	r30, 0x8B	; 139
    2dec:	f1 e0       	ldi	r31, 0x01	; 1
    2dee:	86 e0       	ldi	r24, 0x06	; 6
    2df0:	df 01       	movw	r26, r30
    2df2:	1d 92       	st	X+, r1
    2df4:	8a 95       	dec	r24
    2df6:	e9 f7       	brne	.-6      	; 0x2df2 <action_tapping_process+0x13e>
    2df8:	ca cf       	rjmp	.-108    	; 0x2d8e <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    2dfa:	2c 96       	adiw	r28, 0x0c	; 12
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	1f 91       	pop	r17
    2e0c:	08 95       	ret

00002e0e <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = pgm_read_byte(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    2e0e:	ef 92       	push	r14
    2e10:	ff 92       	push	r15
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	9c 01       	movw	r18, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	09 f4       	brne	.+2      	; 0x2e22 <action_macro_play+0x14>
    2e20:	6f c0       	rjmp	.+222    	; 0x2f00 <action_macro_play+0xf2>
    2e22:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    2e24:	ee 24       	eor	r14, r14
    2e26:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    2e28:	e9 01       	movw	r28, r18
    2e2a:	21 96       	adiw	r28, 0x01	; 1
    2e2c:	f9 01       	movw	r30, r18
    2e2e:	84 91       	lpm	r24, Z
    2e30:	84 37       	cpi	r24, 0x74	; 116
    2e32:	40 f4       	brcc	.+16     	; 0x2e44 <action_macro_play+0x36>
    2e34:	84 30       	cpi	r24, 0x04	; 4
    2e36:	08 f0       	brcs	.+2      	; 0x2e3a <action_macro_play+0x2c>
    2e38:	54 c0       	rjmp	.+168    	; 0x2ee2 <action_macro_play+0xd4>
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	81 f0       	breq	.+32     	; 0x2e5e <action_macro_play+0x50>
    2e3e:	82 30       	cpi	r24, 0x02	; 2
    2e40:	21 f1       	breq	.+72     	; 0x2e8a <action_macro_play+0x7c>
    2e42:	5e c0       	rjmp	.+188    	; 0x2f00 <action_macro_play+0xf2>
    2e44:	85 37       	cpi	r24, 0x75	; 117
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <action_macro_play+0x3c>
    2e48:	47 c0       	rjmp	.+142    	; 0x2ed8 <action_macro_play+0xca>
    2e4a:	b0 f1       	brcs	.+108    	; 0x2eb8 <action_macro_play+0xaa>
    2e4c:	9c e7       	ldi	r25, 0x7C	; 124
    2e4e:	98 0f       	add	r25, r24
    2e50:	90 37       	cpi	r25, 0x70	; 112
    2e52:	08 f0       	brcs	.+2      	; 0x2e56 <action_macro_play+0x48>
    2e54:	55 c0       	rjmp	.+170    	; 0x2f00 <action_macro_play+0xf2>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    2e56:	8f 77       	andi	r24, 0x7F	; 127
    2e58:	0e 94 b3 10 	call	0x2166	; 0x2166 <unregister_code>
                break;
    2e5c:	44 c0       	rjmp	.+136    	; 0x2ee6 <action_macro_play+0xd8>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    2e5e:	89 01       	movw	r16, r18
    2e60:	0e 5f       	subi	r16, 0xFE	; 254
    2e62:	1f 4f       	sbci	r17, 0xFF	; 255
    2e64:	fe 01       	movw	r30, r28
    2e66:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2e68:	90 e2       	ldi	r25, 0x20	; 32
    2e6a:	98 0f       	add	r25, r24
    2e6c:	98 30       	cpi	r25, 0x08	; 8
    2e6e:	50 f4       	brcc	.+20     	; 0x2e84 <action_macro_play+0x76>
                    add_weak_mods(MOD_BIT(macro));
    2e70:	87 70       	andi	r24, 0x07	; 7
    2e72:	fe 2d       	mov	r31, r14
    2e74:	01 c0       	rjmp	.+2      	; 0x2e78 <action_macro_play+0x6a>
    2e76:	ff 0f       	add	r31, r31
    2e78:	8a 95       	dec	r24
    2e7a:	ea f7       	brpl	.-6      	; 0x2e76 <action_macro_play+0x68>
    2e7c:	8f 2f       	mov	r24, r31
    2e7e:	0e 94 a2 19 	call	0x3344	; 0x3344 <add_weak_mods>
    2e82:	15 c0       	rjmp	.+42     	; 0x2eae <action_macro_play+0xa0>
                } else {
                    register_code(macro);
    2e84:	0e 94 14 10 	call	0x2028	; 0x2028 <register_code>
    2e88:	12 c0       	rjmp	.+36     	; 0x2eae <action_macro_play+0xa0>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    2e8a:	89 01       	movw	r16, r18
    2e8c:	0e 5f       	subi	r16, 0xFE	; 254
    2e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e90:	fe 01       	movw	r30, r28
    2e92:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2e94:	90 e2       	ldi	r25, 0x20	; 32
    2e96:	98 0f       	add	r25, r24
    2e98:	98 30       	cpi	r25, 0x08	; 8
    2e9a:	58 f4       	brcc	.+22     	; 0x2eb2 <action_macro_play+0xa4>
                    del_weak_mods(MOD_BIT(macro));
    2e9c:	87 70       	andi	r24, 0x07	; 7
    2e9e:	fe 2d       	mov	r31, r14
    2ea0:	01 c0       	rjmp	.+2      	; 0x2ea4 <action_macro_play+0x96>
    2ea2:	ff 0f       	add	r31, r31
    2ea4:	8a 95       	dec	r24
    2ea6:	ea f7       	brpl	.-6      	; 0x2ea2 <action_macro_play+0x94>
    2ea8:	8f 2f       	mov	r24, r31
    2eaa:	0e 94 a8 19 	call	0x3350	; 0x3350 <del_weak_mods>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    2eae:	e8 01       	movw	r28, r16
    2eb0:	1a c0       	rjmp	.+52     	; 0x2ee6 <action_macro_play+0xd8>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                } else {
                    unregister_code(macro);
    2eb2:	0e 94 b3 10 	call	0x2166	; 0x2166 <unregister_code>
    2eb6:	fb cf       	rjmp	.-10     	; 0x2eae <action_macro_play+0xa0>
                }
                break;
            case WAIT:
                MACRO_READ();
    2eb8:	2e 5f       	subi	r18, 0xFE	; 254
    2eba:	3f 4f       	sbci	r19, 0xFF	; 255
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) _delay_ms(1); }
    2ec0:	cc 23       	and	r28, r28
    2ec2:	41 f0       	breq	.+16     	; 0x2ed4 <action_macro_play+0xc6>
    2ec4:	8f e9       	ldi	r24, 0x9F	; 159
    2ec6:	9f e0       	ldi	r25, 0x0F	; 15
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <action_macro_play+0xba>
    2ecc:	00 c0       	rjmp	.+0      	; 0x2ece <action_macro_play+0xc0>
    2ece:	00 00       	nop
    2ed0:	c1 50       	subi	r28, 0x01	; 1
    2ed2:	f6 cf       	rjmp	.-20     	; 0x2ec0 <action_macro_play+0xb2>
                } else {
                    unregister_code(macro);
                }
                break;
            case WAIT:
                MACRO_READ();
    2ed4:	e9 01       	movw	r28, r18
    2ed6:	07 c0       	rjmp	.+14     	; 0x2ee6 <action_macro_play+0xd8>
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) _delay_ms(1); }
                break;
            case INTERVAL:
                interval = MACRO_READ();
    2ed8:	fe 01       	movw	r30, r28
    2eda:	f4 90       	lpm	r15, Z
    2edc:	e9 01       	movw	r28, r18
    2ede:	22 96       	adiw	r28, 0x02	; 2
                dprintf("INTERVAL(%u)\n", interval);
                break;
    2ee0:	02 c0       	rjmp	.+4      	; 0x2ee6 <action_macro_play+0xd8>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    2ee2:	0e 94 14 10 	call	0x2028	; 0x2028 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) _delay_ms(1); }
    2ee6:	8f 2d       	mov	r24, r15
    2ee8:	88 23       	and	r24, r24
    2eea:	41 f0       	breq	.+16     	; 0x2efc <action_macro_play+0xee>
    2eec:	ef e9       	ldi	r30, 0x9F	; 159
    2eee:	ff e0       	ldi	r31, 0x0F	; 15
    2ef0:	31 97       	sbiw	r30, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <action_macro_play+0xe2>
    2ef4:	00 c0       	rjmp	.+0      	; 0x2ef6 <action_macro_play+0xe8>
    2ef6:	00 00       	nop
    2ef8:	81 50       	subi	r24, 0x01	; 1
    2efa:	f6 cf       	rjmp	.-20     	; 0x2ee8 <action_macro_play+0xda>
    2efc:	9e 01       	movw	r18, r28
    2efe:	94 cf       	rjmp	.-216    	; 0x2e28 <action_macro_play+0x1a>
    }
}
    2f00:	df 91       	pop	r29
    2f02:	cf 91       	pop	r28
    2f04:	1f 91       	pop	r17
    2f06:	0f 91       	pop	r16
    2f08:	ff 90       	pop	r15
    2f0a:	ef 90       	pop	r14
    2f0c:	08 95       	ret

00002f0e <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    2f0e:	08 95       	ret

00002f10 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2f10:	60 93 95 01 	sts	0x0195, r22
    2f14:	70 93 96 01 	sts	0x0196, r23
    2f18:	80 93 97 01 	sts	0x0197, r24
    2f1c:	90 93 98 01 	sts	0x0198, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2f20:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <clear_keyboard_but_mods>

00002f24 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    2f24:	0f 93       	push	r16
    2f26:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    2f28:	00 91 95 01 	lds	r16, 0x0195
    2f2c:	10 91 96 01 	lds	r17, 0x0196
    2f30:	20 91 97 01 	lds	r18, 0x0197
    2f34:	30 91 98 01 	lds	r19, 0x0198
    2f38:	06 2b       	or	r16, r22
    2f3a:	17 2b       	or	r17, r23
    2f3c:	28 2b       	or	r18, r24
    2f3e:	39 2b       	or	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2f40:	00 93 95 01 	sts	0x0195, r16
    2f44:	10 93 96 01 	sts	0x0196, r17
    2f48:	20 93 97 01 	sts	0x0197, r18
    2f4c:	30 93 98 01 	sts	0x0198, r19

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    2f50:	1f 91       	pop	r17
    2f52:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2f54:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <clear_keyboard_but_mods>

00002f58 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    2f5c:	00 91 95 01 	lds	r16, 0x0195
    2f60:	10 91 96 01 	lds	r17, 0x0196
    2f64:	20 91 97 01 	lds	r18, 0x0197
    2f68:	30 91 98 01 	lds	r19, 0x0198
    2f6c:	06 23       	and	r16, r22
    2f6e:	17 23       	and	r17, r23
    2f70:	28 23       	and	r18, r24
    2f72:	39 23       	and	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2f74:	00 93 95 01 	sts	0x0195, r16
    2f78:	10 93 96 01 	sts	0x0196, r17
    2f7c:	20 93 97 01 	sts	0x0197, r18
    2f80:	30 93 98 01 	sts	0x0198, r19
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    2f84:	1f 91       	pop	r17
    2f86:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2f88:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <clear_keyboard_but_mods>

00002f8c <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    2f8c:	0f 93       	push	r16
    2f8e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    2f90:	00 91 95 01 	lds	r16, 0x0195
    2f94:	10 91 96 01 	lds	r17, 0x0196
    2f98:	20 91 97 01 	lds	r18, 0x0197
    2f9c:	30 91 98 01 	lds	r19, 0x0198
    2fa0:	06 27       	eor	r16, r22
    2fa2:	17 27       	eor	r17, r23
    2fa4:	28 27       	eor	r18, r24
    2fa6:	39 27       	eor	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2fa8:	00 93 95 01 	sts	0x0195, r16
    2fac:	10 93 96 01 	sts	0x0196, r17
    2fb0:	20 93 97 01 	sts	0x0197, r18
    2fb4:	30 93 98 01 	sts	0x0198, r19
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    2fb8:	1f 91       	pop	r17
    2fba:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2fbc:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <clear_keyboard_but_mods>

00002fc0 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2fc0:	10 92 91 01 	sts	0x0191, r1
    2fc4:	10 92 92 01 	sts	0x0192, r1
    2fc8:	10 92 93 01 	sts	0x0193, r1
    2fcc:	10 92 94 01 	sts	0x0194, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2fd0:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <clear_keyboard_but_mods>

00002fd4 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    2fd4:	41 e0       	ldi	r20, 0x01	; 1
    2fd6:	50 e0       	ldi	r21, 0x00	; 0
    2fd8:	60 e0       	ldi	r22, 0x00	; 0
    2fda:	70 e0       	ldi	r23, 0x00	; 0
    2fdc:	04 c0       	rjmp	.+8      	; 0x2fe6 <layer_move+0x12>
    2fde:	44 0f       	add	r20, r20
    2fe0:	55 1f       	adc	r21, r21
    2fe2:	66 1f       	adc	r22, r22
    2fe4:	77 1f       	adc	r23, r23
    2fe6:	8a 95       	dec	r24
    2fe8:	d2 f7       	brpl	.-12     	; 0x2fde <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2fea:	40 93 91 01 	sts	0x0191, r20
    2fee:	50 93 92 01 	sts	0x0192, r21
    2ff2:	60 93 93 01 	sts	0x0193, r22
    2ff6:	70 93 94 01 	sts	0x0194, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2ffa:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <clear_keyboard_but_mods>

00002ffe <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    2ffe:	41 e0       	ldi	r20, 0x01	; 1
    3000:	50 e0       	ldi	r21, 0x00	; 0
    3002:	60 e0       	ldi	r22, 0x00	; 0
    3004:	70 e0       	ldi	r23, 0x00	; 0
    3006:	04 c0       	rjmp	.+8      	; 0x3010 <layer_on+0x12>
    3008:	44 0f       	add	r20, r20
    300a:	55 1f       	adc	r21, r21
    300c:	66 1f       	adc	r22, r22
    300e:	77 1f       	adc	r23, r23
    3010:	8a 95       	dec	r24
    3012:	d2 f7       	brpl	.-12     	; 0x3008 <layer_on+0xa>
    3014:	80 91 91 01 	lds	r24, 0x0191
    3018:	90 91 92 01 	lds	r25, 0x0192
    301c:	a0 91 93 01 	lds	r26, 0x0193
    3020:	b0 91 94 01 	lds	r27, 0x0194
    3024:	84 2b       	or	r24, r20
    3026:	95 2b       	or	r25, r21
    3028:	a6 2b       	or	r26, r22
    302a:	b7 2b       	or	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    302c:	80 93 91 01 	sts	0x0191, r24
    3030:	90 93 92 01 	sts	0x0192, r25
    3034:	a0 93 93 01 	sts	0x0193, r26
    3038:	b0 93 94 01 	sts	0x0194, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    303c:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <clear_keyboard_but_mods>

00003040 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3040:	41 e0       	ldi	r20, 0x01	; 1
    3042:	50 e0       	ldi	r21, 0x00	; 0
    3044:	60 e0       	ldi	r22, 0x00	; 0
    3046:	70 e0       	ldi	r23, 0x00	; 0
    3048:	04 c0       	rjmp	.+8      	; 0x3052 <layer_off+0x12>
    304a:	44 0f       	add	r20, r20
    304c:	55 1f       	adc	r21, r21
    304e:	66 1f       	adc	r22, r22
    3050:	77 1f       	adc	r23, r23
    3052:	8a 95       	dec	r24
    3054:	d2 f7       	brpl	.-12     	; 0x304a <layer_off+0xa>
    3056:	40 95       	com	r20
    3058:	50 95       	com	r21
    305a:	60 95       	com	r22
    305c:	70 95       	com	r23
    305e:	80 91 91 01 	lds	r24, 0x0191
    3062:	90 91 92 01 	lds	r25, 0x0192
    3066:	a0 91 93 01 	lds	r26, 0x0193
    306a:	b0 91 94 01 	lds	r27, 0x0194
    306e:	84 23       	and	r24, r20
    3070:	95 23       	and	r25, r21
    3072:	a6 23       	and	r26, r22
    3074:	b7 23       	and	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3076:	80 93 91 01 	sts	0x0191, r24
    307a:	90 93 92 01 	sts	0x0192, r25
    307e:	a0 93 93 01 	sts	0x0193, r26
    3082:	b0 93 94 01 	sts	0x0194, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3086:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <clear_keyboard_but_mods>

0000308a <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    308a:	41 e0       	ldi	r20, 0x01	; 1
    308c:	50 e0       	ldi	r21, 0x00	; 0
    308e:	60 e0       	ldi	r22, 0x00	; 0
    3090:	70 e0       	ldi	r23, 0x00	; 0
    3092:	04 c0       	rjmp	.+8      	; 0x309c <layer_invert+0x12>
    3094:	44 0f       	add	r20, r20
    3096:	55 1f       	adc	r21, r21
    3098:	66 1f       	adc	r22, r22
    309a:	77 1f       	adc	r23, r23
    309c:	8a 95       	dec	r24
    309e:	d2 f7       	brpl	.-12     	; 0x3094 <layer_invert+0xa>
    30a0:	80 91 91 01 	lds	r24, 0x0191
    30a4:	90 91 92 01 	lds	r25, 0x0192
    30a8:	a0 91 93 01 	lds	r26, 0x0193
    30ac:	b0 91 94 01 	lds	r27, 0x0194
    30b0:	84 27       	eor	r24, r20
    30b2:	95 27       	eor	r25, r21
    30b4:	a6 27       	eor	r26, r22
    30b6:	b7 27       	eor	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    30b8:	80 93 91 01 	sts	0x0191, r24
    30bc:	90 93 92 01 	sts	0x0192, r25
    30c0:	a0 93 93 01 	sts	0x0193, r26
    30c4:	b0 93 94 01 	sts	0x0194, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    30c8:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <clear_keyboard_but_mods>

000030cc <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    30cc:	0f 93       	push	r16
    30ce:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    30d0:	00 91 91 01 	lds	r16, 0x0191
    30d4:	10 91 92 01 	lds	r17, 0x0192
    30d8:	20 91 93 01 	lds	r18, 0x0193
    30dc:	30 91 94 01 	lds	r19, 0x0194
    30e0:	06 2b       	or	r16, r22
    30e2:	17 2b       	or	r17, r23
    30e4:	28 2b       	or	r18, r24
    30e6:	39 2b       	or	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    30e8:	00 93 91 01 	sts	0x0191, r16
    30ec:	10 93 92 01 	sts	0x0192, r17
    30f0:	20 93 93 01 	sts	0x0193, r18
    30f4:	30 93 94 01 	sts	0x0194, r19
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    30fc:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <clear_keyboard_but_mods>

00003100 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    3100:	0f 93       	push	r16
    3102:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3104:	00 91 91 01 	lds	r16, 0x0191
    3108:	10 91 92 01 	lds	r17, 0x0192
    310c:	20 91 93 01 	lds	r18, 0x0193
    3110:	30 91 94 01 	lds	r19, 0x0194
    3114:	06 23       	and	r16, r22
    3116:	17 23       	and	r17, r23
    3118:	28 23       	and	r18, r24
    311a:	39 23       	and	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    311c:	00 93 91 01 	sts	0x0191, r16
    3120:	10 93 92 01 	sts	0x0192, r17
    3124:	20 93 93 01 	sts	0x0193, r18
    3128:	30 93 94 01 	sts	0x0194, r19
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    312c:	1f 91       	pop	r17
    312e:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3130:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <clear_keyboard_but_mods>

00003134 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3134:	0f 93       	push	r16
    3136:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3138:	00 91 91 01 	lds	r16, 0x0191
    313c:	10 91 92 01 	lds	r17, 0x0192
    3140:	20 91 93 01 	lds	r18, 0x0193
    3144:	30 91 94 01 	lds	r19, 0x0194
    3148:	06 27       	eor	r16, r22
    314a:	17 27       	eor	r17, r23
    314c:	28 27       	eor	r18, r24
    314e:	39 27       	eor	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3150:	00 93 91 01 	sts	0x0191, r16
    3154:	10 93 92 01 	sts	0x0192, r17
    3158:	20 93 93 01 	sts	0x0193, r18
    315c:	30 93 94 01 	sts	0x0194, r19
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    3160:	1f 91       	pop	r17
    3162:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3164:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <clear_keyboard_but_mods>

00003168 <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    3168:	08 95       	ret

0000316a <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(key_t key)
{
    316a:	cf 92       	push	r12
    316c:	df 92       	push	r13
    316e:	ef 92       	push	r14
    3170:	ff 92       	push	r15
    3172:	0f 93       	push	r16
    3174:	1f 93       	push	r17
    3176:	cf 93       	push	r28
    3178:	df 93       	push	r29
    317a:	ec 01       	movw	r28, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    317c:	c0 90 95 01 	lds	r12, 0x0195
    3180:	d0 90 96 01 	lds	r13, 0x0196
    3184:	e0 90 97 01 	lds	r14, 0x0197
    3188:	f0 90 98 01 	lds	r15, 0x0198
    318c:	80 91 91 01 	lds	r24, 0x0191
    3190:	90 91 92 01 	lds	r25, 0x0192
    3194:	a0 91 93 01 	lds	r26, 0x0193
    3198:	b0 91 94 01 	lds	r27, 0x0194
    319c:	c8 2a       	or	r12, r24
    319e:	d9 2a       	or	r13, r25
    31a0:	ea 2a       	or	r14, r26
    31a2:	fb 2a       	or	r15, r27
    31a4:	0f e1       	ldi	r16, 0x1F	; 31
    31a6:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    31a8:	b7 01       	movw	r22, r14
    31aa:	a6 01       	movw	r20, r12
    31ac:	00 2e       	mov	r0, r16
    31ae:	04 c0       	rjmp	.+8      	; 0x31b8 <layer_switch_get_action+0x4e>
    31b0:	76 95       	lsr	r23
    31b2:	67 95       	ror	r22
    31b4:	57 95       	ror	r21
    31b6:	47 95       	ror	r20
    31b8:	0a 94       	dec	r0
    31ba:	d2 f7       	brpl	.-12     	; 0x31b0 <layer_switch_get_action+0x46>
    31bc:	40 ff       	sbrs	r20, 0
    31be:	07 c0       	rjmp	.+14     	; 0x31ce <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    31c0:	be 01       	movw	r22, r28
    31c2:	80 2f       	mov	r24, r16
    31c4:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    31c8:	81 30       	cpi	r24, 0x01	; 1
    31ca:	91 05       	cpc	r25, r1
    31cc:	39 f4       	brne	.+14     	; 0x31dc <layer_switch_get_action+0x72>
    31ce:	01 50       	subi	r16, 0x01	; 1
    31d0:	11 09       	sbc	r17, r1
    31d2:	50 f7       	brcc	.-44     	; 0x31a8 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    31d4:	be 01       	movw	r22, r28
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    31dc:	df 91       	pop	r29
    31de:	cf 91       	pop	r28
    31e0:	1f 91       	pop	r17
    31e2:	0f 91       	pop	r16
    31e4:	ff 90       	pop	r15
    31e6:	ef 90       	pop	r14
    31e8:	df 90       	pop	r13
    31ea:	cf 90       	pop	r12
    31ec:	08 95       	ret

000031ee <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    31ee:	90 91 49 01 	lds	r25, 0x0149
    31f2:	99 23       	and	r25, r25
    31f4:	41 f1       	breq	.+80     	; 0x3246 <add_key+0x58>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < REPORT_BITS) {
    31f6:	98 2f       	mov	r25, r24
    31f8:	96 95       	lsr	r25
    31fa:	96 95       	lsr	r25
    31fc:	96 95       	lsr	r25
    31fe:	9f 30       	cpi	r25, 0x0F	; 15
    3200:	88 f4       	brcc	.+34     	; 0x3224 <add_key+0x36>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3202:	e0 91 15 01 	lds	r30, 0x0115
    3206:	f0 91 16 01 	lds	r31, 0x0116
    320a:	e9 0f       	add	r30, r25
    320c:	f1 1d       	adc	r31, r1
    320e:	87 70       	andi	r24, 0x07	; 7
    3210:	21 e0       	ldi	r18, 0x01	; 1
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	01 c0       	rjmp	.+2      	; 0x3218 <add_key+0x2a>
    3216:	22 0f       	add	r18, r18
    3218:	8a 95       	dec	r24
    321a:	ea f7       	brpl	.-6      	; 0x3216 <add_key+0x28>
    321c:	81 81       	ldd	r24, Z+1	; 0x01
    321e:	82 2b       	or	r24, r18
    3220:	81 83       	std	Z+1, r24	; 0x01
    3222:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3224:	90 91 b5 01 	lds	r25, 0x01B5
    3228:	90 ff       	sbrs	r25, 0
    322a:	2d c0       	rjmp	.+90     	; 0x3286 <add_key+0x98>
    322c:	1f 92       	push	r1
    322e:	8f 93       	push	r24
    3230:	88 ef       	ldi	r24, 0xF8	; 248
    3232:	93 e0       	ldi	r25, 0x03	; 3
    3234:	9f 93       	push	r25
    3236:	8f 93       	push	r24
    3238:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__xprintf>
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	08 95       	ret
static inline void add_key_byte(uint8_t code)
{
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3246:	40 91 15 01 	lds	r20, 0x0115
    324a:	50 91 16 01 	lds	r21, 0x0116
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	9f ef       	ldi	r25, 0xFF	; 255
    3254:	fa 01       	movw	r30, r20
    3256:	e2 0f       	add	r30, r18
    3258:	f3 1f       	adc	r31, r19
    325a:	62 81       	ldd	r22, Z+2	; 0x02
    325c:	68 17       	cp	r22, r24
    325e:	99 f0       	breq	.+38     	; 0x3286 <add_key+0x98>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3260:	9f 3f       	cpi	r25, 0xFF	; 255
    3262:	19 f4       	brne	.+6      	; 0x326a <add_key+0x7c>
    3264:	61 11       	cpse	r22, r1
    3266:	01 c0       	rjmp	.+2      	; 0x326a <add_key+0x7c>
    3268:	92 2f       	mov	r25, r18
    326a:	2f 5f       	subi	r18, 0xFF	; 255
    326c:	3f 4f       	sbci	r19, 0xFF	; 255
/* local functions */
static inline void add_key_byte(uint8_t code)
{
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < REPORT_KEYS; i++) {
    326e:	2e 30       	cpi	r18, 0x0E	; 14
    3270:	31 05       	cpc	r19, r1
    3272:	81 f7       	brne	.-32     	; 0x3254 <add_key+0x66>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == REPORT_KEYS) {
        if (empty != -1) {
    3274:	9f 3f       	cpi	r25, 0xFF	; 255
    3276:	39 f0       	breq	.+14     	; 0x3286 <add_key+0x98>
            keyboard_report->keys[empty] = code;
    3278:	fa 01       	movw	r30, r20
    327a:	e9 0f       	add	r30, r25
    327c:	f1 1d       	adc	r31, r1
    327e:	97 fd       	sbrc	r25, 7
    3280:	fa 95       	dec	r31
    3282:	82 83       	std	Z+2, r24	; 0x02
    3284:	08 95       	ret
    3286:	08 95       	ret

00003288 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3288:	90 91 49 01 	lds	r25, 0x0149
    328c:	99 23       	and	r25, r25
    328e:	49 f1       	breq	.+82     	; 0x32e2 <del_key+0x5a>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < REPORT_BITS) {
    3290:	98 2f       	mov	r25, r24
    3292:	96 95       	lsr	r25
    3294:	96 95       	lsr	r25
    3296:	96 95       	lsr	r25
    3298:	9f 30       	cpi	r25, 0x0F	; 15
    329a:	90 f4       	brcc	.+36     	; 0x32c0 <del_key+0x38>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    329c:	e0 91 15 01 	lds	r30, 0x0115
    32a0:	f0 91 16 01 	lds	r31, 0x0116
    32a4:	e9 0f       	add	r30, r25
    32a6:	f1 1d       	adc	r31, r1
    32a8:	87 70       	andi	r24, 0x07	; 7
    32aa:	21 e0       	ldi	r18, 0x01	; 1
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	01 c0       	rjmp	.+2      	; 0x32b2 <del_key+0x2a>
    32b0:	22 0f       	add	r18, r18
    32b2:	8a 95       	dec	r24
    32b4:	ea f7       	brpl	.-6      	; 0x32b0 <del_key+0x28>
    32b6:	20 95       	com	r18
    32b8:	81 81       	ldd	r24, Z+1	; 0x01
    32ba:	28 23       	and	r18, r24
    32bc:	21 83       	std	Z+1, r18	; 0x01
    32be:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    32c0:	90 91 b5 01 	lds	r25, 0x01B5
    32c4:	90 ff       	sbrs	r25, 0
    32c6:	1f c0       	rjmp	.+62     	; 0x3306 <del_key+0x7e>
    32c8:	1f 92       	push	r1
    32ca:	8f 93       	push	r24
    32cc:	8a ed       	ldi	r24, 0xDA	; 218
    32ce:	93 e0       	ldi	r25, 0x03	; 3
    32d0:	9f 93       	push	r25
    32d2:	8f 93       	push	r24
    32d4:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__xprintf>
    32d8:	0f 90       	pop	r0
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	08 95       	ret
}

static inline void del_key_byte(uint8_t code)
{
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    32e2:	40 91 15 01 	lds	r20, 0x0115
    32e6:	50 91 16 01 	lds	r21, 0x0116
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	fa 01       	movw	r30, r20
    32f0:	e2 0f       	add	r30, r18
    32f2:	f3 1f       	adc	r31, r19
    32f4:	92 81       	ldd	r25, Z+2	; 0x02
    32f6:	98 13       	cpse	r25, r24
    32f8:	01 c0       	rjmp	.+2      	; 0x32fc <del_key+0x74>
            keyboard_report->keys[i] = 0;
    32fa:	12 82       	std	Z+2, r1	; 0x02
    32fc:	2f 5f       	subi	r18, 0xFF	; 255
    32fe:	3f 4f       	sbci	r19, 0xFF	; 255
    }
}

static inline void del_key_byte(uint8_t code)
{
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
    3300:	2e 30       	cpi	r18, 0x0E	; 14
    3302:	31 05       	cpc	r19, r1
    3304:	a1 f7       	brne	.-24     	; 0x32ee <del_key+0x66>
    3306:	08 95       	ret

00003308 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    330c:	e0 91 15 01 	lds	r30, 0x0115
    3310:	f0 91 16 01 	lds	r31, 0x0116
    3314:	e8 0f       	add	r30, r24
    3316:	f9 1f       	adc	r31, r25
    3318:	10 82       	st	Z, r1
    331a:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < REPORT_SIZE; i++) {
    331c:	80 31       	cpi	r24, 0x10	; 16
    331e:	91 05       	cpc	r25, r1
    3320:	a9 f7       	brne	.-22     	; 0x330c <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3322:	08 95       	ret

00003324 <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    3324:	90 91 ab 01 	lds	r25, 0x01AB
    3328:	98 2b       	or	r25, r24
    332a:	90 93 ab 01 	sts	0x01AB, r25
    332e:	08 95       	ret

00003330 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3330:	80 95       	com	r24
    3332:	90 91 ab 01 	lds	r25, 0x01AB
    3336:	98 23       	and	r25, r24
    3338:	90 93 ab 01 	sts	0x01AB, r25
    333c:	08 95       	ret

0000333e <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    333e:	10 92 ab 01 	sts	0x01AB, r1
    3342:	08 95       	ret

00003344 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3344:	90 91 aa 01 	lds	r25, 0x01AA
    3348:	98 2b       	or	r25, r24
    334a:	90 93 aa 01 	sts	0x01AA, r25
    334e:	08 95       	ret

00003350 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3350:	80 95       	com	r24
    3352:	90 91 aa 01 	lds	r25, 0x01AA
    3356:	98 23       	and	r25, r24
    3358:	90 93 aa 01 	sts	0x01AA, r25
    335c:	08 95       	ret

0000335e <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    335e:	10 92 aa 01 	sts	0x01AA, r1
    3362:	08 95       	ret

00003364 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3364:	80 93 99 01 	sts	0x0199, r24
    3368:	08 95       	ret

0000336a <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    336a:	10 92 99 01 	sts	0x0199, r1
    336e:	08 95       	ret

00003370 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3370:	40 91 15 01 	lds	r20, 0x0115
    3374:	50 91 16 01 	lds	r21, 0x0116
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	fa 01       	movw	r30, r20
    3380:	e2 0f       	add	r30, r18
    3382:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3384:	91 81       	ldd	r25, Z+1	; 0x01
    3386:	91 11       	cpse	r25, r1
            cnt++;
    3388:	8f 5f       	subi	r24, 0xFF	; 255
    338a:	2f 5f       	subi	r18, 0xFF	; 255
    338c:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < REPORT_SIZE; i++) {
    338e:	2f 30       	cpi	r18, 0x0F	; 15
    3390:	31 05       	cpc	r19, r1
    3392:	a9 f7       	brne	.-22     	; 0x337e <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3394:	08 95       	ret

00003396 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3396:	e0 91 15 01 	lds	r30, 0x0115
    339a:	f0 91 16 01 	lds	r31, 0x0116
    339e:	80 91 ab 01 	lds	r24, 0x01AB
    33a2:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    33a4:	e0 91 15 01 	lds	r30, 0x0115
    33a8:	f0 91 16 01 	lds	r31, 0x0116
    33ac:	80 81       	ld	r24, Z
    33ae:	90 91 aa 01 	lds	r25, 0x01AA
    33b2:	89 2b       	or	r24, r25
    33b4:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    33b6:	90 91 99 01 	lds	r25, 0x0199
    33ba:	99 23       	and	r25, r25
    33bc:	61 f0       	breq	.+24     	; 0x33d6 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    33be:	e0 91 15 01 	lds	r30, 0x0115
    33c2:	f0 91 16 01 	lds	r31, 0x0116
    33c6:	80 81       	ld	r24, Z
    33c8:	89 2b       	or	r24, r25
    33ca:	80 83       	st	Z, r24
        if (has_anykey()) {
    33cc:	0e 94 b8 19 	call	0x3370	; 0x3370 <has_anykey>
    33d0:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    33d2:	10 92 99 01 	sts	0x0199, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    33d6:	80 91 15 01 	lds	r24, 0x0115
    33da:	90 91 16 01 	lds	r25, 0x0116
    33de:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <host_keyboard_send>

000033e2 <action_for_key>:

uint16_t actionmap_key_to_action(uint8_t layer, key_t key);

/* converts key to action */
action_t action_for_key(uint8_t layer, key_t key) {
  uint16_t keycode = actionmap_key_to_action(layer, key);
    33e2:	0e 94 5f 05 	call	0xabe	; 0xabe <actionmap_key_to_action>
    33e6:	9c 01       	movw	r18, r24
  if(keycode >= KC_FN0 && keycode <= KC_FN31) {
    33e8:	80 5c       	subi	r24, 0xC0	; 192
    33ea:	91 09       	sbc	r25, r1
    33ec:	80 97       	sbiw	r24, 0x20	; 32
    33ee:	20 f4       	brcc	.+8      	; 0x33f8 <action_for_key+0x16>
    return keymap_fn_to_action(keycode);
    33f0:	82 2f       	mov	r24, r18
    33f2:	0e 94 71 05 	call	0xae2	; 0xae2 <keymap_fn_to_action>
    33f6:	08 95       	ret
  } else {
    action_t action;
    action.key.code = (uint8_t)keycode;
    action.key.mods = (keycode >> 8) & 0x1f;

    return action;
    33f8:	c9 01       	movw	r24, r18
    33fa:	9f 70       	andi	r25, 0x0F	; 15
  }
}
    33fc:	08 95       	ret

000033fe <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	08 95       	ret

00003404 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3404:	82 e0       	ldi	r24, 0x02	; 2
    3406:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3408:	93 e0       	ldi	r25, 0x03	; 3
    340a:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    340c:	9a ef       	ldi	r25, 0xFA	; 250
    340e:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3410:	80 93 6e 00 	sts	0x006E, r24
    3414:	08 95       	ret

00003416 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3416:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3418:	f8 94       	cli
    t = timer_count;
    341a:	80 91 ac 01 	lds	r24, 0x01AC
    341e:	90 91 ad 01 	lds	r25, 0x01AD
    3422:	a0 91 ae 01 	lds	r26, 0x01AE
    3426:	b0 91 af 01 	lds	r27, 0x01AF
    SREG = sreg;
    342a:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    342c:	08 95       	ret

0000342e <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    342e:	1f 92       	push	r1
    3430:	0f 92       	push	r0
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	0f 92       	push	r0
    3436:	11 24       	eor	r1, r1
    3438:	8f 93       	push	r24
    343a:	9f 93       	push	r25
    343c:	af 93       	push	r26
    343e:	bf 93       	push	r27
    timer_count++;
    3440:	80 91 ac 01 	lds	r24, 0x01AC
    3444:	90 91 ad 01 	lds	r25, 0x01AD
    3448:	a0 91 ae 01 	lds	r26, 0x01AE
    344c:	b0 91 af 01 	lds	r27, 0x01AF
    3450:	01 96       	adiw	r24, 0x01	; 1
    3452:	a1 1d       	adc	r26, r1
    3454:	b1 1d       	adc	r27, r1
    3456:	80 93 ac 01 	sts	0x01AC, r24
    345a:	90 93 ad 01 	sts	0x01AD, r25
    345e:	a0 93 ae 01 	sts	0x01AE, r26
    3462:	b0 93 af 01 	sts	0x01AF, r27
}
    3466:	bf 91       	pop	r27
    3468:	af 91       	pop	r26
    346a:	9f 91       	pop	r25
    346c:	8f 91       	pop	r24
    346e:	0f 90       	pop	r0
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	0f 90       	pop	r0
    3474:	1f 90       	pop	r1
    3476:	18 95       	reti

00003478 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3478:	90 93 b1 01 	sts	0x01B1, r25
    347c:	80 93 b0 01 	sts	0x01B0, r24
    3480:	08 95       	ret

00003482 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3482:	0e 94 42 0a 	call	0x1484	; 0x1484 <USB_Disable>
    cli();
    3486:	f8 94       	cli
    3488:	2f ef       	ldi	r18, 0xFF	; 255
    348a:	87 ea       	ldi	r24, 0xA7	; 167
    348c:	91 e6       	ldi	r25, 0x61	; 97
    348e:	21 50       	subi	r18, 0x01	; 1
    3490:	80 40       	sbci	r24, 0x00	; 0
    3492:	90 40       	sbci	r25, 0x00	; 0
    3494:	e1 f7       	brne	.-8      	; 0x348e <bootloader_jump+0xc>
    3496:	00 c0       	rjmp	.+0      	; 0x3498 <bootloader_jump+0x16>
    3498:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    349a:	87 e0       	ldi	r24, 0x07	; 7
    349c:	90 eb       	ldi	r25, 0xB0	; 176
    349e:	dc 01       	movw	r26, r24
    34a0:	80 93 c3 01 	sts	0x01C3, r24
    34a4:	90 93 c4 01 	sts	0x01C4, r25
    34a8:	a0 93 c5 01 	sts	0x01C5, r26
    34ac:	b0 93 c6 01 	sts	0x01C6, r27
    wdt_enable(WDTO_250MS);
    34b0:	2c e0       	ldi	r18, 0x0C	; 12
    34b2:	88 e1       	ldi	r24, 0x18	; 24
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	0f b6       	in	r0, 0x3f	; 63
    34b8:	f8 94       	cli
    34ba:	a8 95       	wdr
    34bc:	80 93 60 00 	sts	0x0060, r24
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	20 93 60 00 	sts	0x0060, r18
    34c6:	ff cf       	rjmp	.-2      	; 0x34c6 <bootloader_jump+0x44>

000034c8 <suspend_power_down>:
#include "action.h"
#include "backlight.h"


void suspend_power_down(void)
{
    34c8:	08 95       	ret

000034ca <suspend_wakeup_condition>:
    wdt_disable();
#endif
}

bool suspend_wakeup_condition(void)
{
    34ca:	cf 93       	push	r28
    matrix_scan();
    34cc:	0e 94 ca 05 	call	0xb94	; 0xb94 <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    34d0:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    34d2:	8c 2f       	mov	r24, r28
    34d4:	0e 94 d2 06 	call	0xda4	; 0xda4 <matrix_get_row>
    34d8:	89 2b       	or	r24, r25
    34da:	29 f4       	brne	.+10     	; 0x34e6 <suspend_wakeup_condition+0x1c>
}

bool suspend_wakeup_condition(void)
{
    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    34dc:	cf 5f       	subi	r28, 0xFF	; 255
    34de:	c4 30       	cpi	r28, 0x04	; 4
    34e0:	c1 f7       	brne	.-16     	; 0x34d2 <suspend_wakeup_condition+0x8>
        if (matrix_get_row(r)) return true;
    }
    return false;
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	01 c0       	rjmp	.+2      	; 0x34e8 <suspend_wakeup_condition+0x1e>

bool suspend_wakeup_condition(void)
{
    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    34e8:	cf 91       	pop	r28
    34ea:	08 95       	ret

000034ec <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    34ec:	0c 94 92 13 	jmp	0x2724	; 0x2724 <clear_keyboard>

000034f0 <biton32>:
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}

uint8_t biton32(uint32_t bits)
{
    34f0:	cf 92       	push	r12
    34f2:	df 92       	push	r13
    34f4:	ef 92       	push	r14
    34f6:	ff 92       	push	r15
    34f8:	0f 93       	push	r16
    34fa:	1f 93       	push	r17
    uint8_t n = 0;
    if (bits >>16) { bits >>=16; n +=16;}
    34fc:	6c 01       	movw	r12, r24
    34fe:	ee 24       	eor	r14, r14
    3500:	ff 24       	eor	r15, r15
    3502:	c1 14       	cp	r12, r1
    3504:	d1 04       	cpc	r13, r1
    3506:	e1 04       	cpc	r14, r1
    3508:	f1 04       	cpc	r15, r1
    350a:	21 f4       	brne	.+8      	; 0x3514 <biton32+0x24>
    350c:	6b 01       	movw	r12, r22
    350e:	7c 01       	movw	r14, r24
    return n;
}

uint8_t biton32(uint32_t bits)
{
    uint8_t n = 0;
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	01 c0       	rjmp	.+2      	; 0x3516 <biton32+0x26>
    if (bits >>16) { bits >>=16; n +=16;}
    3514:	80 e1       	ldi	r24, 0x10	; 16
    if (bits >> 8) { bits >>= 8; n += 8;}
    3516:	33 27       	eor	r19, r19
    3518:	2f 2d       	mov	r18, r15
    351a:	1e 2d       	mov	r17, r14
    351c:	0d 2d       	mov	r16, r13
    351e:	01 15       	cp	r16, r1
    3520:	11 05       	cpc	r17, r1
    3522:	21 05       	cpc	r18, r1
    3524:	31 05       	cpc	r19, r1
    3526:	19 f0       	breq	.+6      	; 0x352e <biton32+0x3e>
    3528:	88 5f       	subi	r24, 0xF8	; 248
    352a:	68 01       	movw	r12, r16
    352c:	79 01       	movw	r14, r18
    if (bits >> 4) { bits >>= 4; n += 4;}
    352e:	97 01       	movw	r18, r14
    3530:	86 01       	movw	r16, r12
    3532:	a4 e0       	ldi	r26, 0x04	; 4
    3534:	36 95       	lsr	r19
    3536:	27 95       	ror	r18
    3538:	17 95       	ror	r17
    353a:	07 95       	ror	r16
    353c:	aa 95       	dec	r26
    353e:	d1 f7       	brne	.-12     	; 0x3534 <biton32+0x44>
    3540:	01 15       	cp	r16, r1
    3542:	11 05       	cpc	r17, r1
    3544:	21 05       	cpc	r18, r1
    3546:	31 05       	cpc	r19, r1
    3548:	19 f0       	breq	.+6      	; 0x3550 <biton32+0x60>
    354a:	8c 5f       	subi	r24, 0xFC	; 252
    354c:	68 01       	movw	r12, r16
    354e:	79 01       	movw	r14, r18
    if (bits >> 2) { bits >>= 2; n += 2;}
    3550:	97 01       	movw	r18, r14
    3552:	86 01       	movw	r16, r12
    3554:	f2 e0       	ldi	r31, 0x02	; 2
    3556:	36 95       	lsr	r19
    3558:	27 95       	ror	r18
    355a:	17 95       	ror	r17
    355c:	07 95       	ror	r16
    355e:	fa 95       	dec	r31
    3560:	d1 f7       	brne	.-12     	; 0x3556 <biton32+0x66>
    3562:	01 15       	cp	r16, r1
    3564:	11 05       	cpc	r17, r1
    3566:	21 05       	cpc	r18, r1
    3568:	31 05       	cpc	r19, r1
    356a:	19 f0       	breq	.+6      	; 0x3572 <biton32+0x82>
    356c:	8e 5f       	subi	r24, 0xFE	; 254
    356e:	68 01       	movw	r12, r16
    3570:	79 01       	movw	r14, r18
    if (bits >> 1) { bits >>= 1; n += 1;}
    3572:	b7 01       	movw	r22, r14
    3574:	a6 01       	movw	r20, r12
    3576:	76 95       	lsr	r23
    3578:	67 95       	ror	r22
    357a:	57 95       	ror	r21
    357c:	47 95       	ror	r20
    357e:	45 2b       	or	r20, r21
    3580:	46 2b       	or	r20, r22
    3582:	47 2b       	or	r20, r23
    3584:	09 f0       	breq	.+2      	; 0x3588 <biton32+0x98>
    3586:	8f 5f       	subi	r24, 0xFF	; 255
    return n;
}
    3588:	1f 91       	pop	r17
    358a:	0f 91       	pop	r16
    358c:	ff 90       	pop	r15
    358e:	ef 90       	pop	r14
    3590:	df 90       	pop	r13
    3592:	cf 90       	pop	r12
    3594:	08 95       	ret

00003596 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3596:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3598:	98 2f       	mov	r25, r24
    359a:	9c 7c       	andi	r25, 0xCC	; 204
    359c:	96 95       	lsr	r25
    359e:	96 95       	lsr	r25
    35a0:	83 73       	andi	r24, 0x33	; 51
    35a2:	44 e0       	ldi	r20, 0x04	; 4
    35a4:	84 9f       	mul	r24, r20
    35a6:	90 01       	movw	r18, r0
    35a8:	11 24       	eor	r1, r1
    35aa:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    35ac:	89 2f       	mov	r24, r25
    35ae:	8a 7a       	andi	r24, 0xAA	; 170
    35b0:	86 95       	lsr	r24
    35b2:	95 75       	andi	r25, 0x55	; 85
    35b4:	99 0f       	add	r25, r25
    return bits;
}
    35b6:	89 2b       	or	r24, r25
    35b8:	08 95       	ret

000035ba <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    35ba:	1f 93       	push	r17
    35bc:	cf 93       	push	r28
    35be:	df 93       	push	r29
    35c0:	1f 92       	push	r1
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    35c6:	99 83       	std	Y+1, r25	; 0x01
    35c8:	0e 94 cb 1a 	call	0x3596	; 0x3596 <bitrev>
    35cc:	18 2f       	mov	r17, r24
    35ce:	99 81       	ldd	r25, Y+1	; 0x01
    35d0:	89 2f       	mov	r24, r25
    35d2:	0e 94 cb 1a 	call	0x3596	; 0x3596 <bitrev>
    35d6:	21 2f       	mov	r18, r17
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	32 2f       	mov	r19, r18
    35dc:	22 27       	eor	r18, r18
    return bits;
}
    35de:	a9 01       	movw	r20, r18
    35e0:	48 2b       	or	r20, r24
    35e2:	ca 01       	movw	r24, r20
    35e4:	0f 90       	pop	r0
    35e6:	df 91       	pop	r29
    35e8:	cf 91       	pop	r28
    35ea:	1f 91       	pop	r17
    35ec:	08 95       	ret

000035ee <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    35ee:	cf 93       	push	r28
    35f0:	c8 2f       	mov	r28, r24
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    35f2:	8d e3       	ldi	r24, 0x3D	; 61
    35f4:	94 e0       	ldi	r25, 0x04	; 4
    35f6:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    35fa:	60 91 95 01 	lds	r22, 0x0195
    35fe:	70 91 96 01 	lds	r23, 0x0196
    3602:	80 91 97 01 	lds	r24, 0x0197
    3606:	90 91 98 01 	lds	r25, 0x0198
    360a:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <biton32>
    360e:	1f 92       	push	r1
    3610:	8f 93       	push	r24
    3612:	2a e3       	ldi	r18, 0x3A	; 58
    3614:	34 e0       	ldi	r19, 0x04	; 4
    3616:	3f 93       	push	r19
    3618:	2f 93       	push	r18
    361a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__xprintf>
    print(" to "); print_dec(layer); print("\n");
    361e:	85 e3       	ldi	r24, 0x35	; 53
    3620:	94 e0       	ldi	r25, 0x04	; 4
    3622:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    3626:	1f 92       	push	r1
    3628:	cf 93       	push	r28
    362a:	22 e3       	ldi	r18, 0x32	; 50
    362c:	34 e0       	ldi	r19, 0x04	; 4
    362e:	3f 93       	push	r19
    3630:	2f 93       	push	r18
    3632:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__xprintf>
    3636:	80 e3       	ldi	r24, 0x30	; 48
    3638:	94 e0       	ldi	r25, 0x04	; 4
    363a:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    default_layer_set(1UL<<layer);
    363e:	61 e0       	ldi	r22, 0x01	; 1
    3640:	70 e0       	ldi	r23, 0x00	; 0
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	04 c0       	rjmp	.+8      	; 0x3650 <switch_default_layer+0x62>
    3648:	66 0f       	add	r22, r22
    364a:	77 1f       	adc	r23, r23
    364c:	88 1f       	adc	r24, r24
    364e:	99 1f       	adc	r25, r25
    3650:	ca 95       	dec	r28
    3652:	d2 f7       	brpl	.-12     	; 0x3648 <switch_default_layer+0x5a>
    3654:	0e 94 88 17 	call	0x2f10	; 0x2f10 <default_layer_set>
    clear_keyboard();
    3658:	8d b7       	in	r24, 0x3d	; 61
    365a:	9e b7       	in	r25, 0x3e	; 62
    365c:	08 96       	adiw	r24, 0x08	; 8
    365e:	0f b6       	in	r0, 0x3f	; 63
    3660:	f8 94       	cli
    3662:	9e bf       	out	0x3e, r25	; 62
    3664:	0f be       	out	0x3f, r0	; 63
    3666:	8d bf       	out	0x3d, r24	; 61
}
    3668:	cf 91       	pop	r28
static void switch_default_layer(uint8_t layer)
{
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    print(" to "); print_dec(layer); print("\n");
    default_layer_set(1UL<<layer);
    clear_keyboard();
    366a:	0c 94 92 13 	jmp	0x2724	; 0x2724 <clear_keyboard>

0000366e <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    366e:	80 e0       	ldi	r24, 0x00	; 0
    3670:	08 95       	ret

00003672 <command_proc>:
typedef enum { ONESHOT, CONSOLE, MOUSEKEY } cmdstate_t;
static cmdstate_t state = ONESHOT;


bool command_proc(uint8_t code)
{
    3672:	cf 93       	push	r28
    3674:	c8 2f       	mov	r28, r24
    switch (state) {
    3676:	80 91 b4 01 	lds	r24, 0x01B4
    367a:	88 23       	and	r24, r24
    367c:	21 f0       	breq	.+8      	; 0x3686 <command_proc+0x14>
    367e:	81 30       	cpi	r24, 0x01	; 1
    3680:	09 f4       	brne	.+2      	; 0x3684 <command_proc+0x12>
    3682:	99 c1       	rjmp	.+818    	; 0x39b6 <command_proc+0x344>
    3684:	ba c1       	rjmp	.+884    	; 0x39fa <command_proc+0x388>
        case ONESHOT:
            if (!IS_COMMAND())
    3686:	e0 91 15 01 	lds	r30, 0x0115
    368a:	f0 91 16 01 	lds	r31, 0x0116
    368e:	80 81       	ld	r24, Z
    3690:	82 32       	cpi	r24, 0x22	; 34
    3692:	09 f0       	breq	.+2      	; 0x3696 <command_proc+0x24>
    3694:	b4 c1       	rjmp	.+872    	; 0x39fe <command_proc+0x38c>
                return false;
            return (command_extra(code) || command_common(code));
    3696:	8c 2f       	mov	r24, r28
    3698:	0e 94 37 1b 	call	0x366e	; 0x366e <command_extra>
    369c:	81 11       	cpse	r24, r1
    369e:	88 c1       	rjmp	.+784    	; 0x39b0 <command_proc+0x33e>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    36a0:	cb 31       	cpi	r28, 0x1B	; 27
    36a2:	09 f4       	brne	.+2      	; 0x36a6 <command_proc+0x34>
    36a4:	fa c0       	rjmp	.+500    	; 0x389a <command_proc+0x228>
    36a6:	08 f0       	brcs	.+2      	; 0x36aa <command_proc+0x38>
    36a8:	51 c0       	rjmp	.+162    	; 0x374c <command_proc+0xda>
    36aa:	c0 31       	cpi	r28, 0x10	; 16
    36ac:	09 f4       	brne	.+2      	; 0x36b0 <command_proc+0x3e>
    36ae:	1b c1       	rjmp	.+566    	; 0x38e6 <command_proc+0x274>
    36b0:	40 f5       	brcc	.+80     	; 0x3702 <command_proc+0x90>
    36b2:	c7 30       	cpi	r28, 0x07	; 7
    36b4:	09 f4       	brne	.+2      	; 0x36b8 <command_proc+0x46>
    36b6:	e1 c0       	rjmp	.+450    	; 0x387a <command_proc+0x208>
    36b8:	e8 f4       	brcc	.+58     	; 0x36f4 <command_proc+0x82>
    36ba:	c6 30       	cpi	r28, 0x06	; 6
    36bc:	09 f0       	breq	.+2      	; 0x36c0 <command_proc+0x4e>
    36be:	72 c1       	rjmp	.+740    	; 0x39a4 <command_proc+0x332>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    36c0:	80 91 b5 01 	lds	r24, 0x01B5
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    36c4:	81 7f       	andi	r24, 0xF1	; 241
    36c6:	8e 7f       	andi	r24, 0xFE	; 254
    36c8:	80 93 b5 01 	sts	0x01B5, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\n----- Console Help -----\n");
    36cc:	81 e6       	ldi	r24, 0x61	; 97
    36ce:	94 e0       	ldi	r25, 0x04	; 4
    36d0:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("ESC/q:	quit\n");
    36d4:	84 e5       	ldi	r24, 0x54	; 84
    36d6:	94 e0       	ldi	r25, 0x04	; 4
    36d8:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("\nEnter Console Mode\n");
    36dc:	83 ea       	ldi	r24, 0xA3	; 163
    36de:	98 e0       	ldi	r25, 0x08	; 8
    36e0:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
            print("C> ");
    36e4:	8f e9       	ldi	r24, 0x9F	; 159
    36e6:	98 e0       	ldi	r25, 0x08	; 8
    36e8:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
            state = CONSOLE;
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	80 93 b4 01 	sts	0x01B4, r24
    36f2:	5e c1       	rjmp	.+700    	; 0x39b0 <command_proc+0x33e>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    36f4:	cb 30       	cpi	r28, 0x0B	; 11
    36f6:	09 f4       	brne	.+2      	; 0x36fa <command_proc+0x88>
    36f8:	75 c0       	rjmp	.+234    	; 0x37e4 <command_proc+0x172>
    36fa:	ce 30       	cpi	r28, 0x0E	; 14
    36fc:	09 f4       	brne	.+2      	; 0x3700 <command_proc+0x8e>
    36fe:	e0 c0       	rjmp	.+448    	; 0x38c0 <command_proc+0x24e>
    3700:	51 c1       	rjmp	.+674    	; 0x39a4 <command_proc+0x332>
    3702:	c6 31       	cpi	r28, 0x16	; 22
    3704:	09 f4       	brne	.+2      	; 0x3708 <command_proc+0x96>
    3706:	22 c1       	rjmp	.+580    	; 0x394c <command_proc+0x2da>
    3708:	20 f4       	brcc	.+8      	; 0x3712 <command_proc+0xa0>
    370a:	c1 31       	cpi	r28, 0x11	; 17
    370c:	09 f4       	brne	.+2      	; 0x3710 <command_proc+0x9e>
    370e:	31 c1       	rjmp	.+610    	; 0x3972 <command_proc+0x300>
    3710:	49 c1       	rjmp	.+658    	; 0x39a4 <command_proc+0x332>
    3712:	c7 31       	cpi	r28, 0x17	; 23
    3714:	09 f4       	brne	.+2      	; 0x3718 <command_proc+0xa6>
    3716:	01 c1       	rjmp	.+514    	; 0x391a <command_proc+0x2a8>
    3718:	c9 31       	cpi	r28, 0x19	; 25
    371a:	09 f0       	breq	.+2      	; 0x371e <command_proc+0xac>
    371c:	43 c1       	rjmp	.+646    	; 0x39a4 <command_proc+0x332>
            } else {
                print("\nDEBUG: mouse disabled.\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\n----- Version -----\n");
    371e:	8f e9       	ldi	r24, 0x9F	; 159
    3720:	97 e0       	ldi	r25, 0x07	; 7
    3722:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    3726:	87 e7       	ldi	r24, 0x77	; 119
    3728:	97 e0       	ldi	r25, 0x07	; 7
    372a:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    372e:	81 e4       	ldi	r24, 0x41	; 65
    3730:	97 e0       	ldi	r25, 0x07	; 7
    3732:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    3736:	84 e1       	ldi	r24, 0x14	; 20
    3738:	97 e0       	ldi	r25, 0x07	; 7
    373a:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
            /* build options */
            print("OPTIONS:"
    373e:	8b ee       	ldi	r24, 0xEB	; 235
    3740:	96 e0       	ldi	r25, 0x06	; 6
    3742:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__) 
    3746:	80 ec       	ldi	r24, 0xC0	; 192
    3748:	96 e0       	ldi	r25, 0x06	; 6
    374a:	22 c1       	rjmp	.+580    	; 0x3990 <command_proc+0x31e>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    374c:	c5 33       	cpi	r28, 0x35	; 53
    374e:	09 f4       	brne	.+2      	; 0x3752 <command_proc+0xe0>
    3750:	22 c1       	rjmp	.+580    	; 0x3996 <command_proc+0x324>
    3752:	68 f4       	brcc	.+26     	; 0x376e <command_proc+0xfc>
    3754:	c7 32       	cpi	r28, 0x27	; 39
    3756:	09 f4       	brne	.+2      	; 0x375a <command_proc+0xe8>
    3758:	1e c1       	rjmp	.+572    	; 0x3996 <command_proc+0x324>
    375a:	28 f4       	brcc	.+10     	; 0x3766 <command_proc+0xf4>
    375c:	ce 31       	cpi	r28, 0x1E	; 30
    375e:	08 f4       	brcc	.+2      	; 0x3762 <command_proc+0xf0>
    3760:	21 c1       	rjmp	.+578    	; 0x39a4 <command_proc+0x332>
        case KC_GRV:
        case KC_0:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    3762:	83 ee       	ldi	r24, 0xE3	; 227
    3764:	1b c1       	rjmp	.+566    	; 0x399c <command_proc+0x32a>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    3766:	c9 32       	cpi	r28, 0x29	; 41
    3768:	09 f4       	brne	.+2      	; 0x376c <command_proc+0xfa>
    376a:	15 c1       	rjmp	.+554    	; 0x3996 <command_proc+0x324>
    376c:	1b c1       	rjmp	.+566    	; 0x39a4 <command_proc+0x332>
    376e:	c6 34       	cpi	r28, 0x46	; 70
    3770:	40 f4       	brcc	.+16     	; 0x3782 <command_proc+0x110>
    3772:	ca 33       	cpi	r28, 0x3A	; 58
    3774:	08 f0       	brcs	.+2      	; 0x3778 <command_proc+0x106>
    3776:	11 c1       	rjmp	.+546    	; 0x399a <command_proc+0x328>
    3778:	c8 33       	cpi	r28, 0x38	; 56
    377a:	a1 f1       	breq	.+104    	; 0x37e4 <command_proc+0x172>
    377c:	c9 33       	cpi	r28, 0x39	; 57
    377e:	c1 f0       	breq	.+48     	; 0x37b0 <command_proc+0x13e>
    3780:	11 c1       	rjmp	.+546    	; 0x39a4 <command_proc+0x332>
    3782:	c8 34       	cpi	r28, 0x48	; 72
    3784:	09 f0       	breq	.+2      	; 0x3788 <command_proc+0x116>
    3786:	0e c1       	rjmp	.+540    	; 0x39a4 <command_proc+0x332>
            print("\nEnter Console Mode\n");
            print("C> ");
            state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    3788:	0e 94 92 13 	call	0x2724	; 0x2724 <clear_keyboard>
            print("\n\nJump to bootloader... ");
    378c:	86 e8       	ldi	r24, 0x86	; 134
    378e:	98 e0       	ldi	r25, 0x08	; 8
    3790:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    3794:	2f ef       	ldi	r18, 0xFF	; 255
    3796:	83 ed       	ldi	r24, 0xD3	; 211
    3798:	90 e3       	ldi	r25, 0x30	; 48
    379a:	21 50       	subi	r18, 0x01	; 1
    379c:	80 40       	sbci	r24, 0x00	; 0
    379e:	90 40       	sbci	r25, 0x00	; 0
    37a0:	e1 f7       	brne	.-8      	; 0x379a <command_proc+0x128>
    37a2:	00 c0       	rjmp	.+0      	; 0x37a4 <command_proc+0x132>
    37a4:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    37a6:	0e 94 41 1a 	call	0x3482	; 0x3482 <bootloader_jump>
            print("not supported.\n");
    37aa:	86 e7       	ldi	r24, 0x76	; 118
    37ac:	98 e0       	ldi	r25, 0x08	; 8
    37ae:	f0 c0       	rjmp	.+480    	; 0x3990 <command_proc+0x31e>
            print("eeconfig:\n");
            print_eeconfig();
            break;
#endif
        case KC_CAPSLOCK:
            if (host_get_driver()) {
    37b0:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <host_get_driver>
    37b4:	89 2b       	or	r24, r25
    37b6:	69 f0       	breq	.+26     	; 0x37d2 <command_proc+0x160>
                host_driver = host_get_driver();
    37b8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <host_get_driver>
    37bc:	90 93 b3 01 	sts	0x01B3, r25
    37c0:	80 93 b2 01 	sts	0x01B2, r24
                host_set_driver(0);
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <host_set_driver>
                print("Locked.\n");
    37cc:	83 ec       	ldi	r24, 0xC3	; 195
    37ce:	98 e0       	ldi	r25, 0x08	; 8
    37d0:	df c0       	rjmp	.+446    	; 0x3990 <command_proc+0x31e>
            } else {
                host_set_driver(host_driver);
    37d2:	80 91 b2 01 	lds	r24, 0x01B2
    37d6:	90 91 b3 01 	lds	r25, 0x01B3
    37da:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <host_set_driver>
                print("Unlocked.\n");
    37de:	88 eb       	ldi	r24, 0xB8	; 184
    37e0:	98 e0       	ldi	r25, 0x08	; 8
    37e2:	d6 c0       	rjmp	.+428    	; 0x3990 <command_proc+0x31e>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\n----- Command Help -----\n");
    37e4:	8f e3       	ldi	r24, 0x3F	; 63
    37e6:	96 e0       	ldi	r25, 0x06	; 6
    37e8:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("c:	enter console mode\n");
    37ec:	88 e2       	ldi	r24, 0x28	; 40
    37ee:	96 e0       	ldi	r25, 0x06	; 6
    37f0:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("d:	toggle debug enable\n");
    37f4:	80 e1       	ldi	r24, 0x10	; 16
    37f6:	96 e0       	ldi	r25, 0x06	; 6
    37f8:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("x:	toggle matrix debug\n");
    37fc:	88 ef       	ldi	r24, 0xF8	; 248
    37fe:	95 e0       	ldi	r25, 0x05	; 5
    3800:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("k:	toggle keyboard debug\n");
    3804:	8e ed       	ldi	r24, 0xDE	; 222
    3806:	95 e0       	ldi	r25, 0x05	; 5
    3808:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("m:	toggle mouse debug\n");
    380c:	87 ec       	ldi	r24, 0xC7	; 199
    380e:	95 e0       	ldi	r25, 0x05	; 5
    3810:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
#ifdef SLEEP_LED_ENABLE
    print("z:	toggle sleep LED test\n");
#endif
    print("v:	print device version & info\n");
    3814:	87 ea       	ldi	r24, 0xA7	; 167
    3816:	95 e0       	ldi	r25, 0x05	; 5
    3818:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("t:	print timer count\n");
    381c:	81 e9       	ldi	r24, 0x91	; 145
    381e:	95 e0       	ldi	r25, 0x05	; 5
    3820:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("s:	print status\n");
    3824:	80 e8       	ldi	r24, 0x80	; 128
    3826:	95 e0       	ldi	r25, 0x05	; 5
    3828:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("e:	print eeprom config\n");
    382c:	88 e6       	ldi	r24, 0x68	; 104
    382e:	95 e0       	ldi	r25, 0x05	; 5
    3830:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
#ifdef NKRO_ENABLE
    print("n:	toggle NKRO\n");
    3834:	88 e5       	ldi	r24, 0x58	; 88
    3836:	95 e0       	ldi	r25, 0x05	; 5
    3838:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
#endif
    print("0/F10:	switch to Layer0 \n");
    383c:	8e e3       	ldi	r24, 0x3E	; 62
    383e:	95 e0       	ldi	r25, 0x05	; 5
    3840:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("1/F1:	switch to Layer1 \n");
    3844:	85 e2       	ldi	r24, 0x25	; 37
    3846:	95 e0       	ldi	r25, 0x05	; 5
    3848:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("2/F2:	switch to Layer2 \n");
    384c:	8c e0       	ldi	r24, 0x0C	; 12
    384e:	95 e0       	ldi	r25, 0x05	; 5
    3850:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("3/F3:	switch to Layer3 \n");
    3854:	83 ef       	ldi	r24, 0xF3	; 243
    3856:	94 e0       	ldi	r25, 0x04	; 4
    3858:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("4/F4:	switch to Layer4 \n");
    385c:	8a ed       	ldi	r24, 0xDA	; 218
    385e:	94 e0       	ldi	r25, 0x04	; 4
    3860:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("PScr:	power down/remote wake-up\n");
    3864:	89 eb       	ldi	r24, 0xB9	; 185
    3866:	94 e0       	ldi	r25, 0x04	; 4
    3868:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("Caps:	Lock Keyboard(Child Proof)\n");
    386c:	87 e9       	ldi	r24, 0x97	; 151
    386e:	94 e0       	ldi	r25, 0x04	; 4
    3870:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("Paus:	jump to bootloader\n");
    3874:	8d e7       	ldi	r24, 0x7D	; 125
    3876:	94 e0       	ldi	r25, 0x04	; 4
    3878:	8b c0       	rjmp	.+278    	; 0x3990 <command_proc+0x31e>
            _delay_ms(1000);
            bootloader_jump(); // not return
            print("not supported.\n");
            break;
        case KC_D:
            if (debug_enable) {
    387a:	80 91 b5 01 	lds	r24, 0x01B5
    387e:	80 ff       	sbrs	r24, 0
    3880:	09 c0       	rjmp	.+18     	; 0x3894 <command_proc+0x222>
                print("\nDEBUG: disabled.\n");
    3882:	83 e6       	ldi	r24, 0x63	; 99
    3884:	98 e0       	ldi	r25, 0x08	; 8
    3886:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
                debug_matrix   = false;
    388a:	80 91 b5 01 	lds	r24, 0x01B5
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    388e:	81 7f       	andi	r24, 0xF1	; 241
    3890:	8e 7f       	andi	r24, 0xFE	; 254
    3892:	3d c0       	rjmp	.+122    	; 0x390e <command_proc+0x29c>
            } else {
                print("\nDEBUG: enabled.\n");
    3894:	81 e5       	ldi	r24, 0x51	; 81
    3896:	98 e0       	ldi	r25, 0x08	; 8
    3898:	35 c0       	rjmp	.+106    	; 0x3904 <command_proc+0x292>
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    389a:	90 91 b5 01 	lds	r25, 0x01B5
    389e:	91 fb       	bst	r25, 1
    38a0:	88 27       	eor	r24, r24
    38a2:	80 f9       	bld	r24, 0
    38a4:	21 e0       	ldi	r18, 0x01	; 1
    38a6:	82 27       	eor	r24, r18
    38a8:	80 fb       	bst	r24, 0
    38aa:	91 f9       	bld	r25, 1
    38ac:	90 93 b5 01 	sts	0x01B5, r25
            if (debug_matrix) {
    38b0:	88 23       	and	r24, r24
    38b2:	19 f0       	breq	.+6      	; 0x38ba <command_proc+0x248>
                print("\nDEBUG: matrix enabled.\n");
    38b4:	88 e3       	ldi	r24, 0x38	; 56
    38b6:	98 e0       	ldi	r25, 0x08	; 8
    38b8:	25 c0       	rjmp	.+74     	; 0x3904 <command_proc+0x292>
                debug_enable = true;
            } else {
                print("\nDEBUG: matrix disabled.\n");
    38ba:	8e e1       	ldi	r24, 0x1E	; 30
    38bc:	98 e0       	ldi	r25, 0x08	; 8
    38be:	68 c0       	rjmp	.+208    	; 0x3990 <command_proc+0x31e>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    38c0:	90 91 b5 01 	lds	r25, 0x01B5
    38c4:	92 fb       	bst	r25, 2
    38c6:	88 27       	eor	r24, r24
    38c8:	80 f9       	bld	r24, 0
    38ca:	21 e0       	ldi	r18, 0x01	; 1
    38cc:	82 27       	eor	r24, r18
    38ce:	80 fb       	bst	r24, 0
    38d0:	92 f9       	bld	r25, 2
    38d2:	90 93 b5 01 	sts	0x01B5, r25
            if (debug_keyboard) {
    38d6:	88 23       	and	r24, r24
    38d8:	19 f0       	breq	.+6      	; 0x38e0 <command_proc+0x26e>
                print("\nDEBUG: keyboard enabled.\n");
    38da:	83 e0       	ldi	r24, 0x03	; 3
    38dc:	98 e0       	ldi	r25, 0x08	; 8
    38de:	12 c0       	rjmp	.+36     	; 0x3904 <command_proc+0x292>
                debug_enable = true;
            } else {
                print("\nDEBUG: keyboard disabled.\n");
    38e0:	87 ee       	ldi	r24, 0xE7	; 231
    38e2:	97 e0       	ldi	r25, 0x07	; 7
    38e4:	55 c0       	rjmp	.+170    	; 0x3990 <command_proc+0x31e>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    38e6:	90 91 b5 01 	lds	r25, 0x01B5
    38ea:	93 fb       	bst	r25, 3
    38ec:	88 27       	eor	r24, r24
    38ee:	80 f9       	bld	r24, 0
    38f0:	21 e0       	ldi	r18, 0x01	; 1
    38f2:	82 27       	eor	r24, r18
    38f4:	80 fb       	bst	r24, 0
    38f6:	93 f9       	bld	r25, 3
    38f8:	90 93 b5 01 	sts	0x01B5, r25
            if (debug_mouse) {
    38fc:	88 23       	and	r24, r24
    38fe:	51 f0       	breq	.+20     	; 0x3914 <command_proc+0x2a2>
                print("\nDEBUG: mouse enabled.\n");
    3900:	8f ec       	ldi	r24, 0xCF	; 207
    3902:	97 e0       	ldi	r25, 0x07	; 7
    3904:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
                debug_enable = true;
    3908:	80 91 b5 01 	lds	r24, 0x01B5
    390c:	81 60       	ori	r24, 0x01	; 1
    390e:	80 93 b5 01 	sts	0x01B5, r24
    3912:	4e c0       	rjmp	.+156    	; 0x39b0 <command_proc+0x33e>
            } else {
                print("\nDEBUG: mouse disabled.\n");
    3914:	86 eb       	ldi	r24, 0xB6	; 182
    3916:	97 e0       	ldi	r25, 0x07	; 7
    3918:	3b c0       	rjmp	.+118    	; 0x3990 <command_proc+0x31e>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__) 
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_T: // print timer
            print_val_hex32(timer_count);
    391a:	80 91 ac 01 	lds	r24, 0x01AC
    391e:	90 91 ad 01 	lds	r25, 0x01AD
    3922:	a0 91 ae 01 	lds	r26, 0x01AE
    3926:	b0 91 af 01 	lds	r27, 0x01AF
    392a:	bf 93       	push	r27
    392c:	af 93       	push	r26
    392e:	9f 93       	push	r25
    3930:	8f 93       	push	r24
    3932:	8c ea       	ldi	r24, 0xAC	; 172
    3934:	96 e0       	ldi	r25, 0x06	; 6
    3936:	9f 93       	push	r25
    3938:	8f 93       	push	r24
    393a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__xprintf>
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	32 c0       	rjmp	.+100    	; 0x39b0 <command_proc+0x33e>
            break;
        case KC_S:
            print("\n\n----- Status -----\n");
    394c:	86 e9       	ldi	r24, 0x96	; 150
    394e:	96 e0       	ldi	r25, 0x06	; 6
    3950:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
            print_val_hex8(host_keyboard_leds());
    3954:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <host_keyboard_leds>
    3958:	1f 92       	push	r1
    395a:	8f 93       	push	r24
    395c:	8c e7       	ldi	r24, 0x7C	; 124
    395e:	96 e0       	ldi	r25, 0x06	; 6
    3960:	9f 93       	push	r25
    3962:	8f 93       	push	r24
    3964:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__xprintf>
    3968:	0f 90       	pop	r0
    396a:	0f 90       	pop	r0
    396c:	0f 90       	pop	r0
    396e:	0f 90       	pop	r0
    3970:	1f c0       	rjmp	.+62     	; 0x39b0 <command_proc+0x33e>
#   endif
#endif
            break;
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    3972:	0e 94 92 13 	call	0x2724	; 0x2724 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    3976:	80 91 49 01 	lds	r24, 0x0149
    397a:	91 e0       	ldi	r25, 0x01	; 1
    397c:	89 27       	eor	r24, r25
    397e:	80 93 49 01 	sts	0x0149, r24
            if (keyboard_nkro)
    3982:	88 23       	and	r24, r24
    3984:	19 f0       	breq	.+6      	; 0x398c <command_proc+0x31a>
                print("NKRO: enabled\n");
    3986:	8d e6       	ldi	r24, 0x6D	; 109
    3988:	96 e0       	ldi	r25, 0x06	; 6
    398a:	02 c0       	rjmp	.+4      	; 0x3990 <command_proc+0x31e>
            else
                print("NKRO: disabled\n");
    398c:	8d e5       	ldi	r24, 0x5D	; 93
    398e:	96 e0       	ldi	r25, 0x06	; 6
    3990:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    3994:	0d c0       	rjmp	.+26     	; 0x39b0 <command_proc+0x33e>
            break;
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
            switch_default_layer(0);
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	02 c0       	rjmp	.+4      	; 0x399e <command_proc+0x32c>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F12:
            switch_default_layer((code - KC_F1) + 1);
    399a:	87 ec       	ldi	r24, 0xC7	; 199
    399c:	8c 0f       	add	r24, r28
    399e:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <switch_default_layer>
    39a2:	06 c0       	rjmp	.+12     	; 0x39b0 <command_proc+0x33e>
            break;
        default:
            print("?");
    39a4:	8b e5       	ldi	r24, 0x5B	; 91
    39a6:	96 e0       	ldi	r25, 0x06	; 6
    39a8:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
{
    switch (state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
            return (command_extra(code) || command_common(code));
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	01 c0       	rjmp	.+2      	; 0x39b2 <command_proc+0x340>
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	81 70       	andi	r24, 0x01	; 1
    39b4:	25 c0       	rjmp	.+74     	; 0x3a00 <command_proc+0x38e>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    39b6:	c4 31       	cpi	r28, 0x14	; 20
    39b8:	99 f0       	breq	.+38     	; 0x39e0 <command_proc+0x36e>
    39ba:	18 f4       	brcc	.+6      	; 0x39c2 <command_proc+0x350>
    39bc:	cb 30       	cpi	r28, 0x0B	; 11
    39be:	29 f0       	breq	.+10     	; 0x39ca <command_proc+0x358>
    39c0:	16 c0       	rjmp	.+44     	; 0x39ee <command_proc+0x37c>
    39c2:	c9 32       	cpi	r28, 0x29	; 41
    39c4:	69 f0       	breq	.+26     	; 0x39e0 <command_proc+0x36e>
    39c6:	c8 33       	cpi	r28, 0x38	; 56
    39c8:	91 f4       	brne	.+36     	; 0x39ee <command_proc+0x37c>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\n----- Console Help -----\n");
    39ca:	81 e6       	ldi	r24, 0x61	; 97
    39cc:	94 e0       	ldi	r25, 0x04	; 4
    39ce:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
    print("ESC/q:	quit\n");
    39d2:	84 e5       	ldi	r24, 0x54	; 84
    39d4:	94 e0       	ldi	r25, 0x04	; 4
    39d6:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    39da:	8c e2       	ldi	r24, 0x2C	; 44
    39dc:	94 e0       	ldi	r25, 0x04	; 4
    39de:	09 c0       	rjmp	.+18     	; 0x39f2 <command_proc+0x380>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            print("\nQuit Console Mode\n");
    39e0:	88 e1       	ldi	r24, 0x18	; 24
    39e2:	94 e0       	ldi	r25, 0x04	; 4
    39e4:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
            state = ONESHOT;
    39e8:	10 92 b4 01 	sts	0x01B4, r1
    39ec:	04 c0       	rjmp	.+8      	; 0x39f6 <command_proc+0x384>
            print("M0>");
            state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    39ee:	86 e1       	ldi	r24, 0x16	; 22
    39f0:	94 e0       	ldi	r25, 0x04	; 4
    39f2:	0e 94 b8 04 	call	0x970	; 0x970 <xputs>
#endif
        default:
            state = ONESHOT;
            return false;
    }
    return true;
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	03 c0       	rjmp	.+6      	; 0x3a00 <command_proc+0x38e>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            state = ONESHOT;
    39fa:	10 92 b4 01 	sts	0x01B4, r1
bool command_proc(uint8_t code)
{
    switch (state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    39fe:	80 e0       	ldi	r24, 0x00	; 0
        default:
            state = ONESHOT;
            return false;
    }
    return true;
}
    3a00:	cf 91       	pop	r28
    3a02:	08 95       	ret

00003a04 <__tablejump2__>:
    3a04:	ee 0f       	add	r30, r30
    3a06:	ff 1f       	adc	r31, r31

00003a08 <__tablejump__>:
    3a08:	05 90       	lpm	r0, Z+
    3a0a:	f4 91       	lpm	r31, Z
    3a0c:	e0 2d       	mov	r30, r0
    3a0e:	09 94       	ijmp

00003a10 <_exit>:
    3a10:	f8 94       	cli

00003a12 <__stop_program>:
    3a12:	ff cf       	rjmp	.-2      	; 0x3a12 <__stop_program>
